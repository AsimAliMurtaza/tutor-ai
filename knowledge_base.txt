3131 todays internet is arguably the largest engineered system ever created by mankind, with hundreds of millions of connected computers, communication links, and switches; with billions of users who connect via laptops, tablets, and smartphones; and with an array of new internetconnected things including game consoles, surveillance systems, watches, eye glasses, thermostats, and cars. given that the internet is so large and has so many diverse components and uses, is there any hope of understanding how it works? are there guiding principles and structure that can provide a foundation for understanding such an amazingly large and complex system? and if so, is it possible that it actually could be both interesting and fun to learn about computer networks? fortunately, the answer to all of these questions is a resounding yes! indeed, its our aim in this book to provide you with a modern introduction to the dynamic field of computer networking, giving you the principles and practical insights youll need to understand not only todays networks, but tomorrows as well. this first chapter presents a broad overview of computer networking and the internet. our goal here is to paint a broad picture and set the context for the rest of this book, to see the forest through the trees. well cover a lot of ground in this introductory chapter and discuss a lot of the pieces of a computer network, without losing sight of the big picture. well structure our overview of computer networks in this chapter as follows. after introducing some basic terminology and concepts, well first examine the basic hardware and software components that make up a network. well begin at the networks edge and look at the end systems and network applications running in the network. well then explore the core of a computer network, examining the links 1chapter computer networks and the internet 31 m01_kuro5469_08_ge_c01.indd 31 08052021 1349 32 chapter 1 computer networks and the internet and the switches that transport data, as well as the access networks and physical media that connect end systems to the network core. well learn that the internet is a network of networks, and well learn how these networks connect with each other. after having completed this overview of the edge and core of a computer net work, well take the broader and more abstract view in the second half of this chapter. well examine delay, loss, and throughput of data in a computer network and provide simple quantitative models for endtoend throughput and delay models that take into account transmission, propagation, and queuing delays. well then introduce some of the key architectural principles in computer networking, namely, protocol layering and service models. well also learn that computer networks are vulnerable to many different types of attacks; well survey some of these attacks and consider how computer networks can be made more secure. finally, well close this chapter with a brief history of computer networking. 1.1 what is the internet? in this book, well use the public internet, a specific
computer network, as our principal vehicle for discussing computer networks and their protocols. but what is the internet? there are a couple of ways to answer this question. first, we can describe the nuts and bolts of the internet, that is, the basic hardware and software components that make up the internet. second, we can describe the internet in terms of a networking infrastructure that provides services to distributed applications. lets begin with the nutsandbolts description, using figure 1.1 to illustrate our discussion. 1.1.1 a nutsandbolts description the internet is a computer network that interconnects billions of computing devices throughout the world. not too long ago, these computing devices were primarily traditional desktop computers, linux workstations, and socalled servers that store and transmit information such as web pages and email messages. increasingly, however, users connect to the internet with smartphones and tabletstoday, close to half of the worlds population are active mobile internet users with the percentage expected to increase to 75 by 2025 statista 2019. furthermore, nontraditional internet things such as tvs, gaming consoles, thermostats, home security systems, home appliances, watches, eye glasses, cars, traffic control systems, and more are being connected to the internet. indeed, the term computer network is beginning to sound a bit dated, given the many nontraditional devices that are being hooked up to the internet. in internet jargon, all of these devices are called hosts or end systems. by some estimates, there were about 18 billion devices connected to the internet in 2017, and the number will reach 28.5 billion by 2022 cisco vni 2020. m01_kuro5469_08_ge_c01.indd 32 08052021 1349 1.1 what is the internet? 33 figure 1.1 some pieces of the internetkey trafÔ¨Åc light thermostat fridge datacenter workstationhost end systemmobile computerbase stationrouter cell phone towersmartphone or tabletlinklayer switchservercontent provider networknational or global isp datacenter networ k datacenter networ kmobile network enterprise networkhome networklocal or regional isp m01_kuro5469_08_ge_c01.indd 33 08052021 1349 34 chapter 1 computer networks and the internet end systems are connected together by a network of communication links and packet switches. well see in section 1.2 that there are many types of communica tion links, which are made up of different types of physical media, including coaxial cable, copper wire, optical fiber, and radio spectrum. different links can transmit data at different rates, with the transmission rate of a link measured in bitssecond. when one end system has data to send to another end system, the sending end system segments the data and adds header bytes to each segment. the resulting packages of information, known as packets in the jargon of computer networks, are then sent through the network to the destination end system, where they are reassembled into the original data. a packet switch takes a packet arriving on one of its incoming communication links and forwards that packet on one of its outgoing communication links. packet switches come in many shapes and flavors, but the two most prominent types in todays internet are routers and linklayer switches. both types of switches
forward packets toward their ultimate destinations. linklayer switches are typically used in access networks, while routers are typically used in the network core. the sequence of communication links and packet switches traversed by a packet from the sending end system to the receiving end system is known as a route or path through the network. cisco predicts annual global ip traffic will reach nearly five zettabytes 1021 bytes by 2022 cisco vni 2020. packetswitched networks which transport packets are in many ways similar to transportation networks of highways, roads, and intersections which transport vehicles. consider, for example, a factory that needs to move a large amount of cargo to some destination warehouse located thousands of kilometers away. at the factory, the cargo is segmented and loaded into a fleet of trucks. each of the trucks then independently travels through the network of highways, roads, and intersections to the destination warehouse. at the destination warehouse, the cargo is unloaded and grouped with the rest of the cargo arriving from the same shipment. thus, in many ways, packets are analogous to trucks, communication links are analogous to highways and roads, packet switches are analogous to intersections, and end systems are analogous to buildings. just as a truck takes a path through the transportation network, a packet takes a path through a computer network. end systems access the internet through internet service providers isps, including residential isps such as local cable or telephone companies; corporate isps; university isps; isps that provide wifi access in airports, hotels, coffee shops, and other public places; and cellular data isps, providing mobile access to our smartphones and other devices. each isp is in itself a network of packet switches and communication links. isps provide a variety of types of network access to the end systems, including residential broadband access such as cable modem or dsl, highspeed local area network access, and mobile wireless access. isps also provide internet access to content providers, connecting servers directly to the internet. the internet is all about connecting end systems to each other, so the m01_kuro5469_08_ge_c01.indd 34 08052021 1350 1.1 what is the internet? 35 isps that provide access to end systems must also be interconnected. these lower tier isps are thus interconnected through national and international uppertier isps and these uppertier isps are connected directly to each other. an uppertier isp consists of highspeed routers interconnected with highspeed fiberoptic links. each isp network, whether uppertier or lowertier, is managed independently, runs the ip protocol see below, and conforms to certain naming and address conventions. well examine isps and their interconnection more closely in section 1.3. end systems, packet switches, and other pieces of the internet run protocols that control the sending and receiving of information within the internet. the transmission control protocol tcp and the internet protocol ip are two of the most important protocols in the internet. the ip protocol specifies the format of the packets that are sent and received among routers and end systems. the internets principal
protocols are collectively known as tcpip. well begin looking into protocols in this introductory chapter. but thats just a startmuch of this book is concerned with networking protocols! given the importance of protocols to the internet, its important that everyone agree on what each and every protocol does, so that people can create systems and products that interoperate. this is where standards come into play. internet standards are developed by the internet engineering task force ietf ietf 2020. the ietf standards documents are called requests for comments rfcs. rfcs started out as general requests for comments hence the name to resolve network and protocol design problems that faced the precursor to the internet allman 2011. rfcs tend to be quite technical and detailed. they define protocols such as tcp, ip, http for the web, and smtp for email. there are currently nearly 9000 rfcs. other bodies also specify standards for network components, most notably for network links. the ieee 802 lan standards committee ieee 802 2020, for example, specifies the ethernet and wireless wifi standards. 1.1.2 a services description our discussion above has identified many of the pieces that make up the internet. but we can also describe the internet from an entirely different anglenamely, as an infrastructure that provides services to applications. in addition to traditional applications such as email and web surfing, internet applications include mobile smartphone and tablet applications, including internet messaging, mapping with realtime roadtraffic information, music streaming movie and television streaming, online social media, video conferencing, multiperson games, and locationbased recommendation systems. the applications are said to be distributed applications, since they involve multiple end systems that exchange data with each other. importantly, internet applications run on end systemsthey do not run in the packet switches in the network core. although packet switches facilitate the exchange of data among end systems, they are not concerned with the application that is the source or sink of data. m01_kuro5469_08_ge_c01.indd 35 08052021 1350 36 chapter 1 computer networks and the internet lets explore a little more what we mean by an infrastructure that provides services to applications. to this end, suppose you have an exciting new idea for a dis tributed internet application, one that may greatly benefit humanity or one that may simply make you rich and famous. how might you go about transforming this idea into an actual internet application? because applications run on end systems, you are going to need to write programs that run on the end systems. you might, for example, write your programs in java, c, or python. now, because you are developing a distributed internet application, the programs running on the different end systems will need to send data to each other. and here we get to a central issueone that leads to the alternative way of describing the internet as a platform for applications. how does one program running on one end system instruct the internet to deliver data to another program running on another end system? end systems attached
to the internet provide a socket interface that speci fies how a program running on one end system asks the internet infrastructure to deliver data to a specific destination program running on another end system. this internet socket interface is a set of rules that the sending program must follow so that the internet can deliver the data to the destination program. well discuss the internet socket interface in detail in chapter 2. for now, lets draw upon a simple analogy, one that we will frequently use in this book. suppose alice wants to send a letter to bob using the postal service. alice, of course, cant just write the letter the data and drop the letter out her window. instead, the postal service requires that alice put the letter in an envelope; write bobs full name, address, and zip code in the center of the envelope; seal the envelope; put a stamp in the upperrighthand corner of the envelope; and finally, drop the envelope into an official postal service mailbox. thus, the postal service has its own postal service interface, or set of rules, that alice must follow to have the postal service deliver her letter to bob. in a similar manner, the internet has a socket interface that the program sending data must follow to have the internet deliver the data to the program that will receive the data. the postal service, of course, provides more than one service to its custom ers. it provides express delivery, reception confirmation, ordinary use, and many more services. in a similar manner, the internet provides multiple services to its applications. when you develop an internet application, you too must choose one of the internets services for your application. well describe the internets services in chapter 2. we have just given two descriptions of the internet; one in terms of its hardware and software components, the other in terms of an infrastructure for providing services to distributed applications. but perhaps you are still confused as to what the internet is. what are packet switching and tcpip? what are routers? what kinds of communication links are present in the internet? what is a distributed application? how can a thermostat or body scale be attached to the internet? if you feel a bit overwhelmed by all of this now, dont worrythe purpose of this book is to introduce you to both the nuts and bolts of the internet and the principles that govern how and m01_kuro5469_08_ge_c01.indd 36 08052021 1350 1.1 what is the internet? 37 why it works. well explain these important terms and questions in the following sections and chapters. 1.1.3 what is a protocol? now that weve got a bit of a feel for what the internet is, lets consider another important buzzword in computer networking protocol. what is a protocol? what does a protocol do? a human analogy it is probably easiest to understand the notion of a computer network protocol by first considering some human analogies, since we humans execute
protocols all of the time. consider what you do when you want to ask someone for the time of day. a typical exchange is shown in figure 1.2. human protocol or good manners, at figure 1.2 a human protocol and a computer network protocolget httpwww.pearsonglobaleditions.comtcp connection request time timetcp connection reply Ô¨Ålehi got the time? time timehi 200 m01_kuro5469_08_ge_c01.indd 37 08052021 1350 38 chapter 1 computer networks and the internet least dictates that one first offer a greeting the first hi in figure 1.2 to initiate communication with someone else. the typical response to a hi is a returned hi message. implicitly, one then takes a cordial hi response as an indication that one can proceed and ask for the time of day. a different response to the initial hi such as dont bother me! or i dont speak english, or some unprintable reply might indicate an unwillingness or inability to communicate. in this case, the human protocol would be not to ask for the time of day. sometimes one gets no response at all to a question, in which case one typically gives up asking that person for the time. note that in our human protocol, there are specific messages we send, and specific actions we take in response to the received reply messages or other events such as no reply within some given amount of time. clearly, transmitted and received messages, and actions taken when these messages are sent or received or other events occur, play a central role in a human protocol. if people run different protocols for example, if one person has manners but the other does not, or if one understands the concept of time and the other does not the protocols do not interoperate and no useful work can be accomplished. the same is true in networkingit takes two or more communicating entities running the same protocol in order to accomplish a task. lets consider a second human analogy. suppose youre in a college class a computer networking class, for example!. the teacher is droning on about protocols and youre confused. the teacher stops to ask, are there any questions? a message that is transmitted to, and received by, all students who are not sleeping. you raise your hand transmitting an implicit message to the teacher. your teacher acknowledges you with a smile, saying yes . . . a transmitted message encouraging you to ask your questionteachers love to be asked questions, and you then ask your question that is, transmit your message to your teacher. your teacher hears your question receives your question message and answers transmits a reply to you. once again, we see that the transmission and receipt of messages, and a set of conventional actions taken when these messages are sent and received, are at the heart of this questionandanswer protocol. network protocols a network protocol is similar to a human protocol, except that the entities exchanging messages and taking actions are hardware or software components of some device for
example, computer, smartphone, tablet, router, or other networkcapable device. all activity in the internet that involves two or more communicating remote entities is governed by a protocol. for example, hardwareimplemented protocols in two physically connected computers control the flow of bits on the wire between the two network interface cards; congestioncontrol protocols in end systems control the rate at which packets are transmitted between sender and receiver; protocols in routers determine a packets path from source to destination. protocols are running m01_kuro5469_08_ge_c01.indd 38 08052021 1350 1.2 the network edge 39 everywhere in the internet, and consequently much of this book is about computer network protocols. as an example of a computer network protocol with which you are probably familiar, consider what happens when you make a request to a web server, that is, when you type the url of a web page into your web browser. the scenario is illustrated in the right half of figure 1.2. first, your computer will send a connection request message to the web server and wait for a reply. the web server will eventually receive your connection request message and return a connection reply message. knowing that it is now ok to request the web document, your computer then sends the name of the web page it wants to fetch from that web server in a get message. finally, the web server returns the web page file to your computer. given the human and networking examples above, the exchange of messages and the actions taken when these messages are sent and received are the key defining elements of a protocol a protocol defines the format and the order of messages exchanged between two or more communicating entities, as well as the actions taken on the transmission andor receipt of a message or other event. the internet, and computer networks in general, make extensive use of pro tocols. different protocols are used to accomplish different communication tasks. as you read through this book, you will learn that some protocols are simple and straightforward, while others are complex and intellectually deep. mastering the field of computer networking is equivalent to understanding the what, why, and how of networking protocols. 1.2 the network edge in the previous section, we presented a highlevel overview of the internet and networking protocols. we are now going to delve a bit more deeply into the com ponents of the internet. we begin in this section at the edge of the network and look at the components with which we are most familiarnamely, the computers, smartphones and other devices that we use on a daily basis. in the next section, well move from the network edge to the network core and examine switching and routing in computer networks. recall from the previous section that in computer networking jargon, the com puters and other devices connected to the internet are often referred to as end systems. they are referred to as end systems because they sit at the edge of the internet, as
shown in figure 1.3. the internets end systems include desktop computers m01_kuro5469_08_ge_c01.indd 39 08052021 1350 40 chapter 1 computer networks and the internet figure 1.3 endsystem interactioncontent provider networknational or global isp datacenter networ k datacenter networ kmobile network enterprise networkhome networklocal or regional isp e.g., desktop pcs, macs, and linux boxes, servers e.g., web and email servers, and mobile devices e.g., laptops, smartphones, and tablets. furthermore, an increasing number of nontraditional things are being attached to the internet as end systems see the case history feature. end systems are also referred to as hosts because they host that is, run appli cation programs such as a web browser program, a web server program, an email m01_kuro5469_08_ge_c01.indd 40 08052021 1350 1.2 the network edge 41 client program, or an email server program. throughout this book we will use the terms hosts and end systems interchangeably; that is, host end system. hosts are sometimes further divided into two categories clients and servers. informally, clients tend to be desktops, laptops, smartphones, and so on, whereas servers tend to be more powerful machines that store and distribute web pages, stream video, relay email, and so on. today, most of the servers from which we receive search results, email, web pages, videos and mobile app content reside in large data centers. for example, as of 2020, google has 19 data centers on four continents, collectively containing several million servers. figure 1.3 includes two such data centers, and the case history sidebar describes data centers in more detail.data centers and cloud computing internet companies such as google, microsoft, amazon, and alibaba have built massive data centers, each housing tens to hundreds of thousands of hosts. these data centers are not only connected to the internet, as shown in figure 1.1, but also internally include complex computer networks that interconnect the datacenters hosts. the data centers are the engines behind the internet applications that we use on a daily basis. broadly speaking, data centers serve three purposes, which we describe here in the context of amazon for concreteness. first, they serve amazon ecommerce pages to users, for example, pages describing products and purchase information. second, they serve as massively parallel computing infrastructures for amazonspecific data processing tasks. third, they provide cloud computing to other companies. indeed, today a major trend in computing is for companies to use a cloud provider such as amazon to handle essentially all of their it needs. for example, airbnb and many other internetbased companies do not own and manage their own data centers but instead run their entire webbased services in the amazon cloud, called amazon web services aws. the worker bees in a data center are the hosts. they serve content e.g., web pages and videos, store emails and documents, and collectively perform massively distributed computations. the hosts in data centers, called blades and resembling pizza boxes, are generally commodity hosts that include cpu, memory, and disk storage. the hosts are stacked in racks, with each rack typically having 20
to 40 blades. the racks are then interconnected using sophisticated and evolving data center network designs. data center networks are discussed in greater detail in chapter 6.case history m01_kuro5469_08_ge_c01.indd 41 08052021 1350 42 chapter 1 computer networks and the internet 1.2.1 access networks having considered the applications and end systems at the edge of the network, lets next consider the access networkthe network that physically connects an end system to the first router also known as the edge router on a path from the end system to any other distant end system. figure 1.4 shows several types of access figure 1.4 access networkscontent provider networknational or global isp datacenter networ k datacenter networ kmobile network enterprise networkhome networklocal or regional isp m01_kuro5469_08_ge_c01.indd 42 08052021 1350 1.2 the network edge 43 networks with thick, shaded lines and the settings home, enterprise, and widearea mobile wireless in which they are used. home access dsl, cable, ftth, and 5g fixed wireless as of 2020, more than 80 of the households in europe and the usa have internet access statista 2019. given this widespread use of home access networks lets begin our overview of access networks by considering how homes connect to the internet. today, the two most prevalent types of broadband residential access are digital subscriber line dsl and cable. a residence typically obtains dsl internet access from the same local telephone company telco that provides its wired local phone access. thus, when dsl is used, a customers telco is also its isp. as shown in figure 1.5, each customers dsl modem uses the existing telephone line exchange data with a digital subscriber line access multiplexer dslam located in the telcos local central office co. the homes dsl modem takes digital data and translates it to high frequency tones for transmis sion over telephone wires to the co; the analog signals from many such houses are translated back into digital format at the dslam. the residential telephone line carries both data and traditional telephone signals simultaneously, which are encoded at different frequencies a highspeed downstream channel, in the 50 khz to 1 mhz band a mediumspeed upstream channel, in the 4 khz to 50 khz band an ordinary twoway telephone channel, in the 0 to 4 khz band this approach makes the single dsl link appear as if there were three separate links, so that a telephone call and an internet connection can share the dsl link at figure 1.5 dsl internet accesshome pchome phone dsl modeminternet telephone networksplitterexisting phone line 04khz phone; 450khzupstream data; 50khz1mhz downstream data centralofÔ¨Åcedslam m01_kuro5469_08_ge_c01.indd 43 08052021 1350 44 chapter 1 computer networks and the internet the same time. well describe this technique of frequencydivision multiplexing in section 1.3.1. on the customer side, a splitter separates the data and telephone signals arriving to the home and forwards the data signal to the dsl modem. on the telco side, in the co, the dslam separates the data and phone signals and sends the data into the internet. hundreds or
even thousands of households connect to a single dslam. the dsl standards define multiple transmission rates, including downstream transmission rates of 24 mbs and 52 mbs, and upstream rates of 3.5 mbps and 16 mbps; the newest standard provides for aggregate upstream plus downstream rates of 1 gbps itu 2014. because the downstream and upstream rates are different, the access is said to be asymmetric. the actual downstream and upstream transmission rates achieved may be less than the rates noted above, as the dsl provider may purposefully limit a residential rate when tiered service different rates, available at different prices are offered. the maximum rate is also limited by the distance between the home and the co, the gauge of the twistedpair line and the degree of electrical interference. engineers have expressly designed dsl for short distances between the home and the co; generally, if the residence is not located within 5 to 10 miles of the co, the residence must resort to an alternative form of internet access. while dsl makes use of the telcos existing local telephone infrastructure, cable internet access makes use of the cable television companys existing cable television infrastructure. a residence obtains cable internet access from the same company that provides its cable television. as illustrated in figure 1.6, fiber optics figure 1.6 a hybrid fibercoaxial access networkfibercablecoaxial cable hundredsof homes cable head endhundredsof homesfiber node fiber nodeinternet cmts m01_kuro5469_08_ge_c01.indd 44 08052021 1350 1.2 the network edge 45 connect the cable head end to neighborhoodlevel junctions, from which tradi tional coaxial cable is then used to reach individual houses and apartments. each neighborhood junction typically supports 500 to 5,000 homes. because both fiber and coaxial cable are employed in this system, it is often referred to as hybrid fiber coax hfc. cable internet access requires special modems, called cable modems. as with a dsl modem, the cable modem is typically an external device and connects to the home pc through an ethernet port. we will discuss ethernet in great detail in chapter 6. at the cable head end, the cable modem termination system cmts serves a similar function as the dsl networks dslamturning the analog signal sent from the cable modems in many downstream homes back into digital format. cable modems divide the hfc network into two channels, a downstream and an upstream channel. as with dsl, access is typically asymmetric, with the downstream channel typically allocated a higher transmission rate than the upstream channel. the docsis 2.0 and 3.0 standards define downstream bitrates of 40 mbps and 1.2 gbps, and upstream rates of 30 mbps and 100 mbps, respectively. as in the case of dsl networks, the maximum achievable rate may not be realized due to lower contracted data rates or media impairments. one important characteristic of cable internet access is that it is a shared broad cast medium. in particular, every packet sent by the head end travels downstream on every link to every home and every packet sent by a home travels
on the upstream channel to the head end. for this reason, if several users are simultaneously downloading a video file on the downstream channel, the actual rate at which each user receives its video file will be significantly lower than the aggregate cable downstream rate. on the other hand, if there are only a few active users and they are all web surfing, then each of the users may actually receive web pages at the full cable downstream rate, because the users will rarely request a web page at exactly the same time. because the upstream channel is also shared, a distributed multiple access protocol is needed to coordinate transmissions and avoid collisions. well discuss this collision issue in some detail in chapter 6. although dsl and cable networks currently represent the majority of residential broadband access in the united states, an upandcoming technology that provides even higher speeds is fiber to the home ftth fiber broadband 2020. as the name suggests, the ftth concept is simpleprovide an optical fiber path from the co directly to the home. ftth can potentially provide internet access rates in the gigabits per second range. there are several competing technologies for optical distribution from the co to the homes. the simplest optical distribution network is called direct fiber, with one fiber leaving the co for each home. more commonly, each fiber leaving the central office is actually shared by many homes; it is not until the fiber gets relatively close to the homes that it is split into individual customerspecific fibers. there are two competing opticaldistribution network architectures that perform m01_kuro5469_08_ge_c01.indd 45 08052021 1350 46 chapter 1 computer networks and the internet this splitting active optical networks aons and passive optical networks pons. aon is essentially switched ethernet, which is discussed in chapter 6. here, we briefly discuss pon, which is used in verizons fios service. figure 1.7 shows ftth using the pon distribution architecture. each home has an optical network terminator ont, which is connected by dedicated optical fiber to a neighborhood splitter. the splitter combines a number of homes typically less than 100 onto a single, shared optical fiber, which connects to an optical line terminator olt in the telcos co. the olt, providing conversion between optical and electrical signals, connects to the internet via a telco router. at home, users connect a home router typically a wireless router to the ont and access the internet via this home router. in the pon architecture, all packets sent from olt to the splitter are replicated at the splitter similar to a cable head end. in addition to dsl, cable, and ftth, 5g fixed wireless is beginning to be deployed. 5g fixed wireless not only promises highspeed residential access, but will do so without installing costly and failureprone cabling from the telcos co to the home. with 5g fixed wireless, using beamforming technology, data is sent wirelessly from a providers base station to the a modem in the home. a wifi wireless router is
connected to the modem possibly bundled together, similar to how a wifi wireless router is connected to a cable or dsl modem. 5g cellular networks are covered in chapter 7. access in the enterprise and the home ethernet and wifi on corporate and university campuses, and increasingly in home settings, a local area network lan is used to connect an end system to the edge router. although there are many types of lan technologies, ethernet is by far the most prevalent access technology in corporate, university, and home networks. as shown in figure 1.7 ftth internet accessinternet central of Ô¨Åce optical splitteront ont ontolt opticalÔ¨Åbers m01_kuro5469_08_ge_c01.indd 46 08052021 1350 1.2 the network edge 47 figure 1.8, ethernet users use twistedpair copper wire to connect to an ethernet switch, a technology discussed in detail in chapter 6. the ethernet switch, or a network of such interconnected switches, is then in turn connected into the larger internet. with ethernet access, users typically have 100 mbps to tens of gbps access to the ethernet switch, whereas servers may have 1 gbps 10 gbps access. increasingly, however, people are accessing the internet wirelessly from lap tops, smartphones, tablets, and other things. in a wireless lan setting, wireless users transmitreceive packets tofrom an access point that is connected into the enterprises network most likely using wired ethernet, which in turn is connected to the wired internet. a wireless lan user must typically be within a few tens of meters of the access point. wireless lan access based on ieee 802.11 technology, more colloquially known as wifi, is now just about everywhereuniversities, business offices, cafes, airports, homes, and even in airplanes. as discussed in detail in chapter 7, 802.11 today provides a shared transmission rate of up to more than 100 mbps. even though ethernet and wifi access networks were initially deployed in enterprise corporate, university settings, they are also common components of home networks. many homes combine broadband residential access that is, cable modems or dsl with these inexpensive wireless lan technologies to create powerful home networks figure 1.9 shows a typical home network. this home network consists of a roaming laptop, multiple internetconnected home appliances, as well as a wired pc; a base station the wireless access point, which communicates with the wireless pc and other wireless devices in the home; and a home router that connects the wireless access point, and any other wired home devices, to the internet. this network allows household members to have broadband access to the internet with one member roaming from the kitchen to the backyard to the bedrooms.figure 1.8 ethernet internet accessethernet switchinstitutional router1 gbps 1 gbps 1 gbps serverto institutions isp m01_kuro5469_08_ge_c01.indd 47 08052021 1350 48 chapter 1 computer networks and the internet widearea wireless access 3g and lte 4g and 5g mobile devices such as iphones and android devices are being used to message, share photos in social networks, make mobile payments, watch movies, stream music, and much more while on the run. these devices
employ the same wireless infrastructure used for cellular telephony to sendreceive packets through a base station that is operated by the cellular network provider. unlike wifi, a user need only be within a few tens of kilometers as opposed to a few tens of meters of the base station. telecommunications companies have made enormous investments in socalled fourthgeneration 4g wireless, which provides realworld download speeds of up to 60 mbps. but even higherspeed widearea access technologiesa fifthgeneration 5g of widearea wireless networksare already being deployed. well cover the basic principles of wireless networks and mobility, as well as wifi, 4g and 5g technologies and more! in chapter 7. 1.2.2 physical media in the previous subsection, we gave an overview of some of the most important network access technologies in the internet. as we described these technologies, we also indicated the physical media used. for example, we said that hfc uses a combination of fiber cable and coaxial cable. we said that dsl and ethernet use copper wire. and we said that mobile access networks use the radio spectrum. in this subsection, we provide a brief overview of these and other transmission media that are commonly used in the internet. in order to define what is meant by a physical medium, let us reflect on the brief life of a bit. consider a bit traveling from one end system, through a series of links and routers, to another end system. this poor bit gets kicked around and transmitted many, many times! the source end system first transmits the figure 1.9 a typical home networkcable head endinternet home network m01_kuro5469_08_ge_c01.indd 48 08052021 1350 1.2 the network edge 49 bit, and shortly thereafter the first router in the series receives the bit; the first router then transmits the bit, and shortly thereafter the second router receives the bit; and so on. thus our bit, when traveling from source to destination, passes through a series of transmitterreceiver pairs. for each transmitterreceiver pair, the bit is sent by propagating electromagnetic waves or optical pulses across a physical medium. the physical medium can take many shapes and forms and does not have to be of the same type for each transmitterreceiver pair along the path. examples of physical media include twistedpair copper wire, coaxial cable, multimode fiberoptic cable, terrestrial radio spectrum, and satellite radio spectrum. physical media fall into two categories guided media and unguided media. with guided media, the waves are guided along a solid medium, such as a fiberoptic cable, a twistedpair copper wire, or a coaxial cable. with unguided media, the waves propagate in the atmosphere and in outer space, such as in a wireless lan or a digital satellite channel. but before we get into the characteristics of the various media types, let us say a few words about their costs. the actual cost of the physical link copper wire, fiberoptic cable, and so on is often relatively minor compared with other networking costs. in particular, the labor cost associated with the
installation of the physical link can be orders of magnitude higher than the cost of the material. for this reason, many builders install twisted pair, optical fiber, and coaxial cable in every room in a building. even if only one medium is initially used, there is a good chance that another medium could be used in the near future, and so money is saved by not having to lay additional wires in the future. twistedpair copper wire the least expensive and most commonly used guided transmission medium is twistedpair copper wire. for over a hundred years it has been used by telephone networks. in fact, more than 99 percent of the wired connections from the telephone handset to the local telephone switch use twistedpair copper wire. most of us have seen twisted pair in our homes or those of our parents or grandparents! and work environments. twisted pair consists of two insulated copper wires, each about 1 mm thick, arranged in a regular spiral pattern. the wires are twisted together to reduce the electrical interference from similar pairs close by. typically, a number of pairs are bundled together in a cable by wrapping the pairs in a protective shield. a wire pair constitutes a single communication link. unshielded twisted pair utp is commonly used for computer networks within a building, that is, for lans. data rates for lans using twisted pair today range from 10 mbps to 10 gbps. the data rates that can be achieved depend on the thickness of the wire and the distance between transmitter and receiver. when fiberoptic technology emerged in the 1980s, many people dispar aged twisted pair because of its relatively low bit rates. some people even felt m01_kuro5469_08_ge_c01.indd 49 08052021 1350 50 chapter 1 computer networks and the internet that fiberoptic technology would completely replace twisted pair. but twisted pair did not give up so easily. modern twistedpair technology, such as category 6a cable, can achieve data rates of 10 gbps for distances up to a hundred meters. in the end, twisted pair has emerged as the dominant solution for highspeed lan networking. as discussed earlier, twisted pair is also commonly used for residential inter net access. we saw that dialup modem technology enables access at rates of up to 56 kbps over twisted pair. we also saw that dsl digital subscriber line technology has enabled residential users to access the internet at tens of mbps over twisted pair when users live close to the isps central office. coaxial cable like twisted pair, coaxial cable consists of two copper conductors, but the two conductors are concentric rather than parallel. with this construction and special insulation and shielding, coaxial cable can achieve high data transmission rates. coaxial cable is quite common in cable television systems. as we saw earlier, cable television systems have recently been coupled with cable modems to provide residential users with internet access at rates of hundreds of mbps. in cable television and cable internet access, the transmitter shifts the digital
signal to a specific frequency band, and the resulting analog signal is sent from the transmitter to one or more receivers. coaxial cable can be used as a guided shared medium. specifically, a number of end systems can be connected directly to the cable, with each of the end systems receiving whatever is sent by the other end systems. fiber optics an optical fiber is a thin, flexible medium that conducts pulses of light, with each pulse representing a bit. a single optical fiber can support tremendous bit rates, up to tens or even hundreds of gigabits per second. they are immune to electromagnetic interference, have very low signal attenuation up to 100 kilometers, and are very hard to tap. these characteristics have made fiber optics the preferred longhaul guided transmission media, particularly for overseas links. many of the longdistance telephone networks in the united states and elsewhere now use fiber optics exclusively. fiber optics is also prevalent in the backbone of the internet. however, the high cost of optical devicessuch as transmitters, receivers, and switcheshas hindered their deployment for shorthaul transport, such as in a lan or into the home in a residential access network. the optical carrier oc standard link speeds range from 51.8 mbps to 39.8 gbps; these specifications are often referred to as ocn, where the link speed equals n 51.8 mbps. standards in use today include oc1, oc3, oc12, oc24, oc48, oc96, oc192, oc768. m01_kuro5469_08_ge_c01.indd 50 08052021 1350 1.2 the network edge 51 terrestrial radio channels radio channels carry signals in the electromagnetic spectrum. they are an attrac tive medium because they require no physical wire to be installed, can penetrate walls, provide connectivity to a mobile user, and can potentially carry a signal for long distances. the characteristics of a radio channel depend significantly on the propagation environment and the distance over which a signal is to be carried. environmental considerations determine path loss and shadow fading which decrease the signal strength as the signal travels over a distance and aroundthrough obstructing objects, multipath fading due to signal reflection off of interfering objects, and interference due to other transmissions and electromagnetic signals. terrestrial radio channels can be broadly classified into three groups those that operate over very short distance e.g., with one or two meters; those that operate in local areas, typically spanning from ten to a few hundred meters; and those that operate in the wide area, spanning tens of kilometers. personal devices such as wireless headsets, keyboards, and medical devices operate over short distances; the wireless lan technologies described in section 1.2.1 use localarea radio channels; the cel lular access technologies use widearea radio channels. well discuss radio channels in detail in chapter 7. satellite radio channels a communication satellite links two or more earthbased microwave transmitter receivers, known as ground stations. the satellite receives transmissions on one frequency band, regenerates the signal using a repeater discussed below, and transmits the signal on another frequency. two types of satellites are used in
communications geostationary satellites and lowearth orbiting leo satellites. geostationary satellites permanently remain above the same spot on earth. this stationary presence is achieved by placing the satellite in orbit at 36,000 kilometers above earths surface. this huge distance from ground station through satellite back to ground station introduces a substantial signal propagation delay of 280 milliseconds. nevertheless, satellite links, which can operate at speeds of hundreds of mbps, are often used in areas without access to dsl or cablebased internet access. leo satellites are placed much closer to earth and do not remain permanently above one spot on earth. they rotate around earth just as the moon does and may communicate with each other, as well as with ground stations. to provide continuous coverage to an area, many satellites need to be placed in orbit. there are currently many lowaltitude communication systems in development. leo satellite technology may be used for internet access sometime in the future. m01_kuro5469_08_ge_c01.indd 51 08052021 1350 52 chapter 1 computer networks and the internet figure 1.10 the network corecontent provider networknational or global isp datacenter networ k datacenter networ kmobile network enterprise networkhome networklocal or regional isp1.3 the network core having examined the internets edge, let us now delve more deeply inside the network corethe mesh of packet switches and links that interconnects the internets end systems. figure 1.10 highlights the network core with thick, shaded lines. m01_kuro5469_08_ge_c01.indd 52 08052021 1350 1.3 the network c ore 53 1.3.1 packet switching in a network application, end systems exchange messages with each other. mes sages can contain anything the application designer wants. messages may perform a control function for example, the hi messages in our handshaking example in figure 1.2 or can contain data, such as an email message, a jpeg image, or an mp3 audio file. to send a message from a source end system to a destination end system, the source breaks long messages into smaller chunks of data known as packets. between source and destination, each packet travels through communication links and packet switches for which there are two predominant types, routers and linklayer switches. packets are transmitted over each communication link at a rate equal to the full transmission rate of the link. so, if a source end system or a packet switch is sending a packet of l bits over a link with transmission rate r bitssec, then the time to transmit the packet is l r seconds. storeandforward transmission most packet switches use storeandforward transmission at the inputs to the links. storeandforward transmission means that the packet switch must receive the entire packet before it can begin to transmit the first bit of the packet onto the outbound link. to explore storeandforward transmission in more detail, consider a simple network consisting of two end systems connected by a single router, as shown in figure 1.11. a router will typically have many incident links, since its job is to switch an incoming packet onto an outgoing link; in this simple example, the
router has the rather simple task of transferring a packet from one input link to the only other attached link. in this example, the source has three packets, each consisting of l bits, to send to the destination. at the snapshot of time shown in figure 1.11, the source has transmitted some of packet 1, and the front of packet 1 has already arrived at the router. because the router employs storeandforwarding, at this instant of time, the router cannot transmit the bits it has received; instead it must first buffer i.e., store the packets bits. only after the router has received all of the packets bits can it begin to transmit i.e., forward the packet onto the outbound link. to gain some insight into storeandforward transmission, lets now calculate the amount of time that elapses from when the source begins to send the packet until the destination has received the entire packet. here we will ignore propagation delaythe time it takes for the bits to travel across the wire at near the speed of lightwhich will be discussed in section 1.4. the source begins to transmit at time 0; at time l r seconds, the source has transmitted the entire packet, and the entire packet has been received and stored at the router since there is no propagation delay. at time l r seconds, since the router has just received the entire packet, it can begin to transmit the packet onto the outbound link towards the destination; at time 2l r, the router has transmitted the entire packet, and the entire packet has been received by the destination. thus, the total delay is 2l r. if the m01_kuro5469_08_ge_c01.indd 53 08052021 1350 54 chapter 1 computer networks and the internet switch instead forwarded bits as soon as they arrive without first receiving the entire packet, then the total delay would be l r since bits are not held up at the router. but, as we will discuss in section 1.4, routers need to receive, store, and process the entire packet before forwarding. now lets calculate the amount of time that elapses from when the source begins to send the first packet until the destination has received all three packets. as before, at time lr, the router begins to forward the first packet. but also at time lr the source will begin to send the second packet, since it has just finished sending the entire first packet. thus, at time 2lr, the destination has received the first packet and the router has received the second packet. similarly, at time 3lr, the destination has received the first two packets and the router has received the third packet. finally, at time 4lr the destination has received all three packets! lets now consider the general case of sending one packet from source to des tination over a path consisting of n links each of rate r thus, there are n1 routers between source and destination. applying the same logic as above, we see that
the endtoend delay is dendtoendn l r 1.1 you may now want to try to determine what the delay would be for p packets sent over a series of n links. queuing delays and packet loss each packet switch has multiple links attached to it. for each attached link, the packet switch has an output buffer also called an output queue, which stores packets that the router is about to send into that link. the output buffers play a key role in packet switching. if an arriving packet needs to be transmitted onto a link but finds the link busy with the transmission of another packet, the arriving packet must wait in the output buffer. thus, in addition to the storeandforward delays, packets suffer output buffer queuing delays. these delays are variable and depend on the figure 1.11 storeandforward packet switchingsourcer bps12 destination front of packet 1 stored in router , awaiting remaining bits before forwarding3 m01_kuro5469_08_ge_c01.indd 54 08052021 1350 1.3 the network c ore 55 level of congestion in the network. since the amount of buffer space is finite, an arriving packet may find that the buffer is completely full with other packets waiting for transmission. in this case, packet loss will occureither the arriving packet or one of the alreadyqueued packets will be dropped. figure 1.12 illustrates a simple packetswitched network. as in figure 1.11, packets are represented by threedimensional slabs. the width of a slab represents the number of bits in the packet. in this figure, all packets have the same width and hence the same length. suppose hosts a and b are sending packets to host e. hosts a and b first send their packets along 100 mbps ethernet links to the first router. the router then directs these packets to the 15 mbps link. if, during a short interval of time, the arrival rate of packets to the router when converted to bits per second exceeds 15 mbps, congestion will occur at the router as packets queue in the links output buffer before being transmitted onto the link. for example, if host a and b each send a burst of five packets backtoback at the same time, then most of these packets will spend some time waiting in the queue. the situation is, in fact, entirely analogous to many commonday situationsfor example, when we wait in line for a bank teller or wait in front of a tollbooth. well examine this queuing delay in more detail in section 1.4. forwarding tables and routing protocols earlier, we said that a router takes a packet arriving on one of its attached communication links and forwards that packet onto another one of its attached communication links. but how does the router determine which link it should figure 1.12 packet switching100 mbps ethernet key packetsa bc de15 mbps queue of packets waiting for output link m01_kuro5469_08_ge_c01.indd 55 08052021 1350 56 chapter 1 computer networks and the internet forward the packet onto? packet forwarding is actually done in different ways
in different types of computer networks. here, we briefly describe how it is done in the internet. in the internet, every end system has an address called an ip address. when a source end system wants to send a packet to a destination end system, the source includes the destinations ip address in the packets header. as with postal addresses, this address has a hierarchical structure. when a packet arrives at a router in the network, the router examines a portion of the packets destination address and forwards the packet to an adjacent router. more specifically, each router has a forwarding table that maps destination addresses or portions of the destination addresses to that routers outbound links. when a packet arrives at a router, the router examines the address and searches its forwarding table, using this destination address, to find the appropriate outbound link. the router then directs the packet to this outbound link. the endtoend routing process is analogous to a car driver who does not use maps but instead prefers to ask for directions. for example, suppose joe is driving from philadelphia to 156 lakeside drive in orlando, florida. joe first drives to his neighborhood gas station and asks how to get to 156 lakeside drive in orlando, florida. the gas station attendant extracts the florida portion of the address and tells joe that he needs to get onto the interstate highway i95 south, which has an entrance just next to the gas station. he also tells joe that once he enters florida, he should ask someone else there. joe then takes i95 south until he gets to jacksonville, florida, at which point he asks another gas station attendant for directions. the attendant extracts the orlando portion of the address and tells joe that he should continue on i95 to daytona beach and then ask someone else. in daytona beach, another gas station attendant also extracts the orlando portion of the address and tells joe that he should take i4 directly to orlando. joe takes i4 and gets off at the orlando exit. joe goes to another gas station attendant, and this time the attendant extracts the lakeside drive portion of the address and tells joe the road he must follow to get to lakeside drive. once joe reaches lakeside drive, he asks a kid on a bicycle how to get to his destination. the kid extracts the 156 portion of the address and points to the house. joe finally reaches his ultimate destination. in the above analogy, the gas station attendants and kids on bicycles are analogous to routers. we just learned that a router uses a packets destination address to index a for warding table and determine the appropriate outbound link. but this statement begs yet another question how do forwarding tables get set? are they configured by hand in each and every router, or does the internet use a more automated procedure? this issue will be studied in depth in chapter 5. but to whet
your appetite here, well note now that the internet has a number of special routing protocols that are used to automatically set the forwarding tables. a routing protocol may, for example, determine the shortest path from each router to each destination and use the shortest path results to configure the forwarding tables in the routers. m01_kuro5469_08_ge_c01.indd 56 08052021 1350 1.3 the network c ore 57 1.3.2 circuit switching there are two fundamental approaches to moving data through a network of links and switches circuit switching and packet switching. having covered packetswitched networks in the previous subsection, we now turn our attention to circuitswitched networks. in circuitswitched networks, the resources needed along a path buffers, link transmission rate to provide for communication between the end systems are reserved for the duration of the communication session between the end systems. in packetswitched networks, these resources are not reserved; a sessions messages use the resources on demand and, as a consequence, may have to wait that is, queue for access to a communication link. as a simple analogy, consider two restaurants, one that requires reservations and another that neither requires reservations nor accepts them. for the restaurant that requires reservations, we have to go through the hassle of calling before we leave home. but when we arrive at the restaurant we can, in principle, immediately be seated and order our meal. for the restaurant that does not require reservations, we dont need to bother to reserve a table. but when we arrive at the restaurant, we may have to wait for a table before we can be seated. traditional telephone networks are examples of circuitswitched networks. consider what happens when one person wants to send information voice or facsimile to another over a telephone network. before the sender can send the information, the network must establish a connection between the sender and the receiver. this is a bona fide connection for which the switches on the path between the sender and receiver maintain connection state for that connection. in the jargon of telephony, this connection is called a circuit. when the network establishes the circuit, it also reserves a constant transmission rate in the networks links representing a fraction of each links transmission capacity for the duration of the connection. since a given transmission rate has been reserved for this sendertoreceiver connection, the sender can transfer the data to the receiver at the guaranteed constant rate. figure 1.13 illustrates a circuitswitched network. in this network, the four circuit switches are interconnected by four links. each of these links has four circuits, so that each link can support four simultaneous connections. the hosts for example, pcs and workstations are each directly connected to one of the switches. when two hosts want to communicate, the network establishes a dedicated endtoend connection between the two hosts. thus, in order for host a to communicate with host b, the network must first reserve one circuit on each of two links. in this example, the dedicated endtoend connection
uses the second circuit in the first link and the fourth circuit in the second link. because each link has four circuits, for each link used by the endtoend connection, the connection gets one fourth of the links total transmission capacity for the duration of the connection. thus, for example, if each link between adjacent switches has a transmission rate of 1 mbps, then each endtoend circuitswitch connection gets 250 kbps of dedicated transmission rate. m01_kuro5469_08_ge_c01.indd 57 08052021 1350 58 chapter 1 computer networks and the internet figure 1.13 a simple circuitswitched network consisting of four switches and four links in contrast, consider what happens when one host wants to send a packet to another host over a packetswitched network, such as the internet. as with circuit switching, the packet is transmitted over a series of communication links. but different from circuit switching, the packet is sent into the network without reserving any link resources whatsoever. if one of the links is congested because other packets need to be transmitted over the link at the same time, then the packet will have to wait in a buffer at the sending side of the transmission link and suffer a delay. the internet makes its best effort to deliver packets in a timely manner, but it does not make any guarantees. multiplexing in circuitswitched networks a circuit in a link is implemented with either frequencydivision multiplexing fdm or timedivision multiplexing tdm. with fdm, the frequency spectrum of a link is divided up among the connections established across the link. specifically, the link dedicates a frequency band to each connection for the duration of the connection. in telephone networks, this frequency band typically has a width of 4 khz that is, 4,000 hertz or 4,000 cycles per second. the width of the band is called, not surprisingly, the bandwidth. fm radio stations also use fdm to share the frequency spectrum between 88 mhz and 108 mhz, with each station being allocated a specific frequency band. for a tdm link, time is divided into frames of fixed duration, and each frame is divided into a fixed number of time slots. when the network establishes a connection across a link, the network dedicates one time slot in every frame to this connection. these slots are dedicated for the sole use of that connection, with one time slot available for use in every frame to transmit the connections data. m01_kuro5469_08_ge_c01.indd 58 08052021 1350 1.3 the network c ore 59 figure 1.14 illustrates fdm and tdm for a specific network link supporting up to four circuits. for fdm, the frequency domain is segmented into four bands, each of bandwidth 4 khz. for tdm, the time domain is segmented into frames, with four time slots in each frame; each circuit is assigned the same dedicated slot in the revolving tdm frames. for tdm, the transmission rate of a circuit is equal to the frame rate multiplied by the number of bits in a slot. for example, if the
link transmits 8,000 frames per second and each slot consists of 8 bits, then the transmission rate of each circuit is 64 kbps. proponents of packet switching have always argued that circuit switching is waste ful because the dedicated circuits are idle during silent periods. for example, when one person in a telephone call stops talking, the idle network resources frequency bands or time slots in the links along the connections route cannot be used by other ongoing connections. as another example of how these resources can be underutilized, consider a radiologist who uses a circuitswitched network to remotely access a series of xrays. the radiologist sets up a connection, requests an image, contemplates the image, and then requests a new image. network resources are allocated to the connection but are not used i.e., are wasted during the radiologists contemplation periods. proponents of packet switching also enjoy pointing out that establishing endtoend circuits and reserving endtoend transmission capacity is complicated and requires complex signaling software to coordinate the operation of the switches along the endtoend path.figure 1.14 with fdm, each circuit continuously gets a fraction of the bandwidth. with tdm, each circuit gets all of the bandwidth periodically during brief intervals of time that is, during slots4khz tdmfdm link frequency 4khz slot key all slots labeled 2 are dedicated to a speciÔ¨Åc senderreceiver pair.frame1 22341 234 12 34 12 34 time m01_kuro5469_08_ge_c01.indd 59 08052021 1350 60 chapter 1 computer networks and the internet before we finish our discussion of circuit switching, lets work through a numer ical example that should shed further insight on the topic. let us consider how long it takes to send a file of 640,000 bits from host a to host b over a circuitswitched network. suppose that all links in the network use tdm with 24 slots and have a bit rate of 1.536 mbps. also suppose that it takes 500 msec to establish an endtoend circuit before host a can begin to transmit the file. how long does it take to send the file? each circuit has a transmission rate of 1.536 mbps24 64 kbps, so it takes 640,000 bits64 kbps 10 seconds to transmit the file. to this 10 seconds we add the circuit establishment time, giving 10.5 seconds to send the file. note that the transmission time is independent of the number of links the transmission time would be 10 seconds if the endtoend circuit passed through one link or a hundred links. the actual endtoend delay also includes a propagation delay; see section 1.4. packet switching versus circuit switching having described circuit switching and packet switching, let us compare the two. critics of packet switching have often argued that packet switching is not suitable for realtime services for example, telephone calls and video conference calls because of its variable and unpredictable endtoend delays due primarily to variable and unpredictable queuing delays. proponents of packet switching argue that 1 it offers better sharing of transmission capacity than circuit switching and 2 it
is simpler, more efficient, and less costly to implement than circuit switching. an interesting discussion of packet switching versus circuit switching is molinero fernandez 2002. generally speaking, people who do not like to hassle with restaurant reservations prefer packet switching to circuit switching. why is packet switching more efficient? lets look at a simple example. sup pose users share a 1 mbps link. also suppose that each user alternates between periods of activity, when a user generates data at a constant rate of 100 kbps, and periods of inactivity, when a user generates no data. suppose further that a user is active only 10 percent of the time and is idly drinking coffee during the remaining 90 percent of the time. with circuit switching, 100 kbps must be reserved for each user at all times. for example, with circuitswitched tdm, if a onesecond frame is divided into 10 time slots of 100 ms each, then each user would be allocated one time slot per frame. thus, the circuitswitched link can support only 10 1 mbps100 kbps simul taneous users. with packet switching, the probability that a specific user is active is 0.1 that is, 10 percent. if there are 35 users, the probability that there are 11 or more simultaneously active users is approximately 0.0004. homework problem p8 outlines how this probability is obtained. when there are 10 or fewer simultaneously active users which happens with probability 0.9996, the aggregate arrival rate of data is less than or equal to 1 mbps, the output rate of the link. thus, when there are 10 or fewer active users, users packets flow through the link essentially m01_kuro5469_08_ge_c01.indd 60 08052021 1350 1.3 the network c ore 61 without delay, as is the case with circuit switching. when there are more than 10 simultaneously active users, then the aggregate arrival rate of packets exceeds the output capacity of the link, and the output queue will begin to grow. it continues to grow until the aggregate input rate falls back below 1 mbps, at which point the queue will begin to diminish in length. because the probability of having more than 10 simultaneously active users is minuscule in this example, packet switching provides essentially the same performance as circuit switching, but does so while allowing for more than three times the number of users. lets now consider a second simple example. suppose there are 10 users and that one user suddenly generates one thousand 1,000bit packets, while other users remain quiescent and do not generate packets. under tdm circuit switching with 10 slots per frame and each slot consisting of 1,000 bits, the active user can only use its one time slot per frame to transmit data, while the remaining nine time slots in each frame remain idle. it will be 10 seconds before all of the active users one million bits of data has been transmitted. in the case of packet switching, the active user can continuously send its packets at the full link
rate of 1 mbps, since there are no other users generating packets that need to be multiplexed with the active users packets. in this case, all of the active users data will be transmitted within 1 second. the above examples illustrate two ways in which the performance of packet switching can be superior to that of circuit switching. they also highlight the crucial difference between the two forms of sharing a links transmission rate among multiple data streams. circuit switching preallocates use of the transmission link regardless of demand, with allocated but unneeded link time going unused. packet switching on the other hand allocates link use on demand. link transmission capacity will be shared on a packetbypacket basis only among those users who have packets that need to be transmitted over the link. although packet switching and circuit switching are both prevalent in todays telecommunication networks, the trend has certainly been in the direction of packet switching. even many of todays circuitswitched telephone networks are slowly migrating toward packet switching. in particular, telephone networks often use packet switching for the expensive overseas portion of a telephone call. 1.3.3 a network of networks we saw earlier that end systems pcs, smartphones, web servers, mail servers, and so on connect into the internet via an access isp. the access isp can provide either wired or wireless connectivity, using an array of access technologies including dsl, cable, ftth, wifi, and cellular. note that the access isp does not have to be a telco or a cable company; instead it can be, for example, a university providing internet access to students, staff, and faculty, or a company providing access for its employees. but connecting end users and content providers into an access isp is only a small piece of solving the puzzle of connecting the billions of end systems that make up the internet. to complete this puzzle, the access isps themselves must be m01_kuro5469_08_ge_c01.indd 61 08052021 1350 62 chapter 1 computer networks and the internet interconnected. this is done by creating a network of networksunderstanding this phrase is the key to understanding the internet. over the years, the network of networks that forms the internet has evolved into a very complex structure. much of this evolution is driven by economics and national policy, rather than by performance considerations. in order to understand todays internet network structure, lets incrementally build a series of network structures, with each new structure being a better approximation of the complex internet that we have today. recall that the overarching goal is to interconnect the access isps so that all end systems can send packets to each other. one naive approach would be to have each access isp directly connect with every other access isp. such a mesh design is, of course, much too costly for the access isps, as it would require each access isp to have a separate communication link to each of the hundreds of thousands of other access isps all over the world. our first
network structure, network structure 1, interconnects all of the access isps with a single global transit isp. our imaginary global transit isp is a network of routers and communication links that not only spans the globe, but also has at least one router near each of the hundreds of thousands of access isps. of course, it would be very costly for the global isp to build such an extensive network. to be profitable, it would naturally charge each of the access isps for connectivity, with the pricing reflecting but not necessarily directly proportional to the amount of traffic an access isp exchanges with the global isp. since the access isp pays the global transit isp, the access isp is said to be a customer and the global transit isp is said to be a provider. now if some company builds and operates a global transit isp that is profit able, then it is natural for other companies to build their own global transit isps and compete with the original global transit isp. this leads to network structure 2, which consists of the hundreds of thousands of access isps and multiple global transit isps. the access isps certainly prefer network structure 2 over network structure 1 since they can now choose among the competing global transit providers as a function of their pricing and services. note, however, that the global transit isps themselves must interconnect otherwise access isps connected to one of the global transit providers would not be able to communicate with access isps connected to the other global transit providers. network structure 2, just described, is a twotier hierarchy with global transit providers residing at the top tier and access isps at the bottom tier. this assumes that global transit isps are not only capable of getting close to each and every access isp, but also find it economically desirable to do so. in reality, although some isps do have impressive global coverage and do directly connect with many access isps, no isp has presence in each and every city in the world. instead, in any given region, there may be a regional isp to which the access isps in the region connect. each regional isp then connects to tier1 isps. tier1 isps are similar to our imaginary global transit isp; but tier1 isps, which actually do exist, do not have a presence in every city in the world. there are approximately a dozen tier1 isps, including level 3 communications, att, sprint, and ntt. interestingly, no group officially m01_kuro5469_08_ge_c01.indd 62 08052021 1350 1.3 the network c ore 63 sanctions tier1 status; as the saying goesif you have to ask if youre a member of a group, youre probably not. returning to this network of networks, not only are there multiple competing tier1 isps, there may be multiple competing regional isps in a region. in such a hierarchy, each access isp pays the regional isp to which it connects, and each regional isp pays the tier1 isp to which it
connects. an access isp can also connect directly to a tier1 isp, in which case it pays the tier1 isp. thus, there is customerprovider relationship at each level of the hierarchy. note that the tier1 isps do not pay anyone as they are at the top of the hierarchy. to further complicate matters, in some regions, there may be a larger regional isp possibly spanning an entire country to which the smaller regional isps in that region connect; the larger regional isp then connects to a tier1 isp. for example, in china, there are access isps in each city, which connect to provincial isps, which in turn connect to national isps, which finally connect to tier1 isps tian 2012. we refer to this multitier hierarchy, which is still only a crude approximation of todays internet, as network structure 3. to build a network that more closely resembles todays internet, we must add points of presence pops, multihoming, peering, and internet exchange points ixps to the hierarchical network structure 3. pops exist in all levels of the hierarchy, except for the bottom access isp level. a pop is simply a group of one or more routers at the same location in the providers network where customer isps can connect into the provider isp. for a customer network to connect to a providers pop, it can lease a highspeed link from a thirdparty telecommunications provider to directly connect one of its routers to a router at the pop. any isp except for tier1 isps may choose to multihome, that is, to connect to two or more provider isps. so, for example, an access isp may multihome with two regional isps, or it may multihome with two regional isps and also with a tier1 isp. similarly, a regional isp may multihome with multiple tier1 isps. when an isp multihomes, it can continue to send and receive packets into the internet even if one of its providers has a failure. as we just learned, customer isps pay their provider isps to obtain global inter net interconnectivity. the amount that a customer isp pays a provider isp reflects the amount of traffic it exchanges with the provider. to reduce these costs, a pair of nearby isps at the same level of the hierarchy can peer, that is, they can directly connect their networks together so that all the traffic between them passes over the direct connection rather than through upstream intermediaries. when two isps peer, it is typically settlementfree, that is, neither isp pays the other. as noted earlier, tier1 isps also peer with one another, settlementfree. for a readable discussion of peering and customerprovider relationships, see van der berg 2008. along these same lines, a thirdparty company can create an internet exchange point ixp, which is a meeting point where multiple isps can peer together. an ixp is typically in a standalone building with its own switches ager 2012. there are over 600 ixps in the internet today peeringdb 2020. we refer to this
ecosystemconsisting of access isps, regional isps, tier1 isps, pops, multihoming, peering, and ixpsas network structure 4. m01_kuro5469_08_ge_c01.indd 63 08052021 1350 64 chapter 1 computer networks and the internet we now finally arrive at network structure 5, which describes todays internet. network structure 5, illustrated in figure 1.15, builds on top of network structure 4 by adding contentprovider networks. google is currently one of the leading exam ples of such a contentprovider network. as of this writing, it google has 19 major data centers distributed across north america, europe, asia, south america, and australia with each data center having tens or hundreds of thousands of servers. additionally, google has smaller data centers, each with a few hundred servers; these smaller data centers are often located within ixps. the google data centers are all interconnected via googles private tcpip network, which spans the entire globe but is nevertheless separate from the public internet. importantly, the google private network only carries traffic tofrom google servers. as shown in figure 1.15, the google private network attempts to bypass the upper tiers of the internet by peering settlement free with lowertier isps, either by directly connecting with them or by connecting with them at ixps labovitz 2010. however, because many access isps can still only be reached by transiting through tier1 networks, the google network also connects to tier1 isps, and pays those isps for the traffic it exchanges with them. by creating its own network, a content provider not only reduces its payments to uppertier isps, but also has greater control of how its services are ultimately delivered to end users. googles network infrastructure is described in greater detail in section 2.6. in summary, todays interneta network of networksis complex, consisting of a dozen or so tier1 isps and hundreds of thousands of lowertier isps. the isps are diverse in their coverage, with some spanning multiple continents and oceans, and others limited to narrow geographic regions. the lowertier isps connect to the highertier isps, and the highertier isps interconnect with one another. users and content providers are customers of lowertier isps, and lowertier isps are customers of highertier isps. in recent years, major content providers have also created their own networks and connect directly into lowertier isps where possible. figure 1.15 interconnection of ispsaccess ispaccess ispaccess ispaccess ispaccess ispaccess ispaccess ispaccess ispregional isptier 1 ispcontent provider e.g., googletier 1 isp ixp regional ispixp ixp m01_kuro5469_08_ge_c01.indd 64 08052021 1350 1.4 dela y, loss, and throughput in p acket switched networks 65 1.4 delay, loss, and throughput in packetswitched networks back in section 1.1 we said that the internet can be viewed as an infrastructure that provides services to distributed applications running on end systems. ideally, we would like internet services to be able to move as much data as we want between any two end systems, instantaneously, without any loss of data. alas, this is a lofty goal, one that is unachievable in reality. instead, computer networks necessarily constrain throughput the amount of data per
second that can be transferred between end systems, introduce delays between end systems, and can actually lose packets. on one hand, it is unfortunate that the physical laws of reality introduce delay and loss as well as constrain throughput. on the other hand, because computer networks have these problems, there are many fascinating issues surrounding how to deal with the problemsmore than enough issues to fill a course on computer networking and to motivate thousands of phd theses! in this section, well begin to examine and quantify delay, loss, and throughput in computer networks. 1.4.1 overview of delay in packetswitched networks recall that a packet starts in a host the source, passes through a series of routers, and ends its journey in another host the destination. as a packet travels from one node host or router to the subsequent node host or router along this path, the packet suffers from several types of delays at each node along the path. the most important of these delays are the nodal processing delay, queuing delay, transmis sion delay, and propagation delay; together, these delays accumulate to give a total nodal delay. the performance of many internet applicationssuch as search, web browsing, email, maps, instant messaging, and voiceoveripare greatly affected by network delays. in order to acquire a deep understanding of packet switching and computer networks, we must understand the nature and importance of these delays. types of delay lets explore these delays in the context of figure 1.16. as part of its endtoend route between source and destination, a packet is sent from the upstream node through router a to router b. our goal is to characterize the nodal delay at router a. note that router a has an outbound link leading to router b. this link is preceded by a queue also known as a buffer. when the packet arrives at router a from the upstream node, router a examines the packets header to determine the appropriate outbound link for the packet and then directs the packet to this link. in this example, the outbound link for the packet is the one that leads to router b. a packet can be transmitted on a link only if there is no other packet currently being transmitted on the link and if there are no other packets preceding it in the queue; if the link is m01_kuro5469_08_ge_c01.indd 65 08052021 1350 66 chapter 1 computer networks and the internet currently busy or if there are other packets already queued for the link, the newly arriving packet will then join the queue. processing delay the time required to examine the packets header and determine where to direct the packet is part of the processing delay. the processing delay can also include other factors, such as the time needed to check for bitlevel errors in the packet that occurred in transmitting the packets bits from the upstream node to router a. processing delays in highspeed routers are typically on the order of microseconds or less. after
this nodal processing, the router directs the packet to the queue that precedes the link to router b. in chapter 4 well study the details of how a router operates. queuing delay at the queue, the packet experiences a queuing delay as it waits to be transmitted onto the link. the length of the queuing delay of a specific packet will depend on the number of earlierarriving packets that are queued and waiting for transmission onto the link. if the queue is empty and no other packet is currently being transmitted, then our packets queuing delay will be zero. on the other hand, if the traffic is heavy and many other packets are also waiting to be transmitted, the queuing delay will be long. we will see shortly that the number of packets that an arriving packet might expect to find is a function of the intensity and nature of the traffic arriving at the queue. queuing delays can be on the order of microseconds to milliseconds in practice. transmission delay assuming that packets are transmitted in a firstcomefirstserved manner, as is com mon in packetswitched networks, our packet can be transmitted only after all the packets that have arrived before it have been transmitted. denote the length of the figure 1.16 the nodal delay at router aa b nodal processingqueuingwaiting for transmissiontransmissionpropagation m01_kuro5469_08_ge_c01.indd 66 08052021 1350 1.4 dela y, loss, and throughput in p acket switched networks 67 packet by l bits, and denote the transmission rate of the link from router a to router b by r bitssec. for example, for a 10 mbps ethernet link, the rate is r 10 mbps; for a 100 mbps ethernet link, the rate is r 100 mbps. the transmission delay is lr. this is the amount of time required to push that is, transmit all of the packets bits into the link. transmission delays are typically on the order of microseconds to milliseconds in practice. propagation delay once a bit is pushed into the link, it needs to propagate to router b. the time required to propagate from the beginning of the link to router b is the propagation delay. the bit propagates at the propagation speed of the link. the propagation speed depends on the physical medium of the link that is, fiber optics, twistedpair copper wire, and so on and is in the range of 2108 meterssec to 3108 meterssec which is equal to, or a little less than, the speed of light. the propagation delay is the distance between two routers divided by the propagation speed. that is, the propagation delay is ds, where d is the distance between router a and router b and s is the propagation speed of the link. once the last bit of the packet propagates to node b, it and all the preceding bits of the packet are stored in router b. the whole process then continues with router b now performing the forwarding. in widearea networks, propagation delays are on the
order of milliseconds. comparing transmission and propagation delay newcomers to the field of computer networking sometimes have difficulty understanding the difference between transmission delay and propagation delay. the difference is subtle but important. the transmission delay is the amount of time required for the router to push out the packet; it is a function of the packets length and the transmission rate of the link, but has nothing to do with the distance between the two routers. the propagation delay, on the other hand, is the time it takes a bit to propagate from one router to the next; it is a function of the distance between the two routers, but has nothing to do with the packets length or the transmission rate of the link. an analogy might clarify the notions of transmission and propagation delay. consider a highway that has a tollbooth every 100 kilometers, as shown in figure 1.17. you can think of the highway segments between tollbooths as links and the tollbooths as routers. suppose that cars travel that is, propagate on the highway at a rate of 100 kmhour that is, when a car leaves a tollbooth, it instantaneously accelerates to 100 kmhour and maintains that speed between tollbooths. suppose next that 10 cars, traveling together as a caravan, follow each other in a fixed order. you can think of each car as a bit and the caravan as a packet. also suppose that each videonote exploring propagation delay and transmission delay m01_kuro5469_08_ge_c01.indd 67 08052021 1350 68 chapter 1 computer networks and the internet tollbooth services that is, transmits a car at a rate of one car per 12 seconds, and that it is late at night so that the caravans cars are the only cars on the highway. finally, suppose that whenever the first car of the caravan arrives at a tollbooth, it waits at the entrance until the other nine cars have arrived and lined up behind it. thus, the entire caravan must be stored at the tollbooth before it can begin to be forwarded. the time required for the tollbooth to push the entire caravan onto the highway is 10 cars5 carsminute2 minutes. this time is analogous to the transmission delay in a router. the time required for a car to travel from the exit of one tollbooth to the next tollbooth is 100 km100 kmhour1 hour. this time is analogous to propagation delay. therefore, the time from when the caravan is stored in front of a tollbooth until the caravan is stored in front of the next tollbooth is the sum of transmission delay and propagation delayin this example, 62 minutes. lets explore this analogy a bit more. what would happen if the tollbooth ser vice time for a caravan were greater than the time for a car to travel between tollbooths? for example, suppose now that the cars travel at the rate of 1,000 kmhour and the tollbooth services cars at the rate of one car per minute. then the
traveling delay between two tollbooths is 6 minutes and the time to serve a caravan is 10 minutes. in this case, the first few cars in the caravan will arrive at the second tollbooth before the last cars in the caravan leave the first tollbooth. this situation also arises in packetswitched networksthe first bits in a packet can arrive at a router while many of the remaining bits in the packet are still waiting to be transmitted by the preceding router. if a picture speaks a thousand words, then an animation must speak a million words. the web site for this textbook provides an interactive animation that nicely illustrates and contrasts transmission delay and propagation delay. the reader is highly encouraged to visit that animation. smith 2009 also provides a very readable discussion of propagation, queuing, and transmission delays. if we let dproc, dqueue, dtrans, and dprop denote the processing, queuing, transmis sion, and propagation delays, then the total nodal delay is given by dnodaldprocdqueuedtransdprop the contribution of these delay components can vary significantly. for example, dprop can be negligible for example, a couple of microseconds for a link connecting two routers on the same university campus; however, dprop is hundreds of millisec onds for two routers interconnected by a geostationary satellite link, and can be the figure 1.17 caravan analogytencar caravantoll boothtoll booth100 km 100 km m01_kuro5469_08_ge_c01.indd 68 08052021 1350 1.4 dela y, loss, and throughput in p acket switched networks 69 dominant term in dnodal. similarly, dtrans can range from negligible to significant. its contribution is typically negligible for transmission rates of 10 mbps and higher for example, for lans; however, it can be hundreds of milliseconds for large internet packets sent over lowspeed dialup modem links. the processing delay, dproc, is often negligible; however, it strongly influences a routers maximum throughput, which is the maximum rate at which a router can forward packets. 1.4.2 queuing delay and packet loss the most complicated and interesting component of nodal delay is the queuing delay, dqueue. in fact, queuing delay is so important and interesting in computer networking that thousands of papers and numerous books have been written about it bertsekas 1991; kleinrock 1975, kleinrock 1976. we give only a highlevel, intuitive discussion of queuing delay here; the more curious reader may want to browse through some of the books or even eventually write a phd thesis on the subject!. unlike the other three delays namely, dproc, dtrans, and dprop, the queuing delay can vary from packet to packet. for example, if 10 packets arrive at an empty queue at the same time, the first packet transmitted will suffer no queuing delay, while the last packet transmitted will suffer a relatively large queuing delay while it waits for the other nine packets to be transmitted. therefore, when characterizing queuing delay, one typically uses statistical measures, such as average queuing delay, variance of queuing delay, and the probability that the queuing delay exceeds some specified value. when is the queuing delay
large and when is it insignificant? the answer to this question depends on the rate at which traffic arrives at the queue, the transmission rate of the link, and the nature of the arriving traffic, that is, whether the traffic arrives periodically or arrives in bursts. to gain some insight here, let a denote the average rate at which packets arrive at the queue a is in units of packetssec. recall that r is the transmission rate; that is, it is the rate in bitssec at which bits are pushed out of the queue. also suppose, for simplicity, that all packets consist of l bits. then the average rate at which bits arrive at the queue is la bitssec. finally, assume that the queue is very big, so that it can hold essentially an infinite number of bits. the ratio lar, called the traffic intensity, often plays an important role in estimating the extent of the queuing delay. if lar 1, then the average rate at which bits arrive at the queue exceeds the rate at which the bits can be transmitted from the queue. in this unfortunate situation, the queue will tend to increase without bound and the queuing delay will approach infinity! therefore, one of the golden rules in traffic engineering is design your system so that the traffic intensity is no greater than 1. now consider the case lar 1. here, the nature of the arriving traffic impacts the queuing delay. for example, if packets arrive periodicallythat is, one packet arrives every lr secondsthen every packet will arrive at an empty queue and there will be no queuing delay. on the other hand, if packets arrive in bursts but periodically, there can be a significant average queuing delay. for example, suppose n packets arrive simultaneously every lrn seconds. then the first packet transmitted has no queuing delay; the second packet transmitted has a queuing delay m01_kuro5469_08_ge_c01.indd 69 08052021 1350 70 chapter 1 computer networks and the internet of lr seconds; and more generally, the nth packet transmitted has a queuing delay of n1lr seconds. we leave it as an exercise for you to calculate the average queuing delay in this example. the two examples of periodic arrivals described above are a bit academic. typically, the arrival process to a queue is random; that is, the arrivals do not follow any pattern and the packets are spaced apart by random amounts of time. in this more realistic case, the quantity lar is not usually sufficient to fully characterize the queuing delay statistics. nonetheless, it is useful in gaining an intuitive understanding of the extent of the queuing delay. in particular, if the traffic intensity is close to zero, then packet arrivals are few and far between and it is unlikely that an arriving packet will find another packet in the queue. hence, the average queuing delay will be close to zero. on the other hand, when the traffic intensity is close to 1, there will be intervals of
time when the arrival rate exceeds the transmission capacity due to variations in packet arrival rate, and a queue will form during these periods of time; when the arrival rate is less than the transmission capacity, the length of the queue will shrink. nonetheless, as the traffic intensity approaches 1, the average queue length gets larger and larger. the qualitative dependence of average queuing delay on the traffic intensity is shown in figure 1.18. one important aspect of figure 1.18 is the fact that as the traffic intensity approaches 1, the average queuing delay increases rapidly. a small percentage increase in the intensity will result in a much larger percentagewise increase in delay. perhaps you have experienced this phenomenon on the highway. if you regularly drive on a road that is typically congested, the fact that the road is typically congested means that its traffic intensity is close to 1. if some event causes an even slightly largerthanusual amount of traffic, the delays you experience can be huge. to really get a good feel for what queuing delays are about, you are encouraged once again to visit the textbook web site, which provides an interactive animation for a queue. if you set the packet arrival rate high enough so that the traffic intensity exceeds 1, you will see the queue slowly build up over time. figure 1.18 dependence of average queuing delay on traffic intensity average queuing delay lar1 m01_kuro5469_08_ge_c01.indd 70 08052021 1350 1.4 dela y, loss, and throughput in p acket switched networks 71 packet loss in our discussions above, we have assumed that the queue is capable of holding an infinite number of packets. in reality a queue preceding a link has finite capacity, although the queuing capacity greatly depends on the router design and cost. because the queue capacity is finite, packet delays do not really approach infinity as the traffic intensity approaches 1. instead, a packet can arrive to find a full queue. with no place to store such a packet, a router will drop that packet; that is, the packet will be lost. this overflow at a queue can again be seen in the interactive animation when the traffic intensity is greater than 1. from an endsystem viewpoint, a packet loss will look like a packet having been transmitted into the network core but never emerging from the network at the destination. the fraction of lost packets increases as the traffic intensity increases. therefore, performance at a node is often measured not only in terms of delay, but also in terms of the probability of packet loss. as well discuss in the subsequent chapters, a lost packet may be retransmitted on an endtoend basis in order to ensure that all data are eventually transferred from source to destination. 1.4.3 endtoend delay our discussion up to this point has focused on the nodal delay, that is, the delay at a single router. lets now consider the total delay from source to destination. to get a handle
on this concept, suppose there are n1 routers between the source host and the destination host. lets also suppose for the moment that the network is uncongested so that queuing delays are negligible, the processing delay at each router and at the source host is dproc, the transmission rate out of each router and out of the source host is r bitssec, and the propagation on each link is dprop. the nodal delays accumulate and give an endtoend delay, dendendn dprocdtransdprop 1.2 where, once again, dtranslr, where l is the packet size. note that equation 1.2 is a generalization of equation 1.1, which did not take into account processing and propaga tion delays. we leave it to you to generalize equation 1.2 to the case of heterogeneous delays at the nodes and to the presence of an average queuing delay at each node. traceroute to get a handson feel for endtoend delay in a computer network, we can make use of the traceroute program. traceroute is a simple program that can run in any internet host. when the user specifies a destination hostname, the program in the source host sends multiple, special packets toward that destination. as these packets work their way toward the destination, they pass through a series of routers. when a router receives one of these special packets, it sends back to the source a short message that contains the name and address of the router.videonote using traceroute to discover network paths and measure network delay m01_kuro5469_08_ge_c01.indd 71 08052021 1350 72 chapter 1 computer networks and the internet more specifically, suppose there are n1 routers between the source and the destination. then the source will send n special packets into the network, with each packet addressed to the ultimate destination. these n special packets are marked 1 through n, with the first packet marked 1 and the last packet marked n . when the nth router receives the n th packet marked n, the router does not forward the packet toward its destination, but instead sends a message back to the source. when the destination host receives the n th packet, it too returns a message back to the source. the source records the time that elapses between when it sends a packet and when it receives the corresponding return message; it also records the name and address of the router or the destination host that returns the message. in this manner, the source can reconstruct the route taken by packets flowing from source to destination, and the source can determine the roundtrip delays to all the intervening routers. traceroute actually repeats the experiment just described three times, so the source actually sends 3 n packets to the destination. rfc 1393 describes traceroute in detail. here is an example of the output of the traceroute program, where the route was being traced from the source host gaia.cs.umass.edu at the university of massachusetts to a host in the computer science department at the university of sorbonne in paris
formerly the university was known as upmc. the output has six columns the first column is the n value described above, that is, the number of the router along the route; the second column is the name of the router; the third column is the address of the router of the form xxx.xxx.xxx.xxx; the last three columns are the roundtrip delays for three experiments. if the source receives fewer than three messages from any given router due to packet loss in the network, traceroute places an asterisk just after the router number and reports fewer than three roundtrip times for that router. 1 gwvlan2451.cs.umass.edu 128.119.245.1 1.899 ms 3.266 ms 3.280 ms2 jcsgwint10240.cs.umass.edu 10.119.240.254 1.296 ms 1.276 ms 1.245 ms 3 n5rt11xe210.gw.umass.edu 128.119.3.33 2.237 ms 2.217 ms 2.187 ms 4 core1rtet520.gw.umass.edu 128.119.0.9 0.351 ms 0.392 ms 0.380 ms5 border1rtet500.gw.umass.edu 192.80.83.102 0.345 ms 0.345 ms 0.344 ms 6 nox300gw1umassre.nox.org 192.5.89.101 3.260 ms 0.416 ms 3.127 ms7 nox300gw1umassre.nox.org 192.5.89.101 3.165 ms 7.326 ms 7.311 ms8 198.71.45.237 198.71.45.237 77.826 ms 77.246 ms 77.744 ms9 renaterlb1gw.mx1.par.fr.geant.net 62.40.124.70 79.357 ms 77.729 79.152 ms 10 193.51.180.109 193.51.180.109 78.379 ms 79.936 80.042 ms11 193.51.180.109 193.51.180.109 80.640 ms 12 195.221.127.182 195.221.127.182 78.408 ms 13 195.221.127.182 195.221.127.182 80.686 ms 80.796 ms 78.434 ms14 rupmc1.reseau.jussieu.fr 134.157.254.10 78.399 ms 81.353 ms m01_kuro5469_08_ge_c01.indd 72 08052021 1350 1.4 dela y, loss, and throughput in p acket switched networks 73 in the trace above, there are 14 routers between the source and the destination. most of these routers have a name, and all of them have addresses. for example, the name of router 4 is core1rtet520.gw.umass.edu and its address is 128.119.0.9. looking at the data provided for this same router, we see that in the first of the three trials the roundtrip delay between the source and the router was 0.351 msec. the roundtrip delays for the subsequent two trials were 0.392 and 0.380 msec. these roundtrip delays include all of the delays just discussed, including transmission delays, propagation delays, router processing delays, and queuing delay. because the queuing delay is varying with time, the roundtrip delay of packet n sent to a router n can sometimes be longer than the roundtrip delay of packet n1 sent to router n1. indeed, we observe this phenomenon in the above example the delay to router 12 is smaller than the delay to router 11! also note the big increase in the roundtrip delay when going from router 7 to router 8. this is due to a transatlantic fiberoptic link between routers 7 and 8, giving rise to a relatively large propagation delay. there are a number of free software programs that provide a graphical interface to traceroute; one of our favorites is pingplotter pingplotter 2020. end system, application, and other delays in addition to processing, transmission, and propagation delays, there can be additional significant delays in the end systems. for example, an end system wanting to transmit a packet into a shared medium e.g., as in a wifi or cable modem scenario may purposefully delay its transmission
as part of its protocol for sharing the medium with other end systems; well consider such protocols in detail in chapter 6. another important delay is media packetization delay, which is present in voiceoverip voip applications. in voip, the sending side must first fill a packet with encoded digitized speech before passing the packet to the internet. this time to fill a packetcalled the packetization delaycan be significant and can impact the userperceived quality of a voip call. this issue will be further explored in a homework problem at the end of this chapter. 1.4.4 throughput in computer networks in addition to delay and packet loss, another critical performance measure in computer networks is endtoend throughput. to define throughput, consider transferring a large file from host a to host b across a computer network. this transfer might be, for example, a large video clip from one computer to another. the instantaneous throughput at any instant of time is the rate in bitssec at which host b is receiving the file. many applications display the instantaneous throughput during downloads in the user interfaceperhaps you have observed this before! you might like to try m01_kuro5469_08_ge_c01.indd 73 08052021 1350 74 chapter 1 computer networks and the internet measuring the endtoend delay and download throughput between your and servers around the internet using the speedtest application speedtest 2020. if the file consists of f bits and the transfer takes t seconds for host b to receive all f bits, then the average throughput of the file transfer is ft bitssec. for some applications, such as internet telephony, it is desirable to have a low delay and an instantaneous throughput consistently above some threshold for example, over 24 kbps for some internet telephony applications and over 256 kbps for some realtime video applications. for other applications, including those involving file transfers, delay is not critical, but it is desirable to have the highest possible throughput. to gain further insight into the important concept of throughput, lets consider a few examples. figure 1.19a shows two end systems, a server and a client, connected by two communication links and a router. consider the throughput for a file transfer from the server to the client. let rs denote the rate of the link between the server and the router; and rc denote the rate of the link between the router and the client. suppose that the only bits being sent in the entire network are those from the server to the client. we now ask, in this ideal scenario, what is the server toclient throughput? to answer this question, we may think of bits as fluid and communication links as pipes. clearly, the server cannot pump bits through its link at a rate faster than rs bps; and the router cannot forward bits at a rate faster than rc bps. if rs6rc, then the bits pumped by the server will flow right through the router and arrive at the client at a rate of rs bps, giving a
throughput of rs bps. if, on the other hand, rc6rs, then the router will not be able to forward bits as quickly as it receives them. in this case, bits will only leave the router at rate rc, giving an end toend throughput of rc. note also that if bits continue to arrive at the router at rate rs, and continue to leave the router at rc, the backlog of bits at the router waiting for transmission to the client will grow and growa most undesirable situation! figure 1.19 throughput for a file transfer from server to clientserverrs r1 r2 rnrc client servera. b.client m01_kuro5469_08_ge_c01.indd 74 08052021 1350 1.4 dela y, loss, and throughput in p acket switched networks 75 thus, for this simple twolink network, the throughput is min rc, rs, that is, it is the transmission rate of the bottleneck link. having determined the throughput, we can now approximate the time it takes to transfer a large file of f bits from server to cli ent as fmin rs, rc. for a specific example, suppose that you are downloading an mp3 file of f 32 million bits, the server has a transmission rate of rs2 mbps, and you have an access link of rc1 mbps. the time needed to transfer the file is then 32 seconds. of course, these expressions for throughput and transfer time are only approximations, as they do not account for storeandforward and processing delays as well as protocol issues. figure 1.19b now shows a network with n links between the server and the client, with the transmission rates of the n links being r1, r2, c, rn. applying the same analysis as for the twolink network, we find that the throughput for a file transfer from server to client is min r1, r2, c, rn, which is once again the trans mission rate of the bottleneck link along the path between server and client. now consider another example motivated by todays internet. figure 1.20a shows two end systems, a server and a client, connected to a computer network. consider the throughput for a file transfer from the server to the client. the server is connected to the network with an access link of rate rs and the client is connected to the network with an access link of rate rc. now suppose that all the links in the core of the communication network have very high transmission rates, much higher than rs and rc. indeed, today, the core of the internet is overprovisioned with high speed links that experience little congestion. also suppose that the only bits being sent in the entire network are those from the server to the client. because the core of the computer network is like a wide pipe in this example, the rate at which bits can flow from source to destination is again the minimum of rs and rc, that is, throughput minrs, rc. therefore, the constraining factor for throughput in todays internet is typically the access network.
for a final example, consider figure 1.20b in which there are 10 servers and 10 clients connected to the core of the computer network. in this example, there are 10 simultaneous downloads taking place, involving 10 clientserver pairs. suppose that these 10 downloads are the only traffic in the network at the current time. as shown in the figure, there is a link in the core that is traversed by all 10 downloads. denote r for the transmission rate of this link r . lets suppose that all server access links have the same rate rs, all client access links have the same rate rc, and the transmission rates of all the links in the coreexcept the one common link of rate rare much larger than rs, rc, and r . now we ask, what are the throughputs of the downloads? clearly, if the rate of the common link, r , is largesay a hundred times larger than both rs and rcthen the throughput for each download will once again be min rs, rc. but what if the rate of the common link is of the same order as rs and rc? what will the throughput be in this case? lets take a look at a spe cific example. suppose rs2 mbps, rc1 mbps, r5 mbps, and the com mon link divides its transmission rate equally among the 10 downloads. then the m01_kuro5469_08_ge_c01.indd 75 08052021 1350 76 chapter 1 computer networks and the internet bottleneck for each download is no longer in the access network, but is now instead the shared link in the core, which only provides each download with 500 kbps of throughput. thus, the endtoend throughput for each download is now reduced to 500 kbps. the examples in figure 1.19 and figure 1.20a show that throughput depends on the transmission rates of the links over which the data flows. we saw that when there is no other intervening traffic, the throughput can simply be approximated as the minimum transmission rate along the path between source and destination. the example in figure 1.20b shows that more generally the throughput depends not only on the transmission rates of the links along the path, but also on the intervening traffic. in particular, a link with a high transmission rate may nonetheless be the bottleneck link for a file transfer if many other data flows are also passing through that link. we will examine throughput in computer networks more closely in the homework problems and in the subsequent chapters.figure 1.20 endtoend throughput a client downloads a file from server; b 10 clients downloading with 10 serversserver rs rc a. b.client 10 clients10 servers bottleneck link ofcapacity r m01_kuro5469_08_ge_c01.indd 76 08052021 1350 1.5 protocol la yers and their ser vice models 77 1.5 protocol layers and their service models from our discussion thus far, it is apparent that the internet is an extremely com plicated system. we have seen that there are many pieces to the internet numerous applications and protocols, various
types of end systems, packet switches, and various types of linklevel media. given this enormous complexity, is there any hope of organizing a network architecture, or at least our discussion of network architecture? fortunately, the answer to both questions is yes. 1.5.1 layered architecture before attempting to organize our thoughts on internet architecture, lets look for a human analogy. actually, we deal with complex systems all the time in our everyday life. imagine if someone asked you to describe, for example, the airline system. how would you find the structure to describe this complex system that has ticketing agents, baggage checkers, gate personnel, pilots, airplanes, air traffic control, and a worldwide system for routing airplanes? one way to describe this system might be to describe the series of actions you take or others take for you when you fly on an airline. you purchase your ticket, check your bags, go to the gate, and eventually get loaded onto the plane. the plane takes off and is routed to its destination. after your plane lands, you deplane at the gate and claim your bags. if the trip was bad, you complain about the flight to the ticket agent getting nothing for your effort. this scenario is shown in figure 1.21. figure 1.21 taking an airplane trip actionsticket purchase baggage check gates load runway takeof f airplane routingticket complain baggage claim gates unload runway landing airplane routing airplane routing m01_kuro5469_08_ge_c01.indd 77 08052021 1350 78 chapter 1 computer networks and the internet already, we can see some analogies here with computer networking you are being shipped from source to destination by the airline; a packet is shipped from source host to destination host in the internet. but this is not quite the analogy we are after. we are looking for some structure in figure 1.21. looking at figure 1.21, we note that there is a ticketing function at each end; there is also a baggage function for alreadyticketed passengers, and a gate function for alreadyticketed and alreadybaggagechecked passengers. for passengers who have made it through the gate that is, passengers who are already ticketed, baggagechecked, and through the gate, there is a takeoff and landing function, and while in flight, there is an airplanerouting function. this suggests that we can look at the functionality in figure 1.21 in a horizontal manner, as shown in figure 1.22. figure 1.22 has divided the airline functionality into layers, providing a frame work in which we can discuss airline travel. note that each layer, combined with the layers below it, implements some functionality, some service. at the ticketing layer and below, airlinecountertoairlinecounter transfer of a person is accomplished. at the baggage layer and below, baggagechecktobaggageclaim transfer of a person and bags is accomplished. note that the baggage layer provides this service only to an alreadyticketed person. at the gate layer, departuregatetoarrivalgate transfer of a person and bags is accomplished. at the takeofflanding layer, runwaytorunway transfer of people and their bags is accomplished. each layer provides its service
by 1 performing certain actions within that layer for example, at the gate layer, loading and unloading people from an airplane and by 2 using the services of the layer directly below it for example, in the gate layer, using the runwaytorunway passenger transfer service of the takeofflanding layer. a layered architecture allows us to discuss a welldefined, specific part of a large and complex system. this simplification itself is of considerable value by providing modularity, making it much easier to change the implementation of the service provided by the layer. as long as the layer provides the same service to the layer above it, and uses the same services from the layer below it, the remainder of the system remains unchanged when a layers implementation is changed. note figure 1.22 horizontal layering of airline functionalityticket purchase baggage check gates load runway takeof f airplane routing airplane routing airplane routingticket complain baggage claim gates unload runway landing airplane routingticket baggagegatetakeof flanding airplane r outing arrival airport departur e airport intermediate air trafÔ¨Åc contr ol centers m01_kuro5469_08_ge_c01.indd 78 08052021 1350 1.5 protocol la yers and their ser vice models 79 that changing the implementation of a service is very different from changing the service itself! for example, if the gate functions were changed for instance, to have people board and disembark by height, the remainder of the airline system would remain unchanged since the gate layer still provides the same function loading and unloading people; it simply implements that function in a different manner after the change. for large and complex systems that are constantly being updated, the ability to change the implementation of a service without affecting other components of the system is another important advantage of layering. protocol layering but enough about airlines. lets now turn our attention to network protocols. to provide structure to the design of network protocols, network designers organize protocolsand the network hardware and software that implement the protocolsin layers. each protocol belongs to one of the layers, just as each function in the airline architecture in figure 1.22 belonged to a layer. we are again interested in the services that a layer offers to the layer abovethe socalled service model of a layer. just as in the case of our airline example, each layer provides its service by 1 performing certain actions within that layer and by 2 using the services of the layer directly below it. for example, the services provided by layer n may include reliable delivery of messages from one edge of the network to the other. this might be implemented by using an unreliable edgetoedge message delivery service of layer n1, and adding layer n functionality to detect and retransmit lost messages. a protocol layer can be implemented in software, in hardware, or in a combina tion of the two. applicationlayer protocolssuch as http and smtpare almost always implemented in software in the end systems; so are transportlayer protocols. because the physical layer and data link layers are responsible for
handling communication over a specific link, they are typically implemented in a network interface card for example, ethernet or wifi interface cards associated with a given link. the network layer is often a mixed implementation of hardware and software. also note that just as the functions in the layered airline architecture were distributed among the various airports and flight control centers that make up the system, so too is a layer n protocol distributed among the end systems, packet switches, and other com ponents that make up the network. that is, theres often a piece of a layer n protocol in each of these network components. protocol layering has conceptual and structural advantages rfc 3439. as we have seen, layering provides a structured way to discuss system components. modularity makes it easier to update system components. we mention, however, that some researchers and networking engineers are vehemently opposed to layering wakeman 1992. one potential drawback of layering is that one layer may duplicate lowerlayer functionality. for example, many protocol stacks provide error recovery on both a perlink basis and an endtoend basis. a second potential drawback is that functionality at one layer may need information for example, a timestamp value that is present only in another layer; this violates the goal of separation of layers. m01_kuro5469_08_ge_c01.indd 79 08052021 1350 80 chapter 1 computer networks and the internet when taken together, the protocols of the various layers are called the protocol stack. the internet protocol stack consists of five layers the physical, link, network, transport, and application layers, as shown in figure 1.23. if you examine the table of contents, you will see that we have roughly organized this book using the layers of the internet protocol stack. we take a topdown approach, first covering the application layer and then proceeding downward. application layer the application layer is where network applications and their applicationlayer protocols reside. the internets application layer includes many protocols, such as the http protocol which provides for web document request and transfer, smtp which provides for the transfer of email messages, and ftp which provides for the transfer of files between two end systems. well see that certain network functions, such as the translation of humanfriendly names for internet end systems like www.ietf.org to a 32bit network address, are also done with the help of a specific applicationlayer protocol, namely, the domain name system dns. well see in chapter 2 that it is very easy to create and deploy our own new applicationlayer protocols. an applicationlayer protocol is distributed over multiple end systems, with the application in one end system using the protocol to exchange packets of information with the application in another end system. well refer to this packet of information at the application layer as a message. transport layer the internets transport layer transports applicationlayer messages between application endpoints. in the internet, there are two transport protocols, tcp and udp, either of which can transport applicationlayer messages. tcp provides a connectionoriented service to its applications.
this service includes guaranteed delivery of applicationlayer figure 1.23 the internet protocol stacktransportapplication network link physical fivelayer internet protocol stack m01_kuro5469_08_ge_c01.indd 80 08052021 1350 1.5 protocol la yers and their ser vice models 81 messages to the destination and flow control that is, senderreceiver speed matching. tcp also breaks long messages into shorter segments and provides a congestioncontrol mechanism, so that a source throttles its transmission rate when the network is congested. the udp protocol provides a connectionless service to its applications. this is a nofrills service that provides no reliability, no flow control, and no congestion control. in this book, well refer to a transportlayer packet as a segment. network layer the internets network layer is responsible for moving networklayer packets known as datagrams from one host to another. the internet transportlayer protocol tcp or udp in a source host passes a transportlayer segment and a destination address to the network layer, just as you would give the postal service a letter with a destination address. the network layer then provides the service of delivering the segment to the transport layer in the destination host. the internets network layer includes the celebrated ip protocol, which defines the fields in the datagram as well as how the end systems and routers act on these fields. there is only one ip protocol, and all internet components that have a network layer must run the ip protocol. the internets network layer also contains routing protocols that determine the routes that datagrams take between sources and destinations. the internet has many routing protocols. as we saw in section 1.3, the internet is a network of networks, and within a network, the network administrator can run any routing protocol desired. although the network layer contains both the ip protocol and numerous routing protocols, it is often simply referred to as the ip layer, reflecting the fact that ip is the glue that binds the internet together. link layer the internets network layer routes a datagram through a series of routers between the source and destination. to move a packet from one node host or router to the next node in the route, the network layer relies on the services of the link layer. in particular, at each node, the network layer passes the datagram down to the link layer, which delivers the datagram to the next node along the route. at this next node, the link layer passes the datagram up to the network layer. the services provided by the link layer depend on the specific linklayer protocol that is employed over the link. for example, some linklayer protocols provide reliable delivery, from transmitting node, over one link, to receiving node. note that this reliable delivery service is different from the reliable delivery service of tcp, which provides reliable delivery from one end system to another. examples of linklayer protocols include ethernet, wifi, and the cable access networks docsis protocol. as datagrams typically need to traverse several links to travel from source to destination,
a datagram may be handled by different linklayer protocols at different links along its route. for example, a datagram may be handled by ethernet on one link and by ppp on m01_kuro5469_08_ge_c01.indd 81 08052021 1350 82 chapter 1 computer networks and the internet the next link. the network layer will receive a different service from each of the dif ferent linklayer protocols. in this book, well refer to the linklayer packets as frames. physical layer while the job of the link layer is to move entire frames from one network element to an adjacent network element, the job of the physical layer is to move the individual bits within the frame from one node to the next. the protocols in this layer are again link dependent and further depend on the actual transmission medium of the link for example, twistedpair copper wire, singlemode fiber optics. for example, ethernet has many physicallayer protocols one for twistedpair copper wire, another for coaxial cable, another for fiber, and so on. in each case, a bit is moved across the link in a different way. 1.5.2 encapsulation figure 1.24 shows the physical path that data takes down a sending end systems protocol stack, up and down the protocol stacks of an intervening linklayer switch figure 1.24 hosts, routers, and linklayer switches; each contains a different set of layers, reflecting their differences in functionalitym m m mht ht hthn hn hl ht hn hl linklayer switch routerapplication transport network link physicalmessage segment datagram frame m m m mht ht hthn hn hllink physicalsource network link physicaldestination application transport network link physicalmh t hn hl m ht hn mh t hn m ht hn hl mh t hn hl m m01_kuro5469_08_ge_c01.indd 82 08052021 1350 1.5 protocol la yers and their ser vice models 83 and router, and then up the protocol stack at the receiving end system. as we dis cuss later in this book, routers and linklayer switches are both packet switches. similar to end systems, routers and linklayer switches organize their networking hardware and software into layers. but routers and linklayer switches do not implement all of the layers in the protocol stack; they typically implement only the bottom layers. as shown in figure 1.24, linklayer switches implement layers 1 and 2; routers implement layers 1 through 3. this means, for example, that internet routers are capable of implementing the ip protocol a layer 3 protocol, while linklayer switches are not. well see later that while linklayer switches do not recognize ip addresses, they are capable of recognizing layer 2 addresses, such as ethernet addresses. note that hosts implement all five layers; this is consistent with the view that the internet architecture puts much of its complexity at the edges of the network. figure 1.24 also illustrates the important concept of encapsulation. at the sending host, an applicationlayer message m in figure 1.24 is passed to the transport layer. in the simplest case, the transport layer takes the message and appends additional information socalled
transportlayer header information, ht in figure 1.24 that will be used by the receiverside transport layer. the applicationlayer message and the transportlayer header information together constitute the transportlayer segment. the transportlayer segment thus encapsulates the applicationlayer message. the added information might include information allowing the receiverside transport layer to deliver the message up to the appropriate application, and errordetection bits that allow the receiver to determine whether bits in the message have been changed in route. the transport layer then passes the segment to the network layer, which adds networklayer header information hn in figure 1.24 such as source and destination end system addresses, creating a networklayer datagram. the datagram is then passed to the link layer, which of course! will add its own linklayer header information and create a linklayer frame. thus, we see that at each layer, a packet has two types of fields header fields and a payload field. the payload is typically a packet from the layer above. a useful analogy here is the sending of an interoffice memo from one corpo rate branch office to another via the public postal service. suppose alice, who is in one branch office, wants to send a memo to bob, who is in another branch office. the memo is analogous to the applicationlayer message. alice puts the memo in an interoffice envelope with bobs name and department written on the front of the envelope. the interoffice envelope is analogous to a transportlayer seg mentit contains header information bobs name and department number and it encapsulates the applicationlayer message the memo. when the sending branchoffice mailroom receives the interoffice envelope, it puts the interoffice envelope inside yet another envelope, which is suitable for sending through the public postal service. the sending mailroom also writes the postal address of the sending and receiving branch offices on the postal envelope. here, the postal envelope m01_kuro5469_08_ge_c01.indd 83 08052021 1350 84 chapter 1 computer networks and the internet is analogous to the datagramit encapsulates the transportlayer segment the interoffice envelope, which encapsulates the original message the memo. the postal service delivers the postal envelope to the receiving branchoffice mailroom. there, the process of deencapsulation is begun. the mailroom extracts the interoffice memo and forwards it to bob. finally, bob opens the envelope and removes the memo. the process of encapsulation can be more complex than that described above. for example, a large message may be divided into multiple transportlayer segments which might themselves each be divided into multiple networklayer datagrams. at the receiving end, such a segment must then be reconstructed from its constituent datagrams. 1.6 networks under attack the internet has become mission critical for many institutions today, including large and small companies, universities, and government agencies. many individuals also rely on the internet for many of their professional, social, and personal activities. billions of things, including wearables and home devices, are currently being connected to the internet. but behind all this utility and excitement, there is a dark side, a side where
bad guys attempt to wreak havoc in our daily lives by damaging our internetconnected computers, violating our privacy, and rendering inoperable the internet services on which we depend. the field of network security is about how the bad guys can attack computer networks and about how we, soontobe experts in computer networking, can defend networks against those attacks, or better yet, design new architectures that are immune to such attacks in the first place. given the frequency and variety of existing attacks as well as the threat of new and more destructive future attacks, network security has become a central topic in the field of computer networking. one of the features of this textbook is that it brings network security issues to the forefront. since we dont yet have expertise in computer networking and internet pro tocols, well begin here by surveying some of todays more prevalent securityrelated problems. this will whet our appetite for more substantial discussions in the upcoming chapters. so we begin here by simply asking, what can go wrong? how are computer networks vulnerable? what are some of the more prevalent types of attacks today? the bad guys can put malware into your host via the internet we attach devices to the internet because we want to receivesend data fromto the internet. this includes all kinds of good stuff, including instagram posts, internet m01_kuro5469_08_ge_c01.indd 84 08052021 1350 1.6 networks under a ttack 85 search results, streaming music, video conference calls, streaming movies, and so on. but, unfortunately, along with all that good stuff comes malicious stuff collectively known as malwarethat can also enter and infect our devices. once malware infects our device it can do all kinds of devious things, including deleting our files and installing spyware that collects our private information, such as social security numbers, passwords, and keystrokes, and then sends this over the internet, of course! back to the bad guys. our compromised host may also be enrolled in a network of thousands of similarly compromised devices, collectively known as a botnet, which the bad guys control and leverage for spam email distribution or distributed denialofservice attacks soon to be discussed against targeted hosts. much of the malware out there today is selfreplicating once it infects one host, from that host it seeks entry into other hosts over the internet, and from the newly infected hosts, it seeks entry into yet more hosts. in this manner, self replicating mal ware can spread exponentially fast. the bad guys can attack servers and network infrastructure another broad class of security threats are known as denialofservice dos attacks. as the name suggests, a dos attack renders a network, host, or other piece of infrastructure unusable by legitimate users. web servers, email servers, dns servers discussed in chapter 2, and institutional networks can all be subject to dos attacks. the site digital attack map allows use to visualize the top daily dos attacks worldwide dam 2020. most internet dos attacks fall into one of three categories vulnerability
attack. this involves sending a few wellcrafted messages to a vulnerable application or operating system running on a targeted host. if the right sequence of packets is sent to a vulnerable application or operating system, the service can stop or, worse, the host can crash. bandwidth flooding. the attacker sends a deluge of packets to the targeted hostso many packets that the targets access link becomes clogged, preventing legitimate packets from reaching the server. connection flooding. the attacker establishes a large number of halfopen or fully open tcp connections tcp connections are discussed in chapter 3 at the target host. the host can become so bogged down with these bogus connections that it stops accepting legitimate connections. lets now explore the bandwidthflooding attack in more detail. recalling our delay and loss analysis discussion in section 1.4.2, its evident that if the server has an access rate of r bps, then the attacker will need to send traffic at a rate of approximately r bps to cause damage. if r is very large, a single attack source may not be able to generate enough traffic to harm the server. furthermore, if all m01_kuro5469_08_ge_c01.indd 85 08052021 1350 86 chapter 1 computer networks and the internet the traffic emanates from a single source, an upstream router may be able to detect the attack and block all traffic from that source before the traffic gets near the server. in a distributed dos ddos attack, illustrated in figure 1.25, the attacker controls multiple sources and has each source blast traffic at the target. with this approach, the aggregate traffic rate across all the controlled sources needs to be approximately r to cripple the service. ddos attacks leveraging botnets with thou sands of comprised hosts are a common occurrence today dam 2020. ddos attacks are much harder to detect and defend against than a dos attack from a single host. we encourage you to consider the following question as you work your way through this book what can computer network designers do to defend against dos attacks? we will see that different defenses are needed for the three types of dos attacks. the bad guys can sniff packets many users today access the internet via wireless devices, such as wificonnected laptops or handheld devices with cellular internet connections covered in chapter 7. while ubiquitous internet access is extremely convenient and enables marvelous new applications for mobile users, it also creates a major security vulnerabilityby placing a passive receiver in the vicinity of the wireless transmitter, that receiver figure 1.25 a distributed denialofservice attackattackerstart attackzombie zombie zombievictim zombiezombie m01_kuro5469_08_ge_c01.indd 86 08052021 1350 1.6 networks under a ttack 87 can obtain a copy of every packet that is transmitted! these packets can contain all kinds of sensitive information, including passwords, social security numbers, trade secrets, and private personal messages. a passive receiver that records a copy of every packet that flies by is called a packet sniffer. sniffers can be deployed in wired environments as well. in wired
broadcast environments, as in many ethernet lans, a packet sniffer can obtain copies of broadcast packets sent over the lan. as described in section 1.2, cable access technologies also broadcast packets and are thus vulnerable to sniffing. furthermore, a bad guy who gains access to an institutions access router or access link to the internet may be able to plant a sniffer that makes a copy of every packet going tofrom the organization. sniffed packets can then be analyzed offline for sensitive information. packetsniffing software is freely available at various web sites and as commer cial products. professors teaching a networking course have been known to assign lab exercises that involve writing a packetsniffing and applicationlayer data reconstruction program. indeed, the wireshark wireshark 2020 labs associated with this text see the introductory wireshark lab at the end of this chapter use exactly such a packet sniffer! because packet sniffers are passivethat is, they do not inject packets into the channelthey are difficult to detect. so, when we send packets into a wireless channel, we must accept the possibility that some bad guy may be recording copies of our packets. as you may have guessed, some of the best defenses against packet sniffing involve cryptography. we will examine cryptography as it applies to network security in chapter 8. the bad guys can masquerade as someone you trust it is surprisingly easy you will have the knowledge to do so shortly as you proceed through this text! to create a packet with an arbitrary source address, packet content, and destination address and then transmit this handcrafted packet into the internet, which will dutifully forward the packet to its destination. imagine the unsuspecting receiver say an internet router who receives such a packet, takes the false source address as being truthful, and then performs some command embedded in the packets contents say modifies its forwarding table. the ability to inject packets into the internet with a false source address is known as ip spoofing, and is but one of many ways in which one user can masquerade as another user. to solve this problem, we will need endpoint authentication, that is, a mech anism that will allow us to determine with certainty if a message originates from where we think it does. once again, we encourage you to think about how this can be done for network applications and protocols as you progress through the chapters of this book. we will explore mechanisms for endpoint authentication in chapter 8. m01_kuro5469_08_ge_c01.indd 87 08052021 1350 88 chapter 1 computer networks and the internet in closing this section, its worth considering how the internet got to be such an insecure place in the first place. the answer, in essence, is that the internet was originally designed to be that way, based on the model of a group of mutually trusting users attached to a transparent network blumenthal 2001a model in which by definition there is no need for security. many aspects of the original internet architecture
deeply reflect this notion of mutual trust. for example, the ability for one user to send a packet to any other user is the default rather than a requestedgranted capability, and user identity is taken at declared face value, rather than being authenticated by default. but todays internet certainly does not involve mutually trusting users. none theless, todays users still need to communicate when they dont necessarily trust each other, may wish to communicate anonymously, may communicate indirectly through third parties e.g., web caches, which well study in chapter 2, or mobilityassisting agents, which well study in chapter 7, and may distrust the hardware, software, and even the air through which they communicate. we now have many securityrelated challenges before us as we progress through this book we should seek defenses against sniffing, endpoint masquerading, maninthemiddle attacks, ddos attacks, malware, and more. we should keep in mind that communication among mutually trusted users is the exception rather than the rule. welcome to the world of modern computer networking! 1.7 history of computer networking and the internet sections 1.1 through 1.6 presented an overview of the technology of computer net working and the internet. you should know enough now to impress your family and friends! however, if you really want to be a big hit at the next cocktail party, you should sprinkle your discourse with tidbits about the fascinating history of the internet segaller 1998. 1.7.1 the development of packet switching 19611972 the field of computer networking and todays internet trace their beginnings back to the early 1960s, when the telephone network was the worlds dominant communication network. recall from section 1.3 that the telephone network uses circuit switching to transmit information from a sender to a receiveran appropriate choice given that voice is transmitted at a constant rate between sender and receiver. given the increasing importance of computers in the early 1960s and the advent of timeshared computers, it was perhaps natural to consider how to hook computers together so that they could be shared among geographically m01_kuro5469_08_ge_c01.indd 88 08052021 1350 1.7 histor y of c omputer networking and the internet 89 distributed users. the traffic generated by such users was likely to be bursty intervals of activity, such as the sending of a command to a remote computer, followed by periods of inactivity while waiting for a reply or while contemplating the received response. three research groups around the world, each unaware of the others work leiner 1998, began inventing packet switching as an efficient and robust alternative to circuit switching. the first published work on packetswitching techniques was that of leonard kleinrock kleinrock 1961; kleinrock 1964, then a graduate student at mit. using queuing theory, kleinrocks work elegantly demonstrated the effectiveness of the packetswitching approach for bursty traffic sources. in 1964, paul baran baran 1964 at the rand institute had begun investigating the use of packet switching for secure voice over military networks, and at the national physical laboratory in england, donald davies and roger scantlebury were
also developing their ideas on packet switching. the work at mit, rand, and the npl laid the foundations for todays inter net. but the internet also has a long history of a letsbuilditanddemonstrateit attitude that also dates back to the 1960s. j. c. r. licklider dec 1990 and lawrence roberts, both colleagues of kleinrocks at mit, went on to lead the computer science program at the advanced research projects agency arpa in the united states. roberts published an overall plan for the arpanet roberts 1967, the first packetswitched computer network and a direct ancestor of todays public internet. on labor day in 1969, the first packet switch was installed at ucla under kleinrocks supervision, and three additional packet switches were installed shortly thereafter at the stanford research institute sri, uc santa barbara, and the university of utah figure 1.26. the fledgling precursor to the internet was four nodes large by the end of 1969. kleinrock recalls the very first use of the network to perform a remote login from ucla to sri, crashing the system kleinrock 2004. by 1972, arpanet had grown to approximately 15 nodes and was given its first public demonstration by robert kahn. the first hosttohost protocol between arpanet end systems, known as the networkcontrol protocol ncp, was completed rfc 001. with an endtoend protocol available, applications could now be written. ray tomlinson wrote the first email program in 1972. 1.7.2 proprietary networks and internetworking 19721980 the initial arpanet was a single, closed network. in order to communicate with an arpanet host, one had to be actually attached to another arpanet imp. in the early to mid1970s, additional standalone packetswitching networks besides arpanet came into being alohanet, a microwave network linking universities on the hawaiian islands abramson 1970, as well as darpas packetsatellite rfc 829 and packetradio networks kahn 1978; telenet, a bbn commercial packet switching m01_kuro5469_08_ge_c01.indd 89 08052021 1350 90 chapter 1 computer networks and the internet network based on arpanet technology; cyclades, a french packetswitching net work pioneered by louis pouzin think 2012; timesharing networks such as tymnet and the ge information services network, among others, in the late 1960s and early 1970s schwartz 1977; ibms sna 19691974, which paralleled the arpanet work schwartz 1977. the number of networks was growing. with perfect hindsight we can see that the time was ripe for developing an encompassing architecture for connecting networks together. pioneering work on interconnecting networks under the sponsorship of the defense advanced research projects agency darpa, in essence creating figure 1.26 an early packet switch mark j. terrillap photo m01_kuro5469_08_ge_c01.indd 90 08052021 1350 1.7 histor y of c omputer networking and the internet 91 a network of networks, was done by vinton cerf and robert kahn cerf 1974; the term internetting was coined to describe this work. these architectural principles were embodied in tcp. the early versions of tcp, however, were quite different from todays tcp. the early versions of tcp combined a reliable insequence delivery of data via endsystem retransmission still part of
todays tcp with forwarding functions which today are performed by ip. early experimentation with tcp, combined with the recognition of the importance of an unreliable, nonflowcontrolled, endtoend transport service for applications such as packetized voice, led to the separation of ip out of tcp and the development of the udp protocol. the three key internet protocols that we see todaytcp, udp, and ipwere conceptually in place by the end of the 1970s. in addition to the darpa internetrelated research, many other important net working activities were underway. in hawaii, norman abramson was developing alohanet, a packetbased radio network that allowed multiple remote sites on the hawaiian islands to communicate with each other. the aloha protocol abramson 1970 was the first multipleaccess protocol, allowing geographically distributed users to share a single broadcast communication medium a radio frequency. metcalfe and boggs built on abramsons multipleaccess protocol work when they developed the ethernet protocol metcalfe 1976 for wirebased shared broadcast networks. interestingly, metcalfe and boggs ethernet protocol was motivated by the need to connect multiple pcs, printers, and shared disks perkins 1994. twentyfive years ago, well before the pc revolution and the explosion of networks, metcalfe and boggs were laying the foundation for todays pc lans. 1.7.3 a proliferation of networks 19801990 by the end of the 1970s, approximately two hundred hosts were connected to the arpanet. by the end of the 1980s the number of hosts connected to the public internet, a confederation of networks looking much like todays internet, would reach a hundred thousand. the 1980s would be a time of tremendous growth. much of that growth resulted from several distinct efforts to create computer networks linking universities together. bitnet provided email and file transfers among several universities in the northeast. csnet computer science network was formed to link university researchers who did not have access to arpanet. in 1986, nsfnet was created to provide access to nsfsponsored supercomputing centers. starting with an initial backbone speed of 56 kbps, nsfnets backbone would be running at 1.5 mbps by the end of the decade and would serve as a primary backbone linking regional networks. in the arpanet community, many of the final pieces of todays internet archi tecture were falling into place. january 1, 1983 saw the official deployment of tcpip as the new standard host protocol for arpanet replacing the ncp protocol. the transition rfc 801 from ncp to tcpip was a flag day eventall hosts were required to transfer over to tcpip as of that day. in the late 1980s, m01_kuro5469_08_ge_c01.indd 91 08052021 1350 92 chapter 1 computer networks and the internet important extensions were made to tcp to implement hostbased congestion con trol jacobson 1988. the dns, used to map between a humanreadable internet name for example, gaia.cs.umass.edu and its 32bit ip address, was also developed rfc 1034. paralleling this development of the arpanet which was for the most part a us effort, in the early 1980s the french launched the minitel project, an ambitious plan to bring data
networking into everyones home. sponsored by the french government, the minitel system consisted of a public packetswitched network based on the x.25 protocol suite, minitel servers, and inexpensive terminals with builtin lowspeed modems. the minitel became a huge success in 1984 when the french government gave away a free minitel terminal to each french household that wanted one. minitel sites included free sitessuch as a telephone directory siteas well as private sites, which collected a usagebased fee from each user. at its peak in the mid 1990s, it offered more than 20,000 services, ranging from home banking to specialized research databases. the minitel was in a large proportion of french homes 10 years before most americans had ever heard of the internet. 1.7.4 the internet explosion the 1990s the 1990s were ushered in with a number of events that symbolized the continued evolution and the soontoarrive commercialization of the internet. arpanet, the progenitor of the internet, ceased to exist. in 1991, nsfnet lifted its restrictions on the use of nsfnet for commercial purposes. nsfnet itself would be decommissioned in 1995, with internet backbone traffic being carried by commercial internet service providers. the main event of the 1990s was to be the emergence of the world wide web application, which brought the internet into the homes and businesses of millions of people worldwide. the web served as a platform for enabling and deploying hundreds of new applications that we take for granted today, including search e.g., google and bing internet commerce e.g., amazon and ebay and social networks e.g., facebook. the web was invented at cern by tim bernerslee between 1989 and 1991 bernerslee 1989, based on ideas originating in earlier work on hypertext from the 1940s by vannevar bush bush 1945 and since the 1960s by ted nelson xanadu 2012. bernerslee and his associates developed initial versions of html, http, a web server, and a browserthe four key components of the web. around the end of 1993 there were about two hundred web servers in operation, this collection of servers being just a harbinger of what was about to come. at about this time several researchers were developing web browsers with gui interfaces, including marc andreessen, who along with jim clark, formed mosaic communications, which later became netscape communications corporation cusumano 1998; quittner 1998. by 1995, university students were using netscape browsers to surf the web on a daily basis. at about this time companiesbig and smallbegan to operate m01_kuro5469_08_ge_c01.indd 92 08052021 1350 1.7 histor y of c omputer networking and the internet 93 web servers and transact commerce over the web. in 1996, microsoft started to make browsers, which started the browser war between netscape and microsoft, which microsoft won a few years later cusumano 1998. the second half of the 1990s was a period of tremendous growth and innovation for the internet, with major corporations and thousands of startups creating internet products and services. by the end of the millennium the internet was supporting hundreds of popular applications,
including four killer applications email, including attachments and webaccessible email the web, including web browsing and internet commerce instant messaging, with contact lists peertopeer file sharing of mp3s, pioneered by napster interestingly, the first two killer applications came from the research community, whereas the last two were created by a few young entrepreneurs. the period from 1995 to 2001 was a rollercoaster ride for the internet in the financial markets. before they were even profitable, hundreds of internet startups made initial public offerings and started to be traded in a stock market. many companies were valued in the billions of dollars without having any significant revenue streams. the internet stocks collapsed in 20002001, and many startups shut down. nevertheless, a number of companies emerged as big winners in the internet space, including microsoft, cisco, yahoo, ebay, google, and amazon. 1.7.5 the new millennium in the first two decades of the 21st century, perhaps no other technology has transformed society more than the internet along with internetconnected smartphones. and innovation in computer networking continues at a rapid pace. advances are being made on all fronts, including deployments of faster routers and higher transmission speeds in both access networks and in network backbones. but the following developments merit special attention since the beginning of the millennium, we have been seeing aggressive deploy ment of broadband internet access to homesnot only cable modems and dsl but also fiber to the home, and now 5g fixed wireless as discussed in section 1.2. this highspeed internet access has set the stage for a wealth of video applications, including the distribution of usergenerated video for example, youtube, ondemand streaming of movies and television shows e.g., netflix, and multiperson video conference e.g., skype, facetime, and google hangouts. the increasing ubiquity of highspeed wireless internet access is not only making it possible to remain constantly connected while on the move, but also enabling new locationspecific applications such as yelp, tinder, and waz. the number of wireless devices connecting to the internet surpassed the number of wired devices m01_kuro5469_08_ge_c01.indd 93 08052021 1350 94 chapter 1 computer networks and the internet in 2011. this highspeed wireless access has set the stage for the rapid emergence of handheld computers iphones, androids, ipads, and so on, which enjoy constant and untethered access to the internet. online social networkssuch as facebook, instagram, twitter, and wechat hugely popular in chinahave created massive people networks on top of the internet. many of these social networks are extensively used for messaging as well as photo sharing. many internet users today live primarily within one or more social networks. through their apis, the online social networks create platforms for new networked applications, including mobile payments and distributed games. as discussed in section 1.3.3, online service providers, such as google and microsoft, have deployed their own extensive private networks, which not only connect together their globally distributed data centers, but are used to bypass the internet as much as possible by peering directly with lowertier isps. as a
result, google provides search results and email access almost instantaneously, as if their data centers were running within ones own computer. many internet commerce companies are now running their applications in the cloudsuch as in amazons ec2, in microsofts azure, or in the alibaba cloud. many companies and universities have also migrated their internet applications e.g., email and web hosting to the cloud. cloud companies not only provide applications scalable computing and storage environments, but also provide the applications implicit access to their highperformance private networks. 1.8 summary in this chapter, weve covered a tremendous amount of material! weve looked at the various pieces of hardware and software that make up the internet in particular and computer networks in general. we started at the edge of the network, looking at end systems and applications, and at the transport service provided to the applications running on the end systems. we also looked at the linklayer technologies and physical media typically found in the access network. we then dove deeper inside the network, into the network core, identifying packet switching and circuit switching as the two basic approaches for transporting data through a telecommunication network, and we examined the strengths and weaknesses of each approach. we also examined the structure of the global internet, learning that the internet is a network of networks. we saw that the internets hierarchical structure, consisting of higher and lowertier isps, has allowed it to scale to include thousands of networks. m01_kuro5469_08_ge_c01.indd 94 08052021 1350 1.8 summar y 95 in the second part of this introductory chapter, we examined several topics cen tral to the field of computer networking. we first examined the causes of delay, throughput and packet loss in a packetswitched network. we developed simple quantitative models for transmission, propagation, and queuing delays as well as for throughput; well make extensive use of these delay models in the homework problems throughout this book. next we examined protocol layering and service models, key architectural principles in networking that we will also refer back to throughout this book. we also surveyed some of the more prevalent security attacks in the internet day. we finished our introduction to networking with a brief history of computer networking. the first chapter in itself constitutes a minicourse in computer networking. so, we have indeed covered a tremendous amount of ground in this first chapter! if youre a bit overwhelmed, dont worry. in the following chapters, well revisit all of these ideas, covering them in much more detail thats a promise, not a threat!. at this point, we hope you leave this chapter with a stilldeveloping intuition for the pieces that make up a network, a stilldeveloping command of the vocabulary of networking dont be shy about referring back to this chapter, and an evergrowing desire to learn more about networking. thats the task ahead of us for the rest of this book. roadmapping this book before starting any trip, you should always glance at a road map in order to become
familiar with the major roads and junctures that lie ahead. for the trip we are about to embark on, the ultimate destination is a deep understanding of the how, what, and why of computer networks. our road map is the sequence of chapters of this book 1. computer networks and the internet 2. application layer 3. transport layer 4. network layer data plane 5. network layer control plane 6. the link layer and lans 7. wireless and mobile networks 8. security in computer networks chapters 2 through 6 are the five core chapters of this book. you should notice that these chapters are organized around the top four layers of the fivelayer internet protocol. further note that our journey will begin at the top of the internet protocol stack, namely, the application layer, and will work its way downward. the rationale behind this topdown journey is that once we understand the applications, we can m01_kuro5469_08_ge_c01.indd 95 08052021 1350 96 chapter 1 computer networks and the internet understand the network services needed to support these applications. we can then, in turn, examine the various ways in which such services might be implemented by a network architecture. covering applications early thus provides motivation for the remainder of the text. the second half of the bookchapters 7 and 8zooms in on two enormously important and somewhat independent topics in modern computer networking. in chapter 7, we examine wireless and mobile networks, including wireless lans including wifi and bluetooth, cellular networks including 4g and 5g, and mobility. chapter 8, which addresses security in computer networks, first looks at the underpinnings of encryption and network security, and then we examine how the basic theory is being applied in a broad range of internet contexts. homework problems and questions chapter 1 review questions section 1.1 r1. what is the difference between a host and an end system? list several different types of end systems. is a web server an end system? r2. describe the protocol that might be used by two people having a telephonic conversation to initiate and end the conversation, i.e., the way that they talk. r3. why are standards important for protocols? section 1.2 r4. list four access technologies. classify each one as home access, enterprise access, or widearea wireless access. r5. is hfc transmission rate dedicated or shared among users? are collisions possible in a downstream hfc channel? why or why not? r6. what access network technologies would be most suitable for providing internet access in rural areas? r7. dialup modems and dsl both use the telephone line a twistedpair copper cable as their transmission medium. why then is dsl much faster than dialup access? r8. what are some of the physical media that ethernet can run over? r9. hfc, dsl, and ftth are all used for residential access. for each of these access technologies, provide a range of transmission rates and comment on whether the transmission rate is shared or dedicated. r10. describe the different wireless technologies you use during the
day and their characteristics. if you have a choice between multiple technologies, why do you prefer one over another? m01_kuro5469_08_ge_c01.indd 96 08052021 1350 homework problems and questions 97 section 1.3 r11. suppose there is exactly one packet switch between a sending host and a receiving host. the transmission rates between the sending host and the switch and between the switch and the receiving host are r1 and r2, respec tively. assuming that the switch uses storeandforward packet switching, what is the total endtoend delay to send a packet of length l? ignore queuing, propagation delay, and processing delay. r12. what advantage does a circuitswitched network have over a packetswitched net work? what advantages does tdm have over fdm in a circuitswitched network? r13. suppose users share a 2 mbps link. also suppose each user transmits contin uously at 1 mbps when transmitting, but each user transmits only 20 percent of the time. see the discussion of statistical multiplexing in section 1.3. a. when circuit switching is used, how many users can be supported? b. for the remainder of this problem, suppose packet switching is used. why will there be essentially no queuing delay before the link if two or fewer users transmit at the same time? why will there be a queuing delay if three users transmit at the same time? c. find the probability that a given user is transmitting. d. suppose now there are three users. find the probability that at any given time, all three users are transmitting simultaneously. find the fraction of time during which the queue grows. r14. why will two isps at the same level of the hierarchy often peer with each other? how does an ixp earn money? r15. why is a content provider considered a different internet entity today? how does a content provider connect to other isps? why? section 1.4 r16. consider sending a packet from a source host to a destination host over a fixed route. list the delay components in the endtoend delay. which of these delays are constant and which are variable? r17. visit the transmission versus propagation delay interactive animation at the companion website. among the rates, propagation delay, and packet sizes available, find a combination for which the sender finishes transmitting before the first bit of the packet reaches the receiver. find another combination for which the first bit of the packet reaches the receiver before the sender finishes transmitting. r18. a user can directly connect to a server through either longrange wireless or a twistedpair cable for transmitting a 1500bytes file. the transmission rates of the wireless and wired media are 2 and 100 mbps, respectively. assume that the propagation speed in air is 3108 ms, while the speed in the twisted m01_kuro5469_08_ge_c01.indd 97 08052021 1350 98 chapter 1 computer networks and the internet pair is 2108 ms. if the user is located 1 km away from the server, what is the nodal delay when using each of the two technologies? r19. suppose host a
wants to send a large file to host b. the path from host a to host b has three links, of rates r1500 kbps, r22 mbps, and r31 mbps. a. assuming no other traffic in the network, what is the throughput for the file transfer? b. suppose the file is 4 million bytes. dividing the file size by the throughput, roughly how long will it take to transfer the file to host b? c. repeat a and b, but now with r2 reduced to 100 kbps. r20. suppose end system a wants to send a large file to end system b. at a very high level, describe how end system a creates packets from the file. when one of these packets arrives to a router, what information in the packet does the router use to determine the link onto which the packet is forwarded? why is packet switching in the internet analogous to driving from one city to another and asking directions along the way? r21. visit the queuing and loss interactive animation at the companion website. what is the maximum emission rate and the minimum transmission rate? with those rates, what is the traffic intensity? run the interactive animation with these rates and determine how long it takes for packet loss to occur. then repeat the experiment a second time and determine again how long it takes for packet loss to occur. are the values different? why or why not? section 1.5 r22. if two endsystems are connected through multiple routers and the datalink level between them ensures reliable data delivery, is a transport protocol offering reliable data delivery between these two endsystems necessary? why? r23. what are the five layers in the internet protocol stack? what are the principal responsibilities of each of these layers? r24. what do encapsulation and deencapsulation mean? why are they needed in a layered protocol stack? r25. which layers in the internet protocol stack does a router process? which lay ers does a linklayer switch process? which layers does a host process? section 1.6 r26. what is selfreplicating malware? r27. describe how a botnet can be created and how it can be used for a ddos attack. r28. suppose alice and bob are sending packets to each other over a computer network. suppose trudy positions herself in the network so that she can capture all the packets sent by alice and send whatever she wants to bob; she can also capture all the packets sent by bob and send whatever she wants to alice. list some of the malicious things trudy can do from this position. m01_kuro5469_08_ge_c01.indd 98 08052021 1350 problems 99 problems p1. design and describe an applicationlevel protocol to be used between an automatic teller machine and a banks centralized computer. your protocol should allow a users card and password to be verified, the account balance which is maintained at the centralized computer to be queried, and an account withdrawal to be made that is, money disbursed to the user. your
protocol entities should be able to handle the alltoocommon case in which there is not enough money in the account to cover the withdrawal. specify your protocol by listing the messages exchanged and the action taken by the automatic teller machine or the banks centralized computer on transmission and receipt of messages. sketch the operation of your protocol for the case of a simple withdrawal with no errors, using a diagram similar to that in figure 1.2. explicitly state the assumptions made by your protocol about the underlying endtoend transport service. p2. equation 1.1 gives a formula for the endtoend delay of sending one packet of length l over n links of transmission rate r. generalize this formula for sending p such packets backtoback over the n links. p3. consider an application that transmits data at a steady rate for example, the sender generates an nbit unit of data every k time units, where k is small and fixed. also, when such an application starts, it will continue running for a relatively long period of time. answer the following questions, briefly justifying your answer a. would a packetswitched network or a circuitswitched network be more appropriate for this application? why? b. suppose that a packetswitched network is used and the only traffic in this network comes from such applications as described above. furthermore, assume that the sum of the application data rates is less than the capacities of each and every link. is some form of congestion control needed? why? p4. consider the circuitswitched network in figure 1.13. recall that there are four circuits on each link. label the four switches a, b, c, and d, going in the clockwise direction. a. what is the maximum number of simultaneous connections that can be in progress at any one time in this network? b. suppose that all connections are between switches a and c. what is the maximum number of simultaneous connections that can be in progress? c. suppose we want to make four connections between switches a and c, and another four connections between switches b and d. can we route these calls through the four links to accommodate all eight connections? m01_kuro5469_08_ge_c01.indd 99 08052021 1350 100 chapter 1 computer networks and the internet p5. review the carcaravan analogy in section 1.4. assume a propagation speed of 100 kmhour. a. suppose the caravan travels 175 km, beginning in front of one tollbooth, passing through a second tollbooth, and finishing just after a third tollbooth. what is the endtoend delay? b. repeat a, now assuming that there are eight cars in the caravan instead of ten. p6. this elementary problem begins to explore propagation delay and transmission delay, two central concepts in data networking. consider two hosts, a and b, connected by a single link of rate r bps. suppose that the two hosts are separated by m meters, and suppose the propagation speed along the link is s meterssec. host a is to send a packet of size l bits
to host b. a. express the propagation delay, dprop, in terms of m and s. b. determine the transmission time of the packet, dtrans, in terms of l and r. c. ignoring processing and queuing delays, obtain an expression for the end toend delay. d. suppose host a begins to transmit the packet at time t 0. at time t dtrans, where is the last bit of the packet? e. suppose dprop is greater than dtrans. at time tdtrans, where is the first bit of the packet? f. suppose dprop is less than dtrans. at time tdtrans, where is the first bit of the packet? g. suppose s2.5108, l1500 bytes, and r10 mbps. find the distance m so that dprop equals dtrans. p7. in this problem, we consider sending realtime voice from host a to host b over a packetswitched network voip. host a converts analog voice to a digital 64 kbps bit stream on the fly. host a then groups the bits into 56byte packets. there is one link between hosts a and b; its transmission rate is 10 mbps and its propagation delay is 10 msec. as soon as host a gathers a packet, it sends it to host b. as soon as host b receives an entire packet, it converts the packets bits to an analog signal. how much time elapses from the time a bit is created from the original analog signal at host a until the bit is decoded as part of the analog signal at host b? p8. suppose users share a 10 mbps link. also suppose each user requires 200 kbps when transmitting, but each user transmits only 10 percent of the time. see the discussion of packet switching versus circuit switching in section 1.3. a. when circuit switching is used, how many users can be supported? b. for the remainder of this problem, suppose packet switching is used. find the probability that a given user is transmitting.exploring propagation delay and transmission delayvideonote m01_kuro5469_08_ge_c01.indd 100 08052021 1350 problems 101 c. suppose there are 120 users. find the probability that at any given time, exactly n users are transmitting simultaneously. hint use the binomial distribution. d. find the probability that there are 51 or more users transmitting simultaneously. p9. consider the discussion in section 1.3 of packet switching versus circuit switching in which an example is provided with a 1 mbps link. users are generating data at a rate of 100 kbps when busy, but are busy generating data only with probability p0.1. suppose that the 1 mbps link is replaced by a 1 gbps link. a. what is n, the maximum number of users that can be supported simultaneously under circuit switching? b. now consider packet switching and a user population of m users. give a formula in terms of p, m, n for the probability that more than n users are sending data. p10. consider the network illustrated in figure 1.16. assume the two hosts on the left of the figure start
transmitting packets of 1500 bytes at the same time towards router b. suppose the link rates between the hosts and router a is 4mbps. one link has a 6ms propagation delay and the other has a 2ms propagation delay. will queuing delay occur at router a? p11. consider the scenario in problem p10 again, but now assume the links between the hosts and router a have different rates r1 and r2 bytes in addi tion to different propagation delays d1 and d2. assume the packet lengths for the two hosts are of l bytes. for what values of the propagation delay will no queuing delay occur at router a? p12. consider a client and a server connected through one router. assume the router can start transmitting an incoming packet after receiving its first h bytes instead of the whole packet. suppose that the link rates are r bytes and that the client transmits one packet with a size of l bytes to the server. what is the endtoend delay? assume the propagation, processing, and queuing delays are negligible. generalize the previous result to a scenario where the client and the server are interconnected by n routers. p13. a suppose n packets arrive simultaneously to a link at which no packets are currently being transmitted or queued. each packet is of length l and the link has transmission rate r . what is the average queuing delay for the n packets? m01_kuro5469_08_ge_c01.indd 101 08052021 1350 102 chapter 1 computer networks and the internet b now suppose that n such packets arrive to the link every lnr seconds. what is the average queuing delay of a packet? p14. consider the queuing delay in a router buffer. let i denote traffic intensity; that is, ilar. suppose that the queuing delay takes the form ilr 1i for i61. a. provide a formula for the total delay, that is, the queuing delay plus the transmission delay. b. plot the total delay as a function of l r. p15. let a denote the rate of packets arriving at a link in packetssec, and let ¬µ denote the links transmission rate in packetssec. based on the formula for the total delay i.e., the queuing delay plus the transmission delay derived in the previous problem, derive a formula for the total delay in terms of a and ¬µ. p16. consider a router buffer preceding an outbound link. in this problem, you will use littles formula, a famous formula from queuing theory. let n denote the average number of packets in the buffer plus the packet being transmitted. let a denote the rate of packets arriving at the link. let d denote the average total delay i.e., the queuing delay plus the transmission delay experienced by a packet. littles formula is n ad. suppose that on average, the buffer contains 100 packets, and the average packet queuing delay is 20 msec. the links transmission rate is 100 packetssec. using littles formula, what is the average packet arrival rate, assuming
there is no packet loss? p17. consider the network illustrated in figure 1.12. would equation 1.2 hold in such a scenario? if so, under which conditions? if not, why? assume n is the number of links between a source and a destination in the figure. p18. perform a traceroute between source and destination on the same continent at three different hours of the day. a. find the average and standard deviation of the roundtrip delays at each of the three hours. b. find the number of routers in the path at each of the three hours. did the paths change during any of the hours? c. try to identify the number of isp networks that the traceroute packets pass through from source to destination. routers with similar names andor similar ip addresses should be considered as part of the same isp. in your experiments, do the largest delays occur at the peering interfaces between adjacent isps? d. repeat the above for a source and destination on different continents. compare the intracontinent and intercontinent results.using traceroute to discover network paths and measure network delayvideonote m01_kuro5469_08_ge_c01.indd 102 08052021 1350 problems 103 p19. metcalfes law states the value of a computer network is proportional to the square of the number of connected users of the system. let n denote the number of users in a computer network. assuming each user sends one message to each of the other users, how many messages will be sent? does your answer support metcalfes law? p20. consider the throughput example corresponding to figure 1.20b. now suppose that there are m clientserver pairs rather than 10. denote rs, rc, and r for the rates of the server links, client links, and network link. assume all other links have abundant capacity and that there is no other traffic in the network besides the traffic generated by the m clientserver pairs. derive a general expression for throughput in terms of rs, rc, r, and m. p21. assume a client and a server can connect through either network a or b in figure 1.19. assume that rircrs i, for i1, 2, ..., n . in what case will network a have a higher throughput than network b? p22. consider figure 1.19b. suppose that each link between the server and the client has a packet loss probability p, and the packet loss probabilities for these links are independent. what is the probability that a packet sent by the server is successfully received by the receiver? if a packet is lost in the path from the server to the client, then the server will retransmit the packet. on average, how many times will the server retransmit the packet in order for the client to successfully receive the packet? p23. consider figure 1.19a. assume that we know the bottleneck link along the path from the server to the client is the first link with rate rs bitssec. suppose we send a pair of packets back to back from the server to the client, and
there is no other traffic on this path. assume each packet of size l bits, and both links have the same propagation delay dprop. a. what is the packet interarrival time at the destination? that is, how much time elapses from when the last bit of the first packet arrives until the last bit of the second packet arrives? b. now assume that the second link is the bottleneck link i.e., r c6rs. is it possible that the second packet queues at the input queue of the second link? explain. now suppose that the server sends the second packet t seconds after sending the first packet. how large must t be to ensure no queuing before the second link? explain. p24. consider a user who needs to transmit 1.5 gigabytes of data to a server. the user lives in a village where only dialup access is available. as an alternative, a bus collects data from users in rural areas and transfer them to the internet through a 1 gbps link once it gets back to the city. the bus visits the village once a day and stops in front of the users house just long enough to receive the data. the bus has a 100 mbps wifi connection. suppose the average speed of the bus is 60 kmh and that the distance between the village and the city is 150 km. what is the fastest way the user can transfer the data to the server? m01_kuro5469_08_ge_c01.indd 103 08052021 1350 104 chapter 1 computer networks and the internet p25. suppose two hosts, a and b, are separated by 20,000 kilometers and are con nected by a direct link of r 5 mbps. suppose the propagation speed over the link is 2.5 108 meterssec. a. calculate the bandwidthdelay product, r dprop. b. consider sending a file of 800,000 bits from host a to host b. suppose the file is sent continuously as one large message. what is the maximum number of bits that will be in the link at any given time? c. provide an interpretation of the bandwidthdelay product. d. what is the width in meters of a bit in the link? is it longer than a football field? e. derive a general expression for the width of a bit in terms of the propagation speed s, the transmission rate r, and the length of the link m. p26. consider problem p25 but now with a link of r1 gbps. a. calculate the bandwidthdelay product, r dprop. b. consider sending a file of 800,000 bits from host a to host b. suppose the file is sent continuously as one big message. what is the maximum number of bits that will be in the link at any given time? c. what is the width in meters of a bit in the link? p27. consider the scenario illustrated in figure 1.19a. assume rs is 20 mbps, rc is 10 mbps, and the server is continuously sending traffic to the client. also assume the
router between the server and the client can buffer at most four messages. after how many messages sent by the server will packet loss starts occurring at the router? p28. generalize the result obtained in problem p27 for the case where the router can buffer m messages. p29. suppose there is a 10 mbps microwave link between a geostationary satellite and its base station on earth. every minute the satellite takes a digi tal photo and sends it to the base station. assume a propagation speed of 2.4 108 meterssec. a. what is the propagation delay of the link? b. what is the bandwidthdelay product, r dprop? c. let x denote the size of the photo. what is the minimum value of x for the microwave link to be continuously transmitting? m01_kuro5469_08_ge_c01.indd 104 08052021 1350 problems 105 p30. consider the airline travel analogy in our discussion of layering in section 1.5, and the addition of headers to protocol data units as they flow down the protocol stack. is there an equivalent notion of header information that is added to passengers and baggage as they move down the airline protocol stack? p31. in modern packetswitched networks, including the internet, the source host seg ments long, applicationlayer messages for example, an image or a music file into smaller packets and sends the packets into the network. the receiver then reassembles the packets back into the original message. we refer to this process as message segmentation. figure 1.27 illustrates the endtoend transport of a message with and without message segmentation. consider a message that is 106 bits long that is to be sent from source to destination in figure 1.27. suppose each link in the figure is 5 mbps. ignore propagation, queuing, and processing delays. a. consider sending the message from source to destination without message segmentation. how long does it take to move the message from the source host to the first packet switch? keeping in mind that each switch uses storeandforward packet switching, what is the total time to move the message from source host to destination host? b. now suppose that the message is segmented into 100 packets, with each packet being 10,000 bits long. how long does it take to move the first packet from source host to the first switch? when the first packet is being sent from the first switch to the second switch, the second packet is being sent from the source host to the first switch. at what time will the second packet be fully received at the first switch? c. how long does it take to move the file from source host to destination host when message segmentation is used? compare this result with your answer in part a and comment. figure 1.27 endtoend message transport a without message segmentation; b with message segmentationsource a. packet switch packet switch destinationmessage source b. packet switchpacket packet switch destination m01_kuro5469_08_ge_c01.indd 105 08052021 1350 106 chapter 1 computer networks and the internet d. in addition to reducing
delay, what are reasons to use message segmentation? e. discuss the drawbacks of message segmentation. p32. consider problem p31 and assume that the propagation delay is 250 ms. recalculate the total time needed to transfer the source data with and without segmentation. is segmentation more beneficial or less if there is propagation delay? p33. consider sending a large file of f bits from host a to host b. there are three links and two switches between a and b, and the links are uncongested that is, no queuing delays. host a segments the file into segments of s bits each and adds 80 bits of header to each segment, forming packets of l 80 s bits. each link has a transmission rate of r bps. find the value of s that minimizes the delay of moving the file from host a to host b. disregard propagation delay. p34. early versions of tcp combined functions for both forwarding and reliable delivery. how are these tcp variants located in the isoosi protocol stack? why were forwarding functions later separated from tcp? what were the consequences? wireshark lab tell me and i forget. show me and i remember. involve me and i understand. chinese proverb ones understanding of network protocols can often be greatly deepened by seeing them in action and by playing around with themobserving the sequence of messages exchanged between two protocol entities, delving into the details of protocol operation, causing protocols to perform certain actions, and observing these actions and their consequences. this can be done in simulated scenarios or in a real network environment such as the internet. the interactive animations at the textbook web site take the first approach. in the wireshark labs, well take the latter approach. youll run network applications in various scenarios using a computer on your desk, at home, or in a lab. youll observe the network protocols in your computer, interacting and exchanging messages with protocol entities executing elsewhere in the internet. thus, you and your computer will be an integral part of these live labs. youll observeand youll learnby doing. the basic tool for observing the messages exchanged between executing pro tocol entities is called a packet sniffer. as the name suggests, a packet sniffer pas sively copies sniffs messages being sent from and received by your computer; it also displays the contents of the various protocol fields of these captured messages. a screenshot of the wireshark packet sniffer is shown in figure 1.28. wireshark is a m01_kuro5469_08_ge_c01.indd 106 08052021 1350 wireshark lab 107 free packet sniffer that runs on windows, linuxunix, and mac computers. through out the textbook, you will find wireshark labs that allow you to explore a number of the protocols studied in the chapter. in this first wireshark lab, youll obtain and install a copy of wireshark, access a web site, and capture and examine the protocol messages being exchanged between your web browser and the web server. you can find full details about this first wireshark lab
including instructions about how to obtain and install wireshark at the web site www.pearsonglobaleditions .com.figure 1.28 a wireshark screenshot wireshark screenshot reprinted by permission of the wireshark foundation.commandmenus listing of capturedpackets details of selectedpacketheader packet contents in hexadecimaland ascii m01_kuro5469_08_ge_c01.indd 107 08052021 1350 108what made you decide to specialize in networkinginternet technology? as a phd student at mit in 1959, i looked around and found that most of my classmates were doing research in the area of information theory and coding theory that had been established by the great researcher, claude shannon. i judged that he had solved most of the important problems already. the research problems that were left were hard and seemed to me to be of lesser consequence. so i decided to launch out in a new area that no one else had yet conceived of. happily, at mit i was surrounded by many computers, and it was clear to me that, sooner or later, these machines would need to communicate with each other. at the time, there was no effective way for them to do so and that the solution to this important problem would have impact. i had an approach to this problem and so, for my phd research, i decided to create a mathematical theory to model, evaluate, design and optimize efficient and reliable data networks. what was your first job in the computer industry? what did it entail? i went to the evening session at ccny from 1951 to 1957 for my bachelors degree in electrical engineering. during the day, i worked first as a technician and then as an electrical engineer at a small, industrial electronics firm called photobell. while there, i introduced digital technology to their product line. essentially, we were using photoelec tric devices to detect the presence of certain items boxes, people, etc. and the use of a circuit known then as a bistable multivibrator was just what we needed to bring digital processing into this field of detection. these circuits happen to be the building blocks for computers, and have come to be known as flipflops or switches in todays vernacular. what was going through your mind when you sent the first hosttohost message from ucla to the stanford research institute? frankly, we had no idea of the importance of that event. we had not prepared a special message of historic significance, as did so many inventors of the past samuel morse with what hath god wrought. or alexander graham bell with watson, come here! i want you. or neal armstrong with thats one small step for a man, one giant leap for mankind. those guys were smart! they understood media and public relations. all we wanted to do was to demonstrate our ability to remotely login to the sri computer. so we typed the l, an interview with leonard kleinrock leonard kleinrock is a professor of computer science at the university of california, los angeles. in 1969, his computer at ucla became the first node of the
internet. his creation of the mathematical theory of packetswitching principles in 1961 became the technology behind the internet. he received his b.e.e. from the city college of new york ccny and his masters and phd in electrical engineering from mit. courtesy of leonard kleinrock m01_kuro5469_08_ge_c01.indd 108 08052021 1350 109 which was correctly received, we typed the o which was correctly received, and then we typed the g which caused the sri host computer to crash! so, it turned out that our message was the shortest and perhaps the most prophetic message ever, namely lo! as in lo and behold! earlier that year, i was quoted in a ucla press release saying that once the network was up and running, it would be possible to gain access to computer utilities from our homes and offices as easily as we gain access to electricity and telephone connectivity. so my vision at that time was that the internet would be ubiquitous, always on, always avail able, anyone with any device could connect from any location, and it would be invisible. however, i never anticipated that my 99yearold mother would use the internet at the same time that my 5 yearold granddaughter wasand indeed she did! what is your vision for the future of networking? the easy part of the vision is to predict the infrastructure itself. i anticipate that we will see considerable deployment of wireless and mobile devices in smart spaces to produce what i like to refer to as the invisible internet. this step will enable us to move out from the netherworld of cyberspace to the physical world of smart spaces. our environments desks, walls, vehicles, watches, belts, fingernails, bodies and so on will come alive with technology, through actuators, sensors, logic, processing, storage, cameras, microphones, speakers, displays, and communication. this embedded technology will allow our environment to provide the ip services wherever and whenever we want. when i walk into a room, the room will know i entered. i will be able to communicate with my environment naturally, as in spoken english, haptics, gestures, and eventually through braininternet interfaces; my requests will generate replies that present web pages to me from wall displays, through my eyeglasses, as speech, holograms, and so forth. looking a bit further out, i see a net working future that includes the following additional key components. i see customized intelligent software agents deployed across the network whose function it is to mine data, act on that data, observe trends, and carry out tasks dynamically and adaptively. i see the deployment of blockchain technology that provides irrefutable, immutable distributed ledgers coupled with reputation systems that provide credibility to the contents and func tionality. i see considerably more network traffic generated not so much by humans, but by the embedded devices, the intelligent software agents and the distributed ledgers. i see large collections of selforganizing systems controlling this vast, fast network. i see huge amounts of information flashing across this network instantaneously with this information undergoing enormous
processing and filtering. the invisible internet will essentially be a pervasive global nervous system . i see all these things and more as we move headlong through the twentyfirst century. the harder part of the vision is to predict the applications and services, which have consistently surprised us in dramatic ways email, search technologies, the world wide web, blogs, peertopeer networks, social networks, user generated content, sharing of m01_kuro5469_08_ge_c01.indd 109 08052021 1350 110 music, photos, and videos, etc.. these applications have come of the blue, sudden, unanticipated and explosive. what a wonderful world for the next generation to explore! what people have inspired you professionally? by far, it was claude shannon from mit, a brilliant researcher who had the ability to relate his mathematical ideas to the physical world in highly intuitive ways. he was a superb member of my phd thesis committee. do you have any advice for students entering the networkinginternet field? the internet and all that it enables is a vast new frontier, continuously full of amazing challenges. there is room for great innovation. dont be constrained by todays technology. reach out and imagine what could be and then make it happen. m01_kuro5469_08_ge_c01.indd 110 08052021 1350 111111 network applications are the raisons d√™tre of a computer networkif we couldnt conceive of any useful applications, there wouldnt be any need for networking infra structure and protocols to support them. since the internets inception, numerous useful and entertaining applications have indeed been created. these applications have been the driving force behind the internets success, motivating people in homes, schools, governments, and businesses to make the internet an integral part of their daily activities. internet applications include the classic textbased applications that became pop ular in the 1970s and 1980s text email, remote access to computers, file transfers, and newsgroups. they include the killer application of the mid1990s, the world wide web, encompassing web surfing, search, and electronic commerce. since the beginning of new millennium, new and highly compelling applications continue to emerge, including voice over ip and video conferencing such as skype, facetime, and google hangouts; user generated video such as youtube and movies on demand such as netflix; and multiplayer online games such as second life and world of warcraft. during this same period, we have seen the emergence of a new generation of social networking applicationssuch as facebook, instagram, and twitterwhich have created human networks on top of the internets network or routers and communication links. and most recently, along with the arrival of the smartphone and the ubiquity of 4g5g wireless internet access, there has been a profusion of location based mobile apps, including popular checkin, dating, and roadtraffic forecasting apps such as yelp, tinder, and waz, mobile payment apps such as wechat and apple pay and messaging apps such as wechat and whatsapp. clearly, there has been no slowing down of new and exciting internet applications. perhaps some of the readers of this text will create the next generation of killer internet applications!application layer2chapter 111
m02_kuro5469_08_ge_c02.indd 111 03052021 1550 112 chapter 2 application layer in this chapter, we study the conceptual and implementation aspects of network applications. we begin by defining key applicationlayer concepts, including net work services required by applications, clients and servers, processes, and transportlayer interfaces. we examine several network applications in detail, including the web, email, dns, peertopeer p2p file distribution, and video streaming. we then cover network application development, over both tcp and udp. in particular, we study the socket interface and walk through some simple clientserver applications in python. we also provide several fun and interesting socket programming assignments at the end of the chapter. the application layer is a particularly good place to start our study of protocols. its familiar ground. were acquainted with many of the applications that rely on the protocols well study. it will give us a good feel for what protocols are all about and will introduce us to many of the same issues that well see again when we study transport, network, and link layer protocols. 2.1 principles of network applications suppose you have an idea for a new network application. perhaps this application will be a great service to humanity, or will please your professor, or will bring you great wealth, or will simply be fun to develop. whatever the motivation may be, lets now examine how you transform the idea into a realworld network application. at the core of network application development is writing programs that run on different end systems and communicate with each other over the network. for example, in the web application there are two distinct programs that communicate with each other the browser program running in the users host desktop, laptop, tablet, smartphone, and so on; and the web server program running in the web server host. as another example, in a video on demand application such as netflix see section 2.6, there is a netflixprovided program running on the users smartphone, tablet, or computer; and a netflix server program running on the netflix server host. servers often but certainly not always are housed in a data center, as shown in figure 2.1. thus, when developing your new application, you need to write software that will run on multiple end systems. this software could be written, for example, in c, java, or python. importantly, you do not need to write software that runs on networkcore devices, such as routers or linklayer switches. even if you wanted to write application software for these networkcore devices, you wouldnt be able to do so. as we learned in chapter 1, and as shown earlier in figure 1.24, networkcore devices do not function at the application layer but instead function at lower layersspecifically at the network layer and below. this basic designnamely, confining application software to the end systemsas shown in figure 2.1, has facilitated the rapid development and deployment of a vast array of network applications. m02_kuro5469_08_ge_c02.indd 112 03052021 1550 2.1 principles of netw ork applications 113 transport network data link
physicaltransport network data link physical transport network data link physicalcontent provider networknational or global isp datacenter network datacenter networkmobile network enterprise networklocal or regional ispapplicationapplication applicationhome network figure 2.1 communication for a network application takes place between end systems at the application layer m02_kuro5469_08_ge_c02.indd 113 03052021 1550 114 chapter 2 application layer 2.1.1 network application architectures before diving into software coding, you should have a broad architectural plan for your application. keep in mind that an applications architecture is distinctly different from the network architecture e.g., the fivelayer internet architecture discussed in chapter 1. from the application developers perspective, the network architec ture is fixed and provides a specific set of services to applications. the application architecture, on the other hand, is designed by the application developer and dictates how the application is structured over the various end systems. in choosing the application architecture, an application developer will likely draw on one of the two predominant architectural paradigms used in modern network applications the clientserver architecture or the peertopeer p2p architecture. in a clientserver architecture, there is an alwayson host, called the server, which services requests from many other hosts, called clients. a classic example is the web application for which an alwayson web server services requests from browsers running on client hosts. when a web server receives a request for an object from a client host, it responds by sending the requested object to the client host. note that with the clientserver architecture, clients do not directly communicate with each other; for example, in the web application, two browsers do not directly communicate. another characteristic of the clientserver architecture is that the server has a fixed, wellknown address, called an ip address which well discuss soon. because the server has a fixed, wellknown address, and because the server is always on, a client can always contact the server by sending a packet to the servers ip address. some of the betterknown applications with a clientserver architecture include the web, ftp, telnet, and email. the clientserver architecture is shown in figure 2.2a. often in a clientserver application, a singleserver host is incapable of keep ing up with all the requests from clients. for example, a popular socialnetworking site can quickly become overwhelmed if it has only one server handling all of its requests. for this reason, a data center, housing a large number of hosts, is often used to create a powerful virtual server. the most popular internet servicessuch as search engines e.g., google, bing, baidu, internet commerce e.g., amazon, ebay, alibaba, webbased email e.g., gmail and yahoo mail, social media e.g., facebook, instagram, twitter, and wechatrun in one or more data centers. as discussed in section 1.3.3, google has 19 data centers distributed around the world, which collectively handle search, youtube, gmail, and other services. a data center can have hundreds of thousands of servers, which must be powered and maintained. additionally, the service providers must pay recurring interconnection and bandwidth costs for sending data from their data centers.
in a p2p architecture, there is minimal or no reliance on dedicated servers in data centers. instead the application exploits direct communication between pairs of intermittently connected hosts, called peers. the peers are not owned by the service provider, but are instead desktops and laptops controlled by users, with most of the peers residing in homes, universities, and offices. because the peers communicate m02_kuro5469_08_ge_c02.indd 114 03052021 1550 2.1 principles of netw ork applications 115 without passing through a dedicated server, the architecture is called peertopeer. an example of a popular p2p application is the filesharing application bittorrent. one of the most compelling features of p2p architectures is their self scalability. for example, in a p2p filesharing application, although each peer generates workload by requesting files, each peer also adds service capacity to the system by distributing files to other peers. p2p architectures are also cost effective, since they normally dont require significant server infrastructure and server bandwidth in contrast with clientsserver designs with datacenters. however, p2p applications face challenges of security, performance, and reliability due to their highly decentralized structure. 2.1.2 processes communicating before building your network application, you also need a basic understanding of how the programs, running in multiple end systems, communicate with each other. in the jargon of operating systems, it is not actually programs but processes that a. clientserver ar chitectur e b. peer topeer ar chitecture figure 2.2 a clientserver architecture; b p2p architecture m02_kuro5469_08_ge_c02.indd 115 03052021 1550 116 chapter 2 application layer communicate. a process can be thought of as a program that is running within an end system. when processes are running on the same end system, they can communicate with each other with interprocess communication, using rules that are governed by the end systems operating system. but in this book, we are not particularly interested in how processes in the same host communicate, but instead in how processes running on different hosts with potentially different operating systems communicate. processes on two different end systems communicate with each other by exchanging messages across the computer network. a sending process creates and sends messages into the network; a receiving process receives these messages and possibly responds by sending messages back. figure 2.1 illustrates that processes communicating with each other reside in the application layer of the fivelayer protocol stack. client and server processes a network application consists of pairs of processes that send messages to each other over a network. for example, in the web application a client browser process exchanges messages with a web server process. in a p2p filesharing system, a file is transferred from a process in one peer to a process in another peer. for each pair of communicating processes, we typically label one of the two processes as the client and the other process as the server. with the web, a browser is a client process and a web server is a server process. with p2p file sharing, the peer that is downloading the file is labeled as the
client, and the peer that is uploading the file is labeled as the server. you may have observed that in some applications, such as in p2p file sharing, a process can be both a client and a server. indeed, a process in a p2p filesharing system can both upload and download files. nevertheless, in the context of any given communication session between a pair of processes, we can still label one process as the client and the other process as the server. we define the client and server processes as follows in the context of a communication session between a pair of processes, the process that initiates the communication that is, initially contacts the other process at the beginning of the session is labeled as the client. the process that waits to be contacted to begin the session is the server. in the web, a browser process initializes contact with a web server process; hence the browser process is the client and the web server process is the server. in p2p file sharing, when peer a asks peer b to send a specific file, peer a is the client and peer b is the server in the context of this specific communication session. when theres no confusion, well sometimes also use the terminology client side and server side of an application. at the end of this chapter, well step through simple code for both the client and server sides of network applications. m02_kuro5469_08_ge_c02.indd 116 03052021 1550 2.1 principles of netw ork applications 117 the interface between the process and the computer network as noted above, most applications consist of pairs of communicating processes, with the two processes in each pair sending messages to each other. any message sent from one process to another must go through the underlying network. a process sends messages into, and receives messages from, the network through a software interface called a socket. lets consider an analogy to help us understand processes and sockets. a process is analogous to a house and its socket is analogous to its door. when a process wants to send a message to another process on another host, it shoves the message out its door socket. this sending process assumes that there is a transportation infrastructure on the other side of its door that will transport the message to the door of the destination process. once the message arrives at the destination host, the message passes through the receiving processs door socket, and the receiving process then acts on the message. figure 2.3 illustrates socket communication between two processes that com municate over the internet. figure 2.3 assumes that the underlying transport protocol used by the processes is the internets tcp protocol. as shown in this figure, a socket is the interface between the application layer and the transport layer within a host. it is also referred to as the application programming interface api between the application and the network, since the socket is the programming interface with which network applications
are built. the application developer has control of everything on the applicationlayer side of the socket but has little control of the transportlayer side of the socket. the only control that the application developer has on the transportlayer side is 1 the choice of transport protocol and 2 perhaps the ability to fix a few processhost or serverhost or server controlled by applicationdevelopercontrolled by application developerprocess tcp with buffers, variables internetcontrolled by operatingsystemcontrolled by operatingsystemtcp with buffers, variablessocket socket figure 2.3 application processes, sockets, and underlying transport protocol m02_kuro5469_08_ge_c02.indd 117 03052021 1550 118 chapter 2 application layer transportlayer parameters such as maximum buffer and maximum segment sizes to be covered in chapter 3 . once the application developer chooses a transport protocol if a choice is available, the application is built using the transportlayer services provided by that protocol. well explore sockets in some detail in section 2.7. addressing processes in order to send postal mail to a particular destination, the destination needs to have an address. similarly, in order for a process running on one host to send packets to a process running on another host, the receiving process needs to have an address. to identify the receiving process, two pieces of information need to be specified 1 the address of the host and 2 an identifier that specifies the receiving process in the destination host. in the internet, the host is identified by its ip address. well discuss ip addresses in great detail in chapter 4. for now, all we need to know is that an ip address is a 32bit quantity that we can think of as uniquely identifying the host. in addition to knowing the address of the host to which a message is destined, the sending process must also identify the receiving process more specifically, the receiving socket running in the host. this information is needed because in general a host could be running many network applications. a destination port number serves this purpose. popular applications have been assigned specific port numbers. for example, a web server is identified by port number 80. a mail server process using the smtp protocol is identified by port number 25. a list of wellknown port numbers for all internet standard protocols can be found at www.iana.org. well examine port numbers in detail in chapter 3. 2.1.3 transport services available to applications recall that a socket is the interface between the application process and the transportlayer protocol. the application at the sending side pushes messages through the socket. at the other side of the socket, the transportlayer protocol has the responsibility of getting the messages to the socket of the receiving process. many networks, including the internet, provide more than one transportlayer protocol. when you develop an application, you must choose one of the available transportlayer protocols. how do you make this choice? most likely, you would study the services provided by the available transportlayer protocols, and then pick the protocol with the services that best match your applications
needs. the situation is similar to choosing either train or airplane transport for travel between two cities. you have to choose one or the other, and each transportation mode offers different services. for example, the train offers downtown pickup and dropoff, whereas the plane offers shorter travel time. what are the services that a transportlayer protocol can offer to applications invoking it? we can broadly classify the possible services along four dimensions reliable data transfer, throughput, timing, and security. m02_kuro5469_08_ge_c02.indd 118 03052021 1550 2.1 principles of netw ork applications 119 reliable data transfer as discussed in chapter 1, packets can get lost within a computer network. for exam ple, a packet can overflow a buffer in a router, or can be discarded by a host or router after having some of its bits corrupted. for many applicationssuch as electronic mail, file transfer, remote host access, web document transfers, and financial applicationsdata loss can have devastating consequences in the latter case, for either the bank or the customer!. thus, to support these applications, something has to be done to guarantee that the data sent by one end of the application is delivered correctly and completely to the other end of the application. if a protocol provides such a guaranteed data delivery service, it is said to provide reliable data transfer. one important service that a transportlayer protocol can potentially provide to an application is processtoprocess reliable data transfer. when a transport protocol provides this service, the sending process can just pass its data into the socket and know with complete confidence that the data will arrive without errors at the receiving process. when a transportlayer protocol doesnt provide reliable data transfer, some of the data sent by the sending process may never arrive at the receiving process. this may be acceptable for losstolerant applications, most notably multimedia applications such as conversational audiovideo that can tolerate some amount of data loss. in these multimedia applications, lost data might result in a small glitch in the audiovideonot a crucial impairment. throughput in chapter 1, we introduced the concept of available throughput, which, in the context of a communication session between two processes along a network path, is the rate at which the sending process can deliver bits to the receiving process. because other sessions will be sharing the bandwidth along the network path, and because these other sessions will be coming and going, the available throughput can fluctuate with time. these observations lead to another natural service that a transportlayer protocol could provide, namely, guaranteed available throughput at some specified rate. with such a service, the application could request a guaranteed throughput of r bitssec, and the transport protocol would then ensure that the available throughput is always at least r bitssec. such a guaranteed throughput service would appeal to many applications. for example, if an internet telephony application encodes voice at 32 kbps, it needs to send data into the network and have data delivered to the receiving application at this rate.
if the transport protocol cannot provide this throughput, the application would need to encode at a lower rate and receive enough throughput to sustain this lower coding rate or may have to give up, since receiving, say, half of the needed throughput is of little or no use to this internet telephony application. applications that have throughput requirements are said to be bandwidthsensitive applications. many current multimedia applications are bandwidth sensitive, although some multimedia applications may use adaptive m02_kuro5469_08_ge_c02.indd 119 03052021 1550 120 chapter 2 application layer coding techniques to encode digitized voice or video at a rate that matches the cur rently available throughput. while bandwidthsensitive applications have specific throughput requirements, elastic applications can make use of as much, or as little, throughput as happens to be available. electronic mail, file transfer, and web transfers are all elastic applications. of course, the more throughput, the better. theres an adage that says that one cannot be too rich, too thin, or have too much throughput! timing a transportlayer protocol can also provide timing guarantees. as with throughput guarantees, timing guarantees can come in many shapes and forms. an example guarantee might be that every bit that the sender pumps into the socket arrives at the receivers socket no more than 100 msec later. such a service would be appealing to interactive realtime applications, such as internet telephony, virtual environments, teleconferencing, and multiplayer games, all of which require tight timing constraints on data delivery in order to be effective, see gauthier 1999; ramjee 1994. long delays in internet telephony, for example, tend to result in unnatural pauses in the conversation; in a multiplayer game or virtual interactive environment, a long delay between taking an action and seeing the response from the environment for example, from another player at the end of an endtoend connection makes the application feel less realistic. for nonrealtime applications, lower delay is always preferable to higher delay, but no tight constraint is placed on the endtoend delays. security finally, a transport protocol can provide an application with one or more security services. for example, in the sending host, a transport protocol can encrypt all data transmitted by the sending process, and in the receiving host, the transportlayer protocol can decrypt the data before delivering the data to the receiving process. such a service would provide confidentiality between the two processes, even if the data is somehow observed between sending and receiving processes. a transport protocol can also provide other security services in addition to confidentiality, including data integrity and endpoint authentication, topics that well cover in detail in chapter 8. 2.1.4 transport services provided by the internet up until this point, we have been considering transport services that a computer network could provide in general. lets now get more specific and examine the type of transport services provided by the internet. the internet and, more generally, tcpip networks makes two transport protocols available to applications, udp and tcp. when you as an application developer create a new
network application for the m02_kuro5469_08_ge_c02.indd 120 03052021 1550 2.1 principles of netw ork applications 121 internet, one of the first decisions you have to make is whether to use udp or tcp. each of these protocols offers a different set of services to the invoking applications. figure 2.4 shows the service requirements for some selected applications. tcp services the tcp service model includes a connectionoriented service and a reliable data transfer service. when an application invokes tcp as its transport protocol, the application receives both of these services from tcp. connectionoriented service. tcp has the client and server exchange transport layer control information with each other before the applicationlevel messages begin to flow. this socalled handshaking procedure alerts the client and server, allowing them to prepare for an onslaught of packets. after the handshaking phase, a tcp connection is said to exist between the sockets of the two processes. the connection is a fullduplex connection in that the two processes can send messages to each other over the connection at the same time. when the application finishes sending messages, it must tear down the connection. in chapter 3, well discuss connectionoriented service in detail and examine how it is implemented. reliable data transfer service. the communicating processes can rely on tcp to deliver all data sent without error and in the proper order. when one side of the application passes a stream of bytes into a socket, it can count on tcp to deliver the same stream of bytes to the receiving socket, with no missing or duplicate bytes.application data loss throughput timesensitive file transferdownload no loss elastic no email no loss elastic no web documents no loss elastic few kbpsn o internet telephony video conferencinglosstolerant audio few kbps1 mbps video 10 kbps5 mbpsyes 100s of msec streaming stored losstolerant same as abovey es few seconds audiovideo interactive games losstolerant few kbps10 kbps yes 100s of msec smartphone messaging no loss elastic yes and no figure 2.4 requirements of selected network applications m02_kuro5469_08_ge_c02.indd 121 03052021 1550 122 chapter 2 application layer tcp also includes a congestioncontrol mechanism, a service for the general welfare of the internet rather than for the direct benefit of the communicating pro cesses. the tcp congestioncontrol mechanism throttles a sending process client or server when the network is congested between sender and receiver. as we will see in chapter 3, tcp congestion control also attempts to limit each tcp connection to its fair share of network bandwidth. udp services udp is a nofrills, lightweight transport protocol, providing minimal services. udp is connectionless, so there is no handshaking before the two processes start to communicate. udp provides an unreliable data transfer servicethat is, when a process sends a message into a udp socket, udp provides no guarantee that the message will ever reach the receiving process. furthermore, messages that do arrive at the receiving process may arrive out of order. securing tcp neither tcp nor udp provides any encryptionthe data that the sending process passes into its
socket is the same data that travels over the network to the destina tion process. so, for example, if the sending process sends a password in cleartext i.e., unencrypted into its socket, the cleartext password will travel over all the links between sender and receiver, potentially getting sniffed and discovered at any of the intervening links. because privacy and other security issues have become critical for many applications, the internet community has developed an enhancement for tcp, called transport layer security tls rfc 5246. tcpenhancedwithtls not only does everything that traditional tcp does but also provides critical processtoprocess security services, including encryption, data integrity, and endpoint authenti cation. we emphasize that tls is not a third internet transport protocol, on the same level as tcp and udp, but instead is an enhancement of tcp, with the enhancements being implemented in the application layer. in particular, if an application wants to use the services of tls, it needs to include tls code existing, highly optimized librar ies and classes in both the client and server sides of the application. tls has its own socket api that is similar to the traditional tcp socket api. when an application uses tls, the sending process passes cleartext data to the tls socket; tls in the sending host then encrypts the data and passes the encrypted data to the tcp socket. the encrypted data travels over the internet to the tcp socket in the receiving process. the receiving socket passes the encrypted data to tls, which decrypts the data. finally, tls passes the cleartext data through its tls socket to the receiving process. well cover tls in some detail in chapter 8.focus on security m02_kuro5469_08_ge_c02.indd 122 03052021 1550 2.1 principles of netw ork applications 123 udp does not include a congestioncontrol mechanism, so the sending side of udp can pump data into the layer below the network layer at any rate it pleases. note, however, that the actual endtoend throughput may be less than this rate due to the limited transmission capacity of intervening links or due to congestion. services not provided by internet transport protocols we have organized transport protocol services along four dimensions reliable data transfer, throughput, timing, and security. which of these services are provided by tcp and udp? we have already noted that tcp provides reliable endtoend data transfer. and we also know that tcp can be easily enhanced at the application layer with tls to provide security services. but in our brief description of tcp and udp, conspicuously missing was any mention of throughput or timing guarantees services not provided by todays internet transport protocols. does this mean that time sensitive applications such as internet telephony cannot run in todays internet? the answer is clearly nothe internet has been hosting timesensitive applications for many years. these applications often work fairly well because they have been designed to cope, to the greatest extent possible, with this lack of guarantee. nevertheless, clever design has its limitations when delay is excessive, or the
endtoend throughput is limited. in summary, todays internet can often provide satisfactory service to timesensitive applications, but it cannot provide any timing or throughput guarantees. figure 2.5 indicates the transport protocols used by some popular internet appli cations. we see that email, remote terminal access, the web, and file transfer all use tcp. these applications have chosen tcp primarily because tcp provides reliable data transfer, guaranteeing that all data will eventually get to its destination. because internet telephony applications such as skype can often tolerate some loss but require a minimal rate to be effective, developers of internet telephony applications application applicationlayer protocol underlying transport protocol electronic mail remote terminal accesswebfile transfer streaming multimedia internet telephonysmtp rfc 5321 telnet rfc 854http 1.1 rfc 7230ftp rfc 959 http e.g., youtube, dash sip rfc 3261, rtp rfc 3550, or proprietary e.g., skypetcp tcptcptcp tcp udp or tcp figure 2.5 popular internet applications, their applicationlayer protocols, and their underlying transport protocols m02_kuro5469_08_ge_c02.indd 123 03052021 1550 124 chapter 2 application layer usually prefer to run their applications over udp, thereby circumventing tcps congestion control mechanism and packet overheads. but because many firewalls are configured to block most types of udp traffic, internet telephony applications often are designed to use tcp as a backup if udp communication fails. 2.1.5 applicationlayer protocols we have just learned that network processes communicate with each other by sending messages into sockets. but how are these messages structured? what are the meanings of the various fields in the messages? when do the processes send the messages? these questions bring us into the realm of applicationlayer protocols. an applicationlayer protocol defines how an applications processes, running on different end systems, pass messages to each other. in particular, an applicationlayer protocol defines the types of messages exchanged, for example, request messages and response messages the syntax of the various message types, such as the fields in the message and how the fields are delineated the semantics of the fields, that is, the meaning of the information in the fields rules for determining when and how a process sends messages and responds to messages some applicationlayer protocols are specified in rfcs and are therefore in the public domain. for example, the webs applicationlayer protocol, http the hypertext transfer protocol rfc 7230, is available as an rfc. if a browser developer follows the rules of the http rfc, the browser will be able to retrieve web pages from any web server that has also followed the rules of the http rfc. many other applicationlayer protocols are proprietary and intentionally not available in the public domain. for example, skype uses proprietary applicationlayer protocols. it is important to distinguish between network applications and applicationlayer protocols. an applicationlayer protocol is only one piece of a network application albeit, a very important piece of the application from our point of view!. lets look at a couple of examples. the web is a clientserver application that allows users to obtain documents from web servers on demand. the web application
consists of many components, including a standard for document formats that is, html, web browsers for example, chrome and microsoft internet explorer, web servers for example, apache and microsoft servers, and an applicationlayer protocol. the webs applicationlayer protocol, http, defines the format and sequence of messages exchanged between browser and web server. thus, http is only one piece albeit, an important piece of the web application. as another example, well see in section 2.6 that netflixs video service also has many components, m02_kuro5469_08_ge_c02.indd 124 03052021 1550 2.2 the web and http 125 including servers that store and transmit videos, other servers that manage billing and other client functions, clients e.g., the netflix app on your smartphone, tablet, or computer, and an applicationlevel dash protocol defines the format and sequence of messages exchanged between a netflix server and client. thus, dash is only one piece albeit, an important piece of the netflix application. 2.1.6 network applications covered in this book new applications are being developed every day. rather than covering a large number of internet applications in an encyclopedic manner, we have chosen to focus on a small number of applications that are both pervasive and important. in this chapter, we discuss five important applications the web, electronic mail, directory service, video streaming, and p2p applications. we first discuss the web, not only because it is an enormously popular application, but also because its applicationlayer protocol, http, is straightforward and easy to understand. we then discuss electronic mail, the internets first killer application. email is more complex than the web in the sense that it makes use of not one but several applicationlayer protocols. after email, we cover dns, which provides a directory service for the internet. most users do not interact with dns directly; instead, users invoke dns indirectly through other applications including the web, file transfer, and electronic mail. dns illustrates nicely how a piece of core network functionality networkname to networkaddress translation can be implemented at the application layer in the internet. we then discuss p2p file sharing applications, and complete our application study by discussing video streaming on demand, including distributing stored video over content distribution networks. 2.2 the web and http until the early 1990s, the internet was used primarily by researchers, academics, and university students to log in to remote hosts, to transfer files from local hosts to remote hosts and vice versa, to receive and send news, and to receive and send electronic mail. although these applications were and continue to be extremely useful, the internet was essentially unknown outside of the academic and research communities. then, in the early 1990s, a major new application arrived on the scenethe world wide web bernerslee 1994. the web was the first internet application that caught the general publics eye. it dramatically changed how people interact inside and outside their work environments. it elevated the internet from just one of many data networks to essentially the one and only data network. perhaps what appeals the most to
users is that the web operates on demand. users receive what they want, when they want it. this is unlike traditional broadcast m02_kuro5469_08_ge_c02.indd 125 03052021 1550 126 chapter 2 application layer radio and television, which force users to tune in when the content provider makes the content available. in addition to being available on demand, the web has many other wonderful features that people love and cherish. it is enormously easy for any individual to make information available over the webeveryone can become a publisher at extremely low cost. hyperlinks and search engines help us navigate through an ocean of information. photos and videos stimulate our senses. forms, javascript, video, and many other devices enable us to interact with pages and sites. and the web and its protocols serve as a platform for youtube, webbased email such as gmail, and most mobile internet applications, including instagram and google maps. 2.2.1 overview of http the hypertext transfer protocol http, the webs applicationlayer protocol, is at the heart of the web. it is defined in rfc 1945, rfc 7230 and rfc 7540. http is implemented in two programs a client program and a server program. the client program and server program, executing on different end systems, talk to each other by exchanging http messages. http defines the structure of these messages and how the client and server exchange the messages. before explaining http in detail, we should review some web terminology. a web page also called a document consists of objects. an object is simply a filesuch as an html file, a jpeg image, a javascrpt file, a ccs style sheet file, or a video clipthat is addressable by a single url. most web pages consist of a base html file and several referenced objects. for example, if a web page contains html text and five jpeg images, then the web page has six objects the base html file plus the five images. the base html file references the other objects in the page with the objects urls. each url has two components the hostname of the server that houses the object and the objects path name. for example, the url httpwww.someschool.edusomedepartmentpicture.gifhas www.someschool.edu for a hostname and somedepartmentpicture. gif for a path name. because web browsers such as internet explorer and chrome implement the client side of http, in the context of the web, we will use the words browser and client interchangeably. web servers, which implement the server side of http, house web objects, each addressable by a url. popular web servers include apache and microsoft internet information server. http defines how web clients request web pages from web servers and how servers transfer web pages to clients. we discuss the interaction between client and server in detail later, but the general idea is illustrated in figure 2.6. when a user requests a web page for example, clicks on a hyperlink, the browser sends m02_kuro5469_08_ge_c02.indd 126 03052021 1550 2.2 the web and http 127 http request messages for the objects in
the page to the server. the server receives the requests and responds with http response messages that contain the objects. http uses tcp as its underlying transport protocol rather than running on top of udp. the http client first initiates a tcp connection with the server. once the connection is established, the browser and the server processes access tcp through their socket interfaces. as described in section 2.1, on the client side the socket interface is the door between the client process and the tcp connection; on the server side it is the door between the server process and the tcp connection. the client sends http request messages into its socket interface and receives http response messages from its socket interface. similarly, the http server receives request messages from its socket interface and sends response messages into its socket interface. once the client sends a message into its socket interface, the message is out of the clients hands and is in the hands of tcp. recall from section 2.1 that tcp provides a reliable data transfer service to http. this implies that each http request message sent by a client process eventually arrives intact at the server; similarly, each http response message sent by the server process eventually arrives intact at the client. here we see one of the great advantages of a layered architecturehttp need not worry about lost data or the details of how tcp recovers from loss or reordering of data within the network. that is the job of tcp and the protocols in the lower layers of the protocol stack. it is important to note that the server sends requested files to clients without storing any state information about the client. if a particular client asks for the same object twice in a period of a few seconds, the server does not respond by saying that it just served the object to the client; instead, the server resends the object, as it has completely forgotten what it did earlier. because an http server maintains http request http responsehttp response http request pc running internet explorerandroid smartphone running google chromeserver running apache w eb server figure 2.6 http requestresponse behavior m02_kuro5469_08_ge_c02.indd 127 03052021 1550 128 chapter 2 application layer no information about the clients, http is said to be a stateless protocol. we also remark that the web uses the clientserver application architecture, as described in section 2.1. a web server is always on, with a fixed ip address, and it services requests from potentially millions of different browsers. the original version of http is called http1.0 and dates back to the early 1990s rfc 1945. as of 2020, the majority of http transactions take place over http1.1 rfc 7230. however, increasingly browsers and web servers also support a new version of http called http2 rfc 7540. at the end of this section, well provide an introduction to http2. 2.2.2 nonpersistent and persistent connections in many internet applications, the client and server communicate for an extended period
of time, with the client making a series of requests and the server responding to each of the requests. depending on the application and on how the application is being used, the series of requests may be made backtoback, periodically at regular intervals, or intermittently. when this clientserver interaction is taking place over tcp, the application developer needs to make an important decisionshould each requestresponse pair be sent over a separate tcp connection, or should all of the requests and their corresponding responses be sent over the same tcp connection? in the former approach, the application is said to use nonpersistent connections; and in the latter approach, persistent connections. to gain a deep understanding of this design issue, lets examine the advantages and disadvantages of persistent connections in the context of a specific application, namely, http, which can use both nonpersistent connections and persistent connections. although http uses persistent connections in its default mode, http clients and servers can be configured to use nonpersistent connections instead. http with nonpersistent connections lets walk through the steps of transferring a web page from server to client for the case of nonpersistent connections. lets suppose the page consists of a base html file and 10 jpeg images, and that all 11 of these objects reside on the same server. further suppose the url for the base html file is httpwww.someschool.edusomedepartmenthome.index here is what happens 1. the http client process initiates a tcp connection to the server www.someschool.edu on port number 80, which is the default port number for http. associated with the tcp connection, there will be a socket at the client and a socket at the server. m02_kuro5469_08_ge_c02.indd 128 03052021 1550 2.2 the web and http 129 2. the http client sends an http request message to the server via its socket. the request message includes the path name somedepartmenthome .index. we will discuss http messages in some detail below. 3. the http server process receives the request message via its socket, retrieves the object somedepartmenthome.index from its storage ram or disk, encapsulates the object in an http response message, and sends the response message to the client via its socket. 4. the http server process tells tcp to close the tcp connection. but tcp doesnt actually terminate the connection until it knows for sure that the client has received the response message intact. 5. the http client receives the response message. the tcp connection terminates. the message indicates that the encapsulated object is an html file. the client extracts the file from the response message, examines the html file, and finds references to the 10 jpeg objects. 6. the first four steps are then repeated for each of the referenced jpeg objects. as the browser receives the web page, it displays the page to the user. two different browsers may interpret that is, display to the user a web page in some what different ways. http has nothing to do with how a web page is interpreted by a client. the
http specifications rfc 1945 and rfc 7540 define only the communication protocol between the client http program and the server http program. the steps above illustrate the use of nonpersistent connections, where each tcp connection is closed after the server sends the objectthe connection does not persist for other objects. http1.0 employes nonpersistent tcp connections. note that each nonpersistent tcp connection transports exactly one request message and one response message. thus, in this example, when a user requests the web page, 11 tcp connections are generated. in the steps described above, we were intentionally vague about whether the client obtains the 10 jpegs over 10 serial tcp connections, or whether some of the jpegs are obtained over parallel tcp connections. indeed, users can configure some browsers to control the degree of parallelism. browsers may open multiple tcp connections and request different parts of the web page over the multiple connections. as well see in the next chapter, the use of parallel connections shortens the response time. before continuing, lets do a backoftheenvelope calculation to estimate the amount of time that elapses from when a client requests the base html file until the entire file is received by the client. to this end, we define the roundtrip time rtt, which is the time it takes for a small packet to travel from client to server and then back to the client. the rtt includes packetpropagation delays, packetqueuing delays in intermediate routers and switches, and packetprocessing delays. these delays were discussed in section 1.4. now consider what happens when a user clicks on a hyperlink. as shown in figure 2.7, this causes the browser to initiate a tcp connection between the browser and the web server; this involves m02_kuro5469_08_ge_c02.indd 129 03052021 1550 130 chapter 2 application layer a threeway handshakethe client sends a small tcp segment to the server, the server acknowledges and responds with a small tcp segment, and, finally, the client acknowledges back to the server. the first two parts of the threeway handshake take one rtt. after completing the first two parts of the handshake, the client sends the http request message combined with the third part of the threeway handshake the acknowledgment into the tcp connection. once the request message arrives at the server, the server sends the html file into the tcp connection. this http requestresponse eats up another rtt. thus, roughly, the total response time is two rtts plus the transmission time at the server of the html file. http with persistent connections nonpersistent connections have some shortcomings. first, a brandnew connection must be established and maintained for each requested object. for each of these connections, tcp buffers must be allocated and tcp variables must be kept in both the client and server. this can place a significant burden on the web server, which may be serving requests from hundreds of different clients simultaneously. second, time at clienttime at serverinitiate tcp connection rtt request Ô¨Åle rtt entire Ô¨Åle receivedtime to transmit Ô¨Åle figure 2.7 backoftheenvelope calculation
for the time needed to request and receive an html file m02_kuro5469_08_ge_c02.indd 130 03052021 1550 2.2 the web and http 131 as we just described, each object suffers a delivery delay of two rttsone rtt to establish the tcp connection and one rtt to request and receive an object. with http1.1 persistent connections, the server leaves the tcp connection open after sending a response. subsequent requests and responses between the same client and server can be sent over the same connection. in particular, an entire web page in the example above, the base html file and the 10 images can be sent over a single persistent tcp connection. moreover, multiple web pages residing on the same server can be sent from the server to the same client over a single persistent tcp connection. these requests for objects can be made backtoback, without waiting for replies to pending requests pipelining. typically, the http server closes a connection when it isnt used for a certain time a configurable timeout interval. when the server receives the backtoback requests, it sends the objects backtoback. the default mode of http uses persistent connections with pipelining. well quantitatively compare the performance of nonpersistent and persistent connections in the homework problems of chapters 2 and 3. you are also encouraged to see heidemann 1997; nielsen 1997; rfc 7540. 2.2.3 http message format the http specifications rfc 1945; rfc 7230; rfc 7540 include the definitions of the http message formats. there are two types of http messages, request messages and response messages, both of which are discussed below. http request message below we provide a typical http request message get somedirpage.html http1.1 host www.someschool.educonnection closeuseragent mozilla5.0acceptlanguage fr we can learn a lot by taking a close look at this simple request message. first of all, we see that the message is written in ordinary ascii text, so that your ordinary computerliterate human being can read it. second, we see that the message consists of five lines, each followed by a carriage return and a line feed. the last line is followed by an additional carriage return and line feed. although this particular request message has five lines, a request message can have many more lines or as few as one line. the first line of an http request message is called the request line; the subsequent lines are called the header lines. the request line has three fields the method field, the url field, and the http version field. the method field can take on several different values, including get, post, head, put, and delete. m02_kuro5469_08_ge_c02.indd 131 03052021 1550 132 chapter 2 application layer the great majority of http request messages use the get method. the get method is used when the browser requests an object, with the requested object identified in the url field. in this example, the browser is requesting the object somedir page.html. the version is selfexplanatory; in this example, the browser implements version http1.1. now lets look at the header lines in the example.
the header line host www.someschool.edu specifies the host on which the object resides. you might think that this header line is unnecessary, as there is already a tcp connection in place to the host. but, as well see in section 2.2.5, the information provided by the host header line is required by web proxy caches. by including the connection close header line, the browser is telling the server that it doesnt want to bother with persistent connections; it wants the server to close the connection after sending the requested object. the useragent header line specifies the user agent, that is, the browser type that is making the request to the server. here the user agent is mozilla5.0, a firefox browser. this header line is useful because the server can actually send different versions of the same object to different types of user agents. each of the versions is addressed by the same url. finally, the acceptlanguage header indicates that the user prefers to receive a french version of the object, if such an object exists on the server; otherwise, the server should send its default version. the acceptlanguage header is just one of many content negotiation headers available in http. having looked at an example, lets now look at the general format of a request message, as shown in figure 2.8. we see that the general format closely follows our earlier example. you may have noticed, however, that after the header lines and the additional carriage return and line feed there is an entity body. the entity body method sp sp crlf crlf header Ô¨Åeld name header lines blank line entity bodyrequest line value sp crlf crlfheader Ô¨Åeld name value spurl version figure 2.8 general format of an http request message m02_kuro5469_08_ge_c02.indd 132 03052021 1550 2.2 the web and http 133 is empty with the get method, but is used with the post method. an http client often uses the post method when the user fills out a formfor example, when a user provides search words to a search engine. with a post message, the user is still requesting a web page from the server, but the specific contents of the web page depend on what the user entered into the form fields. if the value of the method field is post, then the entity body contains what the user entered into the form fields. we would be remiss if we didnt mention that a request generated with a form does not necessarily have to use the post method. instead, html forms often use the get method and include the inputted data in the form fields in the requested url. for example, if a form uses the get method, has two fields, and the inputs to the two fields are monkeys and bananas, then the url will have the structure www.somesite.comanimalsearch?monkeysbananas. in your daytoday web surfing, you have probably noticed extended urls of this sort. the head method is similar to the get method. when a server receives a request
with the head method, it responds with an http message but it leaves out the requested object. application developers often use the head method for debugging. the put method is often used in conjunction with web publishing tools. it allows a user to upload an object to a specific path directory on a specific web server. the put method is also used by applications that need to upload objects to web servers. the delete method allows a user, or an application, to delete an object on a web server. http response message below we provide a typical http response message. this response message could be the response to the example request message just discussed. http1.1 200 ok connection closedate tue, 18 aug 2015 154404 gmtserver apache2.2.3 centoslastmodified tue, 18 aug 2015 151103 gmtcontentlength 6821contenttype texthtml data data data data data ... lets take a careful look at this response message. it has three sections an initial status line, six header lines, and then the entity body. the entity body is the meat of the messageit contains the requested object itself represented by data data data data data .... the status line has three fields the protocol version field, a status code, and a corresponding status message. in this example, the status line indicates that the server is using http1.1 and that everything is ok that is, the server has found, and is sending, the requested object. m02_kuro5469_08_ge_c02.indd 133 03052021 1550 134 chapter 2 application layer now lets look at the header lines. the server uses the connection close header line to tell the client that it is going to close the tcp connection after sending the message. the date header line indicates the time and date when the http response was created and sent by the server. note that this is not the time when the object was created or last modified; it is the time when the server retrieves the object from its file system, inserts the object into the response message, and sends the response message. the server header line indicates that the message was generated by an apache web server; it is analogous to the useragent header line in the http request message. the lastmodified header line indicates the time and date when the object was created or last modified. the lastmodified header, which we will soon cover in more detail, is critical for object caching, both in the local client and in network cache servers also known as proxy servers. the contentlength header line indicates the number of bytes in the object being sent. the contenttype header line indicates that the object in the entity body is html text. the object type is officially indicated by the contenttype header and not by the file extension. having looked at an example, lets now examine the general format of a response message, which is shown in figure 2.9. this general format of the response message matches the previous example of a response message. lets say a few additional
words about status codes and their phrases. the status code and associated phrase indicate the result of the request. some common status codes and associated phrases include 200 ok request succeeded and the information is returned in the response. 301 moved permanently requested object has been permanently moved; the new url is specified in location header of the response message. the client software will automatically retrieve the new url. version sp sp crlf crlf header Ô¨Åeld name header lines blank line entity bodystatus line value crsp sp lf crlfheader Ô¨Åeld name valuestatus code phrase figure 2.9 general format of an http response message m02_kuro5469_08_ge_c02.indd 134 03052021 1550 2.2 the web and http 135 400 bad request this is a generic error code indicating that the request could not be understood by the server. 404 not found the requested document does not exist on this server. 505 http version not supported the requested http protocol version is not supported by the server. how would you like to see a real http response message? this is highly rec ommended and very easy to do! first telnet into your favorite web server. then type in a oneline request message for some object that is housed on the server. for example, if you have access to a command prompt, type telnet gaia.cs.umass.edu 80 get kurose_rossinteractiveindex.php http1.1 host gaia.cs.umass.edu press the carriage return twice after typing the last line. this opens a tcp con nection to port 80 of the host gaia.cs.umass.edu and then sends the http request message. you should see a response message that includes the base html file for the interactive homework problems for this textbook. if youd rather just see the http message lines and not receive the object itself, replace get with head. in this section, we discussed a number of header lines that can be used within http request and response messages. the http specification defines many, many more header lines that can be inserted by browsers, web servers, and network cache servers. we have covered only a small number of the totality of header lines. well cover a few more below and another small number when we discuss network web caching in section 2.2.5. a highly readable and comprehensive discussion of the http protocol, including its headers and status codes, is given in krishnamurthy 2001. how does a browser decide which header lines to include in a request message? how does a web server decide which header lines to include in a response message? a browser will generate header lines as a function of the browser type and version, the user configuration of the browser and whether the browser currently has a cached, but possibly outofdate, version of the object. web servers behave similarly there are different products, versions, and configurations, all of which influence which header lines are included in response messages. 2.2.4 userserver interaction cookies we mentioned above that an http server is stateless. this simplifies server design and has permitted engineers to develop highperformance web
servers that can handle thousands of simultaneous tcp connections. however, it is often desirable for a web site to identify users, either because the server wishes to restrict user access using wireshark to investigate the http protocolvideonote m02_kuro5469_08_ge_c02.indd 135 03052021 1550 136 chapter 2 application layer or because it wants to serve content as a function of the user identity. for these pur poses, http uses cookies. cookies, defined in rfc 6265, allow sites to keep track of users. most major commercial web sites use cookies today. as shown in figure 2.10, cookie technology has four components 1 a cookie header line in the http response message; 2 a cookie header line in the http request message; 3 a cookie file kept on the users end system and managed by the users browser; and 4 a backend database at the web site. using figure 2.10, lets walk through an example of how cookies work. suppose susan, who always client host server host usual http request msg usual http response setcookie 1678usual http request msgcookie 1678 usual http response msg usual http request msgcookie 1678 usual http response msg timeone week laterebay 8734 server creates id 1678 for user time cookie Ô¨Ålekeyamazon 1678 ebay 8734 amazon 1678 ebay 8734cookiespeci Ô¨Åc actionaccess accessentry in backend database cookiespeci Ô¨Åc action figure 2.10 keeping user state with cookies m02_kuro5469_08_ge_c02.indd 136 03052021 1550 2.2 the web and http 137 accesses the web using internet explorer from her home pc, contacts amazon.com for the first time. let us suppose that in the past she has already visited the ebay site. when the request comes into the amazon web server, the server creates a unique identification number and creates an entry in its backend database that is indexed by the identification number. the amazon web server then responds to susans browser, including in the http response a setcookie header, which contains the identification number. for example, the header line might be setcookie 1678when susans browser receives the http response message, it sees the setcookie header. the browser then appends a line to the special cookie file that it manages. this line includes the hostname of the server and the identification number in the setcookie header. note that the cookie file already has an entry for ebay, since susan has visited that site in the past. as susan continues to browse the amazon site, each time she requests a web page, her browser consults her cookie file, extracts her identification number for this site, and puts a cookie header line that includes the identification number in the http request. specifically, each of her http requests to the amazon server includes the header line cookie 1678in this manner, the amazon server is able to track susans activity at the amazon site. although the amazon web site does not necessarily know susans name, it knows exactly which pages user 1678 visited, in which order, and at what times! amazon uses cookies to provide its shopping cart serviceamazon can maintain a
list of all of susans intended purchases, so that she can pay for them collectively at the end of the session. if susan returns to amazons site, say, one week later, her browser will con tinue to put the header line cookie 1678 in the request messages. amazon also recommends products to susan based on web pages she has visited at amazon in the past. if susan also registers herself with amazonproviding full name, email address, postal address, and credit card informationamazon can then include this information in its database, thereby associating susans name with her identification number and all of the pages she has visited at the site in the past!. this is how amazon and other ecommerce sites provide oneclick shoppingwhen susan chooses to purchase an item during a subsequent visit, she doesnt need to reenter her name, credit card number, or address. from this discussion, we see that cookies can be used to identify a user. the first time a user visits a site, the user can provide a user identification possibly his or her name. during the subsequent sessions, the browser passes a cookie header to the server, thereby identifying the user to the server. cookies can thus be used to create a user session layer on top of stateless http. for example, when a user logs in to m02_kuro5469_08_ge_c02.indd 137 03052021 1550 138 chapter 2 application layer a webbased email application such as hotmail, the browser sends cookie infor mation to the server, permitting the server to identify the user throughout the users session with the application. although cookies often simplify the internet shopping experience for the user, they are controversial because they can also be considered as an invasion of privacy. as we just saw, using a combination of cookies and usersupplied account information, a web site can learn a lot about a user and potentially sell this information to a third party. 2.2.5 web caching a web cachealso called a proxy serveris a network entity that satisfies http requests on the behalf of an origin web server. the web cache has its own disk storage and keeps copies of recently requested objects in this storage. as shown in figure 2.11, a users browser can be configured so that all of the users http requests are first directed to the web cache rfc 7234. once a browser is configured, each browser request for an object is first directed to the web cache. as an example, suppose a browser is requesting the object httpwww.someschool.edu campus.gif. here is what happens 1. the browser establishes a tcp connection to the web cache and sends an http request for the object to the web cache. 2. the web cache checks to see if it has a copy of the object stored locally. if it does, the web cache returns the object within an http response message to the client browser. 3. if the web cache does not have the object, the web cache opens a tcp connection to
the origin server, that is, to www.someschool.edu. the web cache http request http responsehttp request http responsehttp request http response http request http responseclient origin server origin serverclientproxy server figure 2.11 clients requesting objects through a web cache m02_kuro5469_08_ge_c02.indd 138 03052021 1550 2.2 the web and http 139 then sends an http request for the object into the cachetoserver tcp connec tion. after receiving this request, the origin server sends the object within an http response to the web cache. 4. when the web cache receives the object, it stores a copy in its local storage and sends a copy, within an http response message, to the client browser over the existing tcp connection between the client browser and the web cache. note that a cache is both a server and a client at the same time. when it receives requests from and sends responses to a browser, it is a server. when it sends requests to and receives responses from an origin server, it is a client. typically a web cache is purchased and installed by an isp. for example, a uni versity might install a cache on its campus network and configure all of the campus browsers to point to the cache. or a major residential isp such as comcast might install one or more caches in its network and preconfigure its shipped browsers to point to the installed caches. web caching has seen deployment in the internet for two reasons. first, a web cache can substantially reduce the response time for a client request, particularly if the bottleneck bandwidth between the client and the origin server is much less than the bottleneck bandwidth between the client and the cache. if there is a highspeed connection between the client and the cache, as there often is, and if the cache has the requested object, then the cache will be able to deliver the object rapidly to the client. second, as we will soon illustrate with an example, web caches can substantially reduce traffic on an institutions access link to the internet. by reducing traffic, the institution for example, a company or a university does not have to upgrade bandwidth as quickly, thereby reducing costs. furthermore, web caches can substantially reduce web traffic in the internet as a whole, thereby improving performance for all applications. to gain a deeper understanding of the benefits of caches, lets consider an exam ple in the context of figure 2.12. this figure shows two networksthe institutional network and the rest of the public internet. the institutional network is a highspeed lan. a router in the institutional network and a router in the internet are connected by a 15 mbps link. the origin servers are attached to the internet but are located all over the globe. suppose that the average object size is 1 mbits and that the average request rate from the institutions browsers to the origin servers is 15 requests per second. suppose that the http request messages are negligibly small and
thus create no traffic in the networks or in the access link from institutional router to internet router. also suppose that the amount of time it takes from when the router on the internet side of the access link in figure 2.12 forwards an http request within an ip datagram until it receives the response typically within many ip datagrams is two seconds on average. informally, we refer to this last delay as the internet delay. the total response timethat is, the time from the browsers request of an object until its receipt of the objectis the sum of the lan delay, the access delay that is, the delay between the two routers, and the internet delay. lets now do m02_kuro5469_08_ge_c02.indd 139 03052021 1550 140 chapter 2 application layer public inter net institutional network15 mbps access link 100 mbps lanorigin servers figure 2.12 bottleneck between an institutional network and the internet a very crude calculation to estimate this delay. the traffic intensity on the lan see section 1.4.2 is 15 requestssec1 mbitsrequest100 mbps0.15 whereas the traffic intensity on the access link from the internet router to institution router is 15 requestssec1 mbitsrequest15 mbps1 a traffic intensity of 0.15 on a lan typically results in, at most, tens of milliseconds of delay; hence, we can neglect the lan delay. however, as discussed in section 1.4.2, as the traffic intensity approaches 1 as is the case of the access link in figure 2.12, the delay on a link becomes very large and grows without bound. thus, the average response time to satisfy requests is going to be on the order of minutes, if not more, which is unacceptable for the institutions users. clearly something must be done. m02_kuro5469_08_ge_c02.indd 140 03052021 1550 2.2 the web and http 141 one possible solution is to increase the access rate from 15 mbps to, say, 100 mbps. this will lower the traffic intensity on the access link to 0.15, which translates to neg ligible delays between the two routers. in this case, the total response time will roughly be two seconds, that is, the internet delay. but this solution also means that the institution must upgrade its access link from 15 mbps to 100 mbps, a costly proposition. now consider the alternative solution of not upgrading the access link but instead installing a web cache in the institutional network. this solution is illustrated in figure 2.13. hit ratesthe fraction of requests that are satisfied by a cache typically range from 0.2 to 0.7 in practice. for illustrative purposes, lets suppose that the cache provides a hit rate of 0.4 for this institution. because the clients and the cache are connected to the same highspeed lan, 40 percent of the requests will be satisfied almost immediately, say, within 10 milliseconds, by the cache. nevertheless, the remaining 60 percent of the requests still need to be satisfied by the origin servers. but with only 60 percent of the requested objects passing through the access link, the traffic intensity
on the access link is reduced from 1.0 to 0.6. typically, a public inter net institutional network15 mbps access link institutional cache100 mbps lanorigin servers figure 2.13 adding a cache to the institutional network m02_kuro5469_08_ge_c02.indd 141 03052021 1550 142 chapter 2 application layer traffic intensity less than 0.8 corresponds to a small delay, say, tens of milliseconds, on a 15 mbps link. this delay is negligible compared with the twosecond internet delay. given these considerations, average delay therefore is 0.40.01 seconds0.62.01 seconds which is just slightly greater than 1.2 seconds. thus, this second solution provides an even lower response time than the first solution, and it doesnt require the institution to upgrade its link to the internet. the institution does, of course, have to purchase and install a web cache. but this cost is lowmany caches use publicdomain software that runs on inexpensive pcs. through the use of content distribution networks cdns, web caches are increasingly playing an important role in the internet. a cdn company installs many geographically distributed caches throughout the internet, thereby localizing much of the traffic. there are shared cdns such as akamai and limelight and dedicated cdns such as google and netflix. we will discuss cdns in more detail in section 2.6. the conditional get although caching can reduce userperceived response times, it introduces a new problemthe copy of an object residing in the cache may be stale. in other words, the object housed in the web server may have been modified since the copy was cached at the client. fortunately, http has a mechanism that allows a cache to verify that its objects are up to date. this mechanism is called the conditional get rfc 7232. an http request message is a socalled conditional get message if 1 the request message uses the get method and 2 the request message includes an ifmodifiedsince header line. to illustrate how the conditional get operates, lets walk through an example. first, on the behalf of a requesting browser, a proxy cache sends a request message to a web server get fruitkiwi.gif http1.1 host www.exotiquecuisine.com second, the web server sends a response message with the requested object to the cache http1.1 200 ok date sat, 3 oct 2015 153929server apache1.3.0 unixlastmodified wed, 9 sep 2015 092324contenttype imagegif data data data data data ... m02_kuro5469_08_ge_c02.indd 142 03052021 1550 2.2 the web and http 143 the cache forwards the object to the requesting browser but also caches the object locally. importantly, the cache also stores the lastmodified date along with the object. third, one week later, another browser requests the same object via the cache, and the object is still in the cache. since this object may have been modified at the web server in the past week, the cache performs an uptodate check by issuing a conditional get. specifically, the cache sends get fruitkiwi.gif http1.1 host www.exotiquecuisine.comifmodifiedsince wed, 9 sep 2015 092324 note that the value of the ifmodifiedsince header line is exactly equal to the value of the
lastmodified header line that was sent by the server one week ago. this conditional get is telling the server to send the object only if the object has been modified since the specified date. suppose the object has not been modified since 9 sep 2015 092324. then, fourth, the web server sends a response message to the cache http1.1 304 not modified date sat, 10 oct 2015 153929server apache1.3.0 unix empty entity body we see that in response to the conditional get, the web server still sends a response message but does not include the requested object in the response message. including the requested object would only waste bandwidth and increase user perceived response time, particularly if the object is large. note that this last response message has 304 not modified in the status line, which tells the cache that it can go ahead and forward its the proxy caches cached copy of the object to the requesting browser. 2.2.6 http2 http2 rfc 7540, standardized in 2015, was the first new version of http since http1.1, which was standardized in 1997. since standardization, http2 has taken off, with over 40 of the top 10 million websites supporting http2 in 2020 w3techs. most browsersincluding google chrome, internet explorer, safari, opera, and firefoxalso support http2. the primary goals for http2 are to reduce perceived latency by enabling request and response multiplexing over a single tcp connection, provide request prioritization and server push, and provide efficient compression of http header fields. http2 does not change http methods, status codes, urls, or header fields. instead, http2 changes how the data is formatted and transported between the client and server. m02_kuro5469_08_ge_c02.indd 143 03052021 1550 144 chapter 2 application layer to motivate the need for http2, recall that http1.1 uses persistent tcp connections, allowing a web page to be sent from server to client over a single tcp connection. by having only one tcp connection per web page, the number of sockets at the server is reduced and each transported web page gets a fair share of the network bandwidth as discussed below. but developers of web browsers quickly discovered that sending all the objects in a web page over a single tcp connection has a head of line hol blocking problem. to understand hol blocking, consider a web page that includes an html base page, a large video clip near the top of web page, and many small objects below the video. further suppose there is a lowtomedium speed bottleneck link for example, a lowspeed wireless link on the path between server and client. using a single tcp connection, the video clip will take a long time to pass through the bottleneck link, while the small objects are delayed as they wait behind the video clip; that is, the video clip at the head of the line blocks the small objects behind it. http1.1 browsers typically work around this problem by opening multiple parallel tcp connections, thereby having objects in the same web page sent
in parallel to the browser. this way, the small objects can arrive at and be rendered in the browser much faster, thereby reducing userperceived delay. tcp congestion control, discussed in detail in chapter 3, also provides brows ers an unintended incentive to use multiple parallel tcp connections rather than a single persistent connection. very roughly speaking, tcp congestion control aims to give each tcp connection sharing a bottleneck link an equal share of the available bandwidth of that link; so if there are n tcp connections operating over a bottleneck link, then each connection approximately gets 1nth of the bandwidth. by opening multiple parallel tcp connections to transport a single web page, the browser can cheat and grab a larger portion of the link bandwidth. many http1.1 browsers open up to six parallel tcp connections not only to circumvent hol blocking but also to obtain more bandwidth. one of the primary goals of http2 is to get rid of or at least reduce the num ber of parallel tcp connections for transporting a single web page. this not only reduces the number of sockets that need to be open and maintained at servers, but also allows tcp congestion control to operate as intended. but with only one tcp connection to transport a web page, http2 requires carefully designed mechanisms to avoid hol blocking. http2 framing the http2 solution for hol blocking is to break each message into small frames, and interleave the request and response messages on the same tcp connection. to understand this, consider again the example of a web page consisting of one large video clip and, say, 8 smaller objects. thus the server will receive 9 concurrent requests from any browser wanting to see this web page. for each of these requests, the server needs to send 9 competing http response messages to the browser. suppose all frames are of m02_kuro5469_08_ge_c02.indd 144 03052021 1550 2.2 the web and http 145 fixed length, the video clip consists of 1000 frames, and each of the smaller objects consists of two frames. with frame interleaving, after sending one frame from the video clip, the first frames of each of the small objects are sent. then after sending the second frame of the video clip, the last frames of each of the small objects are sent. thus, all of the smaller objects are sent after sending a total of 18 frames. if interleaving were not used, the smaller objects would be sent only after sending 1016 frames. thus the http2 framing mechanism can significantly decrease userperceived delay. the ability to break down an http message into independent frames, inter leave them, and then reassemble them on the other end is the single most important enhancement of http2. the framing is done by the framing sublayer of the http2 protocol. when a server wants to send an http response, the response is processed by the framing sublayer, where it is broken down into frames. the header field of the response becomes one
frame, and the body of the message is broken down into one for more additional frames. the frames of the response are then interleaved by the framing sublayer in the server with the frames of other responses and sent over the single persistent tcp connection. as the frames arrive at the client, they are first reassembled into the original response messages at the framing sublayer and then processed by the browser as usual. similarly, a clients http requests are broken into frames and interleaved. in addition to breaking down each http message into independent frames, the framing sublayer also binary encodes the frames. binary protocols are more efficient to parse, lead to slightly smaller frames, and are less errorprone. response message prioritization and server pushing message prioritization allows developers to customize the relative priority of requests to better optimize application performance. as we just learned, the framing sublayer organizes messages into parallel streams of data destined to the same requestor. when a client sends concurrent requests to a server, it can prioritize the responses it is requesting by assigning a weight between 1 and 256 to each message. the higher number indicates higher priority. using these weights, the server can send first the frames for the responses with the highest priority. in addition to this, the client also states each messages dependency on other messages by specifying the id of the message on which it depends. another feature of http2 is the ability for a server to send multiple responses for a single client request. that is, in addition to the response to the original request, the server can push additional objects to the client, without the client having to request each one. this is possible since the html base page indicates the objects that will be needed to fully render the web page. so instead of waiting for the http requests for these objects, the server can analyze the html page, identify the objects that are needed, and send them to the client before receiving explicit requests for these objects. server push eliminates the extra latency due to waiting for the requests. m02_kuro5469_08_ge_c02.indd 145 03052021 1550 146 chapter 2 application layer http3 quic, discussed in chapter 3, is a new transport protocol that is implemented in the application layer over the barebones udp protocol. quic has several features that are desirable for http, such as message multiplexing interleaving, perstream flow control, and lowlatency connection establishment. http3 is yet a new http protocol that is designed to operate over quic. as of 2020, http3 is described in internet drafts and has not yet been fully standardized. many of the http2 features such as message interleaving are subsumed by quic, allowing for a simpler, streamlined design for http3. 2.3 electronic mail in the internet electronic mail has been around since the beginning of the internet. it was the most popular application when the internet was in its infancy segaller 1998, and has become more elaborate and powerful over the years. it
remains one of the internets most important and utilized applications. as with ordinary postal mail, email is an asynchronous communication mediumpeople send and read messages when it is convenient for them, without having to coordinate with other peoples schedules. in contrast with postal mail, electronic mail is fast, easy to distribute, and inexpensive. modern email has many powerful features, including messages with attachments, hyperlinks, html formatted text, and embedded photos. in this section, we examine the applicationlayer protocols that are at the heart of internet email. but before we jump into an indepth discussion of these protocols, lets take a highlevel view of the internet mail system and its key components. figure 2.14 presents a highlevel view of the internet mail system. we see from this diagram that it has three major components user agents, mail servers, and the simple mail transfer protocol smtp. we now describe each of these components in the context of a sender, alice, sending an email message to a recipient, bob. user agents allow users to read, reply to, forward, save, and compose messages. examples of user agents for email include microsoft outlook, apple mail, webbased gmail, the gmail app running in a smartphone, and so on. when alice is finished composing her message, her user agent sends the message to her mail server, where the message is placed in the mail servers outgoing message queue. when bob wants to read a message, his user agent retrieves the message from his mailbox in his mail server. mail servers form the core of the email infrastructure. each recipient, such as bob, has a mailbox located in one of the mail servers. bobs mailbox manages and maintains the messages that have been sent to him. a typical message starts its journey in the senders user agent, then travels to the senders mail server, and then m02_kuro5469_08_ge_c02.indd 146 03052021 1550 2.3 electronic mail in the internet 147 travels to the recipients mail server, where it is deposited in the recipients mailbox. when bob wants to access the messages in his mailbox, the mail server containing his mailbox authenticates bob with his username and password. alices mail server must also deal with failures in bobs mail server. if alices server cannot deliver mail to bobs server, alices server holds the message in a message queue and attempts to transfer the message later. reattempts are often done every 30 minutes or so; if there is no success after several days, the server removes the message and notifies the sender alice with an email message. smtp is the principal applicationlayer protocol for internet electronic mail. it uses the reliable data transfer service of tcp to transfer mail from the senders mail server to the recipients mail server. as with most applicationlayer protocols, smtp has two sides a client side, which executes on the senders mail server, and a server side, which executes on the recipients mail server. both the client and server sides of outgoing message queue key user mailboxsmtpuser agent
user agentuser agent user agent user agent user agentmail server mail servermail serversmtp smtp figure 2.14 a highlevel view of the internet email system m02_kuro5469_08_ge_c02.indd 147 03052021 1550 148 chapter 2 application layer smtp run on every mail server. when a mail server sends mail to other mail servers, it acts as an smtp client. when a mail server receives mail from other mail servers, it acts as an smtp server. 2.3.1 smtp smtp, defined in rfc 5321, is at the heart of internet electronic mail. as mentioned above, smtp transfers messages from senders mail servers to the recipients mail servers. smtp is much older than http. the original smtp rfc dates back to 1982, and smtp was around long before that. although smtp has numerous wonderful qualities, as evidenced by its ubiquity in the internet, it is nevertheless a legacy technology that possesses certain archaic characteristics. for example, it restricts the body not just the headers of all mail messages to simple 7bit ascii. this restriction made sense in the early 1980s when transmission capacity was scarce and no one was emailing large attachments or large image, audio, or video files. but today, in the multimedia era, the 7bit ascii restriction is a bit of a painit requires binary multimedia data to be encoded to ascii before being sent over smtp; and it requires the corresponding ascii message to be decoded back to binary after smtp transport. recall from section 2.2 that http does not require multimedia data to be ascii encoded before transfer. to illustrate the basic operation of smtp, lets walk through a common sce nario. suppose alice wants to send bob a simple ascii message. 1. alice invokes her user agent for email, provides bobs email address for example, bobsomeschool.edu, composes a message, and instructs the user agent to send the message. 2. alices user agent sends the message to her mail server, where it is placed in a message queue. 3. the client side of smtp, running on alices mail server, sees the message in the message queue. it opens a tcp connection to an smtp server, running on bobs mail server. 4. after some initial smtp handshaking, the smtp client sends alices message into the tcp connection. 5. at bobs mail server, the server side of smtp receives the message. bobs mail server then places the message in bobs mailbox. 6. bob invokes his user agent to read the message at his convenience. the scenario is summarized in figure 2.15. it is important to observe that smtp does not normally use intermediate mail serv ers for sending mail, even when the two mail servers are located at opposite ends of the world. if alices server is in hong kong and bobs server is in st. louis, the tcp connection is a direct connection between the hong kong and st. louis servers. in m02_kuro5469_08_ge_c02.indd 148 03052021 1550 2.3 electronic mail in the internet 149 particular, if bobs mail server is down, the message remains in
alices mail server and waits for a new attemptthe message does not get placed in some intermediate mail server. lets now take a closer look at how smtp transfers a message from a send ing mail server to a receiving mail server. we will see that the smtp protocol has many similarities with protocols that are used for facetoface human interaction. first, the client smtp running on the sending mail server host has tcp establish a connection to port 25 at the server smtp running on the receiving mail server host. if the server is down, the client tries again later. once this connection is established, the server and client perform some applicationlayer handshakingjust as humans often introduce themselves before transferring information from one to another, smtp clients and servers introduce themselves before transferring information. during this smtp handshaking phase, the smtp client indicates the email address of the sender the person who generated the message and the email address of the recipient. once the smtp client and server have introduced themselves to each other, the client sends the message. smtp can count on the reliable data transfer service of tcp to get the message to the server without errors. the client then repeats this process over the same tcp connection if it has other messages to send to the server; otherwise, it instructs tcp to close the connection. lets next take a look at an example transcript of messages exchanged between an smtp client c and an smtp server s. the hostname of the client is crepes.fr and the hostname of the server is hamburger.edu. the ascii text lines prefaced with c are exactly the lines the client sends into its tcp socket, and the ascii text lines prefaced with s are exactly the lines the server sends into its tcp socket. the following transcript begins as soon as the tcp connection is established. s 220 hamburger.edu c helo crepes.frsmtpalice s mail serverbobs mail server alice s agentbobs agent1 2 4 6 5 message queue key user mailbox3 figure 2.15 alice sends a message to bob m02_kuro5469_08_ge_c02.indd 149 03052021 1550 150 chapter 2 application layer s 250 hello crepes.fr, pleased to meet you c mail from alicecrepes.frs 250 alicecrepes.fr ... sender okc rcpt to bobhamburger.edus 250 bobhamburger.edu ... recipient okc datas 354 enter mail, end with . on a line by itselfc do you like ketchup?c how about pickles?c .s 250 message accepted for deliveryc quits 221 hamburger.edu closing connection in the example above, the client sends a message do you like ketchup? how about pickles? from mail server crepes.fr to mail server hamburger.edu. as part of the dialogue, the client issued five commands helo an abbreviation for hello, mail from, rcpt to, data, and quit. these commands are selfexplanatory. the client also sends a line consisting of a single period, which indicates the end of the message to the server. in ascii jargon, each message ends with crlf.crlf, where cr and lf stand for carriage return and line
feed, respectively. the server issues replies to each command, with each reply having a reply code and some optional englishlanguage explanation. we mention here that smtp uses persistent connections if the sending mail server has several messages to send to the same receiving mail server, it can send all of the messages over the same tcp connection. for each message, the client begins the process with a new mail from crepes.fr, designates the end of message with an isolated period, and issues quit only after all messages have been sent. it is highly recommended that you use telnet to carry out a direct dialogue with an smtp server. to do this, issue telnet servername 25 where servername is the name of a local mail server. when you do this, you are simply establishing a tcp connection between your local host and the mail server. after typing this line, you should immediately receive the 220 reply from the server. then issue the smtp commands helo, mail from, rcpt to, data, crlf.crlf, and quit at the appropriate times. it is also highly recommended that you do programming assignment 3 at the end of this chapter. in that assignment, youll build a simple user agent that implements the client side of smtp. it will allow you to send an email message to an arbitrary recipient via a local mail server. m02_kuro5469_08_ge_c02.indd 150 03052021 1550 2.3 electronic mail in the internet 151 2.3.2 mail message formats when alice writes an ordinary snailmail letter to bob, she may include all kinds of peripheral header information at the top of the letter, such as bobs address, her own return address, and the date. similarly, when an email message is sent from one person to another, a header containing peripheral information precedes the body of the message itself. this peripheral information is contained in a series of header lines, which are defined in rfc 5322. the header lines and the body of the message are separated by a blank line that is, by crlf. rfc 5322 specifies the exact format for mail header lines as well as their semantic interpretations. as with http, each header line contains readable text, consisting of a keyword followed by a colon followed by a value. some of the keywords are required and others are optional. every header must have a from header line and a to header line; a header may include a subject header line as well as other optional header lines. it is important to note that these header lines are different from the smtp commands we studied in section 2.3.1 even though they contain some common words such as from and to. the commands in that section were part of the smtp handshaking protocol; the header lines examined in this section are part of the mail message itself. a typical message header looks like this from alicecrepes.frto bobhamburger.edusubject searching for the meaning of life. after the message header, a blank line follows; then the message body in ascii
follows. you should use telnet to send a message to a mail server that contains some header lines, including the subject header line. to do this, issue telnet servername 25, as discussed in section 2.3.1. 2.3.3 mail access protocols once smtp delivers the message from alices mail server to bobs mail server, the message is placed in bobs mailbox. given that bob the recipient executes his user agent on his local host e.g., smartphone or pc, it is natural to consider placing a mail server on his local host as well. with this approach, alices mail server would dialogue directly with bobs pc. there is a problem with this approach, however. recall that a mail server manages mailboxes and runs the client and server sides of smtp. if bobs mail server were to reside on his local host, then bobs host would have to remain always on, and connected to the internet, in order to receive new mail, which can arrive at any time. this is impractical for many internet users. instead, a typical user runs a user agent on the local host but accesses its mailbox stored on an alwayson shared mail server. this mail server is shared with other users. m02_kuro5469_08_ge_c02.indd 151 03052021 1550 152 chapter 2 application layer now lets consider the path an email message takes when it is sent from alice to bob. we just learned that at some point along the path the email message needs to be deposited in bobs mail server. this could be done simply by having alices user agent send the message directly to bobs mail server. however, typically the senders user agent does not dialogue directly with the recipients mail server. instead, as shown in figure 2.16, alices user agent uses smtp or http to deliver the email message into her mail server, then alices mail server uses smtp as an smtp client to relay the email message to bobs mail server. why the twostep procedure? primarily because without relaying through alices mail server, alices user agent doesnt have any recourse to an unreachable destination mail server. by having alice first deposit the email in her own mail server, alices mail server can repeatedly try to send the message to bobs mail server, say every 30 minutes, until bobs mail server becomes operational. and if alices mail server is down, then she has the recourse of complaining to her system administrator! but there is still one missing piece to the puzzle! how does a recipient like bob, running a user agent on his local host , obtain his messages, which are sitting in a mail server? note that bobs user agent cant use smtp to obtain the messages because obtaining the messages is a pull operation, whereas smtp is a push protocol. today, there are two common ways for bob to retrieve his email from a mail server. if bob is using webbased email or a smartphone app such as gmail, then the user agent will use http to
retrieve bobs email. this case requires bobs mail server to have an http interface as well as an smtp interface to communicate with alices mail server. the alternative method, typically used with mail clients such as microsoft outlook, is to use the internet mail access protocol imap defined in rfc 3501. both the http and imap approaches allow bob to manage folders, maintained in bobs mail server. bob can move messages into the folders he creates, delete messages, mark messages as important, and so on. 2.4 dnsthe internets directory service we human beings can be identified in many ways. for example, we can be identified by the names that appear on our birth certificates. we can be identified by our social security numbers. we can be identified by our drivers license numbers. smtpalice s mail serverbobs mail server alice s agentbobs agentsmtp or httphttp or imap figure 2.16 email protocols and their communicating entities m02_kuro5469_08_ge_c02.indd 152 03052021 1550 2.4 dnsthe internets directory ser vice 153 although each can be used to identify people, within a given context one identifier may be more appropriate than another. for example, the computers at the irs the infamous taxcollecting agency in the united states prefer to use fixedlength social security numbers rather than birth certificate names. on the other hand, ordinary people prefer the more mnemonic birth certificate names rather than social security numbers. indeed, can you imagine saying, hi. my name is 132679875. please meet my husband, 178871146. just as humans can be identified in many ways, so too can internet hosts. one identifier for a host is its hostname. hostnamessuch as www.facebook.com, www.google.com, gaia.cs.umass.eduare mnemonic and are therefore appreciated by humans. however, hostnames provide little, if any, information about the location within the internet of the host. a hostname such as www.eurecom.fr, which ends with the country code .fr, tells us that the host is probably in france, but doesnt say much more. furthermore, because hostnames can consist of variablelength alphanumeric characters, they would be difficult to process by routers. for these reasons, hosts are also identified by socalled ip addresses. we discuss ip addresses in some detail in chapter 4, but it is useful to say a few brief words about them now. an ip address consists of four bytes and has a rigid hierarchical structure. an ip address looks like 121.7.106.83, where each period separates one of the bytes expressed in decimal notation from 0 to 255. an ip address is hierarchical because as we scan the address from left to right, we obtain more and more specific information about where the host is located in the internet that is, within which network, in the network of networks. similarly, when we scan a postal address from bottom to top, we obtain more and more specific information about where the addressee is located. 2.4.1 services provided by dns we have just seen that there are two ways to identify a hostby a hostname and by an ip address. people prefer the
more mnemonic hostname identifier, while routers prefer fixedlength, hierarchically structured ip addresses. in order to reconcile these preferences, we need a directory service that translates hostnames to ip addresses. this is the main task of the internets domain name system dns. the dns is 1 a distributed database implemented in a hierarchy of dns servers, and 2 an applicationlayer protocol that allows hosts to query the distributed database. the dns servers are often unix machines running the berkeley internet name domain bind software bind 2020. the dns protocol runs over udp and uses port 53. dns is commonly employed by other applicationlayer protocols, including http and smtp, to translate usersupplied hostnames to ip addresses. as an example, consider what happens when a browser that is, an http client, running on some users host, requests the url www.someschool.eduindex.html. in order for the users host to be able to send an http request message to the web m02_kuro5469_08_ge_c02.indd 153 03052021 1550 154 chapter 2 application layer server www.someschool.edu, the users host must first obtain the ip address of www.someschool.edu. this is done as follows. 1. the same user machine runs the client side of the dns application. 2. the browser extracts the hostname, www.someschool.edu, from the url and passes the hostname to the client side of the dns application. 3. the dns client sends a query containing the hostname to a dns server. 4. the dns client eventually receives a reply, which includes the ip address for the hostname. 5. once the browser receives the ip address from dns, it can initiate a tcp connection to the http server process located at port 80 at that ip address. we see from this example that dns adds an additional delaysometimes substantialto the internet applications that use it. fortunately, as we discuss below, the desired ip address is often cached in a nearby dns server, which helps to reduce dns network traffic as well as the average dns delay. dns provides a few other important services in addition to translating host names to ip addresses host aliasing. a host with a complicated hostname can have one or more alias names. for example, a hostname such as relay1.westcoast .enterprise.com could have, say, two aliases such as enterprise.com and www.enterprise.com. in this case, the hostname relay1 .westcoast.enterprise.com is said to be a canonical hostname. alias hostnames, when present, are typically more mnemonic than canonical hostnames. dns can be invoked by an application to obtain the canonical hostname for a supplied alias hostname as well as the ip address of the host. mail server aliasing. for obvious reasons, it is highly desirable that email addresses be mnemonic. for example, if bob has an account with yahoo mail, bobs email address might be as simple as bobyahoo.com. however, the hostname of the yahoo mail server is more complicated and much less mnemonic than simply yahoo.com for example, the canonical hostname might be something like relay1.westcoast.yahoo.com. dns can be invoked by a mail application to obtain the canonical hostname
for a supplied alias hostname as well as the ip address of the host. in fact, the mx record see below permits a companys mail server and web server to have identical aliased hostnames; for example, a companys web server and mail server can both be called enterprise.com. load distribution. dns is also used to perform load distribution among replicated servers, such as replicated web servers. busy sites, such as cnn.com, are replicated over multiple servers, with each server running on a different end system and each having a different ip address. for replicated web servers, a set of ip m02_kuro5469_08_ge_c02.indd 154 03052021 1550 2.4 dnsthe internets directory ser vice 155 addresses is thus associated with one alias hostname. the dns database contains this set of ip addresses. when clients make a dns query for a name mapped to a set of addresses, the server responds with the entire set of ip addresses, but rotates the ordering of the addresses within each reply. because a client typically sends its http request message to the ip address that is listed first in the set, dns rotation distributes the traffic among the replicated servers. dns rotation is also used for email so that multiple mail servers can have the same alias name. also, content distribution companies such as akamai have used dns in more sophisticated ways dilley 2002 to provide web content distribution see section 2.6.3. the dns is specified in rfc 1034 and rfc 1035, and updated in several addi tional rfcs. it is a complex system, and we only touch upon key aspects of its operation here. the interested reader is referred to these rfcs and the book by albitz and liu albitz 1993; see also the retrospective paper mockapetris 1988, which provides a nice description of the what and why of dns, and mockapetris 2005. 2.4.2 overview of how dns works we now present a highlevel overview of how dns works. our discussion will focus on the hostnametoipaddress translation service. suppose that some application such as a web browser or a mail client running in a users host needs to translate a hostname to an ip address. the application will invoke the client side of dns, specifying the hostname that needs to be translated. on many unixbased machines, gethostbyname is the function call that an application calls in order to perform the translation. dns in the users host then dns critical network functions via the clientserver paradigm like http, ftp, and smtp, the dns protocol is an applicationlayer protocol since it 1 runs between communicating end systems using the clientserver paradigm and 2 relies on an underlying endtoend transport protocol to transfer dns messages between communicating end systems. in another sense, however, the role of the dns is quite differ ent from web, file transfer, and email applications. unlike these applications, the dns is not an application with which a user directly interacts. instead, the dns provides a core internet functionnamely, translating hostnames to their underlying ip addresses, for
user applications and other software in the internet. we noted in section 1.2 that much of the complexity in the internet architecture is located at the edges of the network. the dns, which implements the critical nametoaddress translation process using clients and servers located at the edge of the network, is yet another example of that design philosophy.principles in practice m02_kuro5469_08_ge_c02.indd 155 03052021 1550 156 chapter 2 application layer takes over, sending a query message into the network. all dns query and reply mes sages are sent within udp datagrams to port 53. after a delay, ranging from milliseconds to seconds, dns in the users host receives a dns reply message that provides the desired mapping. this mapping is then passed to the invoking application. thus, from the perspective of the invoking application in the users host, dns is a black box providing a simple, straightforward translation service. but in fact, the black box that implements the service is complex, consisting of a large number of dns servers distributed around the globe, as well as an applicationlayer protocol that specifies how the dns servers and querying hosts communicate. a simple design for dns would have one dns server that contains all the map pings. in this centralized design, clients simply direct all queries to the single dns server, and the dns server responds directly to the querying clients. although the simplicity of this design is attractive, it is inappropriate for todays internet, with its vast and growing number of hosts. the problems with a centralized design include a single point of failure. if the dns server crashes, so does the entire internet! traffic volume. a single dns server would have to handle all dns queries for all the http requests and email messages generated from hundreds of millions of hosts. distant centralized database. a single dns server cannot be close to all the querying clients. if we put the single dns server in new york city, then all queries from australia must travel to the other side of the globe, perhaps over slow and congested links. this can lead to significant delays. maintenance. the single dns server would have to keep records for all internet hosts. not only would this centralized database be huge, but it would have to be updated frequently to account for every new host. in summary, a centralized database in a single dns server simply doesnt scale. consequently, the dns is distributed by design. in fact, the dns is a wonderful example of how a distributed database can be implemented in the internet. a distributed, hierarchical database in order to deal with the issue of scale, the dns uses a large number of servers, organized in a hierarchical fashion and distributed around the world. no single dns server has all of the mappings for all of the hosts in the internet. instead, the mappings are distributed across the dns servers. to a first approximation, there are three classes of dns serversroot dns servers, toplevel domain tld
dns servers, and authoritative dns serversorganized in a hierarchy as shown in figure 2.17. to understand how these three classes of servers interact, suppose a dns client wants to determine the ip address for the hostname www.amazon.com. to a first approximation, the following events will take place. the client first contacts one of m02_kuro5469_08_ge_c02.indd 156 03052021 1550 2.4 dnsthe internets directory ser vice 157 the root servers, which returns ip addresses for tld servers for the toplevel domain com. the client then contacts one of these tld servers, which returns the ip address of an authoritative server for amazon.com. finally, the client contacts one of the authoritative servers for amazon.com, which returns the ip address for the hostname www.amazon.com. well soon examine this dns lookup process in more detail. but lets first take a closer look at these three classes of dns servers root dns servers. there are more than 1000 root servers instances scattered all over the world, as shown in figure 2.18. these root servers are copies of 13 different root servers, managed by 12 different organizations, and coordinated through the internet assigned numbers authority iana 2020. the full list of root name servers, along with the organizations that manage them and their ip addresses can be found at root servers 2020. root name servers provide the ip addresses of the tld servers. toplevel domain tld servers. for each of the toplevel domainstoplevel domains such as com, org, net, edu, and gov, and all of the country toplevel domains such as uk, fr, ca, and jpthere is tld server or server cluster. the company verisign global registry services maintains the tld servers for the com toplevel domain, and the company educause maintains the tld servers for the edu toplevel domain. the network infrastructure supporting a tld can be large and complex; see osterweil 2012 for a nice overview of the verisign network. see tld list 2020 for a list of all toplevel domains. tld servers provide the ip addresses for authoritative dns servers. authoritative dns servers. every organization with publicly accessible hosts such as web servers and mail servers on the internet must provide publicly accessible dns records that map the names of those hosts to ip addresses. an organizations authoritative dns server houses these dns records. an organization can choose to implement its own authoritative dns server to hold these records; alternatively, the organization can pay to have these records stored in an edu dns servers org dns servers com dns servers nyu.edu dns serversfacebook.com dns serversamazon.com dns serverspbs.org dns serversumass.edu dns serversroot dns servers figure 2.17 portion of the hierarchy of dns servers m02_kuro5469_08_ge_c02.indd 157 03052021 1550 158 chapter 2 application layer authoritative dns server of some service provider. most universities and large companies implement and maintain their own primary and secondary backup authoritative dns server. the root, tld, and authoritative dns servers all belong to the hierarchy of dns servers, as shown in figure 2.17. there is another important type of dns server called the
local dns server. a local dns server does not strictly belong to the hierarchy of servers but is nevertheless central to the dns architecture. each ispsuch as a residential isp or an institutional isphas a local dns server also called a default name server. when a host connects to an isp, the isp provides the host with the ip addresses of one or more of its local dns servers typically through dhcp, which is discussed in chapter 4. you can easily determine the ip address of your local dns server by accessing network status windows in windows or unix. a hosts local dns server is typically close to the host. for an institutional isp, the local dns server may be on the same lan as the host; for a residential isp, it is typically separated from the host by no more than a few routers. when a host makes a dns query, the query is sent to the local dns server, which acts a proxy, forwarding the query into the dns server hierarchy, as well discuss in more detail below. lets take a look at a simple example. suppose the host cse.nyu.edu desires the ip address of gaia.cs.umass.edu. also suppose that nyus local dns server for cse.nyu.edu is called dns.nyu.edu and that an authoritative dns server for gaia.cs.umass.edu is called dns.umass.edu. as shown in 0 servers 110 servers1120 servers21 serverskey figure 2.18 dns root servers in 2020 m02_kuro5469_08_ge_c02.indd 158 03052021 1550 2.4 dnsthe internets directory ser vice 159 figure 2.19, the host cse.nyu.edu first sends a dns query message to its local dns server, dns.nyu.edu. the query message contains the hostname to be trans lated, namely, gaia.cs.umass.edu. the local dns server forwards the query message to a root dns server. the root dns server takes note of the edu suffix and returns to the local dns server a list of ip addresses for tld servers responsible for edu. the local dns server then resends the query message to one of these tld servers. the tld server takes note of the umass.edu suffix and responds with the ip address of the authoritative dns server for the university of massachusetts, namely, dns.umass.edu. finally, the local dns server resends the query mes sage directly to dns.umass.edu, which responds with the ip address of gaia .cs.umass.edu. note that in this example, in order to obtain the mapping for one hostname, eight dns messages were sent four query messages and four reply messages! well soon see how dns caching reduces this query traffic. our previous example assumed that the tld server knows the authoritative dns server for the hostname. in general, this is not always true. instead, the tld server requesting host cse.nyu.edulocal dns server tld dns server dns.nyu.eduroot dns server 1 82 74 53 6 authoritative dns server dns.umass.edu gaia.cs.umass.edu figure 2.19 interaction of the various dns servers m02_kuro5469_08_ge_c02.indd 159 03052021 1550 160 chapter 2 application layer may know only of an intermediate dns server, which in turn knows the authorita tive dns server
for the hostname. for example, suppose again that the university of massachusetts has a dns server for the university, called dns.umass.edu. also suppose that each of the departments at the university of massachusetts has its own dns server, and that each departmental dns server is authoritative for all hosts in the department. in this case, when the intermediate dns server, dns.umass.edu, receives a query for a host with a hostname ending with cs.umass.edu, it returns to dns.nyu.edu the ip address of dns.cs.umass.edu, which is authoritative for all hostnames ending with cs.umass.edu. the local dns server dns.nyu .edu then sends the query to the authoritative dns server, which returns the desired mapping to the local dns server, which in turn returns the mapping to the requesting host. in this case, a total of 10 dns messages are sent! the example shown in figure 2.19 makes use of both recursive queries and iterative queries. the query sent from cse.nyu.edu to dns.nyu.edu is a recursive query, since the query asks dns.nyu.edu to obtain the mapping on its behalf. however, the subsequent three queries are iterative since all of the replies are directly returned to dns.nyu.edu. in theory, any dns query can be iterative or recursive. for example, figure 2.20 shows a dns query chain for which all of the queries are recursive. in practice, the queries typically follow the pattern in figure 2.19 the query from the requesting host to the local dns server is recursive, and the remaining queries are iterative. dns caching our discussion thus far has ignored dns caching, a critically important feature of the dns system. in truth, dns extensively exploits dns caching in order to improve the delay performance and to reduce the number of dns messages ricocheting around the internet. the idea behind dns caching is very simple. in a query chain, when a dns server receives a dns reply containing, for example, a mapping from a hostname to an ip address, it can cache the mapping in its local memory. for example, in figure 2.19, each time the local dns server dns.nyu.edu receives a reply from some dns server, it can cache any of the information contained in the reply. if a hostnameip address pair is cached in a dns server and another query arrives to the dns server for the same hostname, the dns server can provide the desired ip address, even if it is not authoritative for the hostname. because hosts and mappings between hostnames and ip addresses are by no means permanent, dns servers discard cached information after a period of time often set to two days. as an example, suppose that a host apricot.nyu.edu queries dns.nyu.edu for the ip address for the hostname cnn.com. furthermore, suppose that a few hours later, another nyu host, say, kiwi.nyu.edu, also queries dns.nyu.edu with the same hostname. because of caching, the local dns server will be able to immediately return the ip address of cnn.com to this second requesting host without having to query any other
dns servers. a local dns server can m02_kuro5469_08_ge_c02.indd 160 03052021 1550 2.4 dnsthe internets directory ser vice 161 requesting host cse.nyu.edulocal dns server tld dns server dns.nyu.eduroot dns server 1 85 42 7 authoritative dns server dns.umass.edu gaia.cs.umass.edu63 figure 2.20 recursive queries in dns also cache the ip addresses of tld servers, thereby allowing the local dns server to bypass the root dns servers in a query chain. in fact, because of caching, root servers are bypassed for all but a very small fraction of dns queries. 2.4.3 dns records and messages the dns servers that together implement the dns distributed database store resource records rrs, including rrs that provide hostnametoip address mappings. each dns reply message carries one or more resource records. in this and the following subsection, we provide a brief overview of dns resource records and messages; more details can be found in albitz 1993 or in the dns rfcs rfc 1034; rfc 1035. m02_kuro5469_08_ge_c02.indd 161 03052021 1550 162 chapter 2 application layer a resource record is a fourtuple that contains the following fields name, value, type, ttl ttl is the time to live of the resource record; it determines when a resource should be removed from a cache. in the example records given below, we ignore the ttl field. the meaning of name and value depend on type if typea, then name is a hostname and value is the ip address for the host name. thus, a type a record provides the standard hostnametoip address map ping. as an example, relay1.bar.foo.com, 145.37.93.126, a is a type a record. if typens, then name is a domain such as foo.com and value is the host name of an authoritative dns server that knows how to obtain the ip addresses for hosts in the domain. this record is used to route dns queries further along in the query chain. as an example, foo.com, dns.foo.com, ns is a type ns record. if typecname, then value is a canonical hostname for the alias hostname name. this record can provide querying hosts the canonical name for a hostname. as an example, foo.com, relay1.bar.foo.com, cname is a cname record. if typemx, then value is the canonical name of a mail server that has an alias hostname name. as an example, foo.com, mail.bar.foo.com, mx is an mx record. mx records allow the hostnames of mail servers to have simple aliases. note that by using the mx record, a company can have the same aliased name for its mail server and for one of its other servers such as its web server. to obtain the canonical name for the mail server, a dns client would query for an mx record; to obtain the canonical name for the other server, the dns client would query for the cname record. if a dns server is authoritative for a particular hostname, then the dns server will contain a type a record for the hostname. even if the dns server is not authoritative, it may contain a type a
record in its cache. if a server is not authoritative for a hostname, then the server will contain a type ns record for the domain that includes the hostname; it will also contain a type a record that provides the ip address of the dns server in the value field of the ns record. as an example, suppose an edu tld server is not authoritative for the host gaia.cs.umass.edu. then this server will contain a record for a domain that includes the host gaia.cs.umass .edu, for example, umass.edu, dns.umass.edu, ns. the edu tld server would also contain a type a record, which maps the dns server dns.umass.edu to an ip address, for example, dns.umass.edu, 128.119.40.111, a. m02_kuro5469_08_ge_c02.indd 162 03052021 1550 2.4 dnsthe internets directory ser vice 163 dns messages earlier in this section, we referred to dns query and reply messages. these are the only two kinds of dns messages. furthermore, both query and reply messages have the same format, as shown in figure 2.21.the semantics of the various fields in a dns message are as follows the first 12 bytes is the header section, which has a number of fields. the first field is a 16bit number that identifies the query. this identifier is copied into the reply message to a query, allowing the client to match received replies with sent queries. there are a number of flags in the flag field. a 1bit queryreply flag indicates whether the message is a query 0 or a reply 1. a 1bit authoritative flag is set in a reply message when a dns server is an authoritative server for a queried name. a 1bit recursiondesired flag is set when a client host or dns server desires that the dns server perform recursion when it doesnt have the record. a 1bit recursionavailable field is set in a reply if the dns server supports recursion. in the header, there are also four numberof fields. these fields indicate the number of occurrences of the four types of data sections that follow the header. the question section contains information about the query that is being made. this section includes 1 a name field that contains the name that is being queried, and 2 a type field that indicates the type of question being asked about the namefor example, a host address associated with a name type a or the mail server for a name type mx. identi Ô¨Åcation number of questions number of authority rrs name, type Ô¨Åelds for a query12 bytes rrs in response to query records forauthoritative servers additional helpfulinfo that may be usedflags number of answer rrs number of additional rrs authority variable number of resource records additional information variable number of resource recordsanswers variable number of resource recordsquestions variable number of questions figure 2.21 dns message format m02_kuro5469_08_ge_c02.indd 163 03052021 1550 164 chapter 2 application layer in a reply from a dns server, the answer section contains the resource records for the name that was originally queried. recall that in each
resource record there is the type for example, a, ns, cname, and mx, the value, and the ttl. a reply can return multiple rrs in the answer, since a hostname can have multiple ip addresses for example, for replicated web servers, as discussed earlier in this section. the authority section contains records of other authoritative servers. the additional section contains other helpful records. for example, the answer field in a reply to an mx query contains a resource record providing the canonical hostname of a mail server. the additional section contains a type a record providing the ip address for the canonical hostname of the mail server. how would you like to send a dns query message directly from the host youre working on to some dns server? this can easily be done with the nslookup program, which is available from most windows and unix platforms. for example, from a windows host, open the command prompt and invoke the nslookup program by simply typing nslookup. after invoking nslookup, you can send a dns query to any dns server root, tld, or authoritative. after receiving the reply message from the dns server, nslookup will display the records included in the reply in a humanreadable format. as an alternative to running nslookup from your own host, you can visit one of many web sites that allow you to remotely employ nslookup. just type nslookup into a search engine and youll be brought to one of these sites. the dns wireshark lab at the end of this chapter will allow you to explore the dns in much more detail. inserting records into the dns database the discussion above focused on how records are retrieved from the dns database. you might be wondering how records get into the database in the first place. lets look at how this is done in the context of a specific example. suppose you have just created an exciting new startup company called network utopia. the first thing youll surely want to do is register the domain name networkutopia.com at a registrar. a registrar is a commercial entity that verifies the uniqueness of the domain name, enters the domain name into the dns database as discussed below, and collects a small fee from you for its services. prior to 1999, a single registrar, network solutions, had a monopoly on domain name registration for com, net, and org domains. but now there are many registrars competing for customers, and the internet corporation for assigned names and numbers icann accredits the various registrars. a complete list of accredited registrars is available at httpwww.internic.net. when you register the domain name networkutopia.com with some reg istrar, you also need to provide the registrar with the names and ip addresses of your primary and secondary authoritative dns servers. suppose the names and ip addresses are dns1.networkutopia.com, dns2.networkutopia.com, 212.2.212.1, and 212.212.212.2. for each of these two authoritative dns m02_kuro5469_08_ge_c02.indd 164 03052021 1550 2.4 dnsthe internets directory ser vice 165 dns vulnerabilities we have seen that
dns is a critical component of the internet infrastructure, with many important servicesincluding the web and emailsimply incapable of func tioning without it. we therefore naturally ask, how can dns be attacked? is dns a sitting duck, waiting to be knocked out of service, while taking most internet applica tions down with it? the first type of attack that comes to mind is a ddos bandwidthflooding attack see section 1.6 against dns servers. for example, an attacker could attempt to send to each dns root server a deluge of packets, so many that the majority of legitimate dns queries never get answered. such a largescale ddos attack against dns root servers actually took place on october 21, 2002. in this attack, the attack ers leveraged a botnet to send truck loads of icmp ping messages to each of the 13 dns root ip addresses. icmp messages are discussed in section 5.6. for now, it suffices to know that icmp packets are special types of ip datagrams. fortunately, this largescale attack caused minimal damage, having little or no impact on users internet experience. the attackers did succeed at directing a deluge of packets at the root servers. but many of the dns root servers were protected by packet filters, con figured to always block all icmp ping messages directed at the root servers. these protected servers were thus spared and functioned as normal. furthermore, most local dns servers cache the ip addresses of topleveldomain servers, allowing the query process to often bypass the dns root servers. a potentially more effective ddos attack against dns is send a deluge of dns queries to topleveldomain servers, for example, to topleveldomain servers that handle the .com domain. it is harder to filter dns queries directed to dns servers; and topleveldomain servers are not as easily bypassed as are root servers. such an attack took place against the topleveldomain service provider dyn on october 21, 2016. this ddos attack was accomplished through a large number of dns lookup requests from a botnet consisting of about one hundred thousand iot devices such as printers, ip cameras, residential gateways and baby monitors that had been infected with mirai malware. for almost a full day, amazon, twitter, netflix, github and spotify were disturbed. dns could potentially be attacked in other ways. in a maninthemiddle attack, the attacker intercepts queries from hosts and returns bogus replies. in the dns poi soning attack, the attacker sends bogus replies to a dns server, tricking the server into accepting bogus records into its cache. either of these attacks could be used, for example, to redirect an unsuspecting web user to the attackers web site. the dns security extensions dnssec gieben 2004; rfc 4033 have been designed and deployed to protect against such exploits. dnssec, a secured version of dns, addresses many of these possible attacks and is gaining popularity in the internet.focus on security m02_kuro5469_08_ge_c02.indd 165 03052021 1550 166 chapter 2 application layer servers, the registrar would then make sure that a
type ns and a type a record are entered into the tld com servers. specifically, for the primary authoritative server for networkutopia.com, the registrar would insert the following two resource records into the dns system networkutopia.com, dns1.networkutopia.com, ns dns1.networkutopia.com, 212.212.212.1, a youll also have to make sure that the type a resource record for your web server www.networkutopia.com and the type mx resource record for your mail server mail.networkutopia.com are entered into your authoritative dns servers. until recently, the contents of each dns server were configured statically, for example, from a configuration file created by a system manager. more recently, an update option has been added to the dns protocol to allow data to be dynamically added or deleted from the database via dns messages. rfc 2136 and rfc 3007 specify dns dynamic updates. once all of these steps are completed, people will be able to visit your web site and send email to the employees at your company. lets conclude our discussion of dns by verifying that this statement is true. this verification also helps to solidify what we have learned about dns. suppose alice in australia wants to view the web page www.networkutopia.com. as discussed earlier, her host will first send a dns query to her local dns server. the local dns server will then contact a tld com server. the local dns server will also have to contact a root dns server if the address of a tld com server is not cached. this tld server contains the type ns and type a resource records listed above, because the registrar had these resource records inserted into all of the tld com servers. the tld com server sends a reply to alices local dns server, with the reply containing the two resource records. the local dns server then sends a dns query to 212.212.212.1, asking for the type a record corresponding to www.networkutopia.com. this record provides the ip address of the desired web server, say, 212.212.71.4, which the local dns server passes back to alices host. alices browser can now initiate a tcp connection to the host 212.212.71.4 and send an http request over the connection. whew! theres a lot more going on than what meets the eye when one surfs the web! 2.5 peertopeer file distribution the applications described in this chapter thus farincluding the web, email, and dnsall employ clientserver architectures with significant reliance on alwayson infrastructure servers. recall from section 2.1.1 that with a p2p architecture, there is minimal or no reliance on alwayson infrastructure servers. instead, pairs of intermittently connected hosts, called peers, communicate directly with each other. the peers are not owned by a service provider, but are instead pcs, laptops, and smartpones controlled by users. m02_kuro5469_08_ge_c02.indd 166 03052021 1550 2.5 peer topeer file dis tribution 167 in this section, we consider a very natural p2p application, namely, distributing a large file from a single server to a large number of hosts called peers. the file might be a new version of the
linux operating system, a software patch for an existing operating system or an mpeg video file. in clientserver file distribution, the server must send a copy of the file to each of the peersplacing an enormous burden on the server and consuming a large amount of server bandwidth. in p2p file distribution, each peer can redistribute any portion of the file it has received to any other peers, thereby assisting the server in the distribution process. as of 2020, the most popular p2p file distribution protocol is bittorrent. originally developed by bram cohen, there are now many different independent bittorrent clients conforming to the bittorrent protocol, just as there are a number of web browser clients that conform to the http protocol. in this subsection, we first examine the selfscalability of p2p architectures in the context of file distribution. we then describe bittorrent in some detail, highlighting its most important characteristics and features. scalability of p2p architectures to compare clientserver architectures with peertopeer architectures, and illustrate the inherent selfscalability of p2p, we now consider a simple quantitative model for distributing a file to a fixed set of peers for both architecture types. as shown in figure 2.22, the server and the peers are connected to the internet with access internetfile f server usu1 u2 u3d1 d2 d3 u4 u5 u6d4 d5d6undn figure 2.22 an illustrative file distribution problem m02_kuro5469_08_ge_c02.indd 167 03052021 1550 168 chapter 2 application layer links. denote the upload rate of the servers access link by us, the upload rate of the ith peers access link by ui, and the download rate of the i th peers access link by di. also denote the size of the file to be distributed in bits by f and the number of peers that want to obtain a copy of the file by n . the distribution time is the time it takes to get a copy of the file to all n peers. in our analysis of the distribution time below, for both clientserver and p2p architectures, we make the simplifying and generally accurate akella 2003 assumption that the internet core has abundant bandwidth, implying that all of the bottlenecks are in access networks. we also suppose that the server and clients are not participating in any other network applications, so that all of their upload and download access bandwidth can be fully devoted to distributing this file. lets first determine the distribution time for the clientserver architecture, which we denote by dcs. in the clientserver architecture, none of the peers aids in distributing the file. we make the following observations the server must transmit one copy of the file to each of the n peers. thus, the server must transmit nf bits. since the servers upload rate is us, the time to dis tribute the file must be at least nfus. let dmin denote the download rate of the peer with the lowest download rate, that is, dminmin5d1, dp, . . . , d n6. the peer with the
lowest download rate cannot obtain all f bits of the file in less than fdmin seconds. thus, the minimum distri bution time is at least fdmin. putting these two observations together, we obtain dcs√∫maxbnf us , f dminr. this provides a lower bound on the minimum distribution time for the clientserver architecture. in the homework problems, you will be asked to show that the server can schedule its transmissions so that the lower bound is actually achieved. so lets take this lower bound provided above as the actual distribution time, that is, d csmaxbnf us, f dminr 2.1 we see from equation 2.1 that for n large enough, the clientserver distribution time is given by nfus. thus, the distribution time increases linearly with the number of peers n. so, for example, if the number of peers from one week to the next increases a thousandfold from a thousand to a million, the time required to distribute the file to all peers increases by 1,000. m02_kuro5469_08_ge_c02.indd 168 03052021 1550 2.5 peer topeer file dis tribution 169 lets now go through a similar analysis for the p2p architecture, where each peer can assist the server in distributing the file. in particular, when a peer receives some file data, it can use its own upload capacity to redistribute the data to other peers. calculating the distribution time for the p2p architecture is somewhat more complicated than for the clientserver architecture, since the distribution time depends on how each peer distributes portions of the file to the other peers. nevertheless, a simple expression for the minimal distribution time can be obtained kumar 2006. to this end, we first make the following observations at the beginning of the distribution, only the server has the file. to get this file into the community of peers, the server must send each bit of the file at least once into its access link. thus, the minimum distribution time is at least fus. unlike the clientserver scheme, a bit sent once by the server may not have to be sent by the server again, as the peers may redistribute the bit among themselves. as with the clientserver architecture, the peer with the lowest download rate cannot obtain all f bits of the file in less than fdmin seconds. thus, the minimum distribution time is at least fdmin. finally, observe that the total upload capacity of the system as a whole is equal to the upload rate of the server plus the upload rates of each of the individual peers, that is, utotalusu1g un. the system must deliver upload f bits to each of the n peers, thus delivering a total of nf bits. this cannot be done at a rate faster than utotal. thus, the minimum distribution time is also at least nfusu1g un. putting these three observations together, we obtain the minimum distribution time for p2p, denoted by dp2p. dp2p√∫max cf us, f dmin, nf usan i1uis 2.2 equation 2.2 provides a lower bound for the minimum distribution
time for the p2p architecture. it turns out that if we imagine that each peer can redistribute a bit as soon as it receives the bit, then there is a redistribution scheme that actually achieves this lower bound kumar 2006. we will prove a special case of this result in the homework. in reality, where chunks of the file are redistributed rather than individual bits, equation 2.2 serves as a good approximation of the actual minimum distribution time. thus, lets take the lower bound provided by equation 2.2 as the actual minimum distribution time, that is, dp2pmax cf us, f dmin, nf usan i1uis 2.3 m02_kuro5469_08_ge_c02.indd 169 03052021 1550 170 chapter 2 application layer figure 2.23 compares the minimum distribution time for the clientserver and p2p architectures assuming that all peers have the same upload rate u. in figure 2.23, we have set fu1 hour, us10u, and dmin√∫us. thus, a peer can transmit the entire file in one hour, the server transmission rate is 10 times the peer upload rate, and for simplicity the peer download rates are set large enough so as not to have an effect. we see from figure 2.23 that for the clientserver architecture, the distri bution time increases linearly and without bound as the number of peers increases. however, for the p2p architecture, the minimal distribution time is not only always less than the distribution time of the clientserver architecture; it is also less than one hour for any number of peers n. thus, applications with the p2p architecture can be selfscaling. this scalability is a direct consequence of peers being redistributors as well as consumers of bits. bittorrent bittorrent is a popular p2p protocol for file distribution chao 2011. in bittorrent lingo, the collection of all peers participating in the distribution of a particular file is called a torrent. peers in a torrent download equalsize chunks of the file from one another, with a typical chunk size of 256 kbytes. when a peer first joins a torrent, it has no chunks. over time it accumulates more and more chunks. while it downloads chunks it also uploads chunks to other peers. once a peer has acquired the entire file, it may selfishly leave the torrent, or altruistically remain in the torrent and continue to upload chunks to other peers. also, any peer may leave the torrent at any time with only a subset of chunks, and later rejoin the torrent.0 5 10 15 20 25 30 0 nminimum distribution time 350.51.52.5 1.03.0 2.03.5 clientserver p2p figure 2.23 distribution time for p2p and clientserver architectures m02_kuro5469_08_ge_c02.indd 170 03052021 1550 2.5 peer topeer file dis tribution 171 lets now take a closer look at how bittorrent operates. since bittorrent is a rather complicated protocol and system, well only describe its most important mechanisms, sweeping some of the details under the rug; this will allow us to see the forest through the trees. each torrent has an infrastructure node called a tracker. when a peer joins a torrent,
it registers itself with the tracker and periodically informs the tracker that it is still in the torrent. in this manner, the tracker keeps track of the peers that are participating in the torrent. a given torrent may have fewer than ten or more than a thousand peers participating at any instant of time. as shown in figure 2.24, when a new peer, alice, joins the torrent, the tracker randomly selects a subset of peers for concreteness, say 50 from the set of participating peers, and sends the ip addresses of these 50 peers to alice. possessing this list of peers, alice attempts to establish concurrent tcp connections with all the peers on this list. lets call all the peers with which alice succeeds in establishing a tcp connection neighboring peers. in figure 2.24, alice is shown to have only three neighboring peers. normally, she would have many more. as time evolves, some of these peers may leave and other peers outside the initial 50 may attempt to establish tcp connections with alice. so a peers neighboring peers will fluctuate over time.tracker trading chunkspeer obtain list ofpeers alice figure 2.24 file distribution with bittorrent m02_kuro5469_08_ge_c02.indd 171 03052021 1550 172 chapter 2 application layer at any given time, each peer will have a subset of chunks from the file, with dif ferent peers having different subsets. periodically, alice will ask each of her neigh boring peers over the tcp connections for the list of the chunks they have. if alice has l different neighbors, she will obtain l lists of chunks. with this knowledge, alice will issue requests again over the tcp connections for chunks she currently does not have. so at any given instant of time, alice will have a subset of chunks and will know which chunks her neighbors have. with this information, alice will have two important decisions to make. first, which chunks should she request first from her neighbors? and second, to which of her neighbors should she send requested chunks? in deciding which chunks to request, alice uses a technique called rarest first. the idea is to determine, from among the chunks she does not have, the chunks that are the rarest among her neighbors that is, the chunks that have the fewest repeated copies among her neighbors and then request those rarest chunks first. in this manner, the rarest chunks get more quickly redistributed, aiming to roughly equalize the numbers of copies of each chunk in the torrent. to determine which requests she responds to, bittorrent uses a clever trading algorithm. the basic idea is that alice gives priority to the neighbors that are currently supplying her data at the highest rate. specifically, for each of her neighbors, alice continually measures the rate at which she receives bits and determines the four peers that are feeding her bits at the highest rate. she then reciprocates by sending chunks to these same four peers. every 10 seconds, she recalculates the rates and possibly modifies the set
of four peers. in bittorrent lingo, these four peers are said to be unchoked. importantly, every 30 seconds, she also picks one additional neighbor at random and sends it chunks. lets call the randomly chosen peer bob. in bittorrent lingo, bob is said to be optimistically unchoked. because alice is sending data to bob, she may become one of bobs top four uploaders, in which case bob would start to send data to alice. if the rate at which bob sends data to alice is high enough, bob could then, in turn, become one of alices top four uploaders. in other words, every 30 seconds, alice will randomly choose a new trading partner and initiate trading with that partner. if the two peers are satisfied with the trading, they will put each other in their top four lists and continue trading with each other until one of the peers finds a better partner. the effect is that peers capable of uploading at compatible rates tend to find each other. the random neighbor selection also allows new peers to get chunks, so that they can have something to trade. all other neighboring peers besides these five peers four top peers and one probing peer are choked, that is, they do not receive any chunks from alice. bittorrent has a number of interesting mechanisms that are not discussed here, including pieces minichunks, pipelining, random first selection, endgame mode, and antisnubbing cohen 2003. the incentive mechanism for trading just described is often referred to as titfor tat cohen 2003. it has been shown that this incentive scheme can be circumvented liogkas 2006; locher 2006; piatek 2008. nevertheless, the bittorrent ecosystem is wildly successful, with millions of simultaneous peers actively sharing files in m02_kuro5469_08_ge_c02.indd 172 03052021 1550 2.6 video streaming and c ontent dis tribution netw orks 173 hundreds of thousands of torrents. if bittorrent had been designed without titfortat or a variant, but otherwise exactly the same, bittorrent would likely not even exist now, as the majority of the users would have been freeriders saroiu 2002. we close our discussion on p2p by briefly mentioning another application of p2p, namely, distributed hast table dht. a distributed hash table is a simple database, with the database records being distributed over the peers in a p2p system. dhts have been widely implemented e.g., in bittorrent and have been the subject of extensive research. an overview is provided in a video note in the companion website. 2.6 video streaming and content distribution networks by many estimates, streaming videoincluding netflix, youtube and amazon primeaccount for about 80 of internet traffic in 2020 cisco 2020. this section we will provide an overview of how popular video streaming services are implemented in todays internet. we will see they are implemented using applicationlevel protocols and servers that function in some ways like a cache. 2.6.1 internet video in streaming stored video applications, the underlying medium is prerecorded video, such as a movie, a television show, a prerecorded sporting event, or
a prerecorded usergenerated video such as those commonly seen on youtube. these prerecorded videos are placed on servers, and users send requests to the servers to view the videos on demand. many internet companies today provide streaming video, including, netflix, youtube google, amazon, and tiktok. but before launching into a discussion of video streaming, we should first get a quick feel for the video medium itself. a video is a sequence of images, typically being displayed at a constant rate, for example, at 24 or 30 images per second. an uncompressed, digitally encoded image consists of an array of pixels, with each pixel encoded into a number of bits to represent luminance and color. an important characteristic of video is that it can be compressed, thereby trading off video quality with bit rate. todays offtheshelf compression algorithms can compress a video to essentially any bit rate desired. of course, the higher the bit rate, the better the image quality and the better the overall user viewing experience. from a networking perspective, perhaps the most salient characteristic of video is its high bit rate. compressed internet video typically ranges from 100 kbps for lowquality video to over 4 mbps for streaming highdefinition movies; 4k streaming envisions a bitrate of more than 10 mbps. this can translate to huge amount of traffic and storage, particularly for highend video. for example, a single 2 mbps walking though distributed hash tablesvideonote m02_kuro5469_08_ge_c02.indd 173 03052021 1550 174 chapter 2 application layer video with a duration of 67 minutes will consume 1 gigabyte of storage and traffic. by far, the most important performance measure for streaming video is average endtoend throughput. in order to provide continuous playout, the network must provide an average throughput to the streaming application that is at least as large as the bit rate of the compressed video. we can also use compression to create multiple versions of the same video, each at a different quality level. for example, we can use compression to create, say, three versions of the same video, at rates of 300 kbps, 1 mbps, and 3 mbps. users can then decide which version they want to watch as a function of their current available bandwidth. users with highspeed internet connections might choose the 3 mbps version; users watching the video over 3g with a smartphone might choose the 300 kbps version. 2.6.2 http streaming and dash in http streaming, the video is simply stored at an http server as an ordinary file with a specific url. when a user wants to see the video, the client establishes a tcp connection with the server and issues an http get request for that url. the server then sends the video file, within an http response message, as quickly as the underlying network protocols and traffic conditions will allow. on the client side, the bytes are collected in a client application buffer. once the number of bytes in this buffer exceeds a predetermined threshold, the client application begins playbackspecifically, the
streaming video application periodically grabs video frames from the client application buffer, decompresses the frames, and displays them on the users screen. thus, the video streaming application is displaying video as it is receiving and buffering frames corresponding to latter parts of the video. although http streaming, as described in the previous paragraph, has been extensively deployed in practice for example, by youtube since its inception, it has a major shortcoming all clients receive the same encoding of the video, despite the large variations in the amount of bandwidth available to a client, both across different clients and also over time for the same client. this has led to the development of a new type of httpbased streaming, often referred to as dynamic adaptive streaming over http dash. in dash, the video is encoded into several different versions, with each version having a different bit rate and, correspondingly, a different quality level. the client dynamically requests chunks of video segments of a few seconds in length. when the amount of available bandwidth is high, the client naturally selects chunks from a highrate version; and when the available bandwidth is low, it naturally selects from a lowrate version. the client selects different chunks one at a time with http get request messages akhshabi 2011. dash allows clients with different internet access rates to stream in video at different encoding rates. clients with lowspeed 3g connections can receive a low bitrate and lowquality version, and clients with fiber connections can receive a highquality version. dash also allows a client to adapt to the available bandwidth if the available endtoend bandwidth changes during the session. this feature is m02_kuro5469_08_ge_c02.indd 174 03052021 1550 2.6 video streaming and c ontent dis tribution netw orks 175 particularly important for mobile users, who typically see their bandwidth availabil ity fluctuate as they move with respect to the base stations. with dash, each video version is stored in the http server, each with a differ ent url. the http server also has a manifest file, which provides a url for each version along with its bit rate. the client first requests the manifest file and learns about the various versions. the client then selects one chunk at a time by specifying a url and a byte range in an http get request message for each chunk. while downloading chunks, the client also measures the received bandwidth and runs a rate determination algorithm to select the chunk to request next. naturally, if the client has a lot of video buffered and if the measured receive bandwidth is high, it will choose a chunk from a highbitrate version. and naturally if the client has little video buffered and the measured received bandwidth is low, it will choose a chunk from a lowbitrate version. dash therefore allows the client to freely switch among different quality levels. 2.6.3 content distribution networks today, many internet video companies are distributing ondemand multimbps streams to millions of users on a daily basis. youtube, for example,
with a library of hundreds of millions of videos, distributes hundreds of millions of video streams to users around the world every day. streaming all this traffic to locations all over the world while providing continuous playout and high interactivity is clearly a challenging task. for an internet video company, perhaps the most straightforward approach to providing streaming video service is to build a single massive data center, store all of its videos in the data center, and stream the videos directly from the data center to clients worldwide. but there are three major problems with this approach. first, if the client is far from the data center, servertoclient packets will cross many communication links and likely pass through many isps, with some of the isps possibly located on different continents. if one of these links provides a throughput that is less than the video consumption rate, the endtoend throughput will also be below the consumption rate, resulting in annoying freezing delays for the user. recall from chapter 1 that the endtoend throughput of a stream is governed by the throughput at the bottleneck link. the likelihood of this happening increases as the number of links in the endtoend path increases. a second drawback is that a popular video will likely be sent many times over the same communication links. not only does this waste network bandwidth, but the internet video company itself will be paying its provider isp connected to the data center for sending the same bytes into the internet over and over again. a third problem with this solution is that a single data center represents a single point of failureif the data center or its links to the internet goes down, it would not be able to distribute any video streams. in order to meet the challenge of distributing massive amounts of video data to users distributed around the world, almost all major videostreaming companies make use of content distribution networks cdns. a cdn manages servers in m02_kuro5469_08_ge_c02.indd 175 03052021 1550 176 chapter 2 application layer multiple geographically distributed locations, stores copies of the videos and other types of web content, including documents, images, and audio in its servers, and attempts to direct each user request to a cdn location that will provide the best user experience. the cdn may be a private cdn, that is, owned by the content provider itself; for example, googles cdn distributes youtube videos and other types of content. the cdn may alternatively be a thirdparty cdn that distributes content on behalf of multiple content providers; akamai, limelight and level3 all operate thirdparty cdns. a very readable overview of modern cdns is leighton 2009; nygren 2010. cdns typically adopt one of two different server placement philosophies huang 2008 enter deep. one philosophy, pioneered by akamai, is to enter deep into the access networks of internet service providers, by deploying server clusters in access isps all over the world. access networks are described in section 1.3. akamai takes this approach with clusters
in thousands of locations. the goal is to get close to end users, thereby improving userperceived delay and throughput by decreasing the number of links and routers between the end user and the cdn server from which it receives content. because of this highly distributed design, the task of maintaining and managing the clusters becomes challenging. bring home. a second design philosophy, taken by limelight and many other cdn companies, is to bring the isps home by building large clusters at a smaller number for example, tens of sites. instead of getting inside the access isps, these cdns typically place their clusters in internet exchange points ixps see section 1.3 . compared with the enterdeep design phi losophy, the bringhome design typically results in lower maintenance and management overhead, possibly at the expense of higher delay and lower throughput to end users. once its clusters are in place, the cdn replicates content across its clusters. the cdn may not want to place a copy of every video in each cluster, since some videos are rarely viewed or are only popular in some countries. in fact, many cdns do not push videos to their clusters but instead use a simple pull strategy if a client requests a video from a cluster that is not storing the video, then the cluster retrieves the video from a central repository or from another cluster and stores a copy locally while streaming the video to the client at the same time. similar web caching see section 2.2.5, when a clusters storage becomes full, it removes videos that are not frequently requested. cdn operation having identified the two major approaches toward deploying a cdn, lets now dive down into the nuts and bolts of how a cdn operates. when a browser in a users m02_kuro5469_08_ge_c02.indd 176 03052021 1550 2.6 video streaming and c ontent dis tribution netw orks 177 host is instructed to retrieve a specific video identified by a url, the cdn must intercept the request so that it can 1 determine a suitable cdn server cluster for that client at that time, and 2 redirect the clients request to a server in that cluster. well shortly discuss how a cdn can determine a suitable cluster. but first lets examine the mechanics behind intercepting and redirecting a request. most cdns take advantage of dns to intercept and redirect requests; an inter esting discussion of such a use of the dns is vixie 2009. lets consider a simple googles network infrastructure to support its vast array of servicesincluding search, gmail, calendar, youtube video, maps, documents, and social networksgoogle has deployed an extensive private network and cdn infrastructure. googles cdn infrastructure has three tiers of server clusters nineteen mega data centers in north america, europe, and asia google locations 2020, with each data center having on the order of 100,000 servers. these mega data centers are responsible for serving dynamic and often personal ized content, including search results and gmail messages. with about 90 clusters in ixps
scattered throughout the world, with each cluster consisting of hundreds of servers servers adhikari 2011a google cdn 2020. these clusters are responsible for serving static content, including youtube videos. many hundreds of enterdeep clusters located within an access isp. here a cluster typically consists of tens of servers within a single rack. these enterdeep servers perform tcp splitting see section 3.7 and serve static content chen 2011, including the static portions of web pages that embody search results. all of these data centers and cluster locations are networked together with googles own private network. when a user makes a search query, often the query is first sent over the local isp to a nearby enterdeep cache, from where the static content is retrieved; while providing the static content to the client, the nearby cache also forwards the query over googles private network to one of the mega data cent ers, from where the personalized search results are retrieved. for a youtube video, the video itself may come from one of the bringhome caches, whereas portions of the web page surrounding the video may come from the nearby enterdeep cache, and the advertisements surrounding the video come from the data centers. in sum mary, except for the local isps, the google cloud services are largely provided by a network infrastructure that is independent of the public internet.case study m02_kuro5469_08_ge_c02.indd 177 03052021 1550 178 chapter 2 application layer example to illustrate how the dns is typically involved. suppose a content provider, netcinema, employs the thirdparty cdn company, kingcdn, to distribute its videos to its customers. on the netcinema web pages, each of its videos is assigned a url that includes the string video and a unique identifier for the video itself; for example, transformers 7 might be assigned httpvideo.netcinema.com6y7b23v. six steps then occur, as shown in figure 2.25 1. the user visits the web page at netcinema. 2. when the user clicks on the link httpvideo.netcinema.com6y7b23v, the users host sends a dns query for video.netcinema.com. 3. the users local dns server ldns relays the dns query to an authoritative dns server for netcinema, which observes the string video in the hostname video.netcinema.com. to hand over the dns query to kingcdn, instead of returning an ip address, the netcinema authoritative dns server returns to the ldns a hostname in the kingcdns domain, for example, a1105.kingcdn.com. 4. from this point on, the dns query enters into kingcdns private dns infrastructure. the users ldns then sends a second query, now for a1105.kingcdn.com, and kingcdns dns system eventually returns the ip addresses of a kingcdn content server to the ldns. it is thus here, within the kingcdns dns system, that the cdn server from which the client will receive its content is specified. local dns servernetcinema authoritative dns serverwww.netcinema.com kingcdn authoritative server kingcdn content distribution server2 5 631 4 figure 2.25 dns redirects a users request to a cdn server m02_kuro5469_08_ge_c02.indd 178 03052021 1550 2.6 video streaming and c ontent dis tribution netw orks 179 5.
the ldns forwards the ip address of the contentserving cdn node to the users host. 6. once the client receives the ip address for a kingcdn content server, it establishes a direct tcp connection with the server at that ip address and issues an http get request for the video. if dash is used, the server will first send to the client a manifest file with a list of urls, one for each version of the video, and the client will dynamically select chunks from the different versions. cluster selection strategies at the core of any cdn deployment is a cluster selection strategy, that is, a mechanism for dynamically directing clients to a server cluster or a data center within the cdn. as we just saw, the cdn learns the ip address of the clients ldns server via the clients dns lookup. after learning this ip address, the cdn needs to select an appropriate cluster based on this ip address. cdns generally employ proprietary cluster selection strategies. we now briefly survey a few approaches, each of which has its own advantages and disadvantages. one simple strategy is to assign the client to the cluster that is geographically clos est. using commercial geolocation databases such as quova quova 2020 and maxmind maxmind 2020, each ldns ip address is mapped to a geographic location. when a dns request is received from a particular ldns, the cdn chooses the geographically closest cluster, that is, the cluster that is the fewest kilometers from the ldns as the bird flies. such a solution can work reasonably well for a large fraction of the clients agarwal 2009. however, for some clients, the solution may perform poorly, since the geographically closest cluster may not be the closest cluster in terms of the length or number of hops of the network path. furthermore, a problem inherent with all dnsbased approaches is that some endusers are configured to use remotely located ldnss shaikh 2001; mao 2002, in which case the ldns location may be far from the clients location. moreover, this simple strategy ignores the variation in delay and available bandwidth over time of internet paths, always assigning the same cluster to a particular client. in order to determine the best cluster for a client based on the current traffic conditions, cdns can instead perform periodic realtime measurements of delay and loss performance between their clusters and clients. for instance, a cdn can have each of its clusters periodically send probes for example, ping messages or dns queries to all of the ldnss around the world. one drawback of this approach is that many ldnss are configured to not respond to such probes. 2.6.4 case studies netflix and youtube we conclude our discussion of streaming stored video by taking a look at two highly successful largescale deployments netflix and youtube. well see that each of these systems take a very different approach, yet employ many of the underlying principles discussed in this section. m02_kuro5469_08_ge_c02.indd 179 03052021 1550 180 chapter
2 application layer netflix as of 2020, netflix is the leading service provider for online movies and tv series in north america. as we discuss below, netflix video distribution has two major components the amazon cloud and its own private cdn infrastructure. netflix has a web site that handles numerous functions, including user registra tion and login, billing, movie catalogue for browsing and searching, and a movie recommendation system. as shown in figure 2.26, this web site and its associated backend databases run entirely on amazon servers in the amazon cloud. additionally, the amazon cloud handles the following critical functions content ingestion. before netflix can distribute a movie to its customers, it must first ingest and process the movie. netflix receives studio master versions of movies and uploads them to hosts in the amazon cloud. content processing. the machines in the amazon cloud create many different formats for each movie, suitable for a diverse array of client video players running on desktop computers, smartphones, and game consoles connected to televisions. a different version is created for each of these formats and at multiple bit rates, allowing for adaptive streaming over http using dash. uploading versions to its cdn. once all of the versions of a movie have been created, the hosts in the amazon cloud upload the versions to its cdn. amazon cloud cdn servercdn serverupload versions to cdns cdn server clientmani fest Ô¨Åle video chunks dash figure 2.26 netflix video streaming platform m02_kuro5469_08_ge_c02.indd 180 03052021 1550 2.6 video streaming and c ontent dis tribution netw orks 181 when netflix first rolled out its video streaming service in 2007, it employed three thirdparty cdn companies to distribute its video content. netflix has since created its own private cdn, from which it now streams all of its videos. to create its own cdn, netflix has installed server racks both in ixps and within residential isps themselves. netflix currently has server racks in over 200 ixp locations; see bottger 2018 netflix open connect 2020 for a current list of ixps housing netflix racks. there are also hundreds of isp locations housing netflix racks; also see netflix open connect 2020, where netflix provides to potential isp partners instructions about installing a free netflix rack for their networks. each server in the rack has several 10 gbps ethernet ports and over 100 terabytes of storage. the number of servers in a rack varies ixp installations often have tens of servers and contain the entire netflix streaming video library, including multiple versions of the videos to support dash. netflix does not use pullcaching section 2.2.5 to populate its cdn servers in the ixps and isps. instead, netflix distributes by pushing the videos to its cdn servers during offpeak hours. for those locations that cannot hold the entire library, netflix pushes only the most popular videos, which are determined on a daytoday basis. the netflix cdn design is described in some detail in the youtube videos netflix video 1 and netflix video 2; see also bottger
2018. having described the components of the netflix architecture, lets take a closer look at the interaction between the client and the various servers that are involved in movie delivery. as indicated earlier, the web pages for browsing the netflix video library are served from servers in the amazon cloud. when a user selects a movie to play, the netflix software, running in the amazon cloud, first determines which of its cdn servers have copies of the movie. among the servers that have the movie, the software then determines the best server for that client request. if the client is using a residential isp that has a netflix cdn server rack installed in that isp, and this rack has a copy of the requested movie, then a server in this rack is typically selected. if not, a server at a nearby ixp is typically selected. once netflix determines the cdn server that is to deliver the content, it sends the client the ip address of the specific server as well as a manifest file, which has the urls for the different versions of the requested movie. the client and that cdn server then directly interact using a proprietary version of dash. specifically, as described in section 2.6.2, the client uses the byterange header in http get request messages, to request chunks from the different versions of the movie. netflix uses chunks that are approximately fourseconds long adhikari 2012. while the chunks are being downloaded, the client measures the received throughput and runs a ratedetermination algorithm to determine the quality of the next chunk to request. netflix embodies many of the key principles discussed earlier in this section, including adaptive streaming and cdn distribution. however, because netflix uses its own private cdn, which distributes only video and not web pages, netflix has been able to simplify and tailor its cdn design. in particular, netflix does not need to employ dns redirect, as discussed in section 2.6.3, to connect a particular client to a cdn server; instead, the netflix software running in the amazon cloud directly tells m02_kuro5469_08_ge_c02.indd 181 03052021 1550 182 chapter 2 application layer the client to use a particular cdn server. furthermore, the netflix cdn uses push caching rather than pull caching section 2.2.5 content is pushed into the servers at scheduled times at offpeak hours, rather than dynamically during cache misses. youtube with hundreds of hours of video uploaded to youtube every minute and several billion video views per day, youtube is indisputably the worlds largest videosharing site. youtube began its service in april 2005 and was acquired by google in november 2006. although the googleyoutube design and protocols are proprietary, through several independent measurement efforts we can gain a basic understanding about how youtube operates zink 2009; torres 2011; adhikari 2011a. as with netflix, youtube makes extensive use of cdn technology to distribute its videos torres 2011. similar to netflix, google uses its own private cdn to distribute youtube videos, and has installed server clusters in many
hundreds of different ixp and isp locations. from these locations and directly from its huge data centers, google distributes youtube videos adhikari 2011a. unlike netflix, however, google uses pull caching, as described in section 2.2.5, and dns redirect, as described in section 2.6.3. most of the time, googles clusterselection strategy directs the client to the cluster for which the rtt between client and cluster is the lowest; however, in order to balance the load across clusters, sometimes the client is directed via dns to a more distant cluster torres 2011. youtube employs http streaming, often making a small number of differ ent versions available for a video, each with a different bit rate and corresponding quality level. youtube does not employ adaptive streaming such as dash, but instead requires the user to manually select a version. in order to save bandwidth and server resources that would be wasted by repositioning or early termination, youtube uses the http byte range request to limit the flow of transmitted data after a target amount of video is prefetched. several million videos are uploaded to youtube every day. not only are you tube videos streamed from server to client over http, but youtube uploaders also upload their videos from client to server over http. youtube processes each video it receives, converting it to a youtube video format and creating multiple versions at different bit rates. this processing takes place entirely within google data centers. see the case study on googles network infrastructure in section 2.6.3. 2.7 socket programming creating network applications now that weve looked at a number of important network applications, lets explore how network application programs are actually created. recall from section 2.1 that a typical network application consists of a pair of programsa client program and m02_kuro5469_08_ge_c02.indd 182 03052021 1550 2.7 socket programming creating netw ork applications 183 a server programresiding in two different end systems. when these two programs are executed, a client process and a server process are created, and these processes communicate with each other by reading from, and writing to, sockets. when creating a network application, the developers main task is therefore to write the code for both the client and server programs. there are two types of network applications. one type is an implementation whose operation is specified in a protocol standard, such as an rfc or some other standards document; such an application is sometimes referred to as open, since the rules specifying its operation are known to all. for such an implementation, the client and server programs must conform to the rules dictated by the rfc. for example, the client program could be an implementation of the client side of the http protocol, described in section 2.2 and precisely defined in rfc 2616; similarly, the server program could be an implementation of the http server protocol, also precisely defined in rfc 2616. if one developer writes code for the client program and another developer writes code for the server program, and both developers carefully
follow the rules of the rfc, then the two programs will be able to interoperate. indeed, many of todays network applications involve communication between client and server programs that have been created by independent developersfor example, a google chrome browser communicating with an apache web server, or a bittorrent client communicating with bittorrent tracker. the other type of network application is a proprietary network application. in this case, the client and server programs employ an applicationlayer protocol that has not been openly published in an rfc or elsewhere. a single developer or development team creates both the client and server programs, and the developer has complete control over what goes in the code. but because the code does not implement an open protocol, other independent developers will not be able to develop code that interoperates with the application. in this section, well examine the key issues in developing a clientserver appli cation, and well get our hands dirty by looking at code that implements a very simple clientserver application. during the development phase, one of the first decisions the developer must make is whether the application is to run over tcp or over udp. recall that tcp is connection oriented and provides a reliable bytestream channel through which data flows between two end systems. udp is connectionless and sends independent packets of data from one end system to the other, without any guarantees about delivery. recall also that when a client or server program implements a protocol defined by an rfc, it should use the wellknown port number associated with the protocol; conversely, when developing a proprietary application, the developer must be careful to avoid using such wellknown port numbers. port numbers were briefly discussed in section 2.1. they are covered in more detail in chapter 3. we introduce udp and tcp socket programming by way of a simple udp application and a simple tcp application. we present the simple udp and tcp applications in python 3. we could have written the code in java, c, or c, but we chose python mostly because python clearly exposes the key socket concepts. with m02_kuro5469_08_ge_c02.indd 183 03052021 1550 184 chapter 2 application layer python there are fewer lines of code, and each line can be explained to the novice programmer without difficulty. but theres no need to be frightened if you are not familiar with python. you should be able to easily follow the code if you have experience programming in java, c, or c. if you are interested in clientserver programming with java, you are encour aged to see the companion website for this textbook; in fact, you can find there all the examples in this section and associated labs in java. for readers who are interested in clientserver programming in c, there are several good references available donahoo 2001; stevens 1997; frost 1994; our python examples below have a similar look and feel to c. 2.7.1 socket programming with udp in this subsection, well write simple clientserver programs that use
udp; in the following section, well write similar programs that use tcp. recall from section 2.1 that processes running on different machines communi cate with each other by sending messages into sockets. we said that each process is analogous to a house and the processs socket is analogous to a door. the application resides on one side of the door in the house; the transportlayer protocol resides on the other side of the door in the outside world. the application developer has control of everything on the applicationlayer side of the socket; however, it has little control of the transportlayer side. now lets take a closer look at the interaction between two communicating pro cesses that use udp sockets. before the sending process can push a packet of data out the socket door, when using udp, it must first attach a destination address to the packet. after the packet passes through the senders socket, the internet will use this destination address to route the packet through the internet to the socket in the receiving process. when the packet arrives at the receiving socket, the receiving process will retrieve the packet through the socket, and then inspect the packets contents and take appropriate action. so you may be now wondering, what goes into the destination address that is attached to the packet? as you might expect, the destination hosts ip address is part of the destination address. by including the destination ip address in the packet, the routers in the internet will be able to route the packet through the internet to the destination host. but because a host may be running many network application processes, each with one or more sockets, it is also necessary to identify the particular socket in the destination host. when a socket is created, an identifier, called a port number, is assigned to it. so, as you might expect, the packets destination address also includes the sockets port number. in summary, the sending process attaches to the packet a destination address, which consists of the destination hosts ip address and the destination sockets port number. moreover, as we shall soon see, the senders source addressconsisting of the m02_kuro5469_08_ge_c02.indd 184 03052021 1550 2.7 socket programming creating netw ork applications 185 ip address of the source host and the port number of the source socketare also attached to the packet. however, attaching the source address to the packet is typically not done by the udp application code; instead it is automatically done by the underlying operating system. well use the following simple clientserver application to demonstrate socket programming for both udp and tcp 1. the client reads a line of characters data from its keyboard and sends the data to the server. 2. the server receives the data and converts the characters to uppercase. 3. the server sends the modified data to the client. 4. the client receives the modified data and displays the line on its screen. figure 2.27 highlights the main socketrelated activity of the
client and server that communicate over the udp transport service. create socket, portxserver serversocket socketaf_inet,sock_dgramrunning on serveripclient read udp segment from serversocket write reply to speci fying client address, port numberserversocketcreate datagram with serverip and portx ; send datagram via clientsocketcreate socket clientsocket socketaf_inet,sock_dgram read datagram from clientsocket close clientsocket figure 2.27 the clientserver application using udp m02_kuro5469_08_ge_c02.indd 185 03052021 1550 186 chapter 2 application layer now lets get our hands dirty and take a look at the clientserver program pair for a udp implementation of this simple application. we also provide a detailed, linebyline analysis after each program. well begin with the udp client, which will send a simple applicationlevel message to the server. in order for the server to be able to receive and reply to the clients message, it must be ready and runningthat is, it must be running as a process before the client sends its message. the client program is called udpclient.py, and the server program is called udpserver.py. in order to emphasize the key issues, we intentionally provide code that is minimal. good code would certainly have a few more auxiliary lines, in particular for handling error cases. for this application, we have arbitrarily chosen 12000 for the server port number. udpclient.py here is the code for the client side of the application from socket import servername hostnameserverport 12000clientsocket socketaf_inet, sock_dgrammessage inputinput lowercase sentenceclientsocket.sendtomessage.encode,servername, serverportmodifiedmessage, serveraddress clientsocket.recvfrom2048printmodifiedmessage.decodeclientsocket.close now lets take a look at the various lines of code in udpclient.py.from socket import the socket module forms the basis of all network communications in python. by including this line, we will be able to create sockets within our program. servername hostname serverport 12000 the first line sets the variable servername to the string hostname. here, we pro vide a string containing either the ip address of the server e.g., 128.138.32.126 or the hostname of the server e.g., cis.poly.edu. if we use the hostname, then a dns lookup will automatically be performed to get the ip address. the second line sets the integer variable serverport to 12000. clientsocket socketaf_inet, sock_dgram m02_kuro5469_08_ge_c02.indd 186 03052021 1550 2.7 socket programming creating netw ork applications 187 this line creates the clients socket, called clientsocket. the first param eter indicates the address family; in particular, af_inet indicates that the underlying network is using ipv4. do not worry about this nowwe will discuss ipv4 in chapter 4. the second parameter indicates that the socket is of type sock_dgram, which means it is a udp socket rather than a tcp socket. note that we are not specifying the port number of the client socket when we create it; we are instead letting the operating system do this for us. now that the client processs door has been created, we will want to create a message to send through the door. message inputinput lowercase sentenceinput is a builtin function in python. when this command is executed, the user at the client is prompted with the words input lowercase sentence the user then uses her
keyboard to input a line, which is put into the variable message. now that we have a socket and a message, we will want to send the message through the socket to the destination host. clientsocket.sendtomessage.encode, servername, serverportin the above line, we first convert the message from string type to byte type, as we need to send bytes into a socket; this is done with the encode method. the method sendto attaches the destination address servername, serverport to the message and sends the resulting packet into the processs socket, clientsocket. as mentioned earlier, the source address is also attached to the packet, although this is done automatically rather than explicitly by the code. sending a clienttoserver message via a udp socket is that simple! after sending the packet, the client waits to receive data from the server. modifiedmessage, serveraddress clientsocket.recvfrom2048with the above line, when a packet arrives from the internet at the clients socket, the packets data is put into the variable modifiedmessage and the packets source address is put into the variable serveraddress. the variable serveraddress contains both the servers ip address and the servers port number. the program udpclient doesnt actually need this server address information, since it already knows the server address from the outset; but this line of python provides the server address nevertheless. the method recvfrom also takes the buffer size 2048 as input. this buffer size works for most purposes. printmodifiedmessage.decode m02_kuro5469_08_ge_c02.indd 187 03052021 1550 188 chapter 2 application layer this line prints out modifiedmessage on the users display, after converting the mes sage from bytes to string. it should be the original line that the user typed, but now capitalized. clientsocket.closethis line closes the socket. the process then terminates. udpserver.py lets now take a look at the server side of the applicationfrom socket import serverport 12000serversocket socketaf_inet, sock_dgramserversocket.bind, serverportprintthe server is ready to receivewhile true message, clientaddress serversocket.recvfrom2048 modifiedmessage message.decode.upper serversocket.sendtomodifiedmessage.encode, clientaddress note that the beginning of udpserver is similar to udpclient. it also imports the socket module, also sets the integer variable serverport to 12000, and also creates a socket of type sock_dgram a udp socket. the first line of code that is significantly different from udpclient is serversocket.bind, serverportthe above line binds that is, assigns the port number 12000 to the servers socket. thus, in udpserver, the code written by the application developer is explicitly assigning a port number to the socket. in this manner, when anyone sends a packet to port 12000 at the ip address of the server, that packet will be directed to this socket. udpserver then enters a while loop; the while loop will allow udpserver to receive and process packets from clients indefinitely. in the while loop, udpserver waits for a packet to arrive. message, clientaddress serversocket.recvfrom2048this line of code is similar to what we saw in udpclient. when a packet arrives at the servers socket, the packets data is put into the variable message and the m02_kuro5469_08_ge_c02.indd 188 03052021 1550 2.7 socket programming creating netw
ork applications 189 packets source address is put into the variable clientaddress. the variable clientaddress contains both the clients ip address and the clients port number. here, udpserver will make use of this address information, as it provides a return address, similar to the return address with ordinary postal mail. with this source address information, the server now knows to where it should direct its reply. modifiedmessage message.decode.upperthis line is the heart of our simple application. it takes the line sent by the client and, after converting the message to a string, uses the method upper to capitalize it. serversocket.sendtomodifiedmessage.encode, clientaddress this last line attaches the clients address ip address and port number to the capital ized message after converting the string to bytes, and sends the resulting packet into the servers socket. as mentioned earlier, the server address is also attached to the packet, although this is done automatically rather than explicitly by the code. the internet will then deliver the packet to this client address. after the server sends the packet, it remains in the while loop, waiting for another udp packet to arrive from any client running on any host. to test the pair of programs, you run udpclient.py on one host and udps erver.py on another host. be sure to include the proper hostname or ip address of the server in udpclient.py. next, you execute udpserver.py, the compiled server program, in the server host. this creates a process in the server that idles until it is contacted by some client. then you execute udpclient.py, the compiled client program, in the client. this creates a process in the client. finally, to use the application at the client, you type a sentence followed by a carriage return. to develop your own udp clientserver application, you can begin by slightly modifying the client or server programs. for example, instead of converting all the letters to uppercase, the server could count the number of times the letter s appears and return this number. or you can modify the client so that after receiving a capitalized sentence, the user can continue to send more sentences to the server. 2.7.2 socket programming with tcp unlike udp, tcp is a connectionoriented protocol. this means that before the client and server can start to send data to each other, they first need to handshake and establish a tcp connection. one end of the tcp connection is attached to the client socket and the other end is attached to a server socket. when creating the tcp connection, we associate with it the client socket address ip address and port number and the server socket address ip address and port number. with the tcp connection established, when one side wants to send data to the other side, it just drops the m02_kuro5469_08_ge_c02.indd 189 03052021 1550 190 chapter 2 application layer data into the tcp connection via its socket. this is different from udp, for which the server must attach a destination address to the packet before
dropping it into the socket. now lets take a closer look at the interaction of client and server programs in tcp. the client has the job of initiating contact with the server. in order for the server to be able to react to the clients initial contact, the server has to be ready. this implies two things. first, as in the case of udp, the tcp server must be running as a process before the client attempts to initiate contact. second, the server program must have a special doormore precisely, a special socketthat welcomes some initial contact from a client process running on an arbitrary host. using our housedoor analogy for a processsocket, we will sometimes refer to the clients initial contact as knocking on the welcoming door. with the server process running, the client process can initiate a tcp connection to the server. this is done in the client program by creating a tcp socket. when the client creates its tcp socket, it specifies the address of the welcoming socket in the server, namely, the ip address of the server host and the port number of the socket. after creating its socket, the client initiates a threeway handshake and establishes a tcp connection with the server. the threeway handshake, which takes place within the transport layer, is completely invisible to the client and server programs. during the threeway handshake, the client process knocks on the welcom ing door of the server process. when the server hears the knocking, it creates a new doormore precisely, a new socket that is dedicated to that particular client. in our example below, the welcoming door is a tcp socket object that we call serversocket; the newly created socket dedicated to the client making the con nection is called connectionsocket. students who are encountering tcp sockets for the first time sometimes confuse the welcoming socket which is the initial point of contact for all clients wanting to communicate with the server, and each newly created serverside connection socket that is subsequently created for communicating with each client. from the applications perspective, the clients socket and the servers con nection socket are directly connected by a pipe. as shown in figure 2.28, the client process can send arbitrary bytes into its socket, and tcp guarantees that the server process will receive through the connection socket each byte in the order sent. tcp thus provides a reliable service between the client and server processes. furthermore, just as people can go in and out the same door, the client process not only sends bytes into but also receives bytes from its socket; similarly, the server process not only receives bytes from but also sends bytes into its connection socket. we use the same simple clientserver application to demonstrate socket pro gramming with tcp the client sends one line of data to the server, the server capitalizes the line and sends it back to the client. figure 2.29 highlights the main socketrelated activity of the client and server
that communicate over the tcp transport service. m02_kuro5469_08_ge_c02.indd 190 03052021 1550 2.7 socket programming creating netw ork applications 191 tcpclient.py here is the code for the client side of the application from socket import servername servernameserverport 12000clientsocket socketaf_inet, sock_streamclientsocket.connectservername,serverportsentence inputinput lowercase sentenceclientsocket.sendsentence.encodemodifiedsentence clientsocket.recv1024printfrom server , modifiedsentence.decode clientsocket.close lets now take a look at the various lines in the code that differ significantly from the udp implementation. the first such line is the creation of the client socket. clientsocket socketaf_inet, sock_streamthis line creates the clients socket, called clientsocket. the first parameter again indicates that the underlying network is using ipv4. the second parameter client pr ocess server pr ocess client socketwelcoming socket threeway handshake connection socketbytes bytes figure 2.28 the tcpserver process has two sockets m02_kuro5469_08_ge_c02.indd 191 03052021 1550 192 chapter 2 application layer indicates that the socket is of type sock_stream, which means it is a tcp socket rather than a udp socket. note that we are again not specifying the port number of the client socket when we create it; we are instead letting the operating system do this for us. now the next line of code is very different from what we saw in udpclient clientsocket.connectservername,serverportrecall that before the client can send data to the server or vice versa using a tcp socket, a tcp connection must first be established between the client and server. the close connectionsocketwrite reply to connectionsocketread request from connectionsocketcreate socket, portx, for incoming requestserver serversocket socket wait for incoming connection request connectionsocket serversocket.acceptrunning on serveripclient tcp connection setupcreate socket, connect to serverip , portx clientsocket socket read reply from clientsocketsend request using clientsocket close clientsocket figure 2.29 the clientserver application using tcp m02_kuro5469_08_ge_c02.indd 192 03052021 1550 2.7 socket programming creating netw ork applications 193 above line initiates the tcp connection between the client and server. the parameter of the connect method is the address of the server side of the connection. after this line of code is executed, the threeway handshake is performed and a tcp connection is established between the client and server. sentence inputinput lowercase sentenceas with udpclient, the above obtains a sentence from the user. the string sentence continues to gather characters until the user ends the line by typing a carriage return. the next line of code is also very different from udpclient clientsocket.sendsentence.encodethe above line sends the sentence through the clients socket and into the tcp connection. note that the program does not explicitly create a packet and attach the destination address to the packet, as was the case with udp sockets. instead the client program simply drops the bytes in the string sentence into the tcp connection. the client then waits to receive bytes from the server. modifiedsentence clientsocket.recv2048when characters arrive from the server, they get placed into the string modifiedsentence. characters continue to accumulate in modifiedsen tence until the line ends with a carriage return character. after printing the capitalized sentence, we close the clients socket clientsocket.closethis last line closes the socket and, hence, closes the
tcp connection between the client and the server. it causes tcp in the client to send a tcp message to tcp in the server see section 3.5. tcpserver.py now lets take a look at the server program. from socket import serverport 12000serversocket socketaf_inet,sock_streamserversocket.bind,serverportserversocket.listen1printthe server is ready to receive m02_kuro5469_08_ge_c02.indd 193 03052021 1550 194 chapter 2 application layer while true connectionsocket, addr serversocket.accept sentence connectionsocket.recv1024.decode capitalizedsentence sentence.upper connectionsocket.sendcapitalizedsentence.encode connectionsocket.close lets now take a look at the lines that differ significantly from udpserver and tcp client. as with tcpclient, the server creates a tcp socket with serversocketsocketaf_inet,sock_streamsimilar to udpserver, we associate the server port number, serverport, with this socket serversocket.bind,serverportbut with tcp, serversocket will be our welcoming socket. after establish ing this welcoming door, we will wait and listen for some client to knock on the door serversocket.listen1this line has the server listen for tcp connection requests from the client. the parameter specifies the maximum number of queued connections at least 1. connectionsocket, addr serversocket.accept when a client knocks on this door, the program invokes the accept method for serversocket, which creates a new socket in the server, called connectionsocket, dedicated to this particular client. the client and server then complete the handshaking, creating a tcp connection between the clients clientsocket and the servers connectionsocket. with the tcp connection established, the client and server can now send bytes to each other over the connection. with tcp, all bytes sent from one side are only guaranteed to arrive at the other side but also guaranteed to arrive in order. connectionsocket.closein this program, after sending the modified sentence to the client, we close the con nection socket. but since serversocket remains open, another client can now knock on the door and send the server a sentence to modify. m02_kuro5469_08_ge_c02.indd 194 03052021 1550 2.8 summary 195 this completes our discussion of socket programming in tcp. you are encour aged to run the two programs in two separate hosts, and also to modify them to achieve slightly different goals. you should compare the udp program pair with the tcp program pair and see how they differ. you should also do many of the socket programming assignments described at the ends of chapter 2 and 5. finally, we hope someday, after mastering these and more advanced socket programs, you will write your own popular network application, become very rich and famous, and remember the authors of this textbook! 2.8 summary in this chapter, weve studied the conceptual and the implementation aspects of network applications. weve learned about the ubiquitous clientserver architecture adopted by many internet applications and seen its use in the http, smtp, and dns protocols. weve studied these important applicationlevel protocols, and their corresponding associated applications the web, file transfer, email, and dns in some detail. weve learned about the p2p architecture and contrasted it with the clientserver architecture. weve also learned about streaming video, and how modern video distribution systems leverage cdns. weve examined how the socket api can be used to build network
applications. weve walked through the use of sockets for connectionoriented tcp and connectionless udp endtoend transport services. the first step in our journey down the layered network architecture is now complete! at the very beginning of this book, in section 1.1, we gave a rather vague, bare bones definition of a protocol the format and the order of messages exchanged between two or more communicating entities, as well as the actions taken on the transmission andor receipt of a message or other event. the material in this chapter, and in particular our detailed study of the http, smtp, and dns protocols, has now added considerable substance to this definition. protocols are a key concept in networking; our study of application protocols has now given us the opportunity to develop a more intuitive feel for what protocols are all about. in section 2.1, we described the service models that tcp and udp offer to applications that invoke them. we took an even closer look at these service models when we developed simple applications that run over tcp and udp in section 2.7. however, we have said little about how tcp and udp provide these service models. for example, we know that tcp provides a reliable data service, but we havent said yet how it does so. in the next chapter, well take a careful look at not only the what, but also the how and why of transport protocols. equipped with knowledge about internet application structure and application level protocols, were now ready to head further down the protocol stack and examine the transport layer in chapter 3. m02_kuro5469_08_ge_c02.indd 195 03052021 1550 196 chapter 2 application layer homework problems and questions chapter 2 review questions section 2.1 r1. list five nonproprietary internet applications and the applicationlayer proto cols that they use. r2. what is the difference between network architecture and application architecture? r3. for a communication session between a pair of processes, which process is the client and which is the server? r4. why are the terms client and server still used in peertopeer applications? r5. what information is used by a process running on one host to identify a process running on another host? r6. what is the role of http in a network application? what other components are needed to complete a web application? r7. referring to figure 2.4, we see that none of the applications listed in figure 2.4 requires both no data loss and timing. can you conceive of an application that requires no data loss and that is also highly timesensitive? r8. list the four broad classes of services that a transport protocol can provide. for each of the service classes, indicate if either udp or tcp or both provides such a service. r9. recall that tcp can be enhanced with tls to provide processtoprocess security services, including encryption. does tls operate at the transport layer or the application layer? if the application developer wants tcp to be enhanced with tls, what does the developer have
to do? sections 2.22.5 r10. what is meant by a handshaking protocol? r11. what does a stateless protocol mean? is imap stateless? what about smtp? r12. how can websites keep track of users? do they always need to use cookies? r13. describe how web caching can reduce the delay in receiving a requested object. will web caching reduce the delay for all objects requested by a user or for only some of the objects? why? r14. telnet into a web server and send a multiline request message. include in the request message the ifmodifiedsince header line to force a response message with the 304 not modified status code. r15. are there any constraints on the format of the http body? what about the email message body sent with smtp? how can arbitrary data be transmitted over smtp? m02_kuro5469_08_ge_c02.indd 196 03052021 1550 homew ork problems and ques tions 197 r16. suppose alice, with a webbased email account such as hotmail or gmail, sends a message to bob, who accesses his mail from his mail server using imap. discuss how the message gets from alices host to bobs host. be sure to list the series of applicationlayer protocols that are used to move the message between the two hosts. r17. print out the header of an email message you have recently received. how many received header lines are there? analyze each of the header lines in the message. r18. what is the hol blocking issue in http1.1? how does http2 attempt to solve it? r19. why are mx records needed? would it not be enough to use a cname record? assume the email client looks up email addresses through a type a query and that the target host only runs an email server. r20. what is the difference between recursive and iterative dns queries? section 2.5 r21. under what circumstances is file downloading through p2p much faster than through a centralized clientserver approach? justify your answer using equation 2.2. r22. consider a new peer alice that joins bittorrent without possessing any chunks. without any chunks, she cannot become a topfour uploader for any of the other peers, since she has nothing to upload. how then will alice get her first chunk? r23. assume a bittorrent tracker suddenly becomes unavailable. what are its consequences? can files still be downloaded? section 2.6 r24. cdns typically adopt one of two different server placement philosophies. name and briefly describe them. r25. besides networkrelated considerations such as delay, loss, and bandwidth performance, there are other important factors that go into designing a cdn server selection strategy. what are they? section 2.7 r26. in section 2.7, the udp server described needed only one socket, whereas the tcp server needed two sockets. why? if the tcp server were to support n simultaneous connections, each from a different client host, how many sockets would the tcp server need? m02_kuro5469_08_ge_c02.indd 197 03052021 1550 198 chapter 2 application layer r27. for the clientserver application over tcp described in section 2.7, why must
the server program be executed before the client program? for the clientserver application over udp, why may the client program be executed before the server program? problems p1. true or false? a. a user requests a web page that consists of some text and three images. for this page, the client will send one request message and receive four response messages. b. two distinct web pages for example, www.mit.eduresearch .html and www.mit.edustudents.html can be sent over the same persistent connection. c. with nonpersistent connections between browser and origin server, it is possible for a single tcp segment to carry two distinct http request messages. d. the date header in the http response message indicates when the object in the response was last modified. e. http response messages never have an empty message body. p2. sms, imessage, wechat, and whatsapp are all smartphone realtime messaging systems. after doing some research on the internet, for each of these systems write one paragraph about the protocols they use. then write a paragraph explaining how they differ. p3. assume you open a browser and enter httpyourbusiness.com about.html in the address bar. what happens until the webpage is displayed? provide details about the protocols used and a highlevel description of the messages exchanged. p4. consider the following string of ascii characters that were captured by wireshark when the browser sent an http get message i.e., this is the actual content of an http get message. the characters crlf are carriage return and linefeed characters that is, the italized character string cr in the text below represents the single carriagereturn character that was contained at that point in the http header. answer the following questions, indicating where in the http get message below you find the answer. get cs453index.html http1.1crlfhost gaia.cs.umass.educrlfuseragent mozilla5.0 windows;u; windows nt 5.1; enus; rv1.7.2 gecko20040804 netscape7.2 ax crlfacceptextxml, applicationxml, applicationxhtmlxml, texthtml;q0.9, textplain;q0.8,imagepng,;q0.5 m02_kuro5469_08_ge_c02.indd 198 03052021 1550 problems 199 crlfacceptlanguage enus,en;q0.5crlfaccept encoding zip,deflatecrlfacceptcharset iso88591,utf8;q0.7,;q0.7crlfkeepalive 300crlfconnectionkeepalivecrlfcrlf a. what is the url of the document requested by the browser? b. what version of http is the browser running? c. does the browser request a nonpersistent or a persistent connection? d. what is the ip address of the host on which the browser is running? e. what type of browser initiates this message? why is the browser type needed in an http request message? p5. the text below shows the reply sent from the server in response to the http get message in the question above. answer the following questions, indicating where in the message below you find the answer. http1.1 200 okcrlfdate tue, 07 mar 2008123945gmtcrlfserver apache2.0.52 fedoracrlflastmodified sat, 10 dec2005 182746 gmtcrlfetag 526c3f22a88a4c80crlfaccept ranges bytescrlfcontentlength 3874crlf keepalive timeoutmax100crlfconnectionkeepalivecrlfcontenttype texthtml; charset iso88591crlfcrlf!doctype html public w3cdtd html 4.0transitionalenlfhtmllf headlf meta httpequivcontenttype contenttexthtml; charsetiso88591lf metanamegenerator contentmozilla4.79 en windows nt5.0; u netscapelf titlecmpsci 453 591 ntust550aspring 2005 homepagetitlelfheadlf much more document text following here not shown a. was the server able to successfully find the document or not? what time was the document reply provided? b. when was
the document last modified? c. how many bytes are there in the document being returned? d. what are the first 5 bytes of the document being returned? did the server agree to a persistent connection? p6. obtain the http1.1 specification rfc 2616. answer the following questions a. explain the mechanism used for signaling between the client and server to indicate that a persistent connection is being closed. can the client, the server, or both signal the close of a connection? m02_kuro5469_08_ge_c02.indd 199 03052021 1550 200 chapter 2 application layer b. what encryption services are provided by http? c. can a client open three or more simultaneous connections with a given server? d. either a server or a client may close a transport connection between them if either one detects the connection has been idle for some time. is it possible that one side starts closing a connection while the other side is transmitting data via this connection? explain. p7. suppose within your web browser, you click on a link to obtain a web page. the ip address for the associated url is not cached in your local host, so a dns lookup is necessary to obtain the ip address. suppose that n dns servers are visited before your host receives the ip address from dns; the successive visits incur an rtt of rtt1, . . . , r ttn. further suppose that the web page associated with the link contains exactly one object, consisting of a large amount of html text. let rtt0 denote the rtt between the local host and the server containing the object. assuming transmission duration of 0.002rtt0 of the object, how much time elapses from when the client clicks on the link until the client receives the object? p8. consider problem p7 again and assume rtt0rtt1rtt2. . . rttnrtt, furthermore, assume a new html file, small enough to have negligible transmission time, which references nine equally small objects on the same server. how much time elapses with a. nonpersistent http with no parallel tcp connections? b. nonpersistent http with the browser configured for 6 parallel connections? c. persistent http? p9. consider figure 2.12, for which there is an institutional network connected to the internet. moreover, assume the access link has been upgraded to 54 mbps, and the institutional lan is upgraded to 10 gbps. suppose that the average object size is 1,600,000 bits and that the average request rate from the institutions browsers to the origin servers is 24 requests per second. also suppose that the amount of time it takes from when the router on the internet side of the access link forwards an http request until it receives the response is three seconds on average see section 2.2.5. model the total average response time as the sum of the average access delay that is, the delay from internet router to institution router and the average internet delay. for the average access delay, use 1b, where is the average time required to send an object
over the access link and b is the arrival rate of objects to the access link. a. find the total average response time. b. now suppose a cache is installed in the institutional lan. suppose the miss rate is 0.3. find the total response time. p10. consider a 30meter link, over which a sender can transmit at a rate of 300 bitssec in both directions. suppose that packets containing data are 100,000 bits long, and packets containing only control e.g., ack or m02_kuro5469_08_ge_c02.indd 200 03052021 1550 problems 201 handshaking are 200 bits long. assume that n parallel connections each get 1n of the link bandwidth. now, consider the http protocol and suppose that each downloaded object is 100 kbits long, and that the initial downloaded object contains 10 referenced objects from the same sender. would parallel downloads via parallel instances of nonpersistent http make sense in this case? now consider persistent http. do you expect significant gains over the nonpersistent case? justify and explain your answer. p11. consider the scenario introduced in the previous problem. now, suppose that the link is shared by alice with bob. alice does not use parallel instances of nonpersistent http while bob uses nonpersistent http with five parallel downloads each. a. does alice have any advantage over bob? why or why not? b. if alice opens five parallel instances of nonpersistent http, then would her parallel connections be beneficial? why or why not? p12. write a simple tcp program for a server that accepts lines of input from a cli ent and prints the lines onto the servers standard output. you can do this by modifying the tcpserver.py program in the text. compile and execute your program. on any other machine that contains a web browser, set the proxy server in the browser to the host that is running your server program; also configure the port number appropriately. your browser should now send its get request messages to your server, and your server should display the messages on its standard output. use this platform to determine whether your browser generates conditional get messages for objects that are locally cached. p13. consider sending over http2 a web page that consists of one video file and three images. suppose that the video clip is transported as 5000 frames, and each image captures four frames. a. if all the video frames are sent first without interleaving, how many frame times are needed until all images are sent? b. if frames are interleaved, how many frame times are needed until all three images are sent? p14. consider the web page in problem 13. now http2 prioritization is employed. suppose all the images are given priority over the video clip, and that the first image is given priority over the second image, the second image over the third image, and so on. how many frame times will be needed until the second image is sent? p15. what is the difference between mail from in smtp and from in the mail
message itself? p16. how does smtp mark the end of a message body? how about http? can http use the same method as smtp to mark the end of a message body? explain. m02_kuro5469_08_ge_c02.indd 201 03052021 1550 202 chapter 2 application layer p17. read rfc 5321 for smtp. what does mta stand for? consider the follow ing received spam email modified from a real spam email. assuming only the originator of this spam email is malicious and all other hosts are honest, identify the malacious host that has generated this spam email. from fri nov 07 134130 2008returnpath tennis5pp33head.comreceived from barmail.cs.umass.edu barmail.cs.umass.edu128.119.240.3 by cs.umass.edu 8.13.18.12.6 forhgcs.umass.edu; fri, 7 nov 2008 132710 0500received from asusus4b96 localhost 127.0.0.1 bybarmail.cs.umass.edu spam firewall for hgcs.umass.edu; fri, 7nov 2008 132707 0500 estreceived from asusus4b96 58.88.21.177 by barmail.cs.umass.edufor hgcs.umass.edu; fri, 07 nov 2008 132707 0500 estreceived from 58.88.21.177 by inbnd55.exchangeddd.com; sat, 8nov 2008 012707 0700from jonny tennis5pp33head.comto hgcs.umass.edu subject how to secure your savings p18. a. what is a whois database? b. use various whois databases on the internet to obtain the names of two dns servers. indicate which whois databases you used. c. use nslookup on your local host to send dns queries to three dns servers your local dns server and the two dns servers you found in part b. try querying for type a, ns, and mx reports. summarize your findings. d. use nslookup to find a web server that has multiple ip addresses. does the web server of your institution school or company have multiple ip addresses? e. use the arin whois database to determine the ip address range used by your university. f. describe how an attacker can use whois databases and the nslookup tool to perform reconnaissance on an institution before launching an attack. g. discuss why whois databases should be publicly available. m02_kuro5469_08_ge_c02.indd 202 03052021 1550 problems 203 p19. in this problem, we use the useful dig tool available on unix and linux hosts to explore the hierarchy of dns servers. recall that in figure 2.19, a dns server in the dns hierarchy delegates a dns query to a dns server lower in the hierarchy, by sending back to the dns client the name of that lowerlevel dns server. first read the man page for dig, and then answer the following questions. a. starting with a root dns server from one of the root servers am. rootservers.net, initiate a sequence of queries for the ip address for your departments web server by using dig. show the list of the names of dns servers in the delegation chain in answering your query. b. repeat part a for several popular web sites, such as google.com, yahoo .com, or amazon.com. p20. consider the scenarios illustrated in figures 2.12 and 2.13. assume the rate of the institutional network is rl and that of the bottleneck link is rb. suppose there are n clients requesting a file of size l with http at the same time. for what values of rl would the file
transfer takes less time when a proxy is installed at the institutional network? assume the rtt between a client and any other host in the institutional network is negligible. p21. suppose that your department has a local dns server for all computers in the department. you are an ordinary user i.e., not a networksystem administrator. can you determine if an external web site was likely accessed from a computer in your department a couple of seconds ago? explain. p22. consider distributing a file of f10 gbits to n peers. the server has an upload rate of us1 gbps, and each peer has a download rate of di200 mbps and an upload rate of u. for n10, 100, and 1,000 and u2 mbps, 10 mbps, and 100 mbps, prepare a table giving the minimum distribution time in seconds for each of the combinations of n and u for both clientserver distribution and p2p distribution. p23. consider distributing a file of f bits to n peers using a clientserver archi tecture. assume a fluid model where the server can simultaneously transmit to multiple peers, transmitting to each peer at different rates, as long as the combined rate does not exceed us. a. suppose that usndmin. specify a distribution scheme that has a distri bution time of nfus. b. suppose that usn√∫dmin. specify a distribution scheme that has a distri bution time of fdmin. c. conclude that the minimum distribution time is in general given by max5nfus, fdmin6. p24. consider distributing a file of f bits to n peers using a p2p architecture. assume a fluid model. for simplicity assume that dmin is very large, so that peer download bandwidth is never a bottleneck. a. suppose that ususu1. . .unn. specify a distribution scheme that has a distribution time of fus. m02_kuro5469_08_ge_c02.indd 203 03052021 1550 204 chapter 2 application layer b. suppose that us√∫usu1. . .unn. specify a distribution scheme that has a distribution time of nfusu1. . . un. c. conclude that the minimum distribution time is in general given by max5fus, nfusu1. . .un6. p25. consider an overlay network with n active peers, with each pair of peers hav ing an active tcp connection. additionally, suppose that the tcp connec tions pass through a total of m routers. how many nodes and edges are there in the corresponding overlay network? p26. suppose bob joins a bittorrent torrent, but he does not want to upload any data to any other peers he wants to be a socalled freerider. a. alice who has been using bittorrent tells bob that he cannot receive a complete copy of the file that is shared by the swarm. is alice correct or not? why? b. charlie claims that alice is wrong and that he has even been using a collection of multiple computers with distinct ip addresses in the computer lab in his department to make his downloads faster, using some additional coordination scripting. what could his script have done? p27. consider a dash system for which
there are n video versions at n different rates and qualities and n audio versions at n different rates and qualities. suppose we want to allow the player to choose at any time any of the n video versions and any of the n audio versions. a. if we create files so that the audio is mixed in with the video, so server sends only one media stream at given time, how many files will the server need to store each a different url? b. if the server instead sends the audio and video streams separately and has the client synchronize the streams, how many files will the server need to store? p28. install the python programs tcpclient and udpclient on one host and tcpserver and udpserver on another host. a. suppose you run tcpserver and you try to connect using udpclient. what happens? why? b. suppose you run udpclient before you run udpserver. what happens? why? c. what happens if you hardwire in the python client and server programs different port numbers for the client and server sides in either a tcp or udp clientserver pair? p29. suppose that in udpclient.py, after we create the socket, we add the line clientsocket.bind, 5432will it become necessary to change udpserver.py? what are the port num bers for the sockets in udpclient and udpserver? what were they before making this change? m02_kuro5469_08_ge_c02.indd 204 03052021 1550 socket programming assignments 205 p30. can you configure your browser to open multiple simultaneous connections to a web site? what are the advantages and disadvantages of having a large number of simultaneous tcp connections? p31. we have seen that internet tcp sockets treat the data being sent as a byte stream but udp sockets recognize message boundaries. what are one advantage and one disadvantage of byteoriented api versus having the api explicitly recognize and preserve applicationdefined message boundaries? p32. what is the apache web server? how much does it cost? what functional ity does it currently have? you may want to look at wikipedia to answer this question. socket programming assignments the companion website includes six socket programming assignments. the first four assignments are summarized below. the fifth assignment makes use of the icmp protocol and is summarized at the end of chapter 5. it is highly recommended that students complete several, if not all, of these assignments. students can find full details of these assignments, as well as important snippets of the python code, at the web site www.pearsonglobaleditions.com. assignment 1 web server in this assignment, you will develop a simple web server in python that is capable of processing only one request. specifically, your web server will i create a connection socket when contacted by a client browser; ii receive the http request from this connection; iii parse the request to determine the specific file being requested; iv get the requested file from the servers file system; v create an http response message consisting of the requested file preceded by header lines; and vi send
the response over the tcp connection to the requesting browser. if a browser requests a file that is not present in your server, your server should return a 404 not found error message. in the companion website, we provide the skeleton code for your server. your job is to complete the code, run your server, and then test your server by sending requests from browsers running on different hosts. if you run your server on a host that already has a web server running on it, then you should use a different port than port 80 for your web server. assignment 2 udp pinger in this programming assignment, you will write a client ping program in python. your client will send a simple ping message to a server, receive a corresponding pong message back from the server, and determine the delay between when the client m02_kuro5469_08_ge_c02.indd 205 03052021 1550 206 chapter 2 application layer sent the ping message and received the pong message. this delay is called the round trip time rtt. the functionality provided by the client and server is similar to the functionality provided by standard ping program available in modern operating systems. however, standard ping programs use the internet control message protocol icmp which we will study in chapter 5. here we will create a nonstandard but simple! udpbased ping program. your ping program is to send 10 ping messages to the target server over udp. for each message, your client is to determine and print the rtt when the corresponding pong message is returned. because udp is an unreliable protocol, a packet sent by the client or server may be lost. for this reason, the client cannot wait indefinitely for a reply to a ping message. you should have the client wait up to one second for a reply from the server; if no reply is received, the client should assume that the packet was lost and print a message accordingly. in this assignment, you will be given the complete code for the server available in the companion website. your job is to write the client code, which will be very similar to the server code. it is recommended that you first study carefully the server code. you can then write your client code, liberally cutting and pasting lines from the server code. assignment 3 mail client the goal of this programming assignment is to create a simple mail client that sends email to any recipient. your client will need to establish a tcp connection with a mail server e.g., a google mail server, dialogue with the mail server using the smtp protocol, send an email message to a recipient e.g., your friend via the mail server, and finally close the tcp connection with the mail server. for this assignment, the companion website provides the skeleton code for your client. your job is to complete the code and test your client by sending email to different user accounts. you may also try sending through different servers
for example, through a google mail server and through your university mail server. assignment 4 web proxy in this assignment, you will develop a web proxy. when your proxy receives an http request for an object from a browser, it generates a new http request for the same object and sends it to the origin server. when the proxy receives the corresponding http response with the object from the origin server, it creates a new http response, including the object, and sends it to the client. for this assignment, the companion website provides the skeleton code for the proxy server. your job is to complete the code, and then test it by having different browsers request web objects via your proxy. m02_kuro5469_08_ge_c02.indd 206 03052021 1550 wireshark lab dns 207 wireshark lab http having gotten our feet wet with the wireshark packet sniffer in lab 1, were now ready to use wireshark to investigate protocols in operation. in this lab, well explore several aspects of the http protocol the basic getreply interaction, http message formats, retrieving large html files, retrieving html files with embedded urls, persistent and nonpersistent connections, and http authentication and security. as is the case with all wireshark labs, the full description of this lab is available at this books web site, www.pearsonglobaleditions.com. wireshark lab dns in this lab, we take a closer look at the client side of the dns, the protocol that translates internet hostnames to ip addresses. recall from section 2.5 that the clients role in the dns is relatively simplea client sends a query to its local dns server and receives a response back. much can go on under the covers, invisible to the dns clients, as the hierarchical dns servers communicate with each other to either recursively or iteratively resolve the clients dns query. from the dns clients standpoint, however, the protocol is quite simplea query is formulated to the local dns server and a response is received from that server. we observe dns in action in this lab. as is the case with all wireshark labs, the full description of this lab is available at this books web site, www.pearsonglobaleditions.com. m02_kuro5469_08_ge_c02.indd 207 03052021 1550 208an interview with... tim bernerslee sir tim bernerslee is known as the inventor of the world wide web. in 1989, while working as a fellow at cern, he proposed an internetbased distributed information management system including the original version of the http protocol. in the same year he successfully implemented his design on a client and server. he received the 2016 turing award for inventing the world wide web, the first web browser, and the fundamental protocols and algorithms allowing the web to scale. he is the cofounder of the world wide web foundation, and currently is a professorial fellow of computer science at the university of oxford and a professor at csail at mit. you originally studied physics. how is networking similar to physics? when you study physics, you imagine what rules of behavior on the very
small scale could possibly give rise to the largescale world as we see it. when you design a global system like the web, you try to invent rules of behavior of web pages and links and things that could in the large create a largescale world as we would like it. one is analysis and the other synthesis, but they are very similar. what influenced you to specialize in networking? after my physics degree, the telecommunications research companies seemed to be the most interesting places. the microprocessor had just come out, and telecommunications was switching very fast from hardwired logic to microprocessorbased systems. it was very exciting. what is the most challenging part of your job? when two groups disagree strongly about something, but want in the end to achieve a com mon goal, finding exactly what they each mean and where the misunderstandings are can be very demanding. the chair of any working group knows that. however, this is what it takes to make progress toward consensus on a large scale. courtesy of tim bernerslee m02_kuro5469_08_ge_c02.indd 208 03052021 1550 209 what people have inspired you professionally? my parents, who were involved in the early days of computing, gave me a fascination with the whole subject. mike sendall and peggie rimmer, for whom i worked at various times at cern are among the people who taught me and encouraged me. i later learned to admire the people, including vanevar bush, doug englebart, and ted nelson, who had had similar dreams in their time but had not had the benefit of the existence for pcs and the internet to be able to realize it. m02_kuro5469_08_ge_c02.indd 209 03052021 1550 m02_kuro5469_08_ge_c02.indd 210 03052021 1550 this page is intentionally left blank 211211 residing between the application and network layers, the transport layer is a central piece of the layered network architecture. it has the critical role of providing communication services directly to the application processes running on different hosts. the pedagogic approach we take in this chapter is to alternate between discussions of transportlayer principles and discussions of how these principles are implemented in existing protocols; as usual, particular emphasis will be given to internet protocols, in particular the tcp and udp transportlayer protocols. well begin by discussing the relationship between the transport and network layers. this sets the stage for examining the first critical function of the transport layerextending the network layers delivery service between two end systems to a delivery service between two applicationlayer processes running on the end systems. well illustrate this function in our coverage of the internets connectionless transport protocol, udp. well then return to principles and confront one of the most fundamental prob lems in computer networkinghow two entities can communicate reliably over a medium that may lose and corrupt data. through a series of increasingly complicated and realistic! scenarios, well build up an array of techniques that transport protocols use to solve this problem. well then show how these principles are embodied in tcp, the internets connectionoriented
transport protocol. well next move on to a second fundamentally important problem in networkingcontrolling the transmission rate of transportlayer entities in order to avoid, or recover from, congestion within the network. well consider the causes and consequences of congestion, as well as commonly used congestioncontrol transport layer3chapter 211 m03_kuro5469_08_ge_c03.indd 211 08052021 1357 212 chapter 3 transport layer techniques. after obtaining a solid understanding of the issues behind congestion control, well study tcps approach to congestion control. 3.1 introduction and transportlayer services in the previous two chapters, we touched on the role of the transport layer and the services that it provides. lets quickly review what we have already learned about the transport layer. a transportlayer protocol provides for logical communication between application processes running on different hosts. by logical communication, we mean that from an applications perspective, it is as if the hosts running the processes were directly connected; in reality, the hosts may be on opposite sides of the planet, connected via numerous routers and a wide range of link types. application processes use the logical communication provided by the transport layer to send messages to each other, free from the worry of the details of the physical infrastructure used to carry these messages. figure 3.1 illustrates the notion of logical communication. as shown in figure 3.1, transportlayer protocols are implemented in the end systems but not in network routers. on the sending side, the transport layer converts the applicationlayer messages it receives from a sending application process into transportlayer packets, known as transportlayer segments in internet terminology. this is done by possibly breaking the application messages into smaller chunks and adding a transportlayer header to each chunk to create the transportlayer segment. the transport layer then passes the segment to the network layer at the sending end system, where the segment is encapsulated within a networklayer packet a datagram and sent to the destination. its important to note that network routers act only on the networklayer fields of the datagram; that is, they do not examine the fields of the transportlayer segment encapsulated with the datagram. on the receiving side, the network layer extracts the transportlayer segment from the datagram and passes the segment up to the transport layer. the transport layer then processes the received segment, making the data in the segment available to the receiving application. more than one transportlayer protocol may be available to network applications. for example, the internet has two protocolstcp and udp. each of these protocols provides a different set of transportlayer services to the invoking application. 3.1.1 relationship between transport and network layers recall that the transport layer lies just above the network layer in the protocol stack. whereas a transportlayer protocol provides logical communication between m03_kuro5469_08_ge_c03.indd 212 08052021 1357 3.1 introduction and transport layer ser vices 213 network link physicalapplication transport network link physicalapplication transportnetwork link physicalnetwork link physicalnetwork link physicalnetwork link physicalnetwork link physical content provider networknational or global isp datacenter network datacenter networkmobile network enterprise networkhome network logical
endto end transpor tlocal or regional isp figure 3.1 the transport layer provides logical rather than physical communication between application processes m03_kuro5469_08_ge_c03.indd 213 08052021 1357 214 chapter 3 transport layer processes running on different hosts, a networklayer protocol provides logical communication between hosts. this distinction is subtle but important. lets examine this distinction with the aid of a household analogy. consider two houses, one on the east coast and the other on the west coast, with each house being home to a dozen kids. the kids in the east coast household are cousins of the kids in the west coast household. the kids in the two households love to write to each othereach kid writes each cousin every week, with each letter delivered by the traditional postal service in a separate envelope. thus, each household sends 144 letters to the other household every week. these kids would save a lot of money if they had email! in each of the households, there is one kidann in the west coast house and bill in the east coast houseresponsible for mail collection and mail distribution. each week ann visits all her brothers and sisters, collects the mail, and gives the mail to a postalservice mail carrier, who makes daily visits to the house. when letters arrive at the west coast house, ann also has the job of distributing the mail to her brothers and sisters. bill has a similar job on the east coast. in this example, the postal service provides logical communication between the two housesthe postal service moves mail from house to house, not from person to person. on the other hand, ann and bill provide logical communication among the cousinsann and bill pick up mail from, and deliver mail to, their brothers and sisters. note that from the cousins perspective, ann and bill are the mail service, even though ann and bill are only a part the endsystem part of the endtoend delivery process. this household example serves as a nice analogy for explaining how the transport layer relates to the network layer application messages letters in envelopes processes cousins hosts also called end systems houses transportlayer protocol ann and bill networklayer protocol postal service including mail carriers continuing with this analogy, note that ann and bill do all their work within their respective homes; they are not involved, for example, in sorting mail in any intermediate mail center or in moving mail from one mail center to another. similarly, transportlayer protocols live in the end systems. within an end system, a transport protocol moves messages from application processes to the network edge that is, the network layer and vice versa, but it doesnt have any say about how the messages are moved within the network core. in fact, as illustrated in figure 3.1, intermediate routers neither act on, nor recognize, any information that the transport layer may have added to the application messages. continuing with our family saga, suppose now that when ann and bill go on vacation,
another cousin pairsay, susan and harveysubstitute for them and provide the householdinternal collection and delivery of mail. unfortunately for the two families, susan and harvey do not do the collection and delivery in exactly m03_kuro5469_08_ge_c03.indd 214 08052021 1357 3.1 introduction and transport layer ser vices 215 the same way as ann and bill. being younger kids, susan and harvey pick up and drop off the mail less frequently and occasionally lose letters which are sometimes chewed up by the family dog. thus, the cousinpair susan and harvey do not provide the same set of services that is, the same service model as ann and bill. in an analogous manner, a computer network may make available multiple transport protocols, with each protocol offering a different service model to applications. the possible services that ann and bill can provide are clearly constrained by the possible services that the postal service provides. for example, if the postal service doesnt provide a maximum bound on how long it can take to deliver mail between the two houses for example, three days, then there is no way that ann and bill can guarantee a maximum delay for mail delivery between any of the cousin pairs. in a similar manner, the services that a transport protocol can provide are often constrained by the service model of the underlying networklayer protocol. if the networklayer protocol cannot provide delay or bandwidth guarantees for transportlayer segments sent between hosts, then the transportlayer protocol cannot provide delay or bandwidth guarantees for application messages sent between processes. nevertheless, certain services can be offered by a transport protocol even when the underlying network protocol doesnt offer the corresponding service at the network layer. for example, as well see in this chapter, a transport protocol can offer reliable data transfer service to an application even when the underlying network protocol is unreliable, that is, even when the network protocol loses, garbles, or duplicates packets. as another example which well explore in chapter 8 when we discuss network security, a transport protocol can use encryption to guarantee that application messages are not read by intruders, even when the network layer cannot guarantee the confidentiality of transportlayer segments. 3.1.2 overview of the transport layer in the internet recall that the internet makes two distinct transportlayer protocols available to the application layer. one of these protocols is udp user datagram protocol, which provides an unreliable, connectionless service to the invoking application. the second of these protocols is tcp transmission control protocol, which provides a reliable, connectionoriented service to the invoking application. when designing a network application, the application developer must specify one of these two transport protocols. as we saw in section 2.7, the application developer selects between udp and tcp when creating sockets. to simplify terminology, we refer to the transportlayer packet as a segment. we mention, however, that the internet literature for example, the rfcs also refers to the transportlayer packet for tcp as a segment but often refers to the packet for udp
as a datagram. however, this same internet literature also uses the term datagram for the networklayer packet! for an introductory book on computer networking such as this, we believe that it is less confusing to refer to both tcp and udp packets as segments, and reserve the term datagram for the networklayer packet. m03_kuro5469_08_ge_c03.indd 215 08052021 1357 216 chapter 3 transport layer before proceeding with our brief introduction of udp and tcp, it will be useful to say a few words about the internets network layer. well learn about the network layer in detail in chapters 4 and 5. the internets networklayer protocol has a nameip, for internet protocol. ip provides logical communication between hosts. the ip service model is a besteffort delivery service. this means that ip makes its best effort to deliver segments between communicating hosts, but it makes no guarantees. in particular, it does not guarantee segment delivery, it does not guarantee orderly delivery of segments, and it does not guarantee the integrity of the data in the segments. for these reasons, ip is said to be an unreliable service. we also mention here that every host has at least one networklayer address, a socalled ip address. well examine ip addressing in detail in chapter 4; for this chapter we need only keep in mind that each host has an ip address. having taken a glimpse at the ip service model, lets now summarize the service models provided by udp and tcp. the most fundamental responsibility of udp and tcp is to extend ips delivery service between two end systems to a delivery service between two processes running on the end systems. extending hosttohost delivery to processtoprocess delivery is called transportlayer multiplexing and demultiplexing. well discuss transportlayer multiplexing and demultiplexing in the next section. udp and tcp also provide integrity checking by including errordetection fields in their segments headers. these two minimal transportlayer servicesprocesstoprocess data delivery and error checkingare the only two services that udp provides! in particular, like ip, udp is an unreliable serviceit does not guarantee that data sent by one process will arrive intact or at all! to the destination process. udp is discussed in detail in section 3.3. tcp, on the other hand, offers several additional services to applications. first and foremost, it provides reliable data transfer. using flow control, sequence numbers, acknowledgments, and timers techniques well explore in detail in this chapter, tcp ensures that data is delivered from sending process to receiving process, correctly and in order. tcp thus converts ips unreliable service between end systems into a reliable data transport service between processes. tcp also provides congestion control. congestion control is not so much a service provided to the invoking application as it is a service for the internet as a whole, a service for the general good. loosely speaking, tcp congestion control prevents any one tcp connection from swamping the links and routers between communicating hosts with an excessive amount of traffic. tcp strives to give each connection traversing
a congested link an equal share of the link bandwidth. this is done by regulating the rate at which the sending sides of tcp connections can send traffic into the network. udp traffic, on the other hand, is unregulated. an application using udp transport can send at any rate it pleases, for as long as it pleases. a protocol that provides reliable data transfer and congestion control is neces sarily complex. well need several sections to cover the principles of reliable data transfer and congestion control, and additional sections to cover the tcp protocol itself. these topics are investigated in sections 3.4 through 3.7. the approach taken m03_kuro5469_08_ge_c03.indd 216 08052021 1357 3.2 multiplexing and demultiplexing 217 in this chapter is to alternate between basic principles and the tcp protocol. for example, well first discuss reliable data transfer in a general setting and then discuss how tcp specifically provides reliable data transfer. similarly, well first discuss congestion control in a general setting and then discuss how tcp performs congestion control. but before getting into all this good stuff, lets first look at transportlayer multiplexing and demultiplexing. 3.2 multiplexing and demultiplexing in this section, we discuss transportlayer multiplexing and demultiplexing, that is, extending the hosttohost delivery service provided by the network layer to a processtoprocess delivery service for applications running on the hosts. in order to keep the discussion concrete, well discuss this basic transportlayer service in the context of the internet. we emphasize, however, that a multiplexingdemultiplexing service is needed for all computer networks. at the destination host, the transport layer receives segments from the network layer just below. the transport layer has the responsibility of delivering the data in these segments to the appropriate application process running in the host. lets take a look at an example. suppose you are sitting in front of your computer, and you are downloading web pages while running one ftp session and two telnet sessions. you therefore have four network application processes runningtwo telnet processes, one ftp process, and one http process. when the transport layer in your computer receives data from the network layer below, it needs to direct the received data to one of these four processes. lets now examine how this is done. first recall from section 2.7 that a process as part of a network application can have one or more sockets, doors through which data passes from the network to the process and through which data passes from the process to the network. thus, as shown in figure 3.2, the transport layer in the receiving host does not actually deliver data directly to a process, but instead to an intermediary socket. because at any given time there can be more than one socket in the receiving host, each socket has a unique identifier. the format of the identifier depends on whether the socket is a udp or a tcp socket, as well discuss shortly. now lets consider how a receiving host directs an incoming transportlayer segment to the appropriate
socket. each transportlayer segment has a set of fields in the segment for this purpose. at the receiving end, the transport layer examines these fields to identify the receiving socket and then directs the segment to that socket. this job of delivering the data in a transportlayer segment to the correct socket is called demultiplexing. the job of gathering data chunks at the source host from different sockets, encapsulating each data chunk with header information that will later be used in demultiplexing to create segments, and passing the segments to the network layer is called multiplexing. note that the transport layer in the middle host m03_kuro5469_08_ge_c03.indd 217 08052021 1357 218 chapter 3 transport layer in figure 3.2 must demultiplex segments arriving from the network layer below to either process p1 or p2 above; this is done by directing the arriving segments data to the corresponding processs socket. the transport layer in the middle host must also gather outgoing data from these sockets, form transportlayer segments, and pass these segments down to the network layer. although we have introduced multiplexing and demultiplexing in the context of the internet transport protocols, its important to realize that they are concerns whenever a single protocol at one layer at the transport layer or elsewhere is used by multiple protocols at the next higher layer. to illustrate the demultiplexing job, recall the household analogy in the previous section. each of the kids is identified by his or her name. when bill receives a batch of mail from the mail carrier, he performs a demultiplexing operation by observing to whom the letters are addressed and then hand delivering the mail to his brothers and sisters. ann performs a multiplexing operation when she collects letters from her brothers and sisters and gives the collected mail to the mail person. now that we understand the roles of transportlayer multiplexing and demulti plexing, let us examine how it is actually done in a host. from the discussion above, we know that transportlayer multiplexing requires 1 that sockets have unique identifiers, and 2 that each segment have special fields that indicate the socket to which the segment is to be delivered. these special fields, illustrated in figure 3.3, are the source port number field and the destination port number field. the udp and tcp segments have other fields as well, as discussed in the subsequent sections of this chapter. each port number is a 16bit number, ranging from 0 to 65535. the port numbers ranging from 0 to 1023 are called wellknown port numbers and are restricted, which means that they are reserved for use by wellknown network key process socketdata link physicaltransportapplication networkapplication data link physicaltransport network data link physicaltransportp3 p2 p1 p4application figure 3.2 transportlayer multiplexing and demultiplexing m03_kuro5469_08_ge_c03.indd 218 08052021 1357 3.2 multiplexing and demultiplexing 219 application protocols such as http which uses port number 80 and ftp which uses port number 21. the list of wellknown port numbers is given in rfc 1700 and is updated
at httpwww.iana.org rfc 3232. when we develop a new application such as the simple application developed in section 2.7, we must assign the application a port number. it should now be clear how the transport layer could implement the demultiplex ing service each socket in the host could be assigned a port number, and when a segment arrives at the host, the transport layer examines the destination port number in the segment and directs the segment to the corresponding socket. the segments data then passes through the socket into the attached process. as well see, this is basically how udp does it. however, well also see that multiplexingdemultiplexing in tcp is yet more subtle. connectionless multiplexing and demultiplexing recall from section 2.7.1 that the python program running in a host can create a udp socket with the line clientsocket socketaf_inet, sock_dgramwhen a udp socket is created in this manner, the transport layer automatically assigns a port number to the socket. in particular, the transport layer assigns a port number in the range 1024 to 65535 that is currently not being used by any other udp port in the host. alternatively, we can add a line into our python program after we create the socket to associate a specific port number say, 19157 to this udp socket via the socket bind method clientsocket.bind, 19157source port 32 bits dest. port other header Ô¨Åelds application data message figure 3.3 source and destination portnumber fields in a transportlayer segment m03_kuro5469_08_ge_c03.indd 219 08052021 1357 220 chapter 3 transport layer if the application developer writing the code were implementing the server side of a wellknown protocol, then the developer would have to assign the corresponding wellknown port number. typically, the client side of the application lets the transport layer automatically and transparently assign the port number, whereas the server side of the application assigns a specific port number. with port numbers assigned to udp sockets, we can now precisely describe udp multiplexingdemultiplexing. suppose a process in host a, with udp port 19157, wants to send a chunk of application data to a process with udp port 46428 in host b. the transport layer in host a creates a transportlayer segment that includes the application data, the source port number 19157, the destination port number 46428, and two other values which will be discussed later, but are unimportant for the current discussion. the transport layer then passes the resulting segment to the network layer. the network layer encapsulates the segment in an ip datagram and makes a besteffort attempt to deliver the segment to the receiving host. if the segment arrives at the receiving host b, the transport layer at the receiving host examines the destination port number in the segment 46428 and delivers the segment to its socket identified by port 46428. note that host b could be running multiple processes, each with its own udp socket and associated port number. as udp segments arrive from the network, host b directs demultiplexes each segment to the
appropriate socket by examining the segments destination port number. it is important to note that a udp socket is fully identified by a twotuple consist ing of a destination ip address and a destination port number. as a consequence, if two udp segments have different source ip addresses andor source port numbers, but have the same destination ip address and destination port number, then the two segments will be directed to the same destination process via the same destination socket. you may be wondering now, what is the purpose of the source port number? as shown in figure 3.4, in the atob segment the source port number serves as part of a return addresswhen b wants to send a segment back to a, the destination port in the btoa segment will take its value from the source port value of the atob segment. the complete return address is as ip address and the source port number. as an example, recall the udp server program studied in section 2.7. in udpserver.py, the server uses the recvfrom method to extract the client side source port number from the segment it receives from the client; it then sends a new segment to the client, with the extracted source port number serving as the destination port number in this new segment. connectionoriented multiplexing and demultiplexing in order to understand tcp demultiplexing, we have to take a close look at tcp sockets and tcp connection establishment. one subtle difference between a tcp socket and a udp socket is that a tcp socket is identified by a fourtuple source ip address, source port number, destination ip address, destination port number. thus, when a tcp segment arrives from the network to a host, the host uses all four values to direct demultiplex the segment to the appropriate socket. m03_kuro5469_08_ge_c03.indd 220 08052021 1357 3.2 multiplexing and demultiplexing 221 in particular, and in contrast with udp, two arriving tcp segments with differ ent source ip addresses or source port numbers will with the exception of a tcp segment carrying the original connectionestablishment request be directed to two different sockets. to gain further insight, lets reconsider the tcp clientserver programming example in section 2.7.2 the tcp server application has a welcoming socket, that waits for connectionestablishment requests from tcp clients see figure 2.29 on port number 12000. the tcp client creates a socket and sends a connection establishment request segment with the lines clientsocket socketaf_inet, sock_stream clientsocket.connectservername,12000 a connectionestablishment request is nothing more than a tcp segment with destination port number 12000 and a special connectionestablishment bit set in the tcp header discussed in section 3.5. the segment also includes a source port number that was chosen by the client. when the host operating system of the computer running the server process receives the incoming connectionrequest segment with destination port 12000, it locates the server process that is waiting to accept a connection on port number 12000. the server process then creates a new socket connectionsocket, addr serversocket.accepthost aclient process
socket server b source port 19157dest. port 46428 source port 46428dest. port 19157 figure 3.4 the inversion of source and destination port numbers m03_kuro5469_08_ge_c03.indd 221 08052021 1357 222 chapter 3 transport layer also, the transport layer at the server notes the following four values in the con nectionrequest segment 1 the source port number in the segment, 2 the ip address of the source host, 3 the destination port number in the segment, and 4 its own ip address. the newly created connection socket is identified by these four values; all subsequently arriving segments whose source port, source ip address, destination port, and destination ip address match these four values will be demultiplexed to this socket. with the tcp connection now in place, the client and server can now send data to each other. the server host may support many simultaneous tcp connection sockets, with each socket attached to a process, and with each socket identified by its own fourtuple. when a tcp segment arrives at the host, all four fields source ip address, source port, destination ip address, destination port are used to direct demultiplex the segment to the appropriate socket. port scanning weve seen that a server process waits patiently on an open port for contact by a remote client. some ports are reserved for wellknown applications e.g., web, ftp, dns, and smtp servers; other ports are used by convention by popular applications e.g., the microsoft windows sql server listens for requests on udp port 1434. thus, if we determine that a port is open on a host, we may be able to map that port to a specific application running on the host. this is very useful for system administrators, who are often interested in knowing which network applications are running on the hosts in their networks. but attackers, in order to case the joint, also want to know which ports are open on target hosts. if a host is found to be running an application with a known security flaw e.g., a sql server listening on port 1434 was subject to a buffer overflow, allowing a remote user to execute arbitrary code on the vulnerable host, a flaw exploited by the slammer worm cert 200304, then that host is ripe for attack. determining which applications are listening on which ports is a relatively easy task. indeed there are a number of public domain programs, called port scanners, that do just that. perhaps the most widely used of these is nmap, freely available at httpnmap.org and included in most linux distributions. for tcp, nmap sequentially scans ports, looking for ports that are accepting tcp connections. for udp, nmap again sequentially scans ports, looking for udp ports that respond to transmitted udp segments. in both cases, nmap returns a list of open, closed, or unreachable ports. a host running nmap can attempt to scan any target host anywhere in the internet. well revisit nmap in section 3.5.6, when we discuss tcp connection management.focus on security m03_kuro5469_08_ge_c03.indd 222 08052021
1357 3.2 multiplexing and demultiplexing 223 the situation is illustrated in figure 3.5, in which host c initiates two http sessions to server b, and host a initiates one http session to b. hosts a and c and server b each have their own unique ip addressa, c, and b, respectively. host c assigns two different source port numbers 26145 and 7532 to its two http connections. because host a is choosing source port numbers independently of c, it might also assign a source port of 26145 to its http connection. but this is not a problemserver b will still be able to correctly demultiplex the two connections having the same source port number, since the two connections have different source ip addresses. web servers and tcp before closing this discussion, its instructive to say a few additional words about web servers and how they use port numbers. consider a host running a web server, such as an apache web server, on port 80. when clients for example, browsers send segments to the server, all segments will have destination port 80. in particular, both the initial connectionestablishment segments and the segments carrying http source port 7532dest. port 80 source ip cdest. ip bsource port 26145dest. port 80 source ip cdest. ip b source port 26145dest. port 80 source ip adest. ip bperconnection http processes transport layer demultiplexingweb server bweb client host c web client host a figure 3.5 two clients, using the same destination port number 80 to communicate with the same web server application m03_kuro5469_08_ge_c03.indd 223 08052021 1357 224 chapter 3 transport layer request messages will have destination port 80. as we have just described, the server distinguishes the segments from the different clients using source ip addresses and source port numbers. figure 3.5 shows a web server that spawns a new process for each connec tion. as shown in figure 3.5, each of these processes has its own connection socket through which http requests arrive and http responses are sent. we mention, however, that there is not always a onetoone correspondence between connection sockets and processes. in fact, todays highperforming web servers often use only one process, and create a new thread with a new connection socket for each new client connection. a thread can be viewed as a lightweight subprocess. if you did the first programming assignment in chapter 2, you built a web server that does just this. for such a server, at any given time there may be many connection sockets with different identifiers attached to the same process. if the client and server are using persistent http, then throughout the duration of the persistent connection the client and server exchange http messages via the same server socket. however, if the client and server use nonpersistent http, then a new tcp connection is created and closed for every requestresponse, and hence a new socket is created and later closed for every requestresponse. this frequent creating and closing of sockets can severely impact the performance of
a busy web server although a number of operating system tricks can be used to mitigate the problem. readers interested in the operating system issues surrounding persistent and nonpersistent http are encouraged to see nielsen 1997; nahum 2002. now that weve discussed transportlayer multiplexing and demultiplexing, lets move on and discuss one of the internets transport protocols, udp. in the next section, well see that udp adds little more to the networklayer protocol than a multiplexingdemultiplexing service. 3.3 connectionless transport udp in this section, well take a close look at udp, how it works, and what it does. we encourage you to refer back to section 2.1, which includes an overview of the udp service model, and to section 2.7.1, which discusses socket programming using udp. to motivate our discussion about udp, suppose you were interested in design ing a nofrills, barebones transport protocol. how might you go about doing this? you might first consider using a vacuous transport protocol. in particular, on the sending side, you might consider taking the messages from the application process and passing them directly to the network layer; and on the receiving side, you might consider taking the messages arriving from the network layer and passing them directly to the application process. but as we learned in the previous section, we have m03_kuro5469_08_ge_c03.indd 224 08052021 1357 3.3 connectionless transport udp 225 to do a little more than nothing! at the very least, the transport layer has to provide a multiplexingdemultiplexing service in order to pass data between the network layer and the correct applicationlevel process. udp, defined in rfc 768, does just about as little as a transport protocol can do. aside from the multiplexingdemultiplexing function and some light error checking, it adds nothing to ip. in fact, if the application developer chooses udp instead of tcp, then the application is almost directly talking with ip. udp takes messages from the application process, attaches source and destination port number fields for the multiplexingdemultiplexing service, adds two other small fields, and passes the resulting segment to the network layer. the network layer encapsulates the transportlayer segment into an ip datagram and then makes a besteffort attempt to deliver the segment to the receiving host. if the segment arrives at the receiving host, udp uses the destination port number to deliver the segments data to the correct application process. note that with udp there is no handshaking between sending and receiving transportlayer entities before sending a segment. for this reason, udp is said to be connectionless. dns is an example of an applicationlayer protocol that typically uses udp. when the dns application in a host wants to make a query, it constructs a dns query message and passes the message to udp. without performing any handshaking with the udp entity running on the destination end system, the hostside udp adds header fields to the message and passes the resulting segment to the network layer. the network layer encapsulates the udp segment into a datagram and sends
the datagram to a name server. the dns application at the querying host then waits for a reply to its query. if it doesnt receive a reply possibly because the underlying network lost the query or the reply, it might try resending the query, try sending the query to another name server, or inform the invoking application that it cant get a reply. now you might be wondering why an application developer would ever choose to build an application over udp rather than over tcp. isnt tcp always preferable, since tcp provides a reliable data transfer service, while udp does not? the answer is no, as some applications are better suited for udp for the following reasons finer applicationlevel control over what data is sent, and when. under udp, as soon as an application process passes data to udp, udp will package the data inside a udp segment and immediately pass the segment to the network layer. tcp, on the other hand, has a congestioncontrol mechanism that throttles the transportlayer tcp sender when one or more links between the source and destination hosts become excessively congested. tcp will also continue to resend a segment until the receipt of the segment has been acknowledged by the destination, regardless of how long reliable delivery takes. since realtime applications often require a minimum sending rate, do not want to overly delay segment transmission, and can tolerate some data loss, tcps service model is not particularly well matched to these applications needs. as discussed below, these applications can use udp and implement, as part of the application, any additional functionality that is needed beyond udps nofrills segmentdelivery service. m03_kuro5469_08_ge_c03.indd 225 08052021 1357 226 chapter 3 transport layer no connection establishment. as well discuss later, tcp uses a threeway hand shake before it starts to transfer data. udp just blasts away without any formal preliminaries. thus udp does not introduce any delay to establish a connection. this is probably the principal reason why dns runs over udp rather than tcpdns would be much slower if it ran over tcp. http uses tcp rather than udp, since reliability is critical for web pages with text. but, as we briefly discussed in section 2.2, the tcp connectionestablishment delay in http is an important contributor to the delays associated with downloading web documents. indeed, the quic protocol quick udp internet connection, ietf quic 2020, used in googles chrome browser, uses udp as its underlying transport protocol and implements reliability in an applicationlayer protocol on top of udp. well take a closer look at quic in section 3.8. no connection state. tcp maintains connection state in the end systems. this connection state includes receive and send buffers, congestioncontrol parameters, and sequence and acknowledgment number parameters. we will see in section 3.5 that this state information is needed to implement tcps reliable data transfer service and to provide congestion control. udp, on the other hand, does not maintain connection state and does not track any of these parameters. for this
reason, a server devoted to a particular application can typically support many more active clients when the application runs over udp rather than tcp. small packet header overhead. the tcp segment has 20 bytes of header overhead in every segment, whereas udp has only 8 bytes of overhead. figure 3.6 lists popular internet applications and the transport protocols that they use. as we expect, email, remote terminal access, and file transfer run over tcpall these applications need the reliable data transfer service of tcp. we learned in chapter 2 that early versions of http ran over tcp but that more recent versions of http run over udp, providing their own error control and congestion control among other services at the application layer. nevertheless, many important applications run over udp rather than tcp. for example, udp is used to carry network management snmp; see section 5.7 data. udp is preferred to tcp in this case, since network management applications must often run when the network is in a stressed stateprecisely when reliable, congestioncontrolled data transfer is difficult to achieve. also, as we mentioned earlier, dns runs over udp, thereby avoiding tcps connectionestablishment delays. as shown in figure 3.6, both udp and tcp are sometimes used today with multimedia applications, such as internet phone, realtime video conferencing, and streaming of stored audio and video. we just mention now that all of these applications can tolerate a small amount of packet loss, so that reliable data transfer is not absolutely critical for the applications success. furthermore, realtime applications, like internet phone and video conferencing, react very poorly to tcps congestion control. for these reasons, developers of multimedia applications may choose to run their applications over udp instead of tcp. when packet loss rates are low, and m03_kuro5469_08_ge_c03.indd 226 08052021 1357 3.3 connectionless transport udp 227 with some organizations blocking udp traffic for security reasons see chapter 8, tcp becomes an increasingly attractive protocol for streaming media transport. although commonly done today, running multimedia applications over udp needs to be done with care. as we mentioned above, udp has no congestion control. but congestion control is needed to prevent the network from entering a congested state in which very little useful work is done. if everyone were to start streaming highbitrate video without using any congestion control, there would be so much packet overflow at routers that very few udp packets would successfully traverse the sourcetodestination path. moreover, the high loss rates induced by the uncontrolled udp senders would cause the tcp senders which, as well see, do decrease their sending rates in the face of congestion to dramatically decrease their rates. thus, the lack of congestion control in udp can result in high loss rates between a udp sender and receiver, and the crowding out of tcp sessions. many researchers have proposed new mechanisms to force all sources, including udp sources, to perform adaptive congestion control mahdavi 1997; floyd 2000; kohler 2006 rfc 4340. before discussing the udp segment structure, we mention that
it is possible for an application to have reliable data transfer when using udp. this can be done if reliability is built into the application itself for example, by adding acknowledgment and retransmission mechanisms, such as those well study in the next section. we mentioned earlier that the quic protocol implements reliability in an applicationlayer protocol on top of udp. but this is a nontrivial task that would keep an application developer busy debugging for a long time. nevertheless, building reliability directly into the application allows the application to have electronic mail remote terminal accesssecure remote terminal accessweb file transfer remote Ô¨Åle server streaming multimediainternet telephonynetwork managementname translationsmtp telnetsshhttp, http3 ftp nfs dashtypically proprietarysnmpdnstcptcptcp tcp for http, udp for http3 tcp typically udp tcpudp or tcptypically udptypically udpapplicationapplicationlayer protocolunderlying transportprotocol figure 3.6 popular internet applications and their underlying transport protocols m03_kuro5469_08_ge_c03.indd 227 08052021 1357 228 chapter 3 transport layer its cake and eat it too. that is, application processes can communicate reliably without being subjected to the transmissionrate constraints imposed by tcps congestioncontrol mechanism. 3.3.1 udp segment structure the udp segment structure, shown in figure 3.7, is defined in rfc 768. the application data occupies the data field of the udp segment. for example, for dns, the data field contains either a query message or a response message. for a streaming audio application, audio samples fill the data field. the udp header has only four fields, each consisting of two bytes. as discussed in the previous section, the port numbers allow the destination host to pass the application data to the correct process running on the destination end system that is, to perform the demultiplexing function. the length field specifies the number of bytes in the udp segment header plus data. an explicit length value is needed since the size of the data field may differ from one udp segment to the next. the checksum is used by the receiving host to check whether errors have been introduced into the segment. in truth, the checksum is also calculated over a few of the fields in the ip header in addition to the udp segment. but we ignore this detail in order to see the forest through the trees. well discuss the checksum calculation below. basic principles of error detection are described in section 6.2. the length field specifies the length of the udp segment, including the header, in bytes. 3.3.2 udp checksum the udp checksum provides for error detection. that is, the checksum is used to determine whether bits within the udp segment have been altered for example, by noise in the links or while stored in a router as it moved from source to destination. source port 32 bits dest. port length checksum application data message figure 3.7 udp segment structure m03_kuro5469_08_ge_c03.indd 228 08052021 1358 3.3 connectionless transport udp 229 udp at the sender side performs the 1s complement of the sum of all the 16bit words in the segment, with any overflow encountered during the sum being wrapped
around. this result is put in the checksum field of the udp segment. here we give a simple example of the checksum calculation. you can find details about efficient implementation of the calculation in rfc 1071 and performance over real data in stone 1998; stone 2000. as an example, suppose that we have the following three 16bit words 011001100110000001010101010101011000111100001100 the sum of first two of these 16bit words is 0110011001100000 01010101010101011011101110110101 adding the third word to the above sum gives1011101110110101 10001111000011000100101011000010 note that this last addition had overflow, which was wrapped around. the 1s complement is obtained by converting all the 0s to 1s and converting all the 1s to 0s. thus, the 1s complement of the sum 0100101011000010 is 1011010100111101, which becomes the checksum. at the receiver, all four 16bit words are added, including the checksum. if no errors are introduced into the packet, then clearly the sum at the receiver will be 1111111111111111. if one of the bits is a 0, then we know that errors have been introduced into the packet. you may wonder why udp provides a checksum in the first place, as many linklayer protocols including the popular ethernet protocol also provide error checking. the reason is that there is no guarantee that all the links between source and destination provide error checking; that is, one of the links may use a linklayer protocol that does not provide error checking. furthermore, even if segments are correctly transferred across a link, its possible that bit errors could be introduced when a segment is stored in a routers memory. given that neither linkbylink reliability nor inmemory error detection is guaranteed, udp must provide error detection at the transport layer, on an endend basis, if the endend data transfer service is to provide error detection. this is an example of the celebrated endend principle in system design saltzer 1984, which states that since certain functionality error detection, in this case must be implemented on an endend basis functions placed m03_kuro5469_08_ge_c03.indd 229 08052021 1358 230 chapter 3 transport layer at the lower levels may be redundant or of little value when compared to the cost of providing them at the higher level. because ip is supposed to run over just about any layer2 protocol, it is useful for the transport layer to provide error checking as a safety measure. although udp provides error checking, it does not do anything to recover from an error. some implementations of udp simply discard the damaged segment; others pass the damaged segment to the application with a warning. that wraps up our discussion of udp. we will soon see that tcp offers reli able data transfer to its applications as well as other services that udp doesnt offer. naturally, tcp is also more complex than udp. before discussing tcp, however, it will be useful to step back and first discuss the underlying principles of reliable data transfer. 3.4 principles of reliable data transfer in this section, we consider the problem of reliable data
transfer in a general context. this is appropriate since the problem of implementing reliable data transfer occurs not only at the transport layer, but also at the link layer and the application layer as well. the general problem is thus of central importance to networking. indeed, if one had to identify a topten list of fundamentally important problems in all of networking, this would be a candidate to lead the list. in the next section, well examine tcp and show, in particular, that tcp exploits many of the principles that we are about to describe. figure 3.8 illustrates the framework for our study of reliable data transfer. the service abstraction provided to the upperlayer entities is that of a reliable channel through which data can be transferred. with a reliable channel, no transferred data bits are corrupted flipped from 0 to 1, or vice versa or lost, and all are delivered in the order in which they were sent. this is precisely the service model offered by tcp to the internet applications that invoke it. it is the responsibility of a reliable data transfer protocol to implement this service abstraction. this task is made difficult by the fact that the layer below the reliable data transfer protocol may be unreliable. for example, tcp is a reliable data transfer protocol that is implemented on top of an unreliable ip endtoend network layer. more generally, the layer beneath the two reliably communicating end points might consist of a single physical link as in the case of a linklevel data transfer protocol or a global internetwork as in the case of a transportlevel protocol. for our purposes, however, we can view this lower layer simply as an unreliable pointtopoint channel. in this section, we will incrementally develop the sender and receiver sides of a reliable data transfer protocol, considering increasingly complex models of the underlying channel. for example, well consider what protocol mechanisms are m03_kuro5469_08_ge_c03.indd 230 08052021 1358 3.4 principles of reliable data transfer 231 needed when the underlying channel can corrupt bits or lose entire packets. one assumption well adopt throughout our discussion here is that packets will be delivered in the order in which they were sent, with some packets possibly being lost; that is, the underlying channel will not reorder packets. figure 3.8b illustrates the interfaces for our data transfer protocol. the sending side of the data transfer protocol will be invoked from above by a call to rdt_send. it will pass the data to be delivered to the upper layer at the receiving side. here rdt stands for reliable data transfer protocol and _send indicates that the sending side of rdt is being called. the first step in developing any protocol is to choose a good name! on the receiving side, rdt_rcv will be called when a packet arrives from the receiving side of the channel. when the rdt protocol wants to deliver data to the upper layer, it will do so by calling deliver_data. in the following, we
use the terminology packet rather than transportlayer segment. because the theory developed in this section reliable channel unreliable channelrdt_send udt_sendsending processreceiver process deliver_dataapplication layer transport layer a. provided servicenetwork layer key data packetb. service implementationreliable data transfer pr otocol sending sidereliable data transfer pr otocol receiving side rdt_rcv figure 3.8 reliable data transfer service model and service implementation m03_kuro5469_08_ge_c03.indd 231 08052021 1358 232 chapter 3 transport layer applies to computer networks in general and not just to the internet transport layer, the generic term packet is perhaps more appropriate here. in this section, we consider only the case of unidirectional data transfer, that is, data transfer from the sending to the receiving side. the case of reliable bidirectional that is, fullduplex data transfer is conceptually no more difficult but considerably more tedious to explain. although we consider only unidirectional data transfer, it is important to note that the sending and receiving sides of our protocol will nonetheless need to transmit packets in both directions, as indicated in figure 3.8. we will see shortly that, in addition to exchanging packets containing the data to be transferred, the sending and receiving sides of rdt will also need to exchange control packets back and forth. both the send and receive sides of rdt send packets to the other side by a call to udt_send where udt stands for unreliable data transfer. 3.4.1 building a reliable data transfer protocol we now step through a series of protocols, each one becoming more complex, arriving at a flawless, reliable data transfer protocol. reliable data transfer over a perfectly reliable channel rdt1.0 we first consider the simplest case, in which the underlying channel is completely reliable. the protocol itself, which well call rdt1.0, is trivial. the finitestate machine fsm definitions for the rdt1.0 sender and receiver are shown in figure 3.9. the fsm in figure 3.9a defines the operation of the sender, while the fsm in figure 3.9b defines the operation of the receiver. it is important to note that there are separate fsms for the sender and for the receiver. the sender and receiver fsms in figure 3.9 each have just one state. the arrows in the fsm description indicate the transition of the protocol from one state to another. since each fsm in figure 3.9 has just one state, a transition is necessarily from the one state back to itself; well see more complicated state diagrams shortly. the event causing the transition is shown above the horizontal line labeling the transition, and the actions taken when the event occurs are shown below the horizontal line. when no action is taken on an event, or no event occurs and an action is taken, well use the symbol Œª below or above the horizontal, respectively, to explicitly denote the lack of an action or event. the initial state of the fsm is indicated by the dashed arrow. although the fsms in figure 3.9 have but one state, the fsms we will see shortly have multiple states, so
it will be important to identify the initial state of each fsm. the sending side of rdt simply accepts data from the upper layer via the rdt_senddata event, creates a packet containing the data via the action make_pktdata and sends the packet into the channel. in practice, the rdt_senddata event would result from a procedure call for example, to rdt_send by the upperlayer application. m03_kuro5469_08_ge_c03.indd 232 08052021 1358 3.4 principles of reliable data transfer 233 on the receiving side, rdt receives a packet from the underlying channel via the rdt_rcvpacket event, removes the data from the packet via the action extract packet, data and passes the data up to the upper layer via the action deliver_datadata. in practice, the rdt_rcvpacket event would result from a procedure call for example, to rdt_rcv from the lowerlayer protocol. in this simple protocol, there is no difference between a unit of data and a packet. also, all packet flow is from the sender to receiver; with a perfectly reliable channel there is no need for the receiver side to provide any feedback to the sender since nothing can go wrong! note that we have also assumed that the receiver is able to receive data as fast as the sender happens to send data. thus, there is no need for the receiver to ask the sender to slow down! reliable data transfer over a channel with bit errors rdt2.0 a more realistic model of the underlying channel is one in which bits in a packet may be corrupted. such bit errors typically occur in the physical components of a network as a packet is transmitted, propagates, or is buffered. well continue to assume for the moment that all transmitted packets are received although their bits may be corrupted in the order in which they were sent. before developing a protocol for reliably communicating over such a channel, first consider how people might deal with such a situation. consider how you yourself wait for call from above a. rdt1.0 sending siderdt_senddata packetmake_pktdata udt_sendpacket wait for call from below b. rdt1.0 r eceiving siderdt_rcvpacket extractpacket,data deliver_datadata figure 3.9 rdt1.0 a protocol for a completely reliable channel m03_kuro5469_08_ge_c03.indd 233 08052021 1358 234 chapter 3 transport layer might dictate a long message over the phone. in a typical scenario, the message taker might say ok after each sentence has been heard, understood, and recorded. if the message taker hears a garbled sentence, youre asked to repeat the garbled sentence. this messagedictation protocol uses both positive acknowledgments ok and negative acknowledgments please repeat that.. these control messages allow the receiver to let the sender know what has been received correctly, and what has been received in error and thus requires repeating. in a computer network setting, reliable data transfer protocols based on such retransmission are known as arq automatic repeat request protocols. fundamentally, three additional protocol capabilities are required in arq pro tocols to handle the presence of bit errors error detection. first, a mechanism is needed to allow the
receiver to detect when bit errors have occurred. recall from the previous section that udp uses the internet checksum field for exactly this purpose. in chapter 6, well examine error detection and correction techniques in greater detail; these techniques allow the receiver to detect and possibly correct packet bit errors. for now, we need only know that these techniques require that extra bits beyond the bits of original data to be transferred be sent from the sender to the receiver; these bits will be gathered into the packet checksum field of the rdt2.0 data packet. receiver feedback. since the sender and receiver are typically executing on different end systems, possibly separated by thousands of miles, the only way for the sender to learn of the receivers view of the world in this case, whether or not a packet was received correctly is for the receiver to provide explicit feedback to the sender. the positive ack and negative nak acknowledgment replies in the messagedictation scenario are examples of such feedback. our rdt2.0 protocol will similarly send ack and nak packets back from the receiver to the sender. in principle, these packets need only be one bit long; for example, a 0 value could indicate a nak and a value of 1 could indicate an ack. retransmission. a packet that is received in error at the receiver will be retransmitted by the sender. figure 3.10 shows the fsm representation of rdt2.0, a data transfer protocol employing error detection, positive acknowledgments, and negative acknowledgments. the send side of rdt2.0 has two states. in the leftmost state, the sendside protocol is waiting for data to be passed down from the upper layer. when the rdt_senddata event occurs, the sender will create a packet sndpkt containing the data to be sent, along with a packet checksum for example, as discussed in section 3.3.2 for the case of a udp segment, and then send the packet via the udt_sendsndpkt operation. in the rightmost state, the sender protocol is waiting for an ack or a nak packet from the receiver. if an ack packet is received m03_kuro5469_08_ge_c03.indd 234 08052021 1358 3.4 principles of reliable data transfer 235 the notation rdt_rcvrcvpkt isackrcvpkt in figure 3.10 cor responds to this event, the sender knows that the most recently transmitted packet has been received correctly and thus the protocol returns to the state of waiting for data from the upper layer. if a nak is received, the protocol retransmits the last packet and waits for an ack or nak to be returned by the receiver in response to the retransmitted data packet. it is important to note that when the sender is in the waitforackornak state, it cannot get more data from the upper layer; that is, the rdt_send event can not occur; that will happen only after the sender receives an ack and leaves this state. thus, the sender will not send a new piece of data until it is sure that the receiver has correctly received the current
packet. because of this behavior, protocols such as rdt2.0 are known as stopandwait protocols.wait for call from above a. rdt2.0 sending side b. rdt2.0 r eceiving siderdt_rcvrcvpkt corruptrcvpkt sndpktmake_pktnak udt_sendsndpktrdt_rcvrcvpkt isnakrcvpkt udt_sendsndpkt rdt_rcvrcvpkt isackrcvpkt lrdt_senddata sndpktmake_pktdata,checksumudt_sendsndpkt rdt_rcvrcvpkt notcorruptrcvpkt extractrcvpkt,datadeliver_datadatasndpktmake_pktack udt_sendsndpktwait for call from belowwait for ack or nak figure 3.10 rdt2.0a protocol for a channel with bit errors m03_kuro5469_08_ge_c03.indd 235 08052021 1358 236 chapter 3 transport layer the receiverside fsm for rdt2.0 still has a single state. on packet arrival, the receiver replies with either an ack or a nak, depending on whether or not the received packet is corrupted. in figure 3.10, the notation rdt_rcvrcvpkt corruptrcvpkt corresponds to the event in which a packet is received and is found to be in error. protocol rdt2.0 may look as if it works but, unfortunately, it has a fatal flaw. in particular, we havent accounted for the possibility that the ack or nak packet could be corrupted! before proceeding on, you should think about how this problem may be fixed. unfortunately, our slight oversight is not as innocuous as it may seem. minimally, we will need to add checksum bits to acknak packets in order to detect such errors. the more difficult question is how the protocol should recover from errors in ack or nak packets. the difficulty here is that if an ack or nak is corrupted, the sender has no way of knowing whether or not the receiver has correctly received the last piece of transmitted data. consider three possibilities for handling corrupted acks or naks for the first possibility, consider what a human might do in the messagedictation scenario. if the speaker didnt understand the ok or please repeat that reply from the receiver, the speaker would probably ask, what did you say? thus introducing a new type of sendertoreceiver packet to our protocol. the receiver would then repeat the reply. but what if the speakers what did you say? is corrupted? the receiver, having no idea whether the garbled sentence was part of the dictation or a request to repeat the last reply, would probably then respond with what did you say? and then, of course, that response might be garbled. clearly, were heading down a difficult path. a second alternative is to add enough checksum bits to allow the sender not only to detect, but also to recover from, bit errors. this solves the immediate problem for a channel that can corrupt packets but not lose them. a third approach is for the sender simply to resend the current data packet when it receives a garbled ack or nak packet. this approach, however, introduces duplicate packets into the sendertoreceiver channel. the fundamental difficulty with duplicate packets is that the receiver doesnt know whether the ack or nak it last sent was received correctly at the sender. thus, it cannot know a priori whether an arriving packet contains new data or is a retransmission! a simple solution to this new problem and one adopted in almost all
exist ing data transfer protocols, including tcp is to add a new field to the data packet and have the sender number its data packets by putting a sequence number into this field. the receiver then need only check this sequence number to determine whether or not the received packet is a retransmission. for this simple case of a stopandwait protocol, a 1bit sequence number will suffice, since it will allow the receiver to know whether the sender is resending the previously transmitted packet m03_kuro5469_08_ge_c03.indd 236 08052021 1358 3.4 principles of reliable data transfer 237 the sequence number of the received packet has the same sequence number as the most recently received packet or a new packet the sequence number changes, moving forward in modulo2 arithmetic. since we are currently assuming a channel that does not lose packets, ack and nak packets do not themselves need to indicate the sequence number of the packet they are acknowledging. the sender knows that a received ack or nak packet whether garbled or not was generated in response to its most recently transmitted data packet. figures 3.11 and 3.12 show the fsm description for rdt2.1, our fixed version of rdt2.0. the rdt2.1 sender and receiver fsms each now have twice as many states as before. this is because the protocol state must now reflect whether the packet currently being sent by the sender or expected at the receiver should have a sequence number of 0 or 1. note that the actions in those states where a 0numbered packet is being sent or expected are mirror images of those where a 1numbered packet is being sent or expected; the only differences have to do with the handling of the sequence number. protocol rdt2.1 uses both positive and negative acknowledgments from the receiver to the sender. when an outoforder packet is received, the receiver sends a positive acknowledgment for the packet it has received. when a corrupted packet wait for call 0 from aboverdt_rcvrcvpkt corruptrcvpkt isnakrcvpkt udt_sendsndpkt rdt_rcvrcvpkt corruptrcvpkt isnakrcvpkt udt_sendsndpktrdt_rcvrcvpkt notcorruptrcvpkt isackrcvpktrdt_rcvrcvpktnotcorruptrcvpkt isackrcvpkt l lrdt_senddata sndpktmake_pkt0,data,checksum udt_sendsndpkt rdt_senddata sndpktmake_pkt1,data,checksum udt_sendsndpktwait for ack or nak 0 wait for ack or nak 1wait for call 1 from above figure 3.11 rdt2.1 sender m03_kuro5469_08_ge_c03.indd 237 08052021 1358 238 chapter 3 transport layer is received, the receiver sends a negative acknowledgment. we can accomplish the same effect as a nak if, instead of sending a nak, we send an ack for the last correctly received packet. a sender that receives two acks for the same packet that is, receives duplicate acks knows that the receiver did not correctly receive the packet following the packet that is being acked twice. our nakfree reliable data transfer protocol for a channel with bit errors is rdt2.2, shown in figures 3.13 and 3.14. one subtle change between rtdt2.1 and rdt2.2 is that the receiver must now include the sequence number of the packet being acknowledged by an ack message this is done by including the ack, 0 or ack, 1 argument in
make_pkt in the receiver fsm, and the sender must now check the sequence number of the packet being acknowledged by a received ack message this is done by including the 0 or 1 argument in isack in the sender fsm. reliable data transfer over a lossy channel with bit errors rdt3.0 suppose now that in addition to corrupting bits, the underlying channel can lose packets as well, a notuncommon event in todays computer networks including the internet. two additional concerns must now be addressed by the protocol how to detect packet loss and what to do when packet loss occurs. the use of checksumming, sequence numbers, ack packets, and retransmissionsthe techniques rdt_rcvrcvpkt notcorrupt rcvpkt has_seq0rcvpkt sndpktmake_pktack,checksum udt_sendsndpktrdt_rcvrcvpkt corruptrcvpkt sndpktmake_pktnak,checksum udt_sendsndpktrdt_rcvrcvpkt corruptrcvpkt sndpktmake_pktnak,checksumudt_sendsndpkt sndpktmake_pktack,checksumudt_sendsndpkt rdt_rcvrcvpkt notcorruptrcvpkt has_seq1rcvpkt extractrcvpkt,datadeliver_datadata sndpktmake_pktack,checksum udt_sendsndpktrdt_rcvrcvpkt notcorruptrcvpkt has_seq0rcvpkt extractrcvpkt,data deliver_datadatasndpktmake_pktack,checksum udt_sendsndpkt wait for 0 from belowwait for 1 from below rdt_rcvrcvpkt notcorrupt rcvpkt has_seq1rcvpkt figure 3.12 rdt2.1 receiver m03_kuro5469_08_ge_c03.indd 238 08052021 1358 3.4 principles of reliable data transfer 239 wait for call 0 from aboverdt_rcvrcvpkt corruptrcvpkt isackrcvpkt,1 udt_sendsndpkt rdt_rcvrcvpkt corruptrcvpkt isackrcvpkt,0 udt_sendsndpktrdt_rcvrcvpkt notcorruptrcvpkt isackrcvpkt,0rdt_rcvrcvpkt notcorruptrcvpkt isackrcvpkt,1rdt_senddata sndpktmake_pkt0,data,checksum udt_sendsndpkt rdt_senddata sndpktmake_pkt1,data,checksum udt_sendsndpktwait for ack 0 wait for ack 1l l wait for call 1 from above figure 3.13 rdt2.2 sender already developed in rdt2.2will allow us to answer the latter concern. handling the first concern will require adding a new protocol mechanism. there are many possible approaches toward dealing with packet loss several more of which are explored in the exercises at the end of the chapter. here, well put the burden of detecting and recovering from lost packets on the sender. suppose that the sender transmits a data packet and either that packet, or the receivers ack of that packet, gets lost. in either case, no reply is forthcoming at the sender from the receiver. if the sender is willing to wait long enough so that it is certain that a packet has been lost, it can simply retransmit the data packet. you should convince yourself that this protocol does indeed work. but how long must the sender wait to be certain that something has been lost? the sender must clearly wait at least as long as a roundtrip delay between the sender and receiver which may include buffering at intermediate routers plus whatever amount of time is needed to process a packet at the receiver. in many networks, this worstcase maximum delay is very difficult even to estimate, much less know with certainty. moreover, the protocol should ideally recover from packet loss as soon as possible; waiting for a worstcase delay could mean a long wait until error recovery m03_kuro5469_08_ge_c03.indd 239 08052021 1358 240 chapter 3 transport layer is initiated. the approach thus adopted in practice is for the sender to judiciously choose a time value such that packet loss is likely, although not guaranteed, to have happened. if an ack is not received within this time, the packet is retransmitted. note that if a packet experiences a particularly large delay, the sender may retransmit the
packet even though neither the data packet nor its ack have been lost. this introduces the possibility of duplicate data packets in the sendertoreceiver channel. happily, protocol rdt2.2 already has enough functionality that is, sequence numbers to handle the case of duplicate packets. from the senders viewpoint, retransmission is a panacea. the sender does not know whether a data packet was lost, an ack was lost, or if the packet or ack was simply overly delayed. in all cases, the action is the same retransmit. implementing a timebased retransmission mechanism requires a countdown timer that can interrupt the sender after a given amount of time has expired. the sender will thus need to be able to 1 start the timer each time a packet either a firsttime packet or a retransmission is sent, 2 respond to a timer interrupt taking appropriate actions, and 3 stop the timer. figure 3.15 shows the sender fsm for rdt3.0, a protocol that reliably transfers data over a channel that can corrupt or lose packets; in the homework problems, youll be asked to provide the receiver fsm for rdt3.0. figure 3.16 shows how the pro tocol operates with no lost or delayed packets and how it handles lost data packets. in figure 3.16, time moves forward from the top of the diagram toward the bottom of the wait for 0 from belowrdt_rcvrcvpkt corruptrcvpkt has_seq0rcvpkt sndpktmake_pktack,0,checksum udt_sendsndpkt rdt_rcvrcvpkt corruptrcvpkt has_seq1rcvpkt sndpktmake_pktack,1,checksum udt_sendsndpkt rdt_rcvrcvpkt notcorruptrcvpkt has_seq1rcvpkt extractrcvpkt,datadeliver_datadata sndpktmake_pktack,1,checksum udt_sendsndpktrdt_rcvrcvpkt notcorruptrcvpkt has_seq0rcvpkt extractrcvpkt,datadeliver_datadatasndpktmake_pktack,0,checksum udt_sendsndpkt wait for 1 from below figure 3.14 rdt2.2 receiver m03_kuro5469_08_ge_c03.indd 240 08052021 1358 3.4 principles of reliable data transfer 241 diagram; note that a receive time for a packet is necessarily later than the send time for a packet as a result of transmission and propagation delays. in figures 3.16bd, the sendside brackets indicate the times at which a timer is set and later times out. several of the more subtle aspects of this protocol are explored in the exercises at the end of this chapter. because packet sequence numbers alternate between 0 and 1, protocol rdt3.0 is sometimes known as the alternatingbit protocol. we have now assembled the key elements of a data transfer protocol. check sums, sequence numbers, timers, and positive and negative acknowledgment packets each play a crucial and necessary role in the operation of the protocol. we now have a working reliable data transfer protocol! 3.4.2 pipelined reliable data transfer protocols protocol rdt3.0 is a functionally correct protocol, but it is unlikely that anyone would be happy with its performance, particularly in todays highspeed networks. at the heart of rdt3.0s performance problem is the fact that it is a stopandwait protocol.wait for call 0 from aboverdt_rcvrcvpkt corruptrcvpkt isackrcvpkt,1 timeout udt_sendsndpkt start_timer rdt_rcvrcvpkt l rdt_rcvrcvpkt corruptrcvpktisackrcvpkt,0rdt_rcvrcvpkt notcorruptrcvpkt isackrcvpkt,0 stop_timerrdt_rcvrcvpktnotcorruptrcvpkt isackrcvpkt,1 stop_timer timeout udt_sendsndpkt start_timerrdt_senddata sndpktmake_pkt0,data,checksumudt_sendsndpkt start_timer rdt_senddata sndpktmake_pkt1,data,checksum udt_sendsndpkt start_timerwait for ack 0 wait for ack 1 ll wait for call 1 from aboverdt_rcvrcvpkt l figure 3.15 rdt3.0 sender m03_kuro5469_08_ge_c03.indd 241 08052021 1358 242 chapter 3 transport layer rcv pkt0 send
ack0 rcv pkt1 send ack1 rcv pkt0 send ack0sender receiver a. operation with no losspkt0 ack0 pkt1 pkt0ack1 ack0 loss xb. lost packet rcv pkt0send ack0 rcv pkt1 send ack1 c. lost acksend pkt0 rcv ack0 send pkt1 rcv ack1 send pkt0 send pkt0 rcv ack0 send pkt1 timeout resend pkt1 rcv ack1 send pkt0 rcv pkt0 send ack0rcv pkt1detectduplicatesend ack1send pkt0 rcv ack0 send pkt1rcv pkt0send ack0 timeout resend pkt1rcv pkt1 send ack1 d. pr ematur e timeoutrcv ack1 send pkt0 rcv ack1 do nothingrcv pkt0 send ack0rcv pkt 1 detect duplicate send ack1sender receiver receiver sender pkt0 ack0 pkt1 ack1 ack1ack0 ack1 ack0pkt1 pkt0pkt0 pkt1 pkt1 pkt0 ack1 ack0x losspkt1rcv pkt0 send ack0send pkt0 rcv ack0 send pkt1 timeout resend pkt1 rcv ack1 send pkt0 rcv pkt0send ack0rcv pkt1send ack1sender receiver pkt0 ack0 pkt1 pkt0ack1 ack0 figure 3.16 operation of rdt3.0, the alternatingbit protocol m03_kuro5469_08_ge_c03.indd 242 08052021 1358 3.4 principles of reliable data transfer 243 to appreciate the performance impact of this stopandwait behavior, consider an idealized case of two hosts, one located on the west coast of the united states and the other located on the east coast, as shown in figure 3.17. the speedoflight roundtrip propagation delay between these two end systems, rtt, is approximately 30 milliseconds. suppose that they are connected by a channel with a transmission rate, r, of 1 gbps 10 9 bits per second. with a packet size, l, of 1,000 bytes 8,000 bits per packet, including both header fields and data, the time needed to actually transmit the packet into the 1 gbps link is dtransl r8000 bits 109 bitssec8 microseconds figure 3.18a shows that with our stopandwait protocol, if the sender begins sending the packet at t0, then at tlr8 microseconds, the last bit enters the channel at the sender side. the packet then makes its 15msec crosscountry journey, with the last bit of the packet emerging at the receiver at trtt2lr 15.008 msec. assuming for simplicity that ack packets are extremely small so that we can ignore their transmission time and that the receiver can send an ack as soon as the last bit of a data packet is received, the ack emerges back at the sender at trttlr30.008 msec. at this point, the sender can now transmit the next message. thus, in 30.008 msec, the sender was sending for only 0.008 msec. if we define the utilization of the sender or the channel as the fraction of time the sender is actually busy sending bits into the channel, the analysis in figure 3.18a shows that the stopandwait protocol has a rather dismal sender utilization, usender, of usenderlr rttlr.008 30.0080.00027data packets data packet ack packets a. a stopandwait protocol in operation b. a pipelined protocol in operation figure 3.17 stopandwait versus pipelined protocol m03_kuro5469_08_ge_c03.indd 243 08052021 1358 244 chapter 3 transport layer first bit of Ô¨Årst packet transmitted, t 0 last bit of Ô¨Årst packet transmitted, t lr first bit of Ô¨Årst packet transmitted, t 0 last bit of
Ô¨Årst packet transmitted, t lrack arrives, send next packet, t rtt lr a. stopandwait operationsender receiver rttfirst bit of Ô¨Årst packet arrives last bit of Ô¨Årst packet arrives, send ack first bit of Ô¨Årst packet arrives last bit of Ô¨Årst packet arrives, send ack ack arrives, send next packet, t rtt lr b. pipelined operationsender receiver rtt last bit of 2nd packet arrives, send ack last bit of 3rd packet arrives, send ack figure 3.18 stopandwait and pipelined sending m03_kuro5469_08_ge_c03.indd 244 08052021 1358 3.4 principles of reliable data transfer 245 that is, the sender was busy only 2.7 hundredths of one percent of the time! viewed another way, the sender was able to send only 1,000 bytes in 30.008 mil liseconds, an effective throughput of only 267 kbpseven though a 1 gbps link was available! imagine the unhappy network manager who just paid a fortune for a gigabit capacity link but manages to get a throughput of only 267 kilobits per second! this is a graphic example of how network protocols can limit the capabilities provided by the underlying network hardware. also, we have neglected lower layer protocolprocessing times at the sender and receiver, as well as the processing and queuing delays that would occur at any intermediate routers between the sender and receiver. including these effects would serve only to further increase the delay and further accentuate the poor performance. the solution to this particular performance problem is simple rather than oper ate in a stopandwait manner, the sender is allowed to send multiple packets without waiting for acknowledgments, as illustrated in figure 3.17b. figure 3.18b shows that if the sender is allowed to transmit three packets before having to wait for acknowledgments, the utilization of the sender is essentially tripled. since the many intransit sendertoreceiver packets can be visualized as filling a pipeline, this technique is known as pipelining. pipelining has the following consequences for reliable data transfer protocols the range of sequence numbers must be increased, since each intransit packet not counting retransmissions must have a unique sequence number and there may be multiple, intransit, unacknowledged packets. the sender and receiver sides of the protocols may have to buffer more than one packet. minimally, the sender will have to buffer packets that have been transmitted but not yet acknowledged. buffering of correctly received packets may also be needed at the receiver, as discussed below. the range of sequence numbers needed and the buffering requirements will depend on the manner in which a data transfer protocol responds to lost, corrupted, and overly delayed packets. two basic approaches toward pipelined error recovery can be identified gobackn and selective repeat. 3.4.3 gobackn gbn in a gobackn gbn protocol, the sender is allowed to transmit multiple packets when available without waiting for an acknowledgment, but is constrained to have no more than some maximum allowable number, n, of unacknowledged packets in the pipeline. we describe the gbn protocol in some detail in this section. but before reading on, you are encouraged
to play with the gbn animation an awesome interactive animation at the companion website. figure 3.19 shows the senders view of the range of sequence numbers in a gbn protocol. if we define base to be the sequence number of the oldest unacknowledged m03_kuro5469_08_ge_c03.indd 245 08052021 1358 246 chapter 3 transport layer packet and nextseqnum to be the smallest unused sequence number that is, the sequence number of the next packet to be sent, then four intervals in the range of sequence numbers can be identified. sequence numbers in the interval 0,base1 correspond to packets that have already been transmitted and acknowledged. the interval base,nextseqnum1 corresponds to packets that have been sent but not yet acknowledged. sequence numbers in the interval nextseqnum,basen1 can be used for packets that can be sent immediately, should data arrive from the upper layer. finally, sequence numbers greater than or equal to basen cannot be used until an unacknowledged packet currently in the pipeline specifically, the packet with sequence number base has been acknowledged. as suggested by figure 3.19, the range of permissible sequence numbers for transmitted but not yet acknowledged packets can be viewed as a window of size n over the range of sequence numbers. as the protocol operates, this window slides forward over the sequence number space. for this reason, n is often referred to as the window size and the gbn protocol itself as a slidingwindow protocol. you might be wondering why we would even limit the number of outstanding, unacknowledged packets to a value of n in the first place. why not allow an unlimited number of such packets? well see in section 3.5 that flow control is one reason to impose a limit on the sender. well examine another reason to do so in section 3.7, when we study tcp congestion control. in practice, a packets sequence number is carried in a fixedlength field in the packet header. if k is the number of bits in the packet sequence number field, the range of sequence numbers is thus 0,2k1. with a finite range of sequence num bers, all arithmetic involving sequence numbers must then be done using modulo 2k arithmetic. that is, the sequence number space can be thought of as a ring of size 2k, where sequence number 2k1 is immediately followed by sequence number 0. recall that rdt3.0 had a 1bit sequence number and a range of sequence numbers of 0,1. several of the problems at the end of this chapter explore the consequences of a finite range of sequence numbers. we will see in section 3.5 that tcp has a 32bit sequence number field, where tcp sequence numbers count bytes in the byte stream rather than packets. figures 3.20 and 3.21 give an extended fsm description of the sender and receiver sides of an ackbased, nakfree, gbn protocol. we refer to this fsm base nextseqnum window size nkey already ackd sent, not yet ackdusable, not yet sent not usable figure 3.19 senders view of sequence numbers
in gobackn m03_kuro5469_08_ge_c03.indd 246 08052021 1358 3.4 principles of reliable data transfer 247 rdt_senddata ifnextseqnumbasen sndpktnextseqnummake_pktnextseqnum,data,checksum udt_sendsndpktnextseqnum ifbasenextseqnum start_timer nextseqnum else refuse_datadata l rdt_rcvrcvpkt notcorruptrcvpkt basegetacknumrcvpkt1ifbasenextseqnum stop_timer else start_timerrdt_rcvrcvpkt corruptrcvpktl base1nextseqnum1 timeout start_timer udt_sendsndpktbaseudt_sendsndpktbase1 ... udt_sendsndpktnextseqnum1wait figure 3.20 extended fsm description of the gbn sender rdt_rcvrcvpkt notcorruptrcvpkt hasseqnumrcvpkt,expectedseqnum extractrcvpkt,datadeliver_datadatasndpktmake_pktexpectedseqnum,ack,checksum udt_sendsndpkt expectedseqnum l expectedseqnum1 sndpktmake_pkt0,ack,checksumdefault udt_sendsndpktwait figure 3.21 extended fsm description of the gbn receiver m03_kuro5469_08_ge_c03.indd 247 08052021 1358 248 chapter 3 transport layer description as an extended fsm because we have added variables similar to programminglanguage variables for base and nextseqnum, and added opera tions on these variables and conditional actions involving these variables. note that the extended fsm specification is now beginning to look somewhat like a programminglanguage specification. bochman 1984 provides an excellent survey of additional extensions to fsm techniques as well as other programminglanguagebased techniques for specifying protocols. the gbn sender must respond to three types of events invocation from above. when rdt_send is called from above, the sender first checks to see if the window is full, that is, whether there are n outstanding, unacknowledged packets. if the window is not full, a packet is created and sent, and variables are appropriately updated. if the window is full, the sender simply returns the data back to the upper layer, an implicit indication that the window is full. the upper layer would presumably then have to try again later. in a real implementation, the sender would more likely have either buffered but not immediately sent this data, or would have a synchronization mechanism for example, a semaphore or a flag that would allow the upper layer to call rdt_send only when the window is not full. receipt of an ack. in our gbn protocol, an acknowledgment for a packet with sequence number n will be taken to be a cumulative acknowledgment, indicat ing that all packets with a sequence number up to and including n have been correctly received at the receiver. well come back to this issue shortly when we examine the receiver side of gbn. a timeout event. the protocols name, gobackn, is derived from the senders behavior in the presence of lost or overly delayed packets. as in the stopandwait protocol, a timer will again be used to recover from lost data or acknowledgment packets. if a timeout occurs, the sender resends all packets that have been previously sent but that have not yet been acknowledged. our sender in figure 3.20 uses only a single timer, which can be thought of as a timer for the oldest transmitted but not yet acknowledged packet. if an ack is received but there are still additional transmitted but not yet acknowledged packets, the timer is restarted. if there are no outstanding, unacknowledged packets, the timer is stopped. the receivers actions in gbn are also simple. if a packet with sequence number n is received correctly and is in order that is, the data last delivered to the upper layer came from a packet with sequence number n1,
the receiver sends an ack for packet n and delivers the data portion of the packet to the upper layer. in all other cases, the receiver discards the packet and resends an ack for the most recently received inorder packet. note that since packets are delivered one at a time to the upper layer, if packet k has been received and delivered, then all packets with a m03_kuro5469_08_ge_c03.indd 248 08052021 1358 3.4 principles of reliable data transfer 249 sequence number lower than k have also been delivered. thus, the use of cumulative acknowledgments is a natural choice for gbn. in our gbn protocol, the receiver discards outoforder packets. although it may seem silly and wasteful to discard a correctly received but outoforder packet, there is some justification for doing so. recall that the receiver must deliver data in order to the upper layer. suppose now that packet n is expected, but packet n1 arrives. because data must be delivered in order, the receiver could buffer save packet n1 and then deliver this packet to the upper layer after it had later received and delivered packet n . however, if packet n is lost, both it and packet n1 will eventually be retransmitted as a result of the gbn retransmis sion rule at the sender. thus, the receiver can simply discard packet n1. the advantage of this approach is the simplicity of receiver bufferingthe receiver need not buffer any outoforder packets. thus, while the sender must maintain the upper and lower bounds of its window and the position of nextseqnum within this window, the only piece of information the receiver need maintain is the sequence number of the next inorder packet. this value is held in the variable expectedseqnum, shown in the receiver fsm in figure 3.21. of course, the disadvantage of throwing away a correctly received packet is that the subsequent retransmission of that packet might be lost or garbled and thus even more retransmissions would be required. figure 3.22 shows the operation of the gbn protocol for the case of a window size of four packets. because of this window size limitation, the sender sends packets 0 through 3 but then must wait for one or more of these packets to be acknowledged before proceeding. as each successive ack for example, ack0 and ack1 is received, the window slides forward and the sender can transmit one new packet pkt4 and pkt5, respectively. on the receiver side, packet 2 is lost and thus packets 3, 4, and 5 are found to be out of order and are discarded. before closing our discussion of gbn, it is worth noting that an implementa tion of this protocol in a protocol stack would likely have a structure similar to that of the extended fsm in figure 3.20. the implementation would also likely be in the form of various procedures that implement the actions to be taken in response to the various events that can occur. in such eventbased programming, the various procedures are
called invoked either by other procedures in the protocol stack, or as the result of an interrupt. in the sender, these events would be 1 a call from the upperlayer entity to invoke rdt_send, 2 a timer interrupt, and 3 a call from the lower layer to invoke rdt_rcv when a packet arrives. the programming exercises at the end of this chapter will give you a chance to actually implement these routines in a simulated, but realistic, network setting. we note here that the gbn protocol incorporates almost all of the techniques that we will encounter when we study the reliable data transfer components of tcp in section 3.5. these techniques include the use of sequence numbers, cumulative acknowledgments, checksums, and a timeoutretransmit operation. m03_kuro5469_08_ge_c03.indd 249 08052021 1358 250 chapter 3 transport layer 3.4.4 selective repeat sr the gbn protocol allows the sender to potentially fill the pipeline in figure 3.17 with packets, thus avoiding the channel utilization problems we noted with stop andwait protocols. there are, however, scenarios in which gbn itself suffers from performance problems. in particular, when the window size and bandwidthdelay product are both large, many packets can be in the pipeline. a single packet error can thus cause gbn to retransmit a large number of packets, many unnecessarily. as the probability of channel errors increases, the pipeline can become filled with these unnecessary retransmissions. imagine, in our messagedictation scenario, that sender receiver send pkt0 send pkt1 send pkt2 send pkt3 wait rcv ack0 send pkt4 rcv ack1 send pkt5 send pkt2 send pkt3send pkt4send pkt5pkt2 timeoutrcv pkt0send ack0 rcv pkt1 send ack1 rcv pkt3, discard send ack1 rcv pkt4, discard send ack1 rcv pkt5, discard send ack1 rcv pkt2, deliver send ack2 rcv pkt3, deliver send ack3x loss figure 3.22 gobackn in operation m03_kuro5469_08_ge_c03.indd 250 08052021 1358 3.4 principles of reliable data transfer 251 if every time a word was garbled, the surrounding 1,000 words for example, a win dow size of 1,000 words had to be repeated. the dictation would be slowed by all of the reiterated words. as the name suggests, selectiverepeat protocols avoid unnecessary retrans missions by having the sender retransmit only those packets that it suspects were received in error that is, were lost or corrupted at the receiver. this individual, asneeded, retransmission will require that the receiver individually acknowledge correctly received packets. a window size of n will again be used to limit the number of outstanding, unacknowledged packets in the pipeline. however, unlike gbn, the sender will have already received acks for some of the packets in the window. figure 3.23 shows the sr senders view of the sequence number space. figure 3.24 details the various actions taken by the sr sender. the sr receiver will acknowledge a correctly received packet whether or not it is in order. outoforder packets are buffered until any missing packets that is, packets with lower sequence numbers are received, at which point a batch of packets can be delivered in order to the
upper layer. figure 3.25 itemizes the various actions taken by the sr receiver. figure 3.26 shows an example of sr operation in the presence of lost packets. note that in figure 3.26, the receiver initially buffers packets 3, 4, and 5, and delivers them together with packet 2 to the upper layer when packet 2 is finally received. send_base nextseqnum window size nkey keyalready ackd sent, not yet ackdusable, not yet sent not usable out of or der buffered but already ackd expected, not yet receivedacceptablewithinwindow not usablea. sender view of sequence numbers b. receiver view of sequence numbersrcv_base window size n figure 3.23 selectiverepeat sr sender and receiver views of sequencenumber space m03_kuro5469_08_ge_c03.indd 251 08052021 1358 252 chapter 3 transport layer it is important to note that in step 2 in figure 3.25, the receiver reacknowledges rather than ignores already received packets with certain sequence numbers below the current window base. you should convince yourself that this reacknowledgment is indeed needed. given the sender and receiver sequence number spaces in figure 3.23, for example, if there is no ack for packet send_base propagating from 1.data r eceived fr om above. when data is received from above, the sr sende r checks the next available sequence number for the packet. if the sequenc e number is within the sender s window , the data is packetized and sent; other wise it is either buÔ¨Ä ered or returned to the upper layer for later transmission, as in gbn. 2.timeout .timers are again used to protect against lost packets. however , each packet must now have its own logical timer , since only a single packet will be transmitted on timeout. asingle hardware timer can be used to mimic the operation of multiple logical timers v arghese 1997. 3.ack r eceived .if an ack is received, the sr sender marks that packet as having been received, provided it is in the window . if the packet s sequence number is equal to send_base , the window base is moved forward to the unacknowledged packet with the smallest sequence number . if the window moves and there are untransmitted packets with sequence numbers that nowfall within the window , these packets are transmitted. figure 3.24 sr sender events and actions 1.packet with sequence number in rcv_base, rcv_basen1is cor rectly r eceived. in this case, the received packet falls within the receiver s win dow and a selective ack packet is returned to the sender . if the packet was not previously received, it is buÔ¨Äered. if this packet has a sequence number equal tothe base of the receive window rcv_base in figure 3.22, then this packet, and any previously buÔ¨Äered and consecutively numbered beginning withrcv_base packets are delivered to the upper layer . the receive window is then moved forward by the number of packets delivered to the upper layer. as an example, consider figure 3.26. when a packet with a sequence number of rcv_base2 is received, it and packets 3, 4, and
5 can be delivered to the upper layer . 2.packet with sequence number in rcv_basen, rcv_base1is cor rectly r eceived. in this case, an ack must be generated, even though this is a packet that the receiver has previously acknowledged. 3.otherwise. ignore the packet. figure 3.25 sr receiver events and actions m03_kuro5469_08_ge_c03.indd 252 08052021 1358 3.4 principles of reliable data transfer 253 the receiver to the sender, the sender will eventually retransmit packet send_base, even though it is clear to us, not the sender! that the receiver has already received that packet. if the receiver were not to acknowledge this packet, the senders window would never move forward! this example illustrates an important aspect of sr protocols and many other protocols as well. the sender and receiver will not always have an identical view of what has been received correctly and what has not. for sr protocols, this means that the sender and receiver windows will not always coincide.pkt0 rcvd, delivered, ack0 sent 0 1 2 3 4 5 6 7 8 9 pkt1 rcvd, delivered, ack1 sent 0 1 2 3 4 5 6 7 8 9 pkt3 rcvd, buÔ¨Äered, ack3 sent 0 1 2 3 4 5 6 7 8 9 pkt4 rcvd, buÔ¨Äered, ack4 sent 0 1 2 3 4 5 6 7 8 9 pkt5 rcvd; buÔ¨Äered, ack5 sent 0 1 2 3 4 5 6 7 8 9 pkt2 rcvd, pkt2,pkt3,pkt4,pkt5 delivered, ack2 sent 0 1 2 3 4 5 6 7 8 9pkt0 sent0 1 2 3 4 5 6 7 8 9 pkt1 sent 0 1 2 3 4 5 6 7 8 9 pkt2 sent 0 1 2 3 4 5 6 7 8 9 pkt3 sent, window full 0 1 2 3 4 5 6 7 8 9 ack0 rcvd, pkt4 sent 0 1 2 3 4 5 6 7 8 9 ack1 rcvd, pkt5 sent 0 1 2 3 4 5 6 7 8 9 pkt2 timeout, pkt2 resent 0 1 2 3 4 5 6 7 8 9 ack3 rcvd, nothing sent 0 1 2 3 4 5 6 7 8 9x losssender receiver figure 3.26 sr operation m03_kuro5469_08_ge_c03.indd 253 08052021 1358 254 chapter 3 transport layer the lack of synchronization between sender and receiver windows has impor tant consequences when we are faced with the reality of a finite range of sequence numbers. consider what could happen, for example, with a finite range of four packet sequence numbers, 0, 1, 2, 3, and a window size of three. suppose packets 0 through 2 are transmitted and correctly received and acknowledged at the receiver. at this point, the receivers window is over the fourth, fifth, and sixth packets, which have sequence numbers 3, 0, and 1, respectively. now consider two scenarios. in the first scenario, shown in figure 3.27a, the acks for the first three packets are lost and the sender retransmits these packets. the receiver thus next receives a packet with sequence number 0a copy of the first
packet sent. in the second scenario, shown in figure 3.27b, the acks for the first three packets are all delivered correctly. the sender thus moves its window forward and sends the fourth, fifth, and sixth packets, with sequence numbers 3, 0, and 1, respectively. the packet with sequence number 3 is lost, but the packet with sequence number 0 arrivesa packet containing new data. now consider the receivers viewpoint in figure 3.27, which has a figurative curtain between the sender and the receiver, since the receiver cannot see the actions taken by the sender. all the receiver observes is the sequence of messages it receives from the channel and sends into the channel. as far as it is concerned, the two scenarios in figure 3.27 are identical. there is no way of distinguishing the retransmission of the first packet from an original transmission of the fifth packet. clearly, a window size that is 1 less than the size of the sequence number space wont work. but how small must the window size be? a problem at the end of the chapter asks you to show that the window size must be less than or equal to half the size of the sequence number space for sr protocols. at the companion website, you will find an animation that illustrates the opera tion of the sr protocol. try performing the same experiments that you did with the gbn animation. do the results agree with what you expect? this completes our discussion of reliable data transfer protocols. weve covered a lot of ground and introduced numerous mechanisms that together provide for reli able data transfer. table 3.1 summarizes these mechanisms. now that we have seen all of these mechanisms in operation and can see the big picture, we encourage you to review this section again to see how these mechanisms were incrementally added to cover increasingly complex and realistic models of the channel connecting the sender and receiver, or to improve the performance of the protocols. lets conclude our discussion of reliable data transfer protocols by consider ing one remaining assumption in our underlying channel model. recall that we have assumed that packets cannot be reordered within the channel between the sender and receiver. this is generally a reasonable assumption when the sender and receiver are connected by a single physical wire. however, when the channel connecting the two is a network, packet reordering can occur. one manifestation of packet reordering is that old copies of a packet with a sequence or acknowledgment m03_kuro5469_08_ge_c03.indd 254 08052021 1358 3.4 principles of reliable data transfer 255 pkt0timeout retransmit pkt0 0 1 2 3 0 1 2pkt0 pkt1pkt20 1 2 3 0 1 2 0 1 2 3 0 1 2 0 1 2 3 0 1 20 1 2 3 0 1 2ack0 ack1 ack2 x0 1 2 3 0 1 2 0 1 2 3 0 1 2sender window after receipt a. b.receiver window after receipt receive packet with seq number 0 0 1
2 3 0 1 2pkt0 pkt1pkt2 pkt3 pkt00 1 2 3 0 1 2 0 1 2 3 0 1 2 0 1 2 3 0 1 20 1 2 3 0 1 2 ack0 ack1 ack20 1 2 3 0 1 2 0 1 2 3 0 1 2sender window after receiptreceiver window after receipt receive packet with seq number 00 1 2 3 0 1 2x x x figure 3.27 sr receiver dilemma with toolarge windows a new packet or a retransmission? m03_kuro5469_08_ge_c03.indd 255 08052021 1358 256 chapter 3 transport layer number of x can appear, even though neither the senders nor the receivers win dow contains x . with packet reordering, the channel can be thought of as essen tially buffering packets and spontaneously emitting these packets at any point in the future. because sequence numbers may be reused, some care must be taken to guard against such duplicate packets. the approach taken in practice is to ensure that a sequence number is not reused until the sender is sure that any previously sent packets with sequence number x are no longer in the network. this is done by assuming that a packet cannot live in the network for longer than some fixed maximum amount of time. a maximum packet lifetime of approximately three minutes is assumed in the tcp extensions for highspeed networks rfc 7323. sunshine 1978 describes a method for using sequence numbers such that reordering problems can be completely avoided.table 3.1 summary of reliable data transfer mechanisms and their usemechanism use, comments checksum used to detect bit errors in a transmitted packet. timer used to timeoutretransmit a packet, possibly because the packet or its ack was lost within the channel. because timeouts can occur when a packet is delayed but not lost premature timeout, or when a packet has been received by the receiver but the receivertosender ack has been lost, duplicate copies of a packet may be received by a receiver. sequence number used for sequential numbering of packets of data flowing from sender to receiver. gaps in the sequence numbers of received packets allow the receiver to detect a lost packet. packets with duplicate sequence numbers allow the receiver to detect duplicate copies of a packet. acknowledgment used by the receiver to tell the sender that a packet or set of packets has been received correctly. acknowledgments will typically carry the sequence number of the packet or packets being acknowledged. acknowledgments may be individual or cumulative, depending on the protocol. negative acknowledgment used by the receiver to tell the sender that a packet has not been received correctly. negative acknowledgments will typically carry the sequence number of the packet that was not received correctly. window, pipelining the sender may be restricted to sending only packets with sequence numbers that fall within a given range. by allowing multiple packets to be transmitted but not yet acknowledged, sender utilization can be increased over a stopandwait mode of operation. well see shortly that the window
size may be set on the basis of the receivers ability to receive and buffer messages, or the level of congestion in the network, or both. m03_kuro5469_08_ge_c03.indd 256 08052021 1358 3.5 connectionoriented transport tcp 257 3.5 connectionoriented transport tcp now that we have covered the underlying principles of reliable data transfer, lets turn to tcpthe internets transportlayer, connectionoriented, reliable transport protocol. in this section, well see that in order to provide reliable data transfer, tcp relies on many of the underlying principles discussed in the previous section, including error detection, retransmissions, cumulative acknowledgments, timers, and header fields for sequence and acknowledgment numbers. tcp is defined in rfc 793, rfc 1122, rfc 2018, rfc 5681, and rfc 7323. 3.5.1 the tcp connection tcp is said to be connectionoriented because before one application process can begin to send data to another, the two processes must first handshake with each otherthat is, they must send some preliminary segments to each other to establish the parameters of the ensuing data transfer. as part of tcp connection establishment, both sides of the connection will initialize many tcp state variables many of which will be discussed in this section and in section 3.7 associated with the tcp connection. the tcp connection is not an endtoend tdm or fdm circuit as in a circuit switched network. instead, the connection is a logical one, with common state residing only in the tcps in the two communicating end systems. recall that because the tcp protocol runs only in the end systems and not in the intermediate network elements routers and linklayer switches, the intermediate network elements do not maintain tcp connection state. in fact, the intermediate routers are completely oblivious to tcp connections; they see datagrams, not connections. a tcp connection provides a fullduplex service if there is a tcp con nection between process a on one host and process b on another host, then applicationlayer data can flow from process a to process b at the same time as applicationlayer data flows from process b to process a. a tcp connection is also always pointtopoint, that is, between a single sender and a single receiver. socalled multicasting see the online supplementary materials for this textthe transfer of data from one sender to many receivers in a single send operationis not possible with tcp. with tcp, two hosts are company and three are a crowd! lets now take a look at how a tcp connection is established. suppose a process running in one host wants to initiate a connection with another process in another host. recall that the process that is initiating the connection is called the client process, while the other process is called the server process. the client application process first informs the client transport layer that it wants to establish a connection m03_kuro5469_08_ge_c03.indd 257 08052021 1358 258 chapter 3 transport layer to a process in the server. recall from section 2.7.2, a python client program does this by issuing the command clientsocket.connectservername,serverportwhere servername is the name
of the server and serverport identifies the process on the server. tcp in the client then proceeds to establish a tcp connec tion with tcp in the server. at the end of this section we discuss in some detail the connectionestablishment procedure. for now it suffices to know that the client first sends a special tcp segment; the server responds with a second special tcp segment; and finally the client responds again with a third special segment. the first two segments carry no payload, that is, no applicationlayer data; the third of these segments may carry a payload. because three segments are sent between the two hosts, this connectionestablishment procedure is often referred to as a threeway handshake.vinton cerf, robert kahn, and tcpip in the early 1970s, packetswitched networks began to proliferate, with the arpanetthe precursor of the internetbeing just one of many networks. each of these networks had its own protocol. two researchers, vinton cerf and robert kahn, recognized the importance of interconnecting these networks and invented a cross network protocol called tcpip, which stands for transmission control protocol internet protocol. although cerf and kahn began by seeing the protocol as a single entity, it was later split into its two parts, tcp and ip, which operated separately. cerf and kahn published a paper on tcpip in may 1974 in ieee transactions on communications technology cerf 1974. the tcpip protocol, which is the bread and butter of todays internet, was devised before pcs, workstations, smartphones, and tablets, before the prolifera tion of ethernet, cable, and dsl, wifi, and other access network technologies, and before the web, social media, and streaming video. cerf and kahn saw the need for a networking protocol that, on the one hand, provides broad support for yetto bedefined applications and, on the other hand, allows arbitrary hosts and linklayer protocols to interoperate. in 2004, cerf and kahn received the acms turing award, considered the nobel prize of computing for pioneering work on internetworking, including the design and implementation of the internets basic communications protocols, tcpip, and for inspired leadership in networking.case history m03_kuro5469_08_ge_c03.indd 258 08052021 1358 3.5 connectionoriented transport tcp 259 once a tcp connection is established, the two application processes can send data to each other. lets consider the sending of data from the client process to the server process. the client process passes a stream of data through the socket the door of the process, as described in section 2.7. once the data passes through the door, the data is in the hands of tcp running in the client. as shown in figure 3.28, tcp directs this data to the connections send buffer, which is one of the buffers that is set aside during the initial threeway handshake. from time to time, tcp will grab chunks of data from the send buffer and pass the data to the network layer. interestingly, the tcp specification rfc 793 is very laid back about specifying when tcp should actually send buffered data, stating that tcp should
send that data in segments at its own convenience. the maximum amount of data that can be grabbed and placed in a segment is limited by the maximum segment size mss. the mss is typically set by first determining the length of the largest linklayer frame that can be sent by the local sending host the socalled maximum transmission unit, mtu, and then setting the mss to ensure that a tcp segment when encapsulated in an ip datagram plus the tcpip header length typically 40 bytes will fit into a single linklayer frame. both ethernet and ppp linklayer protocols have an mtu of 1,500 bytes. thus, a typical value of mss is 1460 bytes. approaches have also been proposed for discovering the path mtuthe largest linklayer frame that can be sent on all links from source to destination rfc 1191and setting the mss based on the path mtu value. note that the mss is the maximum amount of applicationlayer data in the segment, not the maximum size of the tcp segment including headers. this terminology is confusing, but we have to live with it, as it is well entrenched. tcp pairs each chunk of client data with a tcp header, thereby forming tcp segments. the segments are passed down to the network layer, where they are separately encapsulated within networklayer ip datagrams. the ip datagrams are then sent into the network. when tcp receives a segment at the other end, the segments data is placed in the tcp connections receive buffer, as shown in figure 3.28. the application reads the stream of data from this buffer. each side of the connection has process writes dataprocess reads data tcp send buffersocket tcp receive buffersocket segment segment figure 3.28 tcp send and receive buffers m03_kuro5469_08_ge_c03.indd 259 08052021 1358 260 chapter 3 transport layer its own send buffer and its own receive buffer. you can see the online flowcontrol interactive animation at httpwww.awl.comkuroseross, which provides an animation of the send and receive buffers. we see from this discussion that a tcp connection consists of buffers, variables, and a socket connection to a process in one host, and another set of buffers, variables, and a socket connection to a process in another host. as mentioned earlier, no buffers or variables are allocated to the connection in the network elements routers, switches, and repeaters between the hosts. 3.5.2 tcp segment structure having taken a brief look at the tcp connection, lets examine the tcp segment structure. the tcp segment consists of header fields and a data field. the data field contains a chunk of application data. as mentioned above, the mss limits the maximum size of a segments data field. when tcp sends a large file, such as an image as part of a web page, it typically breaks the file into chunks of size mss except for the last chunk, which will often be less than the mss. interactive applications, however, often transmit data chunks that are smaller than the mss; for example, with
remote login applications such as telnet and ssh, the data field in the tcp segment is often only one byte. because the tcp header is typically 20 bytes 12 bytes more than the udp header, segments sent by telnet and ssh may be only 21 bytes in length. figure 3.29 shows the structure of the tcp segment. as with udp, the header includes source and destination port numbers, which are used for multiplexing demultiplexing data fromto upperlayer applications. also, as with udp, the header includes a checksum field. a tcp segment header also contains the following fields the 32bit sequence number field and the 32bit acknowledgment number field are used by the tcp sender and receiver in implementing a reliable data transfer service, as discussed below. the 16bit receive window field is used for flow control. we will see shortly that it is used to indicate the number of bytes that a receiver is willing to accept. the 4bit header length field specifies the length of the tcp header in 32bit words. the tcp header can be of variable length due to the tcp options field. typically, the options field is empty, so that the length of the typical tcp header is 20 bytes. the optional and variablelength options field is used when a sender and receiver negotiate the maximum segment size mss or as a window scaling factor for use in highspeed networks. a timestamping option is also defined. see rfc 854 and rfc 1323 for additional details. the flag field contains 6 bits. the ack bit is used to indicate that the value carried in the acknowledgment field is valid; that is, the segment contains an acknowledgment for a segment that has been successfully received. the rst, m03_kuro5469_08_ge_c03.indd 260 08052021 1358 3.5 connectionoriented transport tcp 261 syn, and fin bits are used for connection setup and teardown, as we will discuss at the end of this section. the cwr and ece bits are used in explicit congestion notification, as discussed in section 3.7.2. setting the psh bit indicates that the receiver should pass the data to the upper layer immediately. finally, the urg bit is used to indicate that there is data in this segment that the sendingside upperlayer entity has marked as urgent. the location of the last byte of this urgent data is indicated by the 16bit urgent data pointer field. tcp must inform the receivingside upperlayer entity when urgent data exists and pass it a pointer to the end of the urgent data. in practice, the psh, urg, and the urgent data pointer are not used. however, we mention these fields for completeness. our experience as teachers is that our students sometimes find discussion of packet formats rather dry and perhaps a bit boring. for a fun and fanciful look at tcp header fields, particularly if you love legos as we do, see pomeranz 2010. sequence numbers and acknowledgment numbers two of the most important fields in the tcp segment header are the sequence number
field and the acknowledgment number field. these fields are a critical part of tcps reliable data transfer service. but before discussing how these fields are used to provide reliable data transfer, let us first explain what exactly tcp puts in these fields.source port internet checksumheader lengthunused urgececwr ack psh rst syn fin32 bits dest port receive window urgent data pointersequence number acknowledgment number options data figure 3.29 tcp segment structure m03_kuro5469_08_ge_c03.indd 261 08052021 1358 262 chapter 3 transport layer tcp views data as an unstructured, but ordered, stream of bytes. tcps use of sequence numbers reflects this view in that sequence numbers are over the stream of transmitted bytes and not over the series of transmitted segments. the sequence number for a segment is therefore the bytestream number of the first byte in the segment. lets look at an example. suppose that a process in host a wants to send a stream of data to a process in host b over a tcp connection. the tcp in host a will implicitly number each byte in the data stream. suppose that the data stream consists of a file consisting of 500,000 bytes, that the mss is 1,000 bytes, and that the first byte of the data stream is numbered 0. as shown in figure 3.30, tcp constructs 500 segments out of the data stream. the first segment gets assigned sequence number 0, the second segment gets assigned sequence number 1,000, the third segment gets assigned sequence number 2,000, and so on. each sequence number is inserted in the sequence number field in the header of the appropriate tcp segment. now lets consider acknowledgment numbers. these are a little trickier than sequence numbers. recall that tcp is fullduplex, so that host a may be receiving data from host b while it sends data to host b as part of the same tcp connection. each of the segments that arrive from host b has a sequence number for the data flowing from b to a. the acknowledgment number that host a puts in its segment is the sequence number of the next byte host a is expecting from host b. it is good to look at a few examples to understand what is going on here. suppose that host a has received all bytes numbered 0 through 535 from b and suppose that it is about to send a segment to host b. host a is waiting for byte 536 and all the subsequent bytes in host bs data stream. so host a puts 536 in the acknowledgment number field of the segment it sends to b. as another example, suppose that host a has received one segment from host b containing bytes 0 through 535 and another segment containing bytes 900 through 1,000. for some reason host a has not yet received bytes 536 through 899. in this example, host a is still waiting for byte 536 and beyond in order to recreate bs data stream. thus, as next segment to b
will contain 536 in the acknowledgment number field. because tcp only acknowledges bytes up to the first missing byte in the stream, tcp is said to provide cumulative acknowledgments.01 1,000 1,999 499,999file data for 1st segment data for 2nd segment figure 3.30 dividing file data into tcp segments m03_kuro5469_08_ge_c03.indd 262 08052021 1358 3.5 connectionoriented transport tcp 263 this last example also brings up an important but subtle issue. host a received the third segment bytes 900 through 1,000 before receiving the second segment bytes 536 through 899. thus, the third segment arrived out of order. the subtle issue is what does a host do when it receives outoforder segments in a tcp connection? interestingly, the tcp rfcs do not impose any rules here and leave the decision up to the programmers implementing a tcp implementation. there are basically two choices either 1 the receiver immediately discards outoforder segments which, as we discussed earlier, can simplify receiver design, or 2 the receiver keeps the outoforder bytes and waits for the missing bytes to fill in the gaps. clearly, the latter choice is more efficient in terms of network bandwidth, and is the approach taken in practice. in figure 3.30, we assumed that the initial sequence number was zero. in truth, both sides of a tcp connection randomly choose an initial sequence number. this is done to minimize the possibility that a segment that is still present in the network from an earlier, alreadyterminated connection between two hosts is mistaken for a valid segment in a later connection between these same two hosts which also happen to be using the same port numbers as the old connection sunshine 1978. telnet a case study for sequence and acknowledgment numbers telnet, defined in rfc 854, is a popular applicationlayer protocol used for remote login. it runs over tcp and is designed to work between any pair of hosts. unlike the bulk data transfer applications discussed in chapter 2, telnet is an interactive application. we discuss a telnet example here, as it nicely illustrates tcp sequence and acknowledgment numbers. we note that many users now prefer to use the ssh protocol rather than telnet, since data sent in a telnet connection including passwords! are not encrypted, making telnet vulnerable to eavesdropping attacks as discussed in section 8.7. suppose host a initiates a telnet session with host b. because host a initiates the session, it is labeled the client, and host b is labeled the server. each character typed by the user at the client will be sent to the remote host; the remote host will send back a copy of each character, which will be displayed on the telnet users screen. this echo back is used to ensure that characters seen by the telnet user have already been received and processed at the remote site. each character thus traverses the network twice between the time the user hits the key and the time the character is displayed on the users monitor. now suppose the user
types a single letter, c, and then grabs a coffee. lets examine the tcp segments that are sent between the client and server. as shown in figure 3.31, we suppose the starting sequence numbers are 42 and 79 for the client and server, respectively. recall that the sequence number of a segment is the sequence number of the first byte in the data field. thus, the first segment sent from the client will have sequence number 42; the first segment sent from the server will have sequence number 79. recall that the acknowledgment number is the sequence m03_kuro5469_08_ge_c03.indd 263 08052021 1358 264 chapter 3 transport layer number of the next byte of data that the host is waiting for. after the tcp connec tion is established but before any data is sent, the client is waiting for byte 79 and the server is waiting for byte 42. as shown in figure 3.31, three segments are sent. the first segment is sent from the client to the server, containing the 1byte ascii representation of the letter c in its data field. this first segment also has 42 in its sequence number field, as we just described. also, because the client has not yet received any data from the server, this first segment will have 79 in its acknowledgment number field. the second segment is sent from the server to the client. it serves a dual purpose. first it provides an acknowledgment of the data the server has received. by putting 43 in the acknowledgment field, the server is telling the client that it has successfully received everything up through byte 42 and is now waiting for bytes 43 onward. the second purpose of this segment is to echo back the letter c. thus, the second segment has the ascii representation of c in its data field. this second segment has the sequence number 79, the initial sequence number of the servertoclient data flow of this tcp connection, as this is the very first byte of data that the server is sending. note that the acknowledgment for clienttoserver data is carried in a segment time timehost a host b user types cseq42, ack79, datac seq79, ack43, datac seq43, ack80host acks receipt of c,echoes back c host acks receipt of echoed c figure 3.31 sequence and acknowledgment numbers for a simple telnet application over tcp m03_kuro5469_08_ge_c03.indd 264 08052021 1358 3.5 connectionoriented transport tcp 265 carrying servertoclient data; this acknowledgment is said to be piggybacked on the servertoclient data segment. the third segment is sent from the client to the server. its sole purpose is to acknowledge the data it has received from the server. recall that the second seg ment contained datathe letter cfrom the server to the client. this segment has an empty data field that is, the acknowledgment is not being piggybacked with any clienttoserver data. the segment has 80 in the acknowledgment number field because the client has received the stream of bytes up through byte sequence number 79 and
it is now waiting for bytes 80 onward. you might think it odd that this segment also has a sequence number since the segment contains no data. but because tcp has a sequence number field, the segment needs to have some sequence number. 3.5.3 roundtrip time estimation and timeout tcp, like our rdt protocol in section 3.4, uses a timeoutretransmit mechanism to recover from lost segments. although this is conceptually simple, many subtle issues arise when we implement a timeoutretransmit mechanism in an actual protocol such as tcp. perhaps the most obvious question is the length of the timeout intervals. clearly, the timeout should be larger than the connections roundtrip time rtt, that is, the time from when a segment is sent until it is acknowledged. otherwise, unnecessary retransmissions would be sent. but how much larger? how should the rtt be estimated in the first place? should a timer be associated with each and every unacknowledged segment? so many questions! our discussion in this section is based on the tcp work in jacobson 1988 and the current ietf recommendations for managing tcp timers rfc 6298. estimating the roundtrip time lets begin our study of tcp timer management by considering how tcp estimates the roundtrip time between sender and receiver. this is accomplished as follows. the sample rtt, denoted samplertt, for a segment is the amount of time between when the segment is sent that is, passed to ip and when an acknowledgment for the segment is received. instead of measuring a samplertt for every transmitted segment, most tcp implementations take only one samplertt measurement at a time. that is, at any point in time, the samplertt is being estimated for only one of the transmitted but currently unacknowledged segments, leading to a new value of samplertt approximately once every rtt. also, tcp never computes a samplertt for a segment that has been retransmitted; it only measures samplertt for segments that have been transmitted once karn 1987. a problem at the end of the chapter asks you to consider why. obviously, the samplertt values will fluctuate from segment to segment due to congestion in the routers and to the varying load on the end systems. because of this fluctuation, any given samplertt value may be atypical. in order to estimate m03_kuro5469_08_ge_c03.indd 265 08052021 1358 266 chapter 3 transport layer a typical rtt, it is therefore natural to take some sort of average of the samplertt values. tcp maintains an average, called estimatedrtt, of the samplertt values. upon obtaining a new samplertt, tcp updates estimatedrtt accord ing to the following formula estimatedrtt 1 Œ± estimatedrtt Œ± samplertt the formula above is written in the form of a programminglanguage state mentthe new value of estimatedrtt is a weighted combination of the previous value of estimatedrtt and the new value for samplertt. the recommended value of Œ± is Œ± 0.125 that is, 18 rfc 6298, in which case the formula above becomes estimatedrtt 0.875 estimatedrtt 0.125 samplertt note that estimatedrtt is a weighted average
of the samplertt values. as discussed in a homework problem at the end of this chapter, this weighted average puts more weight on recent samples than on old samples. this is natural, as the more recent samples better reflect the current congestion in the network. in statistics, such an average is called an exponential weighted moving average ewma. the word exponential appears in ewma because the weight of a given samplertt decays exponentially fast as the updates proceed. in the homework problems, you will be asked to derive the exponential term in estimatedrtt. figure 3.32 shows the samplertt values and estimatedrtt for a value of Œ± 18 for a tcp connection between gaia.cs.umass.edu in amherst, massachusetts to fantasia.eurecom.fr in the south of france. clearly, the variations in the samplertt are smoothed out in the computation of the estimatedrtt. in addition to having an estimate of the rtt, it is also valuable to have a meas ure of the variability of the rtt. rfc 6298 defines the rtt variation, devrtt, as an estimate of how much samplertt typically deviates from estimatedrtt devrtt 1 Œ≤ devrtt Œ≤ samplertt estimatedrtt note that devrtt is an ewma of the difference between samplertt and estimatedrtt. if the samplertt values have little fluctuation, then devrtt will be small; on the other hand, if there is a lot of fluctuation, devrtt will be large. the recommended value of Œ≤ is 0.25. setting and managing the retransmission timeout interval given values of estimatedrtt and devrtt, what value should be used for tcps timeout interval? clearly, the interval should be greater than or equal to m03_kuro5469_08_ge_c03.indd 266 08052021 1358 3.5 connectionoriented transport tcp 267 estimatedrtt, or unnecessary retransmissions would be sent. but the timeout interval should not be too much larger than estimatedrtt; otherwise, when a segment is lost, tcp would not quickly retransmit the segment, leading to large data transfer delays. it is therefore desirable to set the timeout equal to the estimatedrtt plus some margin. the margin should be large when there is a lot of fluctuation in the samplertt values; it should be small when there is little fluctuation. the value of devrtt should thus come into play here. all of these considerations are taken into account in tcps method for determining the retransmission timeout interval timeoutinterval estimatedrtt 4 devrtt an initial timeoutinterval value of 1 second is recommended rfc 6298. also, when a timeout occurs, the value of timeoutinterval is doubled to avoid a premature timeout occurring for a subsequent segment that will soon be acknowledged. however, as soon as a segment is received and estimatedrtt is updated, the timeoutinterval is again computed using the formula above.tcp provides reliable data transfer by using positive acknowledgments and timers in much the same way that we studied in section 3.4. tcp acknowledges data that has been received correctly, and it then retransmits segments when segments or their corresponding acknowledgments are thought to be lost or corrupted. certain versions of tcp also have an implicit nak mechanismwith tcps
fast retransmit mechanism, the receipt of three duplicate acks for a given segment serves as an implicit nak for the following segment, triggering retransmission of that segment before timeout. tcp uses sequences of numbers to allow the receiver to identify lost or duplicate segments. just as in the case of our reliable data transfer protocol, rdt3.0, tcp cannot itself tell for certain if a segment, or its ack, is lost, corrupted, or overly delayed. at the sender, tcps response will be the same retrans mit the segment in question. tcp also uses pipelining, allowing the sender to have multiple transmitted but yetto beacknowledged segments outstanding at any given time. we saw earlier that pipelining can greatly improve a sessions throughput when the ratio of the segment size to round trip delay is small. the specific number of outstanding, unacknowledged segments that a sender can have is determined by tcps flowcontrol and congestioncontrol mechanisms. tcp flow control is discussed at the end of this section; tcp congestion control is discussed in section 3.7. for the time being, we must simply be aware that the tcp sender uses pipelining.principles in practice m03_kuro5469_08_ge_c03.indd 267 08052021 1358 268 chapter 3 transport layer 3.5.4 reliable data transfer recall that the internets networklayer service ip service is unreliable. ip does not guarantee datagram delivery, does not guarantee inorder delivery of datagrams, and does not guarantee the integrity of the data in the datagrams. with ip service, datagrams can overflow router buffers and never reach their destination, datagrams can arrive out of order, and bits in the datagram can get corrupted flipped from 0 to 1 and vice versa. because transportlayer segments are carried across the network by ip datagrams, transportlayer segments can suffer from these problems as well. tcp creates a reliable data transfer service on top of ips unreliable best effort service. tcps reliable data transfer service ensures that the data stream that a process reads out of its tcp receive buffer is uncorrupted, without gaps, without duplication, and in sequence; that is, the byte stream is exactly the same byte stream that was sent by the end system on the other side of the connection. how tcp provides a reliable data transfer involves many of the principles that we studied in section 3.4. in our earlier development of reliable data transfer techniques, it was conceptu ally easiest to assume that an individual timer is associated with each transmitted but not yet acknowledged segment. while this is great in theory, timer management can require considerable overhead. thus, the recommended tcp timer management rtt milliseconds 150200250300350 100 18 15 22 29 36 43 50 time secondssample rt t 57 64 71 78 85 92 99 106estimated rt t figure 3.32 rtt samples and rtt estimates m03_kuro5469_08_ge_c03.indd 268 08052021 1358 3.5 connectionoriented transport tcp 269 procedures rfc 6298 use only a single retransmission timer, even if there are mul tiple transmitted but not yet acknowledged segments. the tcp protocol described in this section follows this singletimer recommendation.
we will discuss how tcp provides reliable data transfer in two incremental steps. we first present a highly simplified description of a tcp sender that uses only timeouts to recover from lost segments; we then present a more complete description that uses duplicate acknowledgments in addition to timeouts. in the ensuing discussion, we suppose that data is being sent in only one direction, from host a to host b, and that host a is sending a large file. figure 3.33 presents a highly simplified description of a tcp sender. we see that there are three major events related to data transmission and retransmission in the tcp sender data received from application above; timer timeout; and ack assume sender is not constrained by tcp Ô¨Çow or congestion control, that data from above is less than mss in size, and that data transfer is in one direction only. nextseqnuminitialseqnumber sendbaseinitialseqnumber loop forever switchevent event data received from application above create tcp segment with sequence number nextseqnum if timer currently not running start timer pass segment to ip nextseqnumnextseqnumlengthdata break; event timer timeout retransmit notyetacknowledged segment with smallest sequence number start timer break; event ack received, with ack Ô¨Åeld value of y if y sendbase sendbasey if there are currently any notyetacknowledged segments start timer break; end of loop forever figure 3.33 simplified tcp sender m03_kuro5469_08_ge_c03.indd 269 08052021 1358 270 chapter 3 transport layer receipt. upon the occurrence of the first major event, tcp receives data from the application, encapsulates the data in a segment, and passes the segment to ip. note that each segment includes a sequence number that is the bytestream number of the first data byte in the segment, as described in section 3.5.2. also note that if the timer is already not running for some other segment, tcp starts the timer when the segment is passed to ip. it is helpful to think of the timer as being associated with the oldest unacknowledged segment. the expiration interval for this timer is the timeoutinterval, which is calculated from estimatedrtt and devrtt, as described in section 3.5.3. the second major event is the timeout. tcp responds to the timeout event by retransmitting the segment that caused the timeout. tcp then restarts the timer. the third major event that must be handled by the tcp sender is the arrival of an acknowledgment segment ack from the receiver more specifically, a segment containing a valid ack field value. on the occurrence of this event, tcp compares the ack value y with its variable sendbase. the tcp state variable sendbase is the sequence number of the oldest unacknowledged byte. thus sendbase1 is the sequence number of the last byte that is known to have been received correctly and in order at the receiver. as indicated earlier, tcp uses cumulative acknowledgments, so that y acknowledges the receipt of all bytes before byte number y. if y sendbase, then the ack is acknowledging one or more previously unacknowledged segments. thus the sender updates its sendbase variable;
it also restarts the timer if there currently are any notyetacknowledged segments. a few interesting scenarios we have just described a highly simplified version of how tcp provides reliable data transfer. but even this highly simplified version has many subtleties. to get a good feeling for how this protocol works, lets now walk through a few simple scenarios. figure 3.34 depicts the first scenario, in which host a sends one segment to host b. suppose that this segment has sequence number 92 and contains 8 bytes of data. after sending this segment, host a waits for a segment from b with acknowledgment number 100. although the segment from a is received at b, the acknowledgment from b to a gets lost. in this case, the timeout event occurs, and host a retransmits the same segment. of course, when host b receives the retransmission, it observes from the sequence number that the segment contains data that has already been received. thus, tcp in host b will discard the bytes in the retransmitted segment. in a second scenario, shown in figure 3.35, host a sends two segments back to back. the first segment has sequence number 92 and 8 bytes of data, and the second segment has sequence number 100 and 20 bytes of data. suppose that both segments arrive intact at b, and b sends two separate acknowledgments for each of these segments. the first of these acknowledgments has acknowledgment number 100; the second has acknowledgment number 120. suppose now that neither of the acknowledgments arrives at host a before the timeout. when the timeout event occurs, host m03_kuro5469_08_ge_c03.indd 270 08052021 1358 3.5 connectionoriented transport tcp 271 a resends the first segment with sequence number 92 and restarts the timer. as long as the ack for the second segment arrives before the new timeout, the second segment will not be retransmitted. in a third and final scenario, suppose host a sends the two segments, exactly as in the second example. the acknowledgment of the first segment is lost in the network, but just before the timeout event, host a receives an acknowledgment with acknowledgment number 120. host a therefore knows that host b has received everything up through byte 119; so host a does not resend either of the two segments. this scenario is illustrated in figure 3.36. doubling the timeout interval we now discuss a few modifications that most tcp implementations employ. the first concerns the length of the timeout interval after a timer expiration. in this modification, whenever the timeout event occurs, tcp retransmits the notyetacknowledged segment with the smallest sequence number, as described above. but each time tcp retransmits, it sets the next timeout interval to twice the previous value, time timehost a host b timeoutseq92, 8 bytes data seq92, 8 bytes dataack100 ack100x loss figure 3.34 retransmission due to a lost acknowledgment m03_kuro5469_08_ge_c03.indd 271 08052021 1358 272 chapter 3 transport layer rather than deriving it from the last estimatedrtt and devrtt as described in section 3.5.3. for
example, suppose timeoutinterval associated with the oldest not yet acknowledged segment is .75 sec when the timer first expires. tcp will then retransmit this segment and set the new expiration time to 1.5 sec. if the timer expires again 1.5 sec later, tcp will again retransmit this segment, now setting the expiration time to 3.0 sec. thus, the intervals grow exponentially after each retransmission. however, whenever the timer is started after either of the two other events that is, data received from application above, and ack received, the timeoutinterval is derived from the most recent values of estimatedrtt and devrtt. this modification provides a limited form of congestion control. more com prehensive forms of tcp congestion control will be studied in section 3.7. the timer expiration is most likely caused by congestion in the network, that is, too many packets arriving at one or more router queues in the path between the source and destination, causing packets to be dropped andor long queuing delays. in times of congestion, if the sources continue to retransmit packets persistently, the congestion time timehost a host b seq92 timeout intervalseq92, 8 bytes data seq100, 20 bytes data ack100 ack120ack120 seq92 timeout intervalseq92, 8 bytes data figure 3.35 segment 100 not retransmitted m03_kuro5469_08_ge_c03.indd 272 08052021 1358 3.5 connectionoriented transport tcp 273 may get worse. instead, tcp acts more politely, with each sender retransmitting after longer and longer intervals. we will see that a similar idea is used by ethernet when we study csmacd in chapter 6. fast retransmit one of the problems with timeouttriggered retransmissions is that the timeout period can be relatively long. when a segment is lost, this long timeout period forces the sender to delay resending the lost packet, thereby increasing the endtoend delay. fortunately, the sender can often detect packet loss well before the timeout event occurs by noting socalled duplicate acks. a duplicate ack is an ack that reacknowledges a segment for which the sender has already received an earlier acknowledgment. to understand the senders response to a duplicate ack, we must look at why the receiver sends a duplicate ack in the first place. table 3.2 summarizes the tcp receivers ack generation policy rfc 5681. when a tcp receiver receives time timehost a host b seq92 timeout intervalseq92, 8 bytes data seq100, 20 bytes dataack100 ack120x loss figure 3.36 a cumulative acknowledgment avoids retransmission of the first segment m03_kuro5469_08_ge_c03.indd 273 08052021 1358 274 chapter 3 transport layer a segment with a sequence number that is larger than the next, expected, inorder sequence number, it detects a gap in the data streamthat is, a missing segment. this gap could be the result of lost or reordered segments within the network. since tcp does not use negative acknowledgments, the receiver cannot send an explicit negative acknowledgment back to the sender. instead, it simply reacknowledges that is, generates a duplicate ack for the last inorder byte of data it has received. note that table 3.2 allows for the case that the receiver
does not discard outoforder segments. because a sender often sends a large number of segments back to back, if one segment is lost, there will likely be many backtoback duplicate acks. if the tcp sender receives three duplicate acks for the same data, it takes this as an indication that the segment following the segment that has been acked three times has been lost. in the homework problems, we consider the question of why the sender waits for three duplicate acks, rather than just a single duplicate ack. in the case that three duplicate acks are received, the tcp sender performs a fast retransmit rfc 5681, retransmitting the missing segment before that segments timer expires. this is shown in figure 3.37, where the second segment is lost, then retransmitted before its timer expires. for tcp with fast retransmit, the following code snippet replaces the ack received event in figure 3.33 event ack received, with ack field value of y if y sendbase sendbasey if there are currently any not yet acknowledged segments start timer table 3.2 tcp ack generation recommendation rfc 5681event tcp receiver action arrival of inorder segment with expected sequence number. all data up to expected sequence number already acknowledged.delayed ack. wait up to 500 msec for arrival of another inorder segment. if next inorder segment does not arrive in this interval, send an ack. arrival of inorder segment with expected sequence number. one other inorder segment waiting for ack transmission.immediately send single cumulative ack, acking both inorder segments. arrival of outoforder segment with higherthanexpected sequence number. gap detected.immediately send duplicate ack, indicating sequence number of next expected byte which is the lower end of the gap. arrival of segment that partially or completely fills in gap in received data.immediately send ack, provided that segment starts at the lower end of gap. m03_kuro5469_08_ge_c03.indd 274 08052021 1358 3.5 connectionoriented transport tcp 275 host a host b seq100, 20 bytes of datatimeout time timexseq100, 20 bytes of dataseq92, 8 bytes of data seq120, 15 bytes of data seq135, 6 bytes of data seq141, 16 bytes of dataack100 ack100 ack100 ack100 figure 3.37 fast retransmit retransmitting the missing segment before the segments timer expires else a duplicate ack for already acked segment increment number of duplicate acks received for y if number of duplicate acks received for y3 tcp fast retransmit resend segment with sequence number y break; we noted earlier that many subtle issues arise when a timeoutretransmit mech anism is implemented in an actual protocol such as tcp. the procedures above, which have evolved as a result of more than 30 years of experience with tcp timers, should convince you that this is indeed the case! m03_kuro5469_08_ge_c03.indd 275 08052021 1358 276 chapter 3 transport layer gobackn or selective repeat? let us close our study of tcps errorrecovery mechanism by considering the fol lowing question is tcp a gbn or an sr protocol? recall that tcp acknowledgments are cumulative and correctly received but outoforder segments are not individually acked by
the receiver. consequently, as shown in figure 3.33 see also figure 3.19, the tcp sender need only maintain the smallest sequence number of a transmitted but unacknowledged byte sendbase and the sequence number of the next byte to be sent nextseqnum. in this sense, tcp looks a lot like a gbnstyle protocol. but there are some striking differences between tcp and gobackn. many tcp implementations will buffer correctly received but outoforder segments stevens 1994. consider also what happens when the sender sends a sequence of segments 1, 2, . . . , n , and all of the segments arrive in order without error at the receiver. further suppose that the acknowledgment for packet n6n gets lost, but the remaining n1 acknowledgments arrive at the sender before their respective timeouts. in this example, gbn would retransmit not only packet n, but also all of the subsequent packets n1, n2, . . . , n . tcp, on the other hand, would retransmit at most one segment, namely, segment n . moreover, tcp would not even retransmit segment n if the acknowledgment for segment n1 arrived before the timeout for segment n . a proposed modification to tcp, the socalled selective acknowledgment rfc 2018, allows a tcp receiver to acknowledge outoforder segments selectively rather than just cumulatively acknowledging the last correctly received, inorder segment. when combined with selective retransmissionskipping the retransmission of segments that have already been selectively acknowledged by the receivertcp looks a lot like our generic sr protocol. thus, tcps errorrecovery mechanism is probably best categorized as a hybrid of gbn and sr protocols. 3.5.5 flow control recall that the hosts on each side of a tcp connection set aside a receive buffer for the connection. when the tcp connection receives bytes that are correct and in sequence, it places the data in the receive buffer. the associated application process will read data from this buffer, but not necessarily at the instant the data arrives. indeed, the receiving application may be busy with some other task and may not even attempt to read the data until long after it has arrived. if the application is relatively slow at reading the data, the sender can very easily overflow the connections receive buffer by sending too much data too quickly. tcp provides a flowcontrol service to its applications to eliminate the pos sibility of the sender overflowing the receivers buffer. flow control is thus a speedmatching servicematching the rate at which the sender is sending against the rate at which the receiving application is reading. as noted earlier, a tcp sender can also be throttled due to congestion within the ip network; this form of sender control is m03_kuro5469_08_ge_c03.indd 276 08052021 1358 3.5 connectionoriented transport tcp 277 referred to as congestion control, a topic we will explore in detail in sections 3.6 and 3.7. even though the actions taken by flow and congestion control are similar the throttling of the sender, they are obviously taken for very different reasons. unfortunately, many
authors use the terms interchangeably, and the savvy reader would be wise to distinguish between them. lets now discuss how tcp provides its flowcontrol service. in order to see the forest for the trees, we suppose throughout this section that the tcp implementation is such that the tcp receiver discards outoforder segments. tcp provides flow control by having the sender maintain a variable called the receive window. informally, the receive window is used to give the sender an idea of how much free buffer space is available at the receiver. because tcp is fullduplex, the sender at each side of the connection maintains a distinct receive window. lets investigate the receive window in the context of a file transfer. suppose that host a is sending a large file to host b over a tcp connection. host b allocates a receive buffer to this connection; denote its size by rcvbuffer. from time to time, the application process in host b reads from the buffer. define the following variables lastbyteread the number of the last byte in the data stream read from the buffer by the application process in b lastbytercvd the number of the last byte in the data stream that has arrived from the network and has been placed in the receive buffer at b because tcp is not permitted to overflow the allocated buffer, we must have lastbytercvd lastbyteread rcvbuffer the receive window, denoted rwnd is set to the amount of spare room in the bufferrwnd rcvbuffer lastbytercvd lastbytereadbecause the spare room changes with time, rwnd is dynamic. the variable rwnd is illustrated in figure 3.38. how does the connection use the variable rwnd to provide the flowcontrol service? host b tells host a how much spare room it has in the connection buffer by placing its current value of rwnd in the receive window field of every segment it sends to a. initially, host b sets rwnd rcvbuffer. note that to pull this off, host b must keep track of several connectionspecific variables. host a in turn keeps track of two variables, lastbytesent and last byteacked, which have obvious meanings. note that the difference between these two variables, lastbytesent lastbyteacked, is the amount of unacknowledged data that a has sent into the connection. by keeping the amount of unacknowledged data less than the value of rwnd, host a is assured that it is not m03_kuro5469_08_ge_c03.indd 277 08052021 1358 278 chapter 3 transport layer overflowing the receive buffer at host b. thus, host a makes sure throughout the connections life that lastbytesent lastbyteacked rwnd there is one minor technical problem with this scheme. to see this, suppose host bs receive buffer becomes full so that rwnd 0. after advertising rwnd 0 to host a, also suppose that b has nothing to send to a. now consider what happens. as the application process at b empties the buffer, tcp does not send new segments with new rwnd values to host a; indeed, tcp sends a segment to host a only
if it has data to send or if it has an acknowledgment to send. therefore, host a is never informed that some space has opened up in host bs receive bufferhost a is blocked and can transmit no more data! to solve this problem, the tcp specification requires host a to continue to send segments with one data byte when bs receive window is zero. these segments will be acknowledged by the receiver. eventually the buffer will begin to empty and the acknowledgments will contain a nonzero rwnd value. the online site at for this book provides an interactive animation that illustrates the operation of the tcp receive window. having described tcps flowcontrol service, we briefly mention here that udp does not provide flow control and consequently, segments may be lost at the receiver due to buffer overflow. for example, consider sending a series of udp segments from a process on host a to a process on host b. for a typical udp implementation, udp will append the segments in a finitesized buffer that precedes the corresponding socket that is, the door to the process. the process reads one entire segment at a time from the buffer. if the process does not read the segments fast enough from the buffer, the buffer will overflow and segments will get dropped.application process data from iptcp data in buf ferrwndrcvbuÔ¨Äer spare room figure 3.38 the receive window rwnd and the receive buffer rcvbuffer m03_kuro5469_08_ge_c03.indd 278 08052021 1358 3.5 connectionoriented transport tcp 279 3.5.6 tcp connection management in this subsection, we take a closer look at how a tcp connection is established and torn down. although this topic may not seem particularly thrilling, it is important because tcp connection establishment can significantly add to perceived delays for example, when surfing the web. furthermore, many of the most common network attacksincluding the incredibly popular syn flood attack see sidebar on the syn flood attackexploit vulnerabilities in tcp connection management. lets first take a look at how a tcp connection is established. suppose a process running in one host client wants to initiate a connection with another process in another host server. the client application process first informs the client tcp that it wants to establish a connection to a process in the server. the tcp in the client then proceeds to establish a tcp connection with the tcp in the server in the following manner step 1. the clientside tcp first sends a special tcp segment to the serverside tcp. this special segment contains no applicationlayer data. but one of the flag bits in the segments header see figure 3.29, the syn bit, is set to 1. for this reason, this special segment is referred to as a syn segment. in addition, the client randomly chooses an initial sequence number client_isn and puts this number in the sequence number field of the initial tcp syn segment. this segment is encapsulated within an ip datagram and sent to the server. there has been considerable interest in
properly randomizing the choice of the client_isn in order to avoid certain security attacks cert 200109; rfc 4987. step 2. once the ip datagram containing the tcp syn segment arrives at the server host assuming it does arrive!, the server extracts the tcp syn segment from the datagram, allocates the tcp buffers and variables to the connection, and sends a connectiongranted segment to the client tcp. well see in chapter 8 that the allocation of these buffers and variables before completing the third step of the threeway handshake makes tcp vulnerable to a denialofservice attack known as syn flooding. this connectiongranted segment also contains no applicationlayer data. however, it does contain three important pieces of information in the segment header. first, the syn bit is set to 1. second, the acknowledgment field of the tcp segment header is set to client_isn1. finally, the server chooses its own initial sequence number server_isn and puts this value in the sequence number field of the tcp segment header. this connectiongranted segment is saying, in effect, i received your syn packet to start a connection with your initial sequence number, client_isn. i agree to establish this connection. my own initial sequence number is server_isn. the connectiongranted segment is referred to as a synack segment. step 3. upon receiving the synack segment, the client also allocates buffers and variables to the connection. the client host then sends the server yet another segment; this last segment acknowledges the servers connectiongranted segment the client does so by putting the value server_isn1 in the acknowledgment m03_kuro5469_08_ge_c03.indd 279 08052021 1358 280 chapter 3 transport layer field of the tcp segment header. the syn bit is set to zero, since the connection is established. this third stage of the threeway handshake may carry clienttoserver data in the segment payload. once these three steps have been completed, the client and server hosts can send segments containing data to each other. in each of these future segments, the syn bit will be set to zero. note that in order to establish the connection, three packets are sent between the two hosts, as illustrated in figure 3.39. for this reason, this connectionestablishment procedure is often referred to as a threeway handshake. several aspects of the tcp threeway handshake are explored in the homework problems why are initial sequence numbers needed? why is a threeway handshake, as opposed to a twoway handshake, needed?. its interesting to note that a rock climber and a belayer who is stationed below the rock climber and whose job it is to handle the climbers safety rope use a threewayhandshake communication protocol that is identical to tcps to ensure that both sides are ready before the climber begins ascent. all good things must come to an end, and the same is true with a tcp connec tion. either of the two processes participating in a tcp connection can end the connection. when a connection ends, the resources that is, the buffers and variables time timeclient host connection request connection
grantedserver host syn1, seqclient_isn syn1, seqserver_isn, ackclient_isn1 syn0, seqclient_isn1, ackserver_isn1ack figure 3.39 tcp threeway handshake segment exchange m03_kuro5469_08_ge_c03.indd 280 08052021 1358 3.5 connectionoriented transport tcp 281 in the hosts are deallocated. as an example, suppose the client decides to close the connection, as shown in figure 3.40. the client application process issues a close command. this causes the client tcp to send a special tcp segment to the server process. this special segment has a flag bit in the segments header, the fin bit see figure 3.29, set to 1. when the server receives this segment, it sends the client an acknowledgment segment in return. the server then sends its own shutdown segment, which has the fin bit set to 1. finally, the client acknowledges the servers shutdown segment. at this point, all the resources in the two hosts are now deallocated. during the life of a tcp connection, the tcp protocol running in each host makes transitions through various tcp states. figure 3.41 illustrates a typical sequence of tcp states that are visited by the client tcp. the client tcp begins in the closed state. the application on the client side initiates a new tcp connection by creating a socket object in our python examples from chapter 2. this causes tcp in the client to send a syn segment to tcp in the server. after having sent the syn segment, the client tcp enters the syn_sent state. while in the syn_sent state, the client tcp waits for a segment from the server tcp that includes an acknowledgment for the clients previous segment and has the syn bit time timeclient close closeserver fin ackack fin closedtimed wait figure 3.40 closing a tcp connection m03_kuro5469_08_ge_c03.indd 281 08052021 1358 282 chapter 3 transport layer set to 1. having received such a segment, the client tcp enters the established state. while in the established state, the tcp client can send and receive tcp segments containing payload that is, applicationgenerated data. suppose that the client application decides it wants to close the connection. note that the server could also choose to close the connection. this causes the client tcp to send a tcp segment with the fin bit set to 1 and to enter the fin_wait_1 state. while in the fin_wait_1 state, the client tcp waits for a tcp segment from the server with an acknowledgment. when it receives this segment, the client tcp enters the fin_wait_2 state. while in the fin_wait_2 state, the client waits for another segment from the server with the fin bit set to 1; after receiving this segment, the client tcp acknowledges the servers segment and enters the time_wait state. the time_wait state lets the tcp client resend the final acknowledgment in case the ack is lost. the time spent in the time_wait state is implementationdependent, but typical values are 30 seconds, 1 minute, and 2 minutes. after the wait, the connection formally closes and all resources on the client side including port numbers are released. figure 3.42 illustrates
the series of states typically visited by the serverside tcp, assuming the client begins connection teardown. the transitions are selfexplanatory. in these two statetransition diagrams, we have only shown how a tcp connection is normally established and shut down. we have not described what happens in certain pathological scenarios, for example, when both sides of a connection want to initiate or shut down at the same time. if you are interested in learning about closed syn_sent established fin_wait_1fin_wait_2time_waitsend syn send fin receive ack, send nothingwait 30 seconds receive fin, send ackreceive syn ack, send ackclient application initiates a tcp connection client application initiates close connection figure 3.41 a typical sequence of tcp states visited by a client tcp m03_kuro5469_08_ge_c03.indd 282 08052021 1358 3.5 connectionoriented transport tcp 283 this and other advanced issues concerning tcp, you are encouraged to see stevens comprehensive book stevens 1994. our discussion above has assumed that both the client and server are prepared to communicate, that is, that the server is listening on the port to which the client sends its syn segment. lets consider what happens when a host receives a tcp segment whose port numbers or source ip address do not match with any of the ongoing sockets in the host. for example, suppose a host receives a tcp syn packet with destination port 80, but the host is not accepting connections on port 80 that is, it is not running a web server on port 80. then the host will send a special reset segment to the source. this tcp segment has the rst flag bit see section 3.5.2 set to 1. thus, when a host sends a reset segment, it is telling the source i dont have a socket for that segment. please do not resend the segment. when a host receives a udp packet whose destination port number doesnt match with an ongoing udp socket, the host sends a special icmp datagram, as discussed in chapter 5. now that we have a good understanding of tcp connection management, lets revisit the nmap portscanning tool and examine more closely how it works. to explore a specific tcp port, say port 6789, on a target host, nmap will send a tcp syn segment with destination port 6789 to that host. there are three possible outcomes the source host receives a tcp synack segment from the target host. since this means that an application is running with tcp port 6789 on the target post, nmap returns open.closed listen syn_rcvd establishedclose_waitlast_ack receive fin, send ackreceive ack, send nothing send finreceive syn send syn ac kserver application creates a listen socket receive ack, send nothing figure 3.42 a typical sequence of tcp states visited by a serverside tcp m03_kuro5469_08_ge_c03.indd 283 08052021 1358 284 chapter 3 transport layer the syn flood attack weve seen in our discussion of tcps threeway handshake that a server allocates and initializes connection variables and buffers in response to a received syn. the server then sends a synack in response, and awaits
an ack segment from the cli ent. if the client does not send an ack to complete the third step of this 3way hand shake, eventually often after a minute or more the server will terminate the halfopen connection and reclaim the allocated resources. this tcp connection management protocol sets the stage for a classic denial of service dos attack known as the syn flood attack. in this attack, the attackers send a large number of tcp syn segments, without completing the third handshake step. with this deluge of syn segments, the servers connection resources become exhausted as they are allocated but never used! for halfopen connections; legitimate clients are then denied service. such syn flooding attacks were among the first documented dos attacks cert syn 1996. fortunately, an effective defense known as syn cookies rfc 4987 are now deployed in most major operating systems. syn cookies work as follows when the server receives a syn segment, it does not know if the segment is coming from a legitimate user or is part of a syn flood attack. so, instead of creating a halfopen tcp connection for this syn, the server creates an initial tcp sequence number that is a complicated function hash function of source and destination ip addresses and port numbers of the syn segment, as well as a secret number only known to the server. this carefully crafted initial sequence number is the socalled cookie. the server then sends the client a synack packet with this special initial sequence number. importantly, the server does not remember the cookie or any other state information corresponding to the syn. a legitimate client will return an ack segment. when the server receives this ack, it must verify that the ack corresponds to some syn sent earlier. but how is this done if the server maintains no memory about syn segments? as you may have guessed, it is done with the cookie. recall that for a legitimate ack, the value in the acknowledgment field is equal to the initial sequence number in the synack the cookie value in this case plus one see figure 3.39. the server can then run the same hash function using the source and destination ip address and port numbers in the synack which are the same as in the original syn and the secret number. if the result of the function plus one is the same as the acknowledgment cookie value in the clients synack, the server concludes that the ack corresponds to an earlier syn segment and is hence valid. the server then creates a fully open connection along with a socket. on the other hand, if the client does not return an ack segment, then the original syn has done no harm at the server, since the server hasnt yet allocated any resources in response to the original bogus syn.focus on security m03_kuro5469_08_ge_c03.indd 284 08052021 1358 3.6 principles of c ongestion c ontrol 285 the source host receives a tcp rst segment from the
target host. this means that the syn segment reached the target host, but the target host is not running an application with tcp port 6789. but the attacker at least knows that the segments destined to the host at port 6789 are not blocked by any firewall on the path between source and target hosts. firewalls are discussed in chapter 8. the source receives nothing. this likely means that the syn segment was blocked by an intervening firewall and never reached the target host. nmap is a powerful tool that can case the joint not only for open tcp ports, but also for open udp ports, for firewalls and their configurations, and even for the versions of applications and operating systems. most of this is done by manipulating tcp connectionmanagement segments. you can download nmap from www.nmap.org. this completes our introduction to error control and flow control in tcp. in section 3.7, well return to tcp and look at tcp congestion control in some depth. before doing so, however, we first step back and examine congestioncontrol issues in a broader context. 3.6 principles of congestion control in the previous sections, we examined both the general principles and specific tcp mechanisms used to provide for a reliable data transfer service in the face of packet loss. we mentioned earlier that, in practice, such loss typically results from the overflowing of router buffers as the network becomes congested. packet retransmission thus treats a symptom of network congestion the loss of a specific transportlayer segment but does not treat the cause of network congestiontoo many sources attempting to send data at too high a rate. to treat the cause of network congestion, mechanisms are needed to throttle senders in the face of network congestion. in this section, we consider the problem of congestion control in a general con text, seeking to understand why congestion is a bad thing, how network congestion is manifested in the performance received by upperlayer applications, and various approaches that can be taken to avoid, or react to, network congestion. this more general study of congestion control is appropriate since, as with reliable data transfer, it is high on our topten list of fundamentally important problems in networking. the following section contains a detailed study of tcps congestioncontrol algorithm. 3.6.1 the causes and the costs of congestion lets begin our general study of congestion control by examining three increasingly complex scenarios in which congestion occurs. in each case, well look at why m03_kuro5469_08_ge_c03.indd 285 08052021 1358 286 chapter 3 transport layer congestion occurs in the first place and at the cost of congestion in terms of resources not fully utilized and poor performance received by the end systems. well not yet focus on how to react to, or avoid, congestion but rather focus on the simpler issue of understanding what happens as hosts increase their transmission rate and the network becomes congested. scenario 1 two senders, a router with infinite buffers we begin by considering perhaps the simplest congestion
scenario possible two hosts a and b each have a connection that shares a single hop between source and destination, as shown in figure 3.43. lets assume that the application in host a is sending data into the connection for example, passing data to the transportlevel protocol via a socket at an average rate of lin bytessec. these data are original in the sense that each unit of data is sent into the socket only once. the underlying transportlevel protocol is a simple one. data is encapsulated and sent; no error recovery e.g., retransmission, flow control, or congestion control is performed. ignoring the additional overhead due to adding transport and lowerlayer header information, the rate at which host a offers traffic to the router in this first scenario is thus lin bytessec. host b operates in a similar manner, and we assume for simplicity that it too is sending at a rate of lin bytessec. packets from hosts a and b pass through a router and over a shared outgoing link of capacity r. the router has buffers that allow it to store incoming packets when the packetarrival rate exceeds the outgoing links capacity. in this first scenario, we assume that the router has an infinite amount of buffer space. figure 3.44 plots the performance of host as connection under this first sce nario. the left graph plots the perconnection throughput number of bytes per host b unlimited shared output link buf ferslin original data host a host d host clout figure 3.43 congestion scenario 1 two connections sharing a single hop with infinite buffers m03_kuro5469_08_ge_c03.indd 286 08052021 1358 3.6 principles of c ongestion c ontrol 287 second at the receiver as a function of the connectionsending rate. for a sending rate between 0 and r2, the throughput at the receiver equals the senders sending rateeverything sent by the sender is received at the receiver with a finite delay. when the sending rate is above r2, however, the throughput is only r2. this upper limit on throughput is a consequence of the sharing of link capacity between two connections. the link simply cannot deliver packets to a receiver at a steadystate rate that exceeds r2. no matter how high hosts a and b set their sending rates, they will each never see a throughput higher than r2. achieving a perconnection throughput of r2 might actually appear to be a good thing, because the link is fully utilized in delivering packets to their destinations. the righthand graph in figure 3.44, however, shows the consequence of operating near link capacity. as the sending rate approaches r 2 from the left, the average delay becomes larger and larger. when the sending rate exceeds r 2, the average number of queued packets in the router is unbounded, and the average delay between source and destination becomes infinite assuming that the connections operate at these sending rates for an infinite period of time and there is an infinite amount of buffering available. thus, while operating
at an aggregate throughput of near r may be ideal from a throughput standpoint, it is far from ideal from a delay standpoint. even in this extremely idealized scenario, weve already found one cost of a congested networklarge queuing delays are experienced as the packetarrival rate nears the link capacity. scenario 2 two senders and a router with finite buffers lets now slightly modify scenario 1 in the following two ways see figure 3.45. first, the amount of router buffering is assumed to be finite. a consequence of this realworld assumption is that packets will be dropped when arriving to an alreadyfull buffer. second, we assume that each connection is reliable. if a packet containing r2 r2 delay r2lin linlout a. b. figure 3.44 congestion scenario 1 throughput and delay as a function of host sending rate m03_kuro5469_08_ge_c03.indd 287 08052021 1358 288 chapter 3 transport layer a transportlevel segment is dropped at the router, the sender will eventually retrans mit it. because packets can be retransmitted, we must now be more careful with our use of the term sending rate. specifically, let us again denote the rate at which the application sends original data into the socket by lin bytessec. the rate at which the transport layer sends segments containing original data and retransmitted data into the network will be denoted lin bytessec. lin is sometimes referred to as the offered load to the network. the performance realized under scenario 2 will now depend strongly on how retransmission is performed. first, consider the unrealistic case that host a is able to somehow magically! determine whether or not a buffer is free in the router and thus sends a packet only when a buffer is free. in this case, no loss would occur, lin would be equal to lin, and the throughput of the connection would be equal to lin. this case is shown in figure 3.46a. from a throughput standpoint, performance is idealeverything that is sent is received. note that the average host sending rate cannot exceed r2 under this scenario, since packet loss is assumed never to occur. consider next the slightly more realistic case that the sender retransmits only when a packet is known for certain to be lost. again, this assumption is a bit of a stretch. however, it is possible that the sending host might set its timeout large enough to be virtually assured that a packet that has not been acknowledged has been lost. in this case, the performance might look something like that shown in figure 3.46b. to appreciate what is happening here, consider the case that the offered load, lin the rate of original data transmission plus retransmissions, equals r2. according to figure 3.46b, at this value of the offered load, the rate at which data finite shared output link buf fershost b host a host d host clout lin original data lin original data, plus retransmitted data figure 3.45 scenario 2 two hosts with retransmissions and a router with finite buffers m03_kuro5469_08_ge_c03.indd
288 08052021 1358 3.6 principles of c ongestion c ontrol 289 are delivered to the receiver application is r3. thus, out of the 0.5r units of data transmitted, 0.333r bytessec on average are original data and 0.166r bytessec on average are retransmitted data. we see here another cost of a congested networkthe sender must perform retransmissions in order to compensate for dropped lost packets due to buffer overflow. finally, let us consider the case that the sender may time out prematurely and retransmit a packet that has been delayed in the queue but not yet lost. in this case, both the original data packet and the retransmission may reach the receiver. of course, the receiver needs but one copy of this packet and will discard the retransmission. in this case, the work done by the router in forwarding the retransmitted copy of the original packet was wasted, as the receiver will have already received the original copy of this packet. the router would have better used the link transmission capacity to send a different packet instead. here then is yet another cost of a congested networkunneeded retransmissions by the sender in the face of large delays may cause a router to use its link bandwidth to forward unneeded copies of a packet. figure 3.46 c shows the throughput versus offered load when each packet is assumed to be forwarded on average twice by the router. since each packet is forwarded twice, the throughput will have an asymptotic value of r 4 as the offered load approaches r 2. scenario 3 four senders, routers with finite buffers, and multihop paths in our final congestion scenario, four hosts transmit packets, each over overlap ping twohop paths, as shown in figure 3.47. we again assume that each host uses a timeoutretransmission mechanism to implement a reliable data transfer service, that all hosts have the same value of lin, and that all router links have capacity r bytessec.r2 r2 r2lout a. b.r2loutr3r2 r2loutr4 c.lin lin lin figure 3.46 scenario 2 performance with finite buffers m03_kuro5469_08_ge_c03.indd 289 08052021 1358 290 chapter 3 transport layer lets consider the connection from host a to host c, passing through routers r1 and r2. the ac connection shares router r1 with the db connection and shares router r2 with the bd connection. for extremely small values of lin, buffer overflows are rare as in congestion scenarios 1 and 2, and the throughput approximately equals the offered load. for slightly larger values of lin, the corresponding throughput is also larger, since more original data is being transmitted into the network and delivered to the destination, and overflows are still rare. thus, for small values of lin, an increase in lin results in an increase in lout. having considered the case of extremely low traffic, lets next examine the case that lin and hence lin is extremely large. consider router r2. the ac traffic arriving to router r2 which arrives at r2 after being forwarded from r1 can have an arrival
rate at r2 that is at most r, the capacity of the link from r1 to r2, regardless of the value of lin. if lin is extremely large for all connections including the host b host a r1 r4 r2 r3host c host dfinite shared output link buf ferslin original data lin original data, plus retransmitteddatal out figure 3.47 four senders, routers with finite buffers, and multihop paths m03_kuro5469_08_ge_c03.indd 290 08052021 1358 3.6 principles of c ongestion c ontrol 291 bd connection, then the arrival rate of bd traffic at r2 can be much larger than that of the ac traffic. because the ac and bd traffic must compete at router r2 for the limited amount of buffer space, the amount of ac traffic that successfully gets through r2 that is, is not lost due to buffer overflow becomes smaller and smaller as the offered load from bd gets larger and larger. in the limit, as the offered load approaches infinity, an empty buffer at r2 is immediately filled by a bd packet, and the throughput of the ac connection at r2 goes to zero. this, in turn, implies that the ac endtoend throughput goes to zero in the limit of heavy traffic. these considerations give rise to the offered load versus throughput tradeoff shown in figure 3.48. the reason for the eventual decrease in throughput with increasing offered load is evident when one considers the amount of wasted work done by the network. in the hightraffic scenario outlined above, whenever a packet is dropped at a secondhop router, the work done by the firsthop router in forwarding a packet to the secondhop router ends up being wasted. the network would have been equally well off more accurately, equally bad off if the first router had simply discarded that packet and remained idle. more to the point, the transmission capacity used at the first router to forward the packet to the second router could have been much more profitably used to transmit a different packet. for example, when selecting a packet for transmission, it might be better for a router to give priority to packets that have already traversed some number of upstream routers. so here we see yet another cost of dropping a packet due to congestionwhen a packet is dropped along a path, the transmission capacity that was used at each of the upstream links to forward that packet to the point at which it is dropped ends up having been wasted.r2 lout lin figure 3.48 scenario 3 performance with finite buffers and multihop paths m03_kuro5469_08_ge_c03.indd 291 08052021 1358 292 chapter 3 transport layer 3.6.2 approaches to congestion control in section 3.7, well examine tcps specific approach to congestion control in great detail. here, we identify the two broad approaches to congestion control that are taken in practice and discuss specific network architectures and congestioncontrol protocols embodying these approaches. at the highest level, we can distinguish among congestioncontrol approaches by whether the network layer provides explicit assistance to
the transport layer for congestioncontrol purposes endtoend congestion control. in an endtoend approach to congestion control, the network layer provides no explicit support to the transport layer for congestioncontrol purposes. even the presence of network congestion must be inferred by the end systems based only on observed network behavior for example, packet loss and delay. well see shortly in section 3.7.1 that tcp takes this endtoend approach toward congestion control, since the ip layer is not required to provide feedback to hosts regarding network congestion. tcp segment loss as indicated by a timeout or the receipt of three duplicate acknowledgments is taken as an indication of network congestion, and tcp decreases its window size accordingly. well also see a more recent proposal for tcp congestion control that uses increasing roundtrip segment delay as an indicator of increased network congestion networkassisted congestion control. with networkassisted congestion control, routers provide explicit feedback to the sender andor receiver regarding the congestion state of the network. this feedback may be as simple as a single bit indicating congestion at a linkan approach taken in the early ibm sna schwartz 1982, dec decnet jain 1989; ramakrishnan 1990 architectures, and atm black 1995 network architectures. more sophisticated feedback is also possible. for example, in atm available bite rate abr congestion control, a router informs the sender of the maximum host sending rate it the router can support on an outgoing link. as noted above, the internetdefault versions of ip and tcp adopt an endtoend approach towards congestion control. well see, however, in section 3.7.2 that, more recently, ip and tcp may also optionally implement networkassisted congestion control. for networkassisted congestion control, congestion information is typically fed back from the network to the sender in one of two ways, as shown in figure 3.49. direct feedback may be sent from a network router to the sender. this form of notification typically takes the form of a choke packet essentially saying, im congested!. the second and more common form of notification occurs when a router marksupdates a field in a packet flowing from sender to receiver to indicate congestion. upon receipt of a marked packet, the receiver then notifies the sender of the congestion indication. this latter form of notification takes a full roundtrip time. m03_kuro5469_08_ge_c03.indd 292 08052021 1358 3.7 tcp c ongestion c ontrol 293 3.7 tcp congestion control in this section, we return to our study of tcp. as we learned in section 3.5, tcp provides a reliable transport service between two processes running on different hosts. another key component of tcp is its congestioncontrol mechanism. as indicated in the previous section, what we might refer to as classic tcpthe version of tcp standardized in rfc 2581 and most recently rfc 5681uses endtoend congestion control rather than networkassisted congestion control, since the ip layer provides no explicit feedback to the end systems regarding network congestion. well first cover this classic version of tcp in depth in section 7.3.1. in section 7.3.2, well then look at newer
flavors of tcp that use an explicit congestion indication provided by the network layer, or differ a bit from classic tcp in any of several different ways. well then cover the challenge of providing fairness among transport layer flows that must share a congested link. 3.7.1 classic tcp congestion control the approach taken by tcp is to have each sender limit the rate at which it sends traffic into its connection as a function of perceived network congestion. if a tcp sender perceives that there is little congestion on the path between itself and the destination, then the tcp sender increases its send rate; if the sender perceives that there is congestion along the path, then the sender reduces its send rate. but this approach raises three questions. first, how does a tcp sender limit the rate at which it sends traffic into its connection? second, how does a tcp sender perceive that there is congestion on the path between itself and the destination? and third, what algorithm should the sender use to change its send rate as a function of perceived endtoend congestion?host a network feedback via receiver direct network feedbackhost b figure 3.49 two feedback pathways for networkindicated congestion information m03_kuro5469_08_ge_c03.indd 293 08052021 1358 294 chapter 3 transport layer lets first examine how a tcp sender limits the rate at which it sends traffic into its connection. in section 3.5, we saw that each side of a tcp connection consists of a receive buffer, a send buffer, and several variables lastbyteread, rwnd, and so on. the tcp congestioncontrol mechanism operating at the sender keeps track of an additional variable, the congestion window. the congestion window, denoted cwnd, imposes a constraint on the rate at which a tcp sender can send traffic into the network. specifically, the amount of unacknowledged data at a sender may not exceed the minimum of cwnd and rwnd, that is lastbytesent lastbyteacked mincwnd, rwnd in order to focus on congestion control as opposed to flow control, let us henceforth assume that the tcp receive buffer is so large that the receivewindow constraint can be ignored; thus, the amount of unacknowledged data at the sender is solely limited by cwnd. we will also assume that the sender always has data to send, that is, that all segments in the congestion window are sent. the constraint above limits the amount of unacknowledged data at the sender and therefore indirectly limits the senders send rate. to see this, consider a connection for which loss and packet transmission delays are negligible. then, roughly, at the beginning of every rtt, the constraint permits the sender to send cwnd bytes of data into the connection; at the end of the rtt the sender receives acknowledgments for the data. thus the senders send rate is roughly cwndrtt bytessec. by adjusting the value of cwnd, the sender can therefore adjust the rate at which it sends data into its connection. lets next consider how a tcp sender perceives that there is congestion
on the path between itself and the destination. let us define a loss event at a tcp sender as the occurrence of either a timeout or the receipt of three duplicate acks from the receiver. recall our discussion in section 3.5.4 of the timeout event in figure 3.33 and the subsequent modification to include fast retransmit on receipt of three duplicate acks. when there is excessive congestion, then one or more router buffers along the path overflows, causing a datagram containing a tcp segment to be dropped. the dropped datagram, in turn, results in a loss event at the sendereither a timeout or the receipt of three duplicate ackswhich is taken by the sender to be an indication of congestion on the sendertoreceiver path. having considered how congestion is detected, lets next consider the more opti mistic case when the network is congestionfree, that is, when a loss event doesnt occur. in this case, acknowledgments for previously unacknowledged segments will be received at the tcp sender. as well see, tcp will take the arrival of these acknowledgments as an indication that all is wellthat segments being transmitted into the network are being successfully delivered to the destinationand will use acknowledgments to increase its congestion window size and hence its transmission rate. note that if acknowledgments arrive at a relatively slow rate e.g., if the endend path has high delay or contains a lowbandwidth link, then the congestion window will be increased at a relatively slow rate. on the other hand, if acknowledgments arrive at a high rate, then the congestion window will be increased more m03_kuro5469_08_ge_c03.indd 294 08052021 1358 3.7 tcp c ongestion c ontrol 295 quickly. because tcp uses acknowledgments to trigger or clock its increase in congestion window size, tcp is said to be selfclocking. given the mechanism of adjusting the value of cwnd to control the sending rate, the critical question remains how should a tcp sender determine the rate at which it should send? if tcp senders collectively send too fast, they can congest the network, leading to the type of congestion collapse that we saw in figure 3.48. indeed, the version of tcp that well study shortly was developed in response to observed internet congestion collapse jacobson 1988 under earlier versions of tcp. however, if tcp senders are too cautious and send too slowly, they could under utilize the bandwidth in the network; that is, the tcp senders could send at a higher rate without congesting the network. how then do the tcp senders determine their sending rates such that they dont congest the network but at the same time make use of all the available bandwidth? are tcp senders explicitly coordinated, or is there a distributed approach in which the tcp senders can set their sending rates based only on local information? tcp answers these questions using the following guiding principles a lost segment implies congestion, and hence, the tcp senders rate should be decreased when a segment is lost. recall from our discussion
in section 3.5.4, that a timeout event or the receipt of four acknowledgments for a given segment one original ack and then three duplicate acks is interpreted as an implicit loss event indication of the segment following the quadruply acked segment, triggering a retransmission of the lost segment. from a congestioncontrol standpoint, the question is how the tcp sender should decrease its congestion window size, and hence its sending rate, in response to this inferred loss event. an acknowledged segment indicates that the network is delivering the senders segments to the receiver, and hence, the senders rate can be increased when an ack arrives for a previously unacknowledged segment. the arrival of acknowledgments is taken as an implicit indication that all is wellsegments are being successfully delivered from sender to receiver, and the network is thus not congested. the congestion window size can thus be increased. bandwidth probing. given acks indicating a congestionfree sourcetodestination path and loss events indicating a congested path, tcps strategy for adjusting its transmission rate is to increase its rate in response to arriving acks until a loss event occurs, at which point, the transmission rate is decreased. the tcp sender thus increases its transmission rate to probe for the rate that at which congestion onset begins, backs off from that rate, and then to begins probing again to see if the congestion onset rate has changed. the tcp senders behavior is perhaps analogous to the child who requests and gets more and more goodies until finally heshe is finally told no!, backs off a bit, but then begins making requests again shortly afterward. note that there is no explicit signaling of congestion state by the networkacks and loss events serve as implicit signalsand that each tcp sender acts on local information asynchronously from other tcp senders. given this overview of tcp congestion control, were now in a position to consider the details of the celebrated tcp congestioncontrol algorithm, which was first described m03_kuro5469_08_ge_c03.indd 295 08052021 1358 296 chapter 3 transport layer in jacobson 1988 and is standardized in rfc 5681. the algorithm has three major components 1 slow start, 2 congestion avoidance, and 3 fast recovery. slow start and congestion avoidance are mandatory components of tcp, differing in how they increase the size of cwnd in response to received acks. well see shortly that slow start increases the size of cwnd more rapidly despite its name! than congestion avoid ance. fast recovery is recommended, but not required, for tcp senders. slow start when a tcp connection begins, the value of cwnd is typically initialized to a small value of 1 mss rfc 3390, resulting in an initial sending rate of roughly mssrtt. for example, if mss 500 bytes and rtt 200 msec, the resulting initial sending rate is only about 20 kbps. since the available bandwidth to the tcp sender may be much larger than mssrtt, the tcp sender would like to find the amount of available bandwidth quickly. thus, in the slowstart state, the
value of cwnd begins at 1 mss and increases by 1 mss every time a transmitted segment is first acknowledged. in the example of figure 3.50, tcp sends the first segment into the network host a host b one segment two segments four segmentsrtt time time figure 3.50 tcp slow start m03_kuro5469_08_ge_c03.indd 296 08052021 1358 3.7 tcp c ongestion c ontrol 297 and waits for an acknowledgment. when this acknowledgment arrives, the tcp sender increases the congestion window by one mss and sends out two maximumsized segments. these segments are then acknowledged, with the sender increasing the congestion window by 1 mss for each of the acknowledged segments, giving a congestion window of 4 mss, and so on. this process results in a doubling of the sending rate every rtt. thus, the tcp send rate starts slow but grows exponentially during the slow start phase. but when should this exponential growth end? slow start provides several answers to this question. first, if there is a loss event i.e., congestion indicated by a timeout, the tcp sender sets the value of cwnd to 1 and begins the slow start process anew. it also sets the value of a second state variable, ssthresh shorthand for slow start threshold to cwnd2half of the value of the congestion window value when congestion was detected. the second way in which slow start may end is directly tied to the value of ssthresh. since ssthresh is half the value of cwnd when congestion was last detected, it might be a bit reckless to keep doubling cwnd when it reaches or surpasses the value of ssthresh. thus, when the value of cwnd equals ssthresh, slow start ends and tcp transitions into con gestion avoidance mode. as well see, tcp increases cwnd more cautiously when in congestionavoidance mode. the final way in which slow start can end is if three duplicate acks are detected, in which case tcp performs a fast retransmit see section 3.5.4 and enters the fast recovery state, as discussed below. tcps behavior in slow start is summarized in the fsm description of tcp congestion control in figure 3.51. the slowstart algorithm traces it roots to jacobson 1988; an approach similar to slow start was also proposed independently in jain 1986. congestion avoidance on entry to the congestionavoidance state, the value of cwnd is approximately half its value when congestion was last encounteredcongestion could be just around the corner! thus, rather than doubling the value of cwnd every rtt, tcp adopts a more conservative approach and increases the value of cwnd by just a single mss every rtt rfc 5681. this can be accomplished in several ways. a common approach is for the tcp sender to increase cwnd by mss bytes msscwnd whenever a new acknowledgment arrives. for example, if mss is 1,460 bytes and cwnd is 14,600 bytes, then 10 segments are being sent within an rtt. each arriving ack assuming one ack per segment increases the congestion window size by 110 mss, and
thus, the value of the congestion window will have increased by one mss after acks when all 10 segments have been received. but when should congestion avoidances linear increase of 1 mss per rtt end? tcps congestionavoidance algorithm behaves the same when a timeout occurs as in the case of slow start the value of cwnd is set to 1 mss, and the value of ssthresh is updated to half the value of cwnd when the loss event occurred. recall, however, that a loss event also can be triggered by a triple duplicate ack event. m03_kuro5469_08_ge_c03.indd 297 08052021 1358 298 chapter 3 transport layer in this case, the network is continuing to deliver some segments from sender to receiver as indicated by the receipt of duplicate acks. so tcps behavior to this type of loss event should be less drastic than with a timeoutindicated loss tcp halves the value of cwnd adding in 3 mss for good measure to account for the triple duplicate acks received and records the value of ssthresh to be half the value of cwnd when the triple duplicate acks were received. the fastrecovery state is then entered. fast recovery in fast recovery, the value of cwnd is increased by 1 mss for every duplicate ack received for the missing segment that caused tcp to enter the fastrecovery state. eventually, when an ack arrives for the missing segment, tcp enters the slow startduplicate ack dupackcount duplicate ack dupackcounttimeout ssthresh cwnd2 cwnd1 mss dupackcount0cwnd1 mss ssthresh 64 kb dupackcount0 timeout ssthreshcwnd2 cwnd1 dupackcount0timeout ssthreshcwnd2 cwnd1 mss dupackcount0cwndssthresh congestion avoidance fast recoverynew ack cwndcwndmss msscwnd dupackcount0 transmit new segments, as allowednew ack cwndcwndmssdupackcount0 transmit new segments, as allowed retransmit missing segment retransmit missing segment dupackcount3 ssthreshcwnd2 cwndssthresh3 mss retransmit missing segment duplicate ack cwndcwndmss transmit new segments, as alloweddupackcount3 ssthresh cwnd2 cwndssthresh3 mss retransmit missing segmentretransmit missing segment new ack cwndssthresh dupackcount0ll figure 3.51 fsm description of tcp congestion control examining the behavior of tcpvideonote m03_kuro5469_08_ge_c03.indd 298 08052021 1358 3.7 tcp c ongestion c ontrol 299 congestionavoidance state after deflating cwnd. if a timeout event occurs, fast recovery transitions to the slowstart state after performing the same actions as in slow start and congestion avoidance the value of cwnd is set to 1 mss, and the value of ssthresh is set to half the value of cwnd when the loss event occurred.tcp splitting optimizing the performance of cloud services for cloud services such as search, email, and social networks, it is desirable to provide a highlevel of responsiveness, ideally giving users the illusion that the services are running within their own end systems including their smartphones. this can be a major challenge, as users are often located far away from the data centers responsible for serving the dynamic content associated with the cloud services. indeed, if the end system is far from a data center, then the rtt will be large, potentially leading to poor response time perfor mance due to tcp slow start. as a case study,
consider the delay in receiving a response for a search query. typically, the server requires three tcp windows during slow start to deliver the response pathak 2010. thus the time from when an end system initiates a tcp connection until the time when it receives the last packet of the response is roughly 4 rtt one rtt to set up the tcp connection plus three rtts for the three windows of data plus the processing time in the data center. these rtt delays can lead to a noticeable delay in returning search results for a significant fraction of queries. moreover, there can be significant packet loss in access networks, leading to tcp retransmissions and even larger delays. one way to mitigate this problem and improve userperceived performance is to 1 deploy frontend servers closer to the users, and 2 utilize tcp splitting by break ing the tcp connection at the frontend server. with tcp splitting, the client establishes a tcp connection to the nearby frontend, and the frontend maintains a persistent tcp connection to the data center with a very large tcp congestion window tariq 2008, pathak 2010, chen 2011. with this approach, the response time roughly becomes 4rttferttbeprocessing time, where rttfe is the roundtrip time between client and frontend server, and rttbe is the roundtrip time between the frontend server and the data center backend server. if the frontend server is close to client, then this response time approximately becomes rtt plus processing time, since rttfe is negligibly small and rttbe is approximately rtt. in summary, tcp splitting can reduce the networking delay roughly from 4rtt to rtt, significantly improving userperceived performance, particularly for users who are far from the nearest data center. tcp splitting also helps reduce tcp retransmission delays caused by losses in access networks. google and akamai have made extensive use of their cdn servers in access networks recall our discussion in section 2.6 to perform tcp splitting for the cloud services they support chen 2011.principles in practice m03_kuro5469_08_ge_c03.indd 299 08052021 1358 300 chapter 3 transport layer fast recovery is a recommended, but not required, component of tcp rfc 5681. it is interesting that an early version of tcp, known as tcp tahoe, uncon ditionally cut its congestion window to 1 mss and entered the slowstart phase after either a timeoutindicated or tripleduplicateackindicated loss event. the newer version of tcp, tcp reno, incorporated fast recovery. figure 3.52 illustrates the evolution of tcps congestion window for both reno and tahoe. in this figure, the threshold is initially equal to 8 mss. for the first eight transmission rounds, tahoe and reno take identical actions. the congestion window climbs exponentially fast during slow start and hits the threshold at the fourth round of transmission. the congestion window then climbs linearly until a triple duplicate ack event occurs, just after transmission round 8. note that the congestion window is 12 mss when this loss event occurs. the value of ssthresh is then set to 0.5 cwnd 6 mss. under tcp
reno, the congestion window is set to cwnd 9 mss and then grows linearly. under tcp tahoe, the congestion window is set to 1 mss and grows exponentially until it reaches the value of ssthresh, at which point it grows linearly. figure 3.51 presents the complete fsm description of tcps congestioncontrol algorithmsslow start, congestion avoidance, and fast recovery. the figure also indicates where transmission of new segments or retransmitted segments can occur. although it is important to distinguish between tcp error controlretransmission and tcp congestion control, its also important to appreciate how these two aspects of tcp are inextricably linked. tcp congestion control retrospective having delved into the details of slow start, congestion avoidance, and fast recovery, its worthwhile to now step back and view the forest from the trees. ignoring the 0 102 34 56 78 transmission roundtcp t ahoessthresh ssthreshcongestion window in segments 9101112131415246810121416 tcp reno figure 3.52 evolution of tcps congestion window tahoe and reno m03_kuro5469_08_ge_c03.indd 300 08052021 1358 3.7 tcp c ongestion c ontrol 301 initial slowstart period when a connection begins and assuming that losses are indi cated by triple duplicate acks rather than timeouts, tcps congestion control consists of linear additive increase in cwnd of 1 mss per rtt and then a halving multiplicative decrease of cwnd on a triple duplicateack event. for this reason, tcp congestion control is often referred to as an additiveincrease, multiplicativedecrease aimd form of congestion control. aimd congestion control gives rise to the saw tooth behavior shown in figure 3.53, which also nicely illustrates our earlier intuition of tcp probing for bandwidthtcp linearly increases its congestion window size and hence its transmission rate until a triple duplicateack event occurs. it then decreases its congestion window size by a factor of two but then again begins increasing it linearly, probing to see if there is additional available bandwidth. tcps aimd algorithm was developed based on a tremendous amount of engineering insight and experimentation with congestion control in operational networks. ten years after tcps development, theoretical analyses showed that tcps congestioncontrol algorithm serves as a distributed asynchronousoptimization algorithm that results in several important aspects of user and network performance being simultaneously optimized kelly 1998. a rich theory of congestion control has since been developed srikant 2012. tcp cubic given tcp renos additiveincrease, multiplicativedecrease approach to congestion control, one might naturally wonder whether this is the best way to probe for a packet sending rate that is just below the threshold of triggering packet loss. indeed, cutting the sending rate in half or even worse, cutting the sending rate to one packet per rtt as in an earlier version of tcp known as tcp tahoe and then increasing rather slowly over time may be overly cautious. if the state of the congested link 24 k 16 k 8 k timecongestion window figure 3.53 additiveincrease, multiplicativedecrease congestion control m03_kuro5469_08_ge_c03.indd 301 08052021 1358 302 chapter 3 transport layer where packet loss occurred hasnt changed much, then perhaps its better to more quickly ramp up
the sending rate to get close to the preloss sending rate and only then probe cautiously for bandwidth. this insight lies at the heart of a flavor of tcp known as tcp cubic ha 2008, rfc 8312. tcp cubic differs only slightly from tcp reno. once again, the congestion window is increased only on ack receipt, and the slow start and fast recovery phases remain the same. cubic only changes the congestion avoidance phase, as follows let w max be size of tcps congestion control window when loss was last detected, and let k be the future point in time when tcp cubics window size will again reach wmax, assuming no losses. several tunable cubic parameters determine the value k , that is, how quickly the protocols congestion window size would reach wmax. cubic increases the congestion window as a function of cube of the distance between the current time, t, and k. thus, when t is further away from k, the congestion window size increases are much larger than when t is close to k. that is, cubic quickly ramps up tcps sending rate to get close to the preloss rate, w max, and only then probes cautiously for bandwidth as it approaches wmax. when t is greater than k, the cubic rule implies that cubics congestion window increases are small when t is still close to k which is good if the congestion level of the link causing loss hasnt changed much but then increases rapidly as t exceeds k which allows cubic to more quickly find a new operating point if the congestion level of the link that caused loss has changed significantly. under these rules, the idealized performance of tcp reno and tcp cubic are compared in figure 3.54, adapted from huston 2017. we see the slow start phase timetcp sending ratetcp reno tcp cubic wmax t0 t1 t2 t3 t4key figure 3.54 tcp congestion avoidance sending rates tcp reno and tcp cubic m03_kuro5469_08_ge_c03.indd 302 08052021 1358 3.7 tcp c ongestion c ontrol 303 ending at t0. then, when congestion loss occurs at t1, t2, and t3, cubic more quickly ramps up close to wmax thereby enjoying more overall throughput than tcp reno. we can see graphically how tcp cubic attempts to maintain the flow for as long as possible just below the unknown to the sender congestion threshold. note that at t 3, the congestion level has presumably decreased appreciably, allowing both tcp reno and tcp cubic to achieve sending rates higher than wmax. tcp cubic has recently gained wide deployment. while measurements taken around 2000 on popular web servers showed that nearly all were running some version of tcp reno padhye 2001, more recent measurements of the 5000 most popular web servers shows that nearly 50 are running a version of tcp cubic yang 2014, which is also the default version of tcp used in the linux operating system. macroscopic description of tcp reno throughput given the sawtoothed behavior of tcp reno, its natural
to consider what the average throughput that is, the average rate of a longlived tcp reno connection might be. in this analysis, well ignore the slowstart phases that occur after timeout events. these phases are typically very short, since the sender grows out of the phase exponentially fast. during a particular roundtrip interval, the rate at which tcp sends data is a function of the congestion window and the current rtt. when the window size is w bytes and the current roundtrip time is rtt seconds , then tcps transmission rate is roughly wrtt. tcp then probes for additional bandwidth by increasing w by 1 mss each rtt until a loss event occurs. denote by w the value of w when a loss event occurs. assuming that rtt and w are approxi mately constant over the duration of the connection, the tcp transmission rate ranges from w 2 rtt to wrtt. these assumptions lead to a highly simplified macroscopic model for the steady state behavior of tcp. the network drops a packet from the connection when the rate increases to wrtt; the rate is then cut in half and then increases by mssrtt every rtt until it again reaches wrtt. this process repeats itself over and over again. because tcps throughput that is, rate increases linearly between the two extreme values, we have average throughput of a connection0.75w rtt using this highly idealized model for the steadystate dynamics of tcp, we can also derive an interesting expression that relates a connections loss rate to its available bandwidth mathis 1997. this derivation is outlined in the homework problems. a more sophisticated model that has been found empirically to agree with measured data is padhye 2000. m03_kuro5469_08_ge_c03.indd 303 08052021 1358 304 chapter 3 transport layer 3.7.2 networkassisted explicit congestion notification and delayedbased congestion control since the initial standardization of slow start and congestion avoidance in the late 1980s rfc 1122, tcp has implemented the form of endend congestion control that we studied in section 3.7.1 a tcp sender receives no explicit congestion indications from the network layer, and instead infers congestion through observed packet loss. more recently, extensions to both ip and tcp rfc 3168 have been proposed, implemented, and deployed that allow the network to explicitly signal congestion to a tcp sender and receiver. in addition, a number of variations of tcp congestion control protocols have been proposed that infer congestion using measured packet delay. well take a look at both networkassisted and delaybased congestion control in this section. explicit congestion notification explicit congestion notification rfc 3168 is the form of networkassisted congestion control performed within the internet. as shown in figure 3.55, both tcp and ip are involved. at the network layer, two bits with four possible values, overall in the type of service field of the ip datagram header which well discuss in section 4.3 are used for ecn. one setting of the ecn bits is used by a router to indicate that it the router is experiencing congestion.
this congestion indication is then carried in the marked ip datagram to the destination host, which then informs the sending host, as shown in figure 3.55. rfc 3168 does not provide a definition of when a router is congested; that decision is a configuration choice made possible by the router vendor, and decided by the network operator. however, the intuition is that the congestion indication bit can be set to signal the onset of congestion to the send before loss actually occurs. a second setting of the ecn bits is used by the sending host to inform routers that the sender and receiver are ecncapable, and thus capable of taking action in response to ecnindicated network congestion. as shown in figure 3.55, when the tcp in the receiving host receives an ecn congestion indication via a received datagram, the tcp in the receiving host informs the tcp in the sending host of the congestion indication by setting the ece explicit congestion notification echo bit see figure 3.29 in a receivertosender tcp ack segment. the tcp sender, in turn, reacts to an ack with a congestion indication by halving the congestion window, as it would react to a lost segment using fast retransmit, and sets the cwr congestion window reduced bit in the header of the next transmitted tcp sendertoreceiver segment. other transportlayer protocols besides tcp may also make use of network layersignaled ecn. the datagram congestion control protocol dccp rfc 4340 provides a lowoverhead, congestioncontrolled udplike unreliable service that utilizes ecn. dctcp data center tcp alizadeh 2010, rfc 8257 and m03_kuro5469_08_ge_c03.indd 304 08052021 1358 3.7 tcp c ongestion c ontrol 305 dcqcn data center quantized congestion notification zhu 2015 designed specifically for data center networks, also makes use of ecn. recent internet meas urements show increasing deployment of ecn capabilities in popular servers as well as in routers along paths to those servers k√ºhlewind 2013. delaybased congestion control recall from our ecn discussion above that a congested router can set the congestion indication bit to signal congestion onset to senders before full buffers cause packets to be dropped at that router. this allows senders to decrease their sending rates earlier, hopefully before packet loss, thus avoiding costly packet loss and retrans mission. a second congestionavoidance approach takes a delaybased approach to also proactively detect congestion onset before packet loss occurs. in tcp vegas brakmo 1995, the sender measures the rtt of the sourceto destination path for all acknowledged packets. let rtt min be the minimum of these measurements at a sender; this occurs when the path is uncongested and packets experience minimal queuing delay. if tcp vegas congestion window size is cwnd, then the uncongested throughput rate would be cwndrtt min. the intuition behind tcp vegas is that if the actual sendermeasured throughput is close to this value, the tcp sending rate can be increased since by definition and by measurement the path is not yet congested. however, if the actual sendermeasured throughput is significantly less than the uncongested throughput
rate, the path is congested and the vegas tcp sender will decrease its sending rate. details can be found in brakmo 1995.ecn echo 1host a host b ecn 11ecn echo bit set in receiver tosender tcp ack segment ecn bits set in ip datagram header at congested router figure 3.55 explicit congestion notification networkassisted congestion control m03_kuro5469_08_ge_c03.indd 305 08052021 1358 306 chapter 3 transport layer tcp vegas operates under the intuition that tcp senders should keep the pipe just full, but no fuller kleinrock 2018. keeping the pipe full means that links in particular the bottleneck link that is limiting a connections throughput are kept busy transmitting, doing useful work; but no fuller means that there is nothing to gain except increased delay! if large queues are allowed to build up while the pipe is kept full. the bbr congestion control protocol cardwell 2017 builds on ideas in tcp vegas, and incorporates mechanisms that allows it compete fairly see section 3.7.3 with tcp nonbbr senders. cardwell 2017 reports that in 2016, google began using bbr for all tcp traffic on its private b4 network jain 2013 that interconnects google data centers, replacing cubic. it is also being deployed on google and youtube web servers. other delaybased tcp congestion control protocols include timely for data center networks mittal 2015, and compound tcp ctpc tan 2006 and fast wei 2006 for highspeed and long distance networks. 3.7.3 fairness consider k tcp connections, each with a different endtoend path, but all pass ing through a bottleneck link with transmission rate r bps. by bottleneck link, we mean that for each connection, all the other links along the connections path are not congested and have abundant transmission capacity as compared with the transmission capacity of the bottleneck link. suppose each connection is transferring a large file and there is no udp traffic passing through the bottleneck link. a congestioncontrol mechanism is said to be fair if the average transmission rate of each connection is approximately rk; that is, each connection gets an equal share of the link bandwidth. is tcps aimd algorithm fair, particularly given that different tcp connec tions may start at different times and thus may have different window sizes at a given point in time? chiu 1989 provides an elegant and intuitive explanation of why tcp congestion control converges to provide an equal share of a bottleneck links bandwidth among competing tcp connections. lets consider the simple case of two tcp connections sharing a single link with transmission rate r, as shown in figure 3.55. assume that the two connections have the same mss and rtt so that if they have the same congestion window size, then they have the same throughput, that they have a large amount of data to send, and that no other tcp connections or udp datagrams traverse this shared link. also, ignore the slowstart phase of tcp and assume the tcp connections are operating in ca mode aimd at all times. figure 3.56 plots the throughput
realized by the two tcp connections. if tcp is to share the link bandwidth equally between the two connections, then the realized throughput should fall along the 45degree arrow equal bandwidth share emanating from the origin. ideally, the sum of the two throughputs should equal r. certainly, each connection receiving an equal, but zero, share of the link capacity is not m03_kuro5469_08_ge_c03.indd 306 08052021 1358 3.7 tcp c ongestion c ontrol 307 a desirable situation! so the goal should be to have the achieved throughputs fall somewhere near the intersection of the equal bandwidth share line and the full bandwidth utilization line in figure 3.56. suppose that the tcp window sizes are such that at a given point in time, con nections 1 and 2 realize throughputs indicated by point a in figure 3.56. because the amount of link bandwidth jointly consumed by the two connections is less than r, no loss will occur, and both connections will increase their window by 1 mss per rtt as a result of tcps congestionavoidance algorithm. thus, the joint throughput of the two connections proceeds along a 45degree line equal increase for both connections starting from point a. eventually, the link bandwidth jointly consumed by the two connections will be greater than r, and eventually packet loss will occur. suppose that connections 1 and 2 experience packet loss when they realize throughputs indicated by point b. connections 1 and 2 then decrease their windows by a factor of two. the resulting throughputs realized are thus at point c, halfway along a vector starting at b and ending at the origin. because the joint bandwidth use is less than r at point c, the two connections again increase their throughputs along a 45degree line starting from c. eventually, loss will again occur, for example, at point d, and the two connections again decrease their window sizes by a factor of two, and so on. you should convince yourself that the bandwidth realized by the two connections eventually fluctuates along the equal bandwidth share line. you should also convince yourself that the two connections will converge to this behavior regardless of where they are in the twodimensional space! although a number of idealized assumptions lie behind this scenario, it still provides an intuitive feel for why tcp results in an equal sharing of bandwidth among connections. in our idealized scenario, we assumed that only tcp connections traverse the bottleneck link, that the connections have the same rtt value, and that only a single tcp connection is associated with a hostdestination pair. in practice, these conditions are typically not met, and clientserver applications can thus obtain very unequal portions of link bandwidth. in particular, it has been shown that when tcp connection 2 tcp connection 1bottleneck router capacity r figure 3.56 two tcp connections sharing a single bottleneck link m03_kuro5469_08_ge_c03.indd 307 08052021 1358 308 chapter 3 transport layer multiple connections share a common bottleneck, those sessions with a smaller rtt are able to grab the available
bandwidth at that link more quickly as it becomes free that is, open their congestion windows faster and thus will enjoy higher throughput than those connections with larger rtts lakshman 1997. fairness and udp we have just seen how tcp congestion control regulates an applications transmission rate via the congestion window mechanism. many multimedia applications, such as internet phone and video conferencing, often do not run over tcp for this very reasonthey do not want their transmission rate throttled, even if the network is very congested. instead, these applications prefer to run over udp, which does not have builtin congestion control. when running over udp, applications can pump their audio and video into the network at a constant rate and occasionally lose packets, rather than reduce their rates to fair levels at times of congestion and not lose any packets. from the perspective of tcp, the multimedia applications running over udp are not being fairthey do not cooperate with the other connections nor adjust their transmission rates appropriately. because tcp congestion control will decrease its transmission rate in the face of increasing congestion loss, while udp sources need not, it is possible for udp sources to crowd out tcp traffic. a number r requal bandwidth share connection 1 throughputconnection 2 throughputd b c afull bandwidth utilization line figure 3.57 throughput realized by tcp connections 1 and 2 m03_kuro5469_08_ge_c03.indd 308 08052021 1358 3.8 ev olution of transport layer functionality 309 of congestioncontrol mechanisms have been proposed for the internet that prevent udp traffic from bringing the internets throughput to a grinding halt floyd 1999; floyd 2000; kohler 2006; rfc 4340. fairness and parallel tcp connections but even if we could force udp traffic to behave fairly, the fairness problem would still not be completely solved. this is because there is nothing to stop a tcpbased application from using multiple parallel connections. for example, web browsers often use multiple parallel tcp connections to transfer the multiple objects within a web page. the exact number of multiple connections is configurable in most browsers. when an application uses multiple parallel connections, it gets a larger fraction of the bandwidth in a congested link. as an example, consider a link of rate r supporting nine ongoing clientserver applications, with each of the applications using one tcp connection. if a new application comes along and also uses one tcp connection, then each application gets approximately the same transmission rate of r10. but if this new application instead uses 11 parallel tcp connections, then the new application gets an unfair allocation of more than r2. because web traffic is so pervasive in the internet, multiple parallel connections are not uncommon. 3.8 evolution of transportlayer functionality our discussion of specific internet transport protocols in this chapter has focused on udp and tcpthe two work horses of the internet transport layer. however, as weve seen, three decades of experience with these two protocols has identified circumstances in which neither is ideally suited, and so the design and implementation of
transport layer functionality has continued to evolve. weve seen a rich evolution in the use of tcp over the past decade. in sections 3.7.1 and 3.7.2, we learned that in addition to classic versions of tcp such as tcp tahoe and reno, there are now several newer versions of tcp that have been developed, implemented, deployed, and are in significant use today. these include tcp cubic, dctcp, ctcp, bbr, and more. indeed, measurements in yang 2014 indicate that cubic and its predecessor, bic xu 2004 and ctcp are more widely deployed on web servers than classic tcp reno; we also saw that bbr is being deployed in googles internal b4 network, as well as on many of googles publicfacing servers. and there are many many! more versions of tcp! there are versions of tcp specifically designed for use over wireless links, over highbandwidth paths with large rtts, for paths with packet reordering, and for short paths strictly within data centers. there are versions of tcp that implement different priorities among tcp m03_kuro5469_08_ge_c03.indd 309 08052021 1358 310 chapter 3 transport layer connections competing for bandwidth at a bottleneck link, and for tcp connections whose segments are being sent over different sourcedestination paths in parallel. there are also variations of tcp that deal with packet acknowledgment and tcp session establishmentclosure differently than we studied in section 3.5.6. indeed, its probably not even correct anymore to refer to the tcp protocol; perhaps the only common features of these protocols is that they use the tcp segment format that we studied in figure 3.29, and that they should compete fairly amongst themselves in the face of network congestion! for a survey of the many flavors of tcp, see afanasyev 2010 and narayan 2018. quic quick udp internet connections if the transport services needed by an application dont quite fit either the udp or tcp service modelsperhaps an application needs more services than those provided by udp but does not want all of the particular functionality that comes with tcp, or may want different services than those provided by tcpapplication designers can always roll their own protocol at the application layer. this is the approach taken in the quic quick udp internet connections protocol langley 2017, quic 2020. specifically, quic is a new applicationlayer protocol designed from the ground up to improve the performance of transportlayer services for secure http. quic has already been widely deployed, although is still in the process of being standardized as an internet rfc quic 2020. google has deployed quic on many of its publicfacing web servers, in its mobile video streaming youtube app, in its chrome browser, and in androids google search app. with more than 7 of internet traffic today now being quic langley 2017, well want to take a closer look. our study of quic will also serve as a nice culmination of our study of the transport layer, as quic uses many of the approaches for reliable data transfer, congestion control, and connection management that weve
studied in this chapter. as shown in figure 3.58, quic is an applicationlayer protocol, using udp as its underlying transportlayer protocol, and is designed to interface above specifically to a simplified but evolved version of http2. in the near future, http3 will natively incorporate quic http3 2020. some of quics major features include connectionoriented and secure. like tcp, quic is a connectionoriented protocol between two endpoints. this requires a handshake between endpoints to set up the quic connection state. two pieces of connection state are the source and destination connection id. all quic packets are encrypted, and as suggested in figure 3.58, quic combines the handshakes needed to establish connection state with those needed for authentication and encryption transport layer security topics that well study in chapter 8, thus providing faster establishment than the protocol stack in figure 3.58a, where multiple rtts are m03_kuro5469_08_ge_c03.indd 310 08052021 1358 3.8 ev olution of transport layer functionality 311 required to first establish a tcp connection, and then establish a tls connection over the tcp connection. streams. quic allows several different applicationlevel streams to be multiplexed through a single quic connection, and once a quic connection is established, new streams can be quickly added. a stream is an abstraction for the reliable, inorder bidirectional delivery of data between two quic endpoints. in the context of http3, there would be a different stream for each object in a web page. each connection has a connection id, and each stream within a connection has a stream id; both of these ids are contained in a quic packet header along with other header information. data from multiple streams may be contained within a single quic segment, which is carried over udp. the stream control transmission protocol sctp rfc 4960, rfc 3286 is an earlier reliable, messageoriented protocol that pioneered the notion of multiplexing multiple applicationlevel streams through a single sctp connection. well see in chapter 7 that sctp is used in control plane protocols in 4g5g cellular wireless networks. reliable, tcpfriendly congestioncontrolled data transfer. as illustrated in figure 3.59b, quic provides reliable data transfer to each quic stream separately. figure 3.59a shows the case of http1.1 sending multiple http requests, all over a single tcp connection. since tcp provides reliable, inorder byte delivery, this means that the multiple http requests must be delivered inorder at the destination http server. thus, if bytes from one http request are lost, the remaining http requests can not be delivered until those lost bytes are retransmitted and correctly received by tcp at the http serverthe socalled hol blocking problem that we encountered earlier in section 2.2.5. since quic provides a reliable inorder delivery on a perstream basis, a lost udp segment only impacts those streams whose data was carried in that segment; http messages in other streams can continue to be received and delivered to the application. quic provides reliable data transfer using acknowledgment mechanisms similar to tcps, as specified in rfc 5681.iptcptlshttp2 ipudpquichttp2 slimmed networktransportapplication http3 a. b. figure 3.58
a traditional secure http protocol stack, and the b secure quicbased http3 protocol stack m03_kuro5469_08_ge_c03.indd 311 08052021 1358 312 chapter 3 transport layer quics congestion control is based on tcp newreno rfc 6582, a slight modification to the tcp reno protocol that we studied in section 3.7.1. quics draft specification quicrecovery 2020 notes readers familiar with tcps loss detection and congestion control will find algorithms here that parallel wellknown tcp ones. since weve carefully studied tcps congestion control in section 3.7.1, wed be right at home reading the details of quics draft specifica tion of its congestion control algorithm! in closing, its worth highlighting again that quic is an applicationlayer protocol providing reliable, congestioncontrolled data transfer between two endpoints. the authors of quic langley 2017 stress that this means that changes can be made to quic at applicationupdate timescales, that is, much faster than tcp or udp update timescales. 3.9 summary we began this chapter by studying the services that a transportlayer protocol can provide to network applications. at one extreme, the transportlayer protocol can be very simple and offer a nofrills service to applications, providing only a multiplexingdemultiplexing function for communicating processes. the internets udp protocol tls encryption tcp rd t tcp cctcp rd t tcp cctls encryption http requesthttp request http request quic congestion control quic encryptionquic encryptionquic encryption quic rdt quic rdt quic rdthttp request http requesthttp request quic congestion control quic encryptionquic encryptionquic encryption quic rdt quic rdt quic rdt udp udptransport application a. http 1.1 b. http3http requesthttp request http request http requesthttp request http request figure 3.59 a http1.1 a singleconnection client and server using applicationlevel tls encryption over tcps reliable data transfer rdt and congestion control cc b http3 a multistream client and server using quics encryption, reliable data transfer and congestion control over udps unreliable datagram service m03_kuro5469_08_ge_c03.indd 312 08052021 1358 3.9 summary 313 is an example of such a nofrills transportlayer protocol. at the other extreme, a transportlayer protocol can provide a variety of guarantees to applications, such as reliable delivery of data, delay guarantees, and bandwidth guarantees. nevertheless, the services that a transport protocol can provide are often constrained by the service model of the underlying networklayer protocol. if the networklayer protocol cannot provide delay or bandwidth guarantees to transportlayer segments, then the transportlayer protocol cannot provide delay or bandwidth guarantees for the messages sent between processes. we learned in section 3.4 that a transportlayer protocol can provide reliable data transfer even if the underlying network layer is unreliable. we saw that providing reliable data transfer has many subtle points, but that the task can be accomplished by carefully combining acknowledgments, timers, retransmissions, and sequence numbers. although we covered reliable data transfer in this chapter, we should keep in mind that reliable data transfer can be provided by link, network, transport, or applicationlayer protocols. any of the upper four layers of the protocol stack can implement acknowledgments, timers, retransmissions, and sequence numbers and provide reliable data transfer to the layer
above. in fact, over the years, engineers and computer scientists have independently designed and implemented link, network, transport, and applicationlayer protocols that provide reliable data transfer although many of these protocols have quietly disappeared. in section 3.5, we took a close look at tcp, the internets connectionoriented and reliable transportlayer protocol. we learned that tcp is complex, involving connection management, flow control, and roundtrip time estimation, as well as reliable data transfer. in fact, tcp is actually more complex than our descriptionwe intentionally did not discuss a variety of tcp patches, fixes, and improvements that are widely implemented in various versions of tcp. all of this complexity, however, is hidden from the network application. if a client on one host wants to send data reliably to a server on another host, it simply opens a tcp socket to the server and pumps data into that socket. the clientserver application is blissfully unaware of tcps complexity. in section 3.6, we examined congestion control from a broad perspective, and in section 3.7, we showed how tcp implements congestion control. we learned that congestion control is imperative for the wellbeing of the network. without congestion control, a network can easily become gridlocked, with little or no data being transported endtoend. in section 3.7, we learned that classic tcp implements an endtoend congestioncontrol mechanism that additively increases its transmission rate when the tcp connections path is judged to be congestionfree, and multiplicatively decreases its transmission rate when loss occurs. this mechanism also strives to give each tcp connection passing through a congested link an equal share of the link bandwidth. we also studied several newer variations of tcp congestion control m03_kuro5469_08_ge_c03.indd 313 08052021 1358 314 chapter 3 transport layer that try to determine tcps sending rate rate more quickly than classic tcp, use a delaybased approach or explicit congestion notification from the network rather than a lossbased approach to determine tcps sending rate. we also examined in some depth the impact of tcp connection establishment and slow start on latency. we observed that in many important scenarios, connection establishment and slow start significantly contribute to endtoend delay. we emphasize once more that while tcp congestion control has evolved over the years, it remains an area of intensive research and will likely continue to evolve in the upcoming years. to wrap up this chapter, in section 3.8, we studied recent developments in implementing many of the transport layers functionsreliable data transfer, congestion control, connection establishment, and morein the application layer using the quic protocol. in chapter 1, we said that a computer network can be partitioned into the network edge and the network core. the network edge covers everything that happens in the end systems. having now covered the application layer and the t ransport layer, our discussion of the network edge is complete. it is time to explore the network core! this journey begins in the next two chapters, where well study the network layer, and continues into chapter 6, where well study the
link layer. homework problems and questions chapter 3 review questions sections 3.13.3 r1. suppose the network layer provides the following service. the network layer in the source host accepts a segment of maximum size 1,200 bytes and a destination host address from the transport layer. the network layer then guarantees to deliver the segment to the transport layer at the destination host. suppose many network application processes can be running at the destination host. a. design the simplest possible transportlayer protocol that will get applica tion data to the desired process at the destination host. assume the operating system in the destination host has assigned a 4byte port number to each running application process. b. modify this protocol so that it provides a return address to the destination process. c. in your protocols, does the transport layer have to do anything in the core of the computer network? m03_kuro5469_08_ge_c03.indd 314 08052021 1358 r2. consider a planet where everyone belongs to a family of six, every family lives in its own house, each house has a unique address, and each person in a given house has a unique name. suppose this planet has a mail service that delivers letters from source house to destination house. the mail service requires that 1 the letter be in an envelope, and that 2 the address of the destination house and nothing more be clearly written on the envelope. suppose each family has a delegate family member who collects and distributes letters for the other family members. the letters do not necessarily provide any indication of the recipients of the letters. a. using the solution to problem r1 above as inspiration, describe a protocol that the delegates can use to deliver letters from a sending family member to a receiving family member. b. in your protocol, does the mail service ever have to open the envelope and examine the letter in order to provide its service? r3. how is a udp socket fully identified? what about a tcp socket? what is the difference between the full identification of both sockets? r4. describe why an application developer might choose to run an application over udp rather than tcp. r5. why is it that voice and video traffic is often sent over tcp rather than udp in todays internet? hint the answer we are looking for has nothing to do with tcps congestioncontrol mechanism. r6. is it possible for an application to enjoy reliable data transfer even when the application runs over udp? if so, how? r7. suppose a process in host c has a udp socket with port number 6789. suppose both host a and host b each send a udp segment to host c with destination port number 6789. will both of these segments be directed to the same socket at host c? if so, how will the process at host c know that these two segments originated from two different hosts? r8. suppose that a web server runs in host c on port 80.
suppose this web server uses persistent connections, and is currently receiving requests from two different hosts, a and b. are all of the requests being sent through the same socket at host c? if they are being passed through different sockets, do both of the sockets have port 80? discuss and explain. section 3.4 r9. in our rdt protocols, why did we need to introduce sequence numbers? r10. in our rdt protocols, why did we need to introduce timers?homework problems and questions 315 m03_kuro5469_08_ge_c03.indd 315 08052021 1358 316 chapter 3 transport layer r11. suppose that the roundtrip delay between sender and receiver is constant and known to the sender. would a timer still be necessary in protocol rdt 3.0, assuming that packets can be lost? explain. r12. visit the gobackn interactive animation at the companion website. a. have the source send five packets, and then pause the animation before any of the five packets reach the destination. then kill the first packet and resume the animation. describe what happens. b. repeat the experiment, but now let the first packet reach the destination and kill the first acknowledgment. describe again what happens. c. finally, try sending six packets. what happens? r13. repeat r12, but now with the selective repeat interactive animation. how are selective repeat and gobackn different? section 3.5 r14. true or false? a. host a is sending host b a large file over a tcp connection. assume host b has no data to send host a. host b will not send acknowledgments to host a because host b cannot piggyback the acknowledgments on data. b. the size of the tcp rwnd never changes throughout the duration of the connection. c. suppose host a is sending host b a large file over a tcp connection. the number of unacknowledged bytes that a sends cannot exceed the size of the receive buffer. d. suppose host a is sending a large file to host b over a tcp connection. if the sequence number for a segment of this connection is m, then the sequence number for the subsequent segment will necessarily be m1. e. the tcp segment has a field in its header for rwnd. f. suppose that the last samplertt in a tcp connection is equal to 1 sec. the current value of timeoutinterval for the connection will necessarily be √∫ 1 sec. g. suppose host a sends one segment with sequence number 38 and 4 bytes of data over a tcp connection to host b. in this same segment, the acknowledgment number is necessarily 42. r15. suppose host a sends two tcp segments back to back to host b over a tcp connection. the first segment has sequence number 90; the second has sequence number 110. a. how much data is in the first segment? b. suppose that the first segment is lost but the second segment arrives at b. in the acknowledgment that host b sends to host a, what will be the acknowledgment number? m03_kuro5469_08_ge_c03.indd 316 08052021 1358
problems 317 r16. consider the telnet example discussed in section 3.5. a few seconds after the user types the letter c, the user types the letter r. after typing the letter r, how many segments are sent, and what is put in the sequence number and acknowledgment fields of the segments? section 3.7 r17. consider two hosts, a and b, transmitting a large file to a server c, over a bottleneck link with rate r. to transfer the file, the hosts use tcp with the same parameters including mss and rtt and start their transmissions at the same time. host a uses a single tcp connection for the entire file, while host b uses 9 simultaneous tcp connections, each for a portion i.e., a chunk of the file. what is the overall transmission rate achieved by each host at the beginning of the file transfer? is this situation fair? r18. true or false? consider congestion control in tcp. when the timer expires at the sender, the value of ssthresh is set to one half of its previous value. r19. according to the discussion of tcp splitting in the sidebar in section 3.7, the response time with tcp splitting is approximately 4rttferttbe processing time, as opposed to 4rtt processing time when a direct connection is used. assume that rtt be is 0.5rtt. for what values of rttfe does tcp splitting have a shorter delay than a direct connection? problems p1. suppose client a requests a web page from server s through http and its socket is associated with port 33000. a. what are the source and destination ports for the segments sent from a to s? b. what are the source and destination ports for the segments sent from s to a? c. can client a contact to server s using udp as the transport protocol? d. can client a request multiple resources in a single tcp connection? p2. consider figure 3.5.a. let us assume the following change at b we want to access an ftp server from host a. what port number should be used to replace port 80? b. would there be an error if the right process of c used port number 8080? c. what are the source and destination network and port values in the segments flowing from the server back to the clients processes? p3. udp and tcp use 1s complement for their checksums. suppose you have the following three 16 bit words 0101001101100110; 0111010010110100; 0000110111000001. what is the 1s complement of the sum of these words? show all work. why is it that udp offers a checksum? with the 1s complement scheme, how does the receiver detect errors? describe how a single bit flip can be detected. m03_kuro5469_08_ge_c03.indd 317 08052021 1358 318 chapter 3 transport layer p4. assume that a host receives a udp segment with 01011101 11110010 we separated the values of each byte with a space for clarity as the checksum. the host adds the 16bit words over all necessary fields excluding the
checksum and obtains the value 00110010 00001101. is the segment considered correctly received or not? what does the receiver do? p5. suppose that the udp receiver computes the internet checksum for the received udp segment and finds that it matches the value carried in the checksum field. can the receiver be absolutely certain that no bit errors have occurred? explain. p6. consider our motivation for correcting protocol rdt2.1. show that the receiver, shown in figure 3.60, when operating with the sender shown in figure 3.11, can lead the sender and receiver to enter into a deadlock state, where each is waiting for an event that will never occur. p7. in protocol rdt3.0, the ack packets flowing from the receiver to the sender do not have sequence numbers although they do have an ack field that contains the sequence number of the packet they are acknowledging. why is it that our ack packets do not require sequence numbers? wait for 0 from belowrdt_rcvrcvpkt corruptrcvpkt has_seq0rcvpkt compute chksum make_pktsndpkt,nak,chksum udt_sendsndpktrdt_rcvrcvpkt corruptrcvpkt has_seq1rcvpkt compute chksum make_pktsndpkt,nak,chksum udt_sendsndpkt rdt_rcvrcvpkt notcorruptrcvpkt has_seq1rcvpkt extractrcvpkt,data deliver_datadata compute chksum make_pktsendpkt,ack,chksum udt_sendsndpktrdt_rcvrcvpkt notcorruptrcvpkt has_seq0rcvpkt extractrcvpkt,data deliver_datadatacompute chksummake_pktsendpkt,ack,chksum udt_sendsndpkt wait for 1 from below figure 3.60 an incorrect receiver for protocol rdt 2.1 m03_kuro5469_08_ge_c03.indd 318 08052021 1358 problems 319 p8. draw the fsm for the receiver side of protocol rdt3.0. p9. give a trace of the operation of protocol rdt3.0 when data packets and acknowledgment packets are garbled. your trace should be similar to that used in figure 3.16. p10. consider a channel that can lose packets but has a maximum delay that is known. modify protocol rdt2.1 to include sender timeout and retransmit. informally argue why your protocol can communicate correctly over this channel. p11. consider the rdt2.2 receiver in figure 3.14, and the creation of a new packet in the selftransition i.e., the transition from the state back to itself in the waitfor0frombelow and the waitfor1frombelow states sndpktmake_pktack,1,checksum and sndpktmake_pktack,0,checksum. would the protocol work correctly if this action were removed from the selftransition in the waitfor1frombelow state? justify your answer. what if this event were removed from the selftransition in the waitfor0frombelow state? hint in this latter case, consider what would happen if the first sendertoreceiver packet were corrupted. p12. the sender side of rdt3.0 simply ignores that is, takes no action on all received packets that are either in error or have the wrong value in the acknum field of an acknowledgment packet. suppose that in such circumstances, rdt3.0 were simply to retransmit the current data packet. would the protocol still work? hint consider what would happen if there were only bit errors; there are no packet losses but premature timeouts can occur. consider how many times the nth packet is sent, in the limit as n approaches infinity. p13. assume host a is streaming a video from server b using udp. also assume that the network suddenly becomes very congested while host a is seeing the video. is there any way to handle this situation with
udp? what about with tcp? is there any other option? p14. consider a stopandwait datatransfer protocol that provides error check ing and retransmissions but uses only negative acknowledgments. assume that negative acknowledgments are never corrupted. would such a protocol work over a channel with bit errors? what about over a lossy channel with bit errors? m03_kuro5469_08_ge_c03.indd 319 08052021 1358 320 chapter 3 transport layer p15. consider the crosscountry example shown in figure 3.17, with a 10 gbps link. how big would the window size have to be for the channel utilization to be greater than 98 percent? suppose that the size of a packet is 1,500 bytes, including header fields and data. p16. suppose an application uses rdt 3.0 as its transport layer protocol. as the stopandwait protocol has very low channel utilization shown in the crosscountry example, the designers of this application let the receiver keep sending back a number more than two of alternating ack 0 and ack 1 even if the corresponding data have not arrived at the receiver. would this application design increase the channel utilization? why? are there any potential problems with this approach? explain. p17. consider two network entities, a and b, which are connected by a perfect bidirectional channel i.e., any message sent will be received correctly; the channel will not corrupt, lose, or reorder packets. a and b are to deliver data messages to each other in an alternating manner first, a must deliver a message to b, then b must deliver a message to a, then a must deliver a message to b and so on. if an entity is in a state where it should not attempt to deliver a message to the other side, and there is an event like rdt_senddata call from above that attempts to pass data down for transmission to the other side, this call from above can simply be ignored with a call to rdt_unable_to_senddata, which informs the higher layer that it is currently not able to send data. note this simplifying assumption is made so you dont have to worry about buffering data. draw a fsm specification for this protocol one fsm for a, and one fsm for b!. note that you do not have to worry about a reliability mechanism here; the main point of this question is to create a fsm specification that reflects the synchronized behavior of the two entities. you should use the following events and actions that have the same meaning as protocol rdt1.0 in figure 3.9 rdt_senddata, packet make_pktdata, udt_sendpacket, rdt_rcvpacket, extract packet,data, deliver_datadata. make sure your protocol reflects the strict alternation of sending between a and b. also, make sure to indicate the initial states for a and b in your fsm descriptions. p18. in the generic sr protocol that we studied in section 3.4.4, the sender transmits a message as soon as it is available if it is in the window without waiting for an acknowledgment. suppose now that we want an sr protocol that sends
messages two at a time. that is, the sender will send a pair of messages and will send the next pair of messages only when it knows that both messages in the first pair have been received correctly. suppose that the channel may lose messages but will not corrupt or reorder messages. design an errorcontrol protocol for the unidirectional reliable m03_kuro5469_08_ge_c03.indd 320 08052021 1358 problems 321 transfer of messages. give an fsm description of the sender and receiver. describe the format of the packets sent between sender and receiver, and vice versa. if you use any procedure calls other than those in section 3.4 for example, udt_send, start_timer, rdt_rcv, and so on, clearly state their actions. give an example a timeline trace of sender and receiver showing how your protocol recovers from a lost packet. p19. suppose host a and host b use a gbn protocol with window size n3 and a longenough range of sequence numbers. assume host a sends six application messages to host b and that all messages are correctly received, except for the first acknowledgment and the fifth data segment. draw a timing diagram similar to figure 3.22, showing the data segments and the acknowledgments sent along with the corresponding sequence and acknowledge numbers, respectively. p20. consider a scenario in which host a and host b want to send messages to host c. hosts a and c are connected by a channel that can lose and corrupt but not reorder messages. hosts b and c are connected by another channel independent of the channel connecting a and c with the same properties. the transport layer at host c should alternate in delivering messages from a and b to the layer above that is, it should first deliver the data from a packet from a, then the data from a packet from b, and so on. design a stopandwaitlike errorcontrol protocol for reliably transferring packets from a and b to c, with alternating delivery at c as described above. give fsm descriptions of a and c. hint the fsm for b should be essentially the same as for a. also, give a description of the packet formats used. p21. suppose we have two network entities, a and b. b has a supply of data mes sages that will be sent to a according to the following conventions. when a gets a request from the layer above to get the next data d message from b, a must send a request r message to b on the atob channel. only when b receives an r message can it send a data d message back to a on the btoa channel. a should deliver exactly one copy of each d message to the layer above. r messages can be lost but not corrupted in the atob channel; d messages, once sent, are always delivered correctly. the delay along both channels is unknown and variable. design give an fsm description of a protocol that incorporates the appropriate mechanisms to compensate
for the lossprone atob channel and implements message passing to the layer above at entity a, as discussed above. use only those mechanisms that are absolutely necessary. m03_kuro5469_08_ge_c03.indd 321 08052021 1358 322 chapter 3 transport layer p22. consider the gbn protocol with a sender window size of 4 and a sequence number range of 1,024. suppose that at time t, the next inorder packet that the receiver is expecting has a sequence number of k. assume that the medium does not reorder messages. answer the following questions a. what are the possible sets of sequence numbers inside the senders window at time t? justify your answer. b. what are all possible values of the ack field in all possible messages currently propagating back to the sender at time t? justify your answer. p23. give one example where buffering outoforder segments would significantly improve the throughput of a gbn protocol. p24. consider a scenario where the three hosts a, b, and c are connected as a ring a to b, b to c, and c to a. assume that a and c run protocol rdt3.0, whereas b simply relays all messages received from a to c. a. does this arrangement enable reliable delivery of messages from a to c? b. can b tell if a certain message has been correctly received by a? p25. we have said that an application may choose udp for a transport protocol because udp offers finer application control than tcp of what data is sent in a segment and when. why does an application have more control of what data is sent in a segment?why does an application have more control on when the segment is sent? p26. consider transferring an enormous file of l bytes from host a to host b. assume an mss of 536 bytes. a. what is the maximum value of l such that tcp sequence numbers are not exhausted? recall that the tcp sequence number field has 4 bytes. b. for the l you obtain in a, find how long it takes to transmit the file. assume that a total of 66 bytes of transport, network, and datalink header are added to each segment before the resulting packet is sent out over a 155 mbps link. ignore flow control and congestion control so a can pump out the segments back to back and continuously. p27. host a and b are communicating over a tcp connection following rfc 5681. host b has already received from a all bytes up through byte 96. suppose host a then sends two segments to host b backtoback. the first m03_kuro5469_08_ge_c03.indd 322 08052021 1358 problems 323 and the second segments contain 40 and 80 bytes of data, respectively. in the first segment, the sequence number is 97, the source port number is 302, and the destination port number is 80. host b sends an acknowledgment whenever it receives a segment from host a. a. in the second segment sent from host a to b, what are the
sequence num ber, source port number, and destination port number? b. if the first segment arrives before the second segment, in the acknowledgment of the first arriving segment, what is the acknowledgment number, the source port number, and the destination port number? c. if the second segment arrives before the first segment, in the acknowledgment of the first arriving segment, what is the acknowledgment number? d. suppose the two segments sent by a arrive in order at b. the first acknowledgment arrives after the first timeout interval. what is the sequence number of the next segment that a will transmit? p28. host a and b are directly connected with a 10 gbps link. there is one tcp connection between the two hosts, and host a is sending to host b an enormous file over this connection. host a can send its application data into its tcp socket at a rate as high as 1 gbps, but host b can read out of its tcp receive buffer at a maximum rate of 600 mbps. describe the effect of tcp flow control. p29. syn cookies were discussed in section 3.5.6. a. why is it necessary for the server to use a special initial sequence number in the synack? b. suppose an attacker knows that a target host uses syn cookies. can the attacker create halfopen or fully open connections by simply sending an ack packet to the target? why or why not? c. suppose an attacker collects a large amount of initial sequence numbers sent by the server. can the attacker cause the server to create many fully open connections by sending acks with those initial sequence numbers? why? p30. consider the network shown in scenario 2 in section 3.6.1. suppose both sending hosts a and b have some fixed timeout values. a. argue that increasing the size of the finite buffer of the router might pos sibly decrease the throughput lout. b. now suppose both hosts dynamically adjust their timeout values like what tcp does based on the buffering delay at the router. would increasing the buffer size help to increase the throughput? why? m03_kuro5469_08_ge_c03.indd 323 08052021 1358 324 chapter 3 transport layer p31. suppose that the five measured samplertt values see section 3.5.3 are 112 ms, 140 ms, 110 ms, 90 ms, and 90 ms. compute the estimatedrtt after each of these samplertt values is obtained, using a value of Œ± 0.125 and assuming that the value of estimatedrtt was 120 ms just before the first of these five samples were obtained. compute also the devrtt after each sample is obtained, assuming a value of b0.25 and assuming the value of devrtt was 6 ms just before the first of these five samples was obtained. finally, compute the tcp timeoutinterval after each of these samples is obtained. p32. consider the tcp procedure for estimating rtt. suppose that Œ± 0.1. let samplertt1 be the most recent sample rtt, let samplertt2 be the next most recent sample rtt, and so on. a.
for a given tcp connection, suppose four acknowledgments have been returned with corresponding sample rtts samplertt4, samplertt3, samplertt2, and samplertt1. express estimatedrtt in terms of the four sample rtts. b. generalize your formula for n sample rtts. c. for the formula in part b let n approach infinity. comment on why this averaging procedure is called an exponential moving average. p33. in section 3.5.3, we discussed tcps estimation of rtt. why do you think tcp avoids measuring the samplertt for retransmitted segments? p34. what is the relationship between the variable sendbase in section 3.5.4 and the variable lastbytercvd in section 3.5.5? p35. what is the relationship between the variable lastbytercvd in section 3.5.5 and the variable y in section 3.5.4? p36. in section 3.5.4, we saw that tcp waits until it has received three dupli cate acks before performing a fast retransmit. why do you think the tcp designers chose not to perform a fast retransmit after the first duplicate ack for a segment is received? p37. compare gbn, sr, and tcp no delayed ack. assume that the timeout values for all three protocols are sufficiently long such that five consecutive data segments and their corresponding acks can be received if not lost in the channel by the receiving host host b and the sending host host a respectively. suppose host a sends five data segments to host b, and the second segment sent from a is lost. in the end, all five data segments have been correctly received by host b. a. how many segments has host a sent in total and how many acks has host b sent in total? what are their sequence numbers? answer this question for all three protocols. m03_kuro5469_08_ge_c03.indd 324 08052021 1358 b. if the timeout values for all three protocol are much longer than 5 rtt, then which protocol successfully delivers all five data segments in shortest time interval? p38. in our description of tcp in figure 3.53, the value of the threshold, ssthresh, is set as ssthreshcwnd2 in several places and ssthresh value is referred to as being set to half the window size when a loss event occurred. must the rate at which the sender is sending when the loss event occurred be approximately equal to cwnd segments per rtt? explain your answer. if your answer is no, can you suggest a different manner in which ssthresh should be set? p39. consider figure 3.46b. if lin increases beyond r2, can lout increase beyond r3? explain. now consider figure 3.46c. if lin increases beyond r2, can lout increase beyond r4 under the assumption that a packet will be forwarded twice on average from the router to the receiver? explain. p40. consider figure 3.61. assuming tcp reno is the protocol experiencing the behavior shown above, answer the following questions. in all cases, you should provide a short discussion justifying your answer. a. identify the intervals of time when tcp slow start is operating. b. identify the intervals of time when tcp congestion avoidance
is operating. c. after the 16th transmission round, is segment loss detected by a triple duplicate ack or by a timeout? d. after the 22nd transmission round, is segment loss detected by a triple duplicate ack or by a timeout? 0 02 46 81 012 transmission round14161820222426510152025congestion window size segments30354045 figure 3.61 tcp window size as a function of timeproblems 325 examining the behavior of tcpvideonote m03_kuro5469_08_ge_c03.indd 325 08052021 1358 326 chapter 3 transport layer e. what is the initial value of ssthresh at the first transmission round? f. what is the value of ssthresh at the 22nd transmission round? g. during what transmission round is the 70th segment sent? h. assuming a packet loss is detected after the 26th round by the receipt of a triple duplicate ack, what will be the values of the congestion window size and of ssthresh? i. suppose tcp tahoe is used instead of tcp reno, and assume that triple duplicate acks are received at the 10th round. what are the ssthresh and the congestion window size at the 11th round? j. again, suppose tcp tahoe is used, and there is a timeout event at the 22nd round. how many packets have been sent out from the 17th round till the 22nd round, inclusive? p41. refer to figure 3.55, which illustrates the convergence of tcps aimd algorithm. suppose that instead of a multiplicative decrease, tcp decreased the window size by a constant amount. would the resulting aiad algorithm converge to an equal share algorithm? justify your answer using a diagram similar to figure 3.55. p42. in section 3.5.4, we discussed the doubling of the timeout interval after a timeout event. this mechanism is a form of congestion control. why does tcp need a windowbased congestioncontrol mechanism as studied in section 3.7 in addition to this doublingtimeoutinterval mechanism? p43. host a is sending an enormous file to host b over a tcp connection. over this connection there is never any packet loss and the timers never expire. denote the transmission rate of the link connecting host a to the internet by r bps. suppose that the process in host a is capable of sending data into its tcp socket at a rate s bps, where s10r. further suppose that the tcp receive buffer is large enough to hold the entire file, and the send buffer can hold only one percent of the file. what would prevent the process in host a from continuously passing data to its tcp socket at rate s bps? tcp flow control? tcp congestion control? or something else? elaborate. p44. consider sending a large file from a host to another over a tcp connection that has no loss. a. suppose tcp uses aimd for its congestion control without slow start. assuming cwnd increases by 1 mss every time a batch of acks is received and assuming approximately constant roundtrip times, how long does it take for cwnd increase from 6 mss to 12 mss assuming no loss events? b. what is
the average throughput in terms of mss and rtt for this connection up through time 6 rtt? m03_kuro5469_08_ge_c03.indd 326 08052021 1358 p45. consider figure 3.54. suppose that at t3, the sending rate at which conges tion loss next occurs drops to 0.75wmax unbeknownst to the tcp senders, of course. show the evolution of both tcp reno and tcp cubic for two more rounds each hint note that the times at which tcp reno and tcp cubic react to congestion loss may not be the same anymore. p46. consider figure 3.54 again. suppose that at t 3, the sending rate at which conges tion loss next occurs increases to 1.5wmax. show the evolution of both tcp reno and tcp cubic for at two more rounds each hint see the hint in p45. p47. recall the macroscopic description of tcp throughput. in the period of time from when the connections rate varies from w2 ? rtt to wrtt, only one packet is lost at the very end of the period. a. show that the loss rate fraction of packets lost is equal to lloss rate1 3 8 w23 4 w b. use the result above to show that if a connection has loss rate l, then its average rate is approximately given by 1.22mss rtt 2l p48. consider that only a single tcp reno connection uses one 54 mbps wire less link which does not buffer any data. suppose that this link is the only congested link between the sending and receiving hosts. assume that the tcp sender has a huge file to send to the receiver and the receivers receive buffer is much larger than the congestion window. we also make the following assumptions each tcp segment size is 536 bytes; the twoway propagation delay of this connection is 6 msec; and this tcp connection is always in congestion avoidance phase, that is, ignore slow start. a. what is the maximum window size in segments that this tcp connec tion can achieve? b. what is the average window size in segments and average throughput in bps of this tcp connection? c. how long would it take for this tcp connection to reach its maximum window again after recovering from a packet loss? p49. consider the scenario described in the previous problem. suppose that the 10 mbps link can buffer a finite number of segments. argue that in order for the link to always be busy sending data, we would like to choose a buffer size that is at least the product of the link speed c and the twoway propagation delay between the sender and the receiver.problems 327 m03_kuro5469_08_ge_c03.indd 327 08052021 1358 328 chapter 3 transport layer p50. repeat problem 48, but replacing the 54 mbps link with a 100 gbps link and an rtt of 60 ms. note that in your answer to part c, you will realize that it takes a very long time for the congestion window size to reach its maximum window size after recovering from a
packet loss. can you consider solutions for this? p51. let t measured by rtt denote the time interval that a tcp connection takes to increase its congestion window size from w2 to w, where w is the maximum congestion window size. argue that t is a function of tcps average throughput. p52. consider a simplified tcps aimd algorithm where the congestion window size is measured in number of segments, not in bytes. in additive increase, the congestion window size increases by one segment in each rtt. in multiplicative decrease, the congestion window size decreases by half if the result is not an integer, round down to the nearest integer. suppose that two tcp connections, c 1 and c2, share a single congested link of speed 30 segments per second. assume that both c1 and c2 are in the congestion avoidance phase. connection c1s rtt is 50 msec and connection c2s rtt is 100 msec. assume that when the data rate in the link exceeds the links speed, all tcp connections experience data segment loss. a. if both c 1 and c2 at time t0 have a congestion window of 10 segments, what are their congestion window sizes after 1000 msec? b. in the long run, will these two connections get the same share of the band width of the congested link? explain. p53. consider the network described in the previous problem. now suppose that the two tcp connections, c1 and c2, have the same rtt of 100 msec. suppose that at time t 0, c1s congestion window size is 15 segments but c2s congestion window size is 10 segments. a. what are their congestion window sizes after 2200 msec? b. in the long run, will these two connections get about the same share of the bandwidth of the congested link? c. we say that two connections are synchronized, if both connections reach their maximum window sizes at the same time and reach their minimum window sizes at the same time. in the long run, will these two connections get synchronized eventually? if so, what are their maximum window sizes? d. will this synchronization help to improve the utilization of the shared link? why? sketch some idea to break this synchronization. p54. consider a modification to tcps congestion control algorithm. instead of additive increase, we can use multiplicative increase. a tcp sender increases its window size by a small positive constant a 06a61 whenever it receives a valid ack. find the functional relationship between loss rate l m03_kuro5469_08_ge_c03.indd 328 08052021 1358 and maximum congestion window w. argue that for this modified tcp, regardless of tcps average throughput, a tcp connection always spends the same amount of time to increase its congestion window size from w2 to w. p55. in our discussion of tcp futures in section 3.7, we noted that to achieve a throughput of 10 gbps, tcp could only tolerate a segment loss probability of 21010 or equivalently, one loss event for every 5,000,000,000 segments. show the derivation for the
values of 21010 1 out of 5,000,000 for the rtt and mss values given in section 3.7. if tcp needed to support a 100 gbps connection, what would the tolerable loss be? p56. in our discussion of tcp congestion control in section 3.7, we implicitly assumed that the tcp sender always had data to send. consider now the case that the tcp sender sends a large amount of data and then goes idle since it has no more data to send at t 1. tcp remains idle for a relatively long period of time and then wants to send more data at t2. what are the advantages and disadvantages of having tcp use the cwnd and ssthresh values from t1 when starting to send data at t2? what alternative would you recommend? why? p57. in this problem, we investigate whether either udp or tcp provides a degree of endpoint authentication. a. consider a server that receives a request within a udp packet and responds to that request within a udp packet for example, as done by a dns server. if a client with ip address x spoofs its address with address y, where will the server send its response? b. suppose a server receives a syn with ip source address y, and after responding with a synack, receives an ack with ip source address y with the correct acknowledgment number. assuming the server chooses a random initial sequence number and there is no maninthemiddle, can the server be certain that the client is indeed at y and not at some other address x that is spoofing y? p58. in this problem, we consider the delay introduced by the tcp slowstart phase. consider a client and a web server directly connected by one link of rate r. suppose the client wants to retrieve an object whose size is exactly equal to 15 s, where s is the maximum segment size mss. denote the roundtrip time between client and server as rtt assumed to be constant. ignoring protocol headers, determine the time to retrieve the object including tcp connection establishment when a. 4 sr7srrtt72sr b. srrtt74 sr c. sr7rtt.problems 329 m03_kuro5469_08_ge_c03.indd 329 08052021 1358 330 chapter 3 transport layer programming assignments implementing a reliable transport protocol in this laboratory programming assignment, you will be writing the sending and receiving transportlevel code for implementing a simple reliable data transfer protocol. there are two versions of this lab, the alternatingbitprotocol version and the gbn version. this lab should be funyour implementation will differ very little from what would be required in a realworld situation. since you probably dont have standalone machines with an os that you can modify, your code will have to execute in a simulated hardwaresoftware environment. however, the programming interface provided to your routinesthe code that would call your entities from above and from belowis very close to what is done in an actual unix environment. indeed, the software interfaces described in this programming assignment are much more realistic than the
infinite loop senders and receivers that many texts describe. stopping and starting timers are also simulated, and timer interrupts will cause your timer handling routine to be activated. the full lab assignment, as well as code you will need to compile with your own code, are available at this books web site www.pearsonglobaleditions.com. wireshark lab exploring tcp in this lab, youll use your web browser to access a file from a web server. as in earlier wireshark labs, youll use wireshark to capture the packets arriving at your computer. unlike earlier labs, youll also be able to download a wiresharkreadable packet trace from the web server from which you downloaded the file. in this server trace, youll find the packets that were generated by your own access of the web server. youll analyze the client and serverside traces to explore aspects of tcp. in particular, youll evaluate the performance of the tcp connection between your computer and the web server. youll trace tcps window behavior, and infer packet loss, retransmission, flow control and congestion control behavior, and estimated roundtrip time. as is the case with all wireshark labs, the full description of this lab is available at this books web site, www.pearsonglobaleditions.com. wireshark lab exploring udp in this short lab, youll do a packet capture and analysis of your favorite application that uses udp for example, dns or a multimedia application such as skype. as we learned in section 3.3, udp is a simple, nofrills transport protocol. in this lab, youll investigate the header fields in the udp segment as well as the checksum calculation. as is the case with all wireshark labs, the full description of this lab is available at this books web site, www.pearsonglobaleditions.com. m03_kuro5469_08_ge_c03.indd 330 08052021 1358 331please describe one or two of the most exciting projects you have worked on during your career. what were the biggest challenges? school teaches us lots of ways to find answers. in every interesting problem ive worked on, the challenge has been finding the right question. when mike karels and i started looking at tcp congestion, we spent months staring at protocol and packet traces asking why is it failing?. one day in mikes office, one of us said the reason i cant figure out why it fails is because i dont understand how it ever worked to begin with. that turned out to be the right question and it forced us to figure out the ack clocking that makes tcp work. after that, the rest was easy. more generally, where do you see the future of networking and the internet? for most people, the web is the internet. networking geeks smile politely since we know the web is an application running over the internet but what if theyre right? the internet is about enabling conversations between pairs of hosts. the web is about distributed infor mation production and consumption. information propagation is a very general view of communication of which pairwise conversation is a tiny subset. we need
to move into the larger tent. networking today deals with broadcast media radios, pons, etc. by pretending its a pointtopoint wire. thats massively inefficient. terabitspersecond of data are being exchanged all over the world via thumb drives or smart phones but we dont know how to treat that as networking. isps are busily setting up caches and cdns to scalably distribute video and audio. caching is a necessary part of the solution but theres no part of todays networkingfrom information, queuing or traffic theory down to the internet protocol van jacobson works at google and was previously a research fellow at parc. prior to that, he was cofounder and chief scientist of packet design. before that, he was chief scientist at cisco. before joining cisco, he was head of the network research group at lawrence berkeley national laboratory and taught at uc berkeley and stanford. van received the acm sigcomm award in 2001 for outstanding lifetime contribution to the field of communication networks and the ieee kobayashi award in 2002 for contributing to the understanding of network congestion and developing congestion control mechanisms that enabled the successful scaling of the internet. he was elected to the u.s. national academy of engineering in 2004.van jacobsonan interview with... courtesy of van jacobson m03_kuro5469_08_ge_c03.indd 331 08052021 1358 332 specsthat tells us how to engineer and deploy it. i think and hope that over the next few years, networking will evolve to embrace the much larger vision of communication that underlies the web. what people inspired you professionally? when i was in grad school, richard feynman visited and gave a colloquium. he talked about a piece of quantum theory that id been struggling with all semester and his explanation was so simple and lucid that what had been incomprehensible gibberish to me became obvious and inevitable. that ability to see and convey the simplicity that underlies our complex world seems to me a rare and wonderful gift. what are your recommendations for students who want careers in computer science and networking? its a wonderful fieldcomputers and networking have probably had more impact on society than any invention since the book. networking is fundamentally about connecting stuff, and studying it helps you make intellectual connections ant foraging bee dances demonstrate protocol design better than rfcs, traffic jams or people leaving a packed stadium are the essence of congestion, and students finding flights back to school in a postthanksgiving blizzard are the core of dynamic routing. if youre interested in lots of stuff and want to have an impact, its hard to imagine a better field. m03_kuro5469_08_ge_c03.indd 332 08052021 1358 333 333we learned in the previous chapter that the transport layer provides various forms of processtoprocess communication by relying on the network layers hosttohost communication service. we also learned that the transport layer does so without any knowledge about how the network layer actually implements this service. so perhaps youre now wondering, whats under the hood of the hosttohost communication service, what makes it tick? in
this chapter and the next, well learn exactly how the network layer can pro vide its hosttohost communication service. well see that unlike the transport and application layers, there is a piece of the network layer in each and every host and router in the network. because of this, networklayer protocols are among the most challenging and therefore among the most interesting! in the protocol stack. since the network layer is arguably the most complex layer in the protocol stack, well have a lot of ground to cover here. indeed, there is so much to cover that we cover the network layer in two chapters. well see that the network layer can be decomposed into two interacting parts, the data plane and the control plane. in chapter 4, well first cover the data plane functions of the network layerthe perrouter functions in the network layer that determine how a datagram that is, a networklayer packet arriving on one of a routers input links is forwarded to one of that routers output links. well cover both traditional ip forwarding where forwarding is based on a datagrams destination address and generalized forwarding where forwarding and other functions may be performed using values in several different fields in the datagrams header. well study the ipv4 and ipv6 protocols and addressing in detail. in chapter 5, well cover the control plane functions of the network layerthe networkwide logic that controls how a datagram is routed the network layer data plane4chapter m04_kuro5469_08_ge_c04.indd 333 08052021 1406 334 chapter 4 the network layer data plane among routers along an endtoend path from the source host to the destination host. well cover routing algorithms, as well as routing protocols, such as ospf and bgp, that are in widespread use in todays internet. traditionally, these controlplane routing protocols and dataplane forwarding functions have been implemented together, monolithically, within a router. softwaredefined networking sdn explicitly separates the data plane and control plane by implementing these control plane functions as a separate service, typically in a remote controller. well also cover sdn controllers in chapter 5. this distinction between dataplane and controlplane functions in the network layer is an important concept to keep in mind as you learn about the network layer it will help structure your thinking about the network layer and reflects a modern view of the network layers role in computer networking. 4.1 overview of network layer figure 4.1 shows a simple network with two hosts, h1 and h2, and several routers on the path between h1 and h2. lets suppose that h1 is sending information to h2, and consider the role of the network layer in these hosts and in the intervening routers. the network layer in h1 takes segments from the transport layer in h1, encapsulates each segment into a datagram, and then sends the datagrams to its nearby router, r1. at the receiving host, h2, the network layer receives the datagrams from its nearby router r2, extracts the transportlayer segments, and delivers the segments up
to the transport layer at h2. the primary dataplane role of each router is to forward datagrams from its input links to its output links; the primary role of the network control plane is to coordinate these local, perrouter forwarding actions so that datagrams are ultimately transferred endtoend, along paths of routers between source and destination hosts. note that the routers in figure 4.1 are shown with a truncated protocol stack, that is, with no upper layers above the network layer, because routers do not run application and transportlayer protocols such as those we examined in chapters 2 and 3. 4.1.1 forwarding and routing the data and control planes the primary role of the network layer is deceptively simpleto move packets from a sending host to a receiving host. to do so, two important networklayer functions can be identified forwarding. when a packet arrives at a routers input link, the router must move the packet to the appropriate output link. for example, a packet arriving from host h1 to router r1 in figure 4.1 must be forwarded to the next router on a path to h2. as we will see, forwarding is but one function albeit the most m04_kuro5469_08_ge_c04.indd 334 08052021 1406 4.1 over view of network layer 335 link physicalnetwork enterprise network link physicalapplication transport network end system h2router r1 router r2link physicalapplication transport network end system h1 link physicalnetworklink physicalnetwork link physicalnetwork link physicalnetwork figure 4.1 the network layer m04_kuro5469_08_ge_c04.indd 335 08052021 1406 336 chapter 4 the network layer data plane common and important one! implemented in the data plane. in the more general case, which well cover in section 4.4, a packet might also be blocked from exiting a router for example, if the packet originated at a known malicious sending host, or if the packet were destined to a forbidden destination host, or might be duplicated and sent over multiple outgoing links. routing. the network layer must determine the route or path taken by packets as they flow from a sender to a receiver. the algorithms that calculate these paths are referred to as routing algorithms. a routing algorithm would determine, for example, the path along which packets flow from h1 to h2 in figure 4.1. routing is implemented in the control plane of the network layer. the terms forwarding and routing are often used interchangeably by authors dis cussing the network layer. well use these terms much more precisely in this book. forwarding refers to the routerlocal action of transferring a packet from an input link interface to the appropriate output link interface. forwarding takes place at very short timescales typically a few nanoseconds, and thus is typically implemented in hardware. routing refers to the networkwide process that determines the endtoend paths that packets take from source to destination. routing takes place on much longer timescales typically seconds, and as we will see is often implemented in software. using our driving analogy, consider the trip from pennsylvania to florida undertaken by our traveler back in
section 1.3.1. during this trip, our driver passes through many interchanges en route to florida. we can think of forwarding as the process of getting through a single interchange a car enters the interchange from one road and determines which road it should take to leave the interchange. we can think of routing as the process of planning the trip from pennsylvania to florida before embarking on the trip, the driver has consulted a map and chosen one of many paths possible, with each path consisting of a series of road segments connected at interchanges. a key element in every network router is its forwarding table. a router forwards a packet by examining the value of one or more fields in the arriving packets header, and then using these header values to index into its forwarding table. the value stored in the forwarding table entry for those values indicates the outgoing link interface at that router to which that packet is to be forwarded. for example, in figure 4.2, a packet with header field value of 0110 arrives to a router. the router indexes into its forwarding table and determines that the output link interface for this packet is interface 2. the router then internally forwards the packet to interface 2. in section 4.2, well look inside a router and examine the forwarding function in much greater detail. forwarding is the key function performed by the dataplane functionality of the network layer. control plane the traditional approach but now you are undoubtedly wondering how a routers forwarding tables are configured in the first place. this is a crucial issue, one that exposes the important interplay between forwarding in data plane and routing in control plane. as shown m04_kuro5469_08_ge_c04.indd 336 08052021 1406 4.1 over view of network layer 337 in figure 4.2, the routing algorithm determines the contents of the routers forward ing tables. in this example, a routing algorithm runs in each and every router and both forwarding and routing functions are contained within a router. as well see in sections 5.3 and 5.4, the routing algorithm function in one router communicates with the routing algorithm function in other routers to compute the values for its forwarding table. how is this communication performed? by exchanging routing messages containing routing information according to a routing protocol! well cover routing algorithms and protocols in sections 5.2 through 5.4. the distinct and different purposes of the forwarding and routing functions can be further illustrated by considering the hypothetical and unrealistic, but technically feasible case of a network in which all forwarding tables are configured directly by human network operators physically present at the routers. in this case, no routing protocols would be required! of course, the human operators would need to interact with each other to ensure that the forwarding tables were configured in such a way that packets reached their intended destinations. its also likely that human configuration would be more errorprone and much slower to respond to changes in the network
topology than a routing protocol. were thus fortunate that all networks have both a forwarding and a routing function!0110local forwarding table header 0100 0110 011110013 2 21outputcontr ol plane data planerouting algorithm values in arriving packet s header 1 23 figure 4.2 routing algorithms determine values in forward tables m04_kuro5469_08_ge_c04.indd 337 08052021 1406 338 chapter 4 the network layer data plane control plane the sdn approach the approach to implementing routing functionality shown in figure 4.2with each router having a routing component that communicates with the routing component of other routershas been the traditional approach adopted by routing vendors in their products, at least until recently. our observation that humans could manually configure forwarding tables does suggest, however, that there may be other ways for controlplane functionality to determine the contents of the dataplane forwarding tables. figure 4.3 shows an alternative approach in which a physically separate, remote controller computes and distributes the forwarding tables to be used by each and every router. note that the data plane components of figures 4.2 and 4.3 are identical. in figure 4.3; however, controlplane routing functionality is separated from the 0110local forwarding table header 0100 0110011110013221outputremote controller values in arriving packet s header 1 23contr ol plane data plane figure 4.3 a remote controller determines and distributes values in forwarding tables m04_kuro5469_08_ge_c04.indd 338 08052021 1406 4.1 over view of network layer 339 physical routerthe routing device performs forwarding only, while the remote con troller computes and distributes forwarding tables. the remote controller might be implemented in a remote data center with high reliability and redundancy, and might be managed by the isp or some third party. how might the routers and the remote controller communicate? by exchanging messages containing forwarding tables and other pieces of routing information. the controlplane approach shown in figure 4.3 is at the heart of softwaredefined networking sdn, where the network is softwaredefined because the controller that computes forwarding tables and interacts with routers is implemented in software. increasingly, these software implementations are also open, that is, similar to linux os code, the code is publically available, allowing isps and networking researchers and students! to innovate and propose changes to the software that controls networklayer functionality. we will cover the sdn control plane in section 5.5. 4.1.2 network service model before delving into the network layers data plane, lets wrap up our introduction by taking the broader view and consider the different types of service that might be offered by the network layer. when the transport layer at a sending host transmits a packet into the network that is, passes it down to the network layer at the sending host, can the transport layer rely on the network layer to deliver the packet to the destination? when multiple packets are sent, will they be delivered to the transport layer in the receiving host in the order in which they were sent? will the amount of time between the sending of two sequential packet transmissions be the same as the
amount of time between their reception? will the network provide any feedback about congestion in the network? the answers to these questions and others are determined by the service model provided by the network layer. the network service model defines the characteristics of endtoend delivery of packets between sending and receiving hosts. lets now consider some possible services that the network layer could provide. these services could include guaranteed delivery. this service guarantees that a packet sent by a source host will eventually arrive at the destination host. guaranteed delivery with bounded delay. this service not only guarantees delivery of the packet, but delivery within a specified hosttohost delay bound for example, within 100 msec. inorder packet delivery. this service guarantees that packets arrive at the destination in the order that they were sent. guaranteed minimal bandwidth. this networklayer service emulates the behavior of a transmission link of a specified bit rate for example, 1 mbps between sending and receiving hosts. as long as the sending host transmits bits as part m04_kuro5469_08_ge_c04.indd 339 08052021 1406 340 chapter 4 the network layer data plane of packets at a rate below the specified bit rate, then all packets are eventually delivered to the destination host. security. the network layer could encrypt all datagrams at the source and decrypt them at the destination, thereby providing confidentiality to all transportlayer segments. this is only a partial list of services that a network layer could providethere are countless variations possible. the internets network layer provides a single service, known as besteffort service. with besteffort service, packets are neither guaranteed to be received in the order in which they were sent, nor is their eventual delivery even guaranteed. there is no guarantee on the endtoend delay nor is there a minimal bandwidth guarantee. it might appear that besteffort service is a euphemism for no service at alla network that delivered no packets to the destination would satisfy the definition of besteffort delivery service! other network architectures have defined and implemented service models that go beyond the internets besteffort service. for example, the atm network architecture black 1995 provides for guaranteed inorder delay, bounded delay, and guaranteed minimal bandwidth. there have also been proposed service model extensions to the internet architecture; for example, the intserv architecture rfc 1633 aims to provide endend delay guarantees and congestionfree communication. interestingly, in spite of these welldeveloped alternatives, the internets basic besteffort service model combined with adequate bandwidth provisioning and bandwidthadaptive applicationlevel protocols such as the dash protocol we encountered in section 2.6.2 have arguably proven to be more than good enough to enable an amazing range of applications, including streaming video services such as netflix and videooverip, realtime conferencing applications such as skype and facetime. an overview of chapter 4 having now provided an overview of the network layer, well cover the dataplane component of the network layer in the following sections in this chapter. in section 4.2, well dive down into the internal hardware operations of a router, including
input and output packet processing, the routers internal switching mechanism, and packet queuing and scheduling. in section 4.3, well take a look at traditional ip forwarding, in which packets are forwarded to output ports based on their destination ip addresses. well encounter ip addressing, the celebrated ipv4 and ipv6 protocols and more. in section 4.4, well cover more generalized forwarding, where packets may be for warded to output ports based on a large number of header values i.e., not only based on destination ip address. packets may be blocked or duplicated at the router, or may have certain header field values rewrittenall under software control. this more generalized form of packet forwarding is a key component of a modern network data plane, including the data plane in softwaredefined networks sdn. in section 4.5, well learn about middleboxes that can perform functions in addition to forwarding. m04_kuro5469_08_ge_c04.indd 340 08052021 1406 4.2 whats inside a router? 341 we mention here in passing that the terms forwarding and switching are often used interchangeably by computernetworking researchers and practitioners; well use both terms interchangeably in this textbook as well. while were on the topic of terminology, its also worth mentioning two other terms that are often used interchangeably, but that we will use more carefully. well reserve the term packet switch to mean a general packetswitching device that transfers a packet from input link interface to output link interface, according to values in a packets header fields. some packet switches, called linklayer switches examined in chapter 6 , base their forwarding decision on values in the fields of the linklayer frame; switches are thus referred to as linklayer layer 2 devices. other packet switches, called routers, base their forwarding decision on header field values in the networklayer datagram. routers are thus networklayer layer 3 devices. to fully appreciate this important distinction, you might want to review section 1.5.2, where we discuss networklayer datagrams and linklayer frames and their relationship. since our focus in this chapter is on the network layer, well mostly use the term router in place of packet switch. 4.2 whats inside a router? now that weve overviewed the data and control planes within the network layer, the important distinction between forwarding and routing, and the services and functions of the network layer, lets turn our attention to its forwarding functionthe actual transfer of packets from a routers incoming links to the appropriate outgoing links at that router. a highlevel view of a generic router architecture is shown in figure 4.4. four router components can be identified input port output port input port output portrouting processorrouting, management control plane software forwarding data plane hardware switch fabric figure 4.4 router architecture m04_kuro5469_08_ge_c04.indd 341 08052021 1406 342 chapter 4 the network layer data plane input ports. an input port performs several key functions. it performs the physi cal layer function of terminating an incoming physical link at a router; this is shown in the leftmost box of an input port and the rightmost box
of an output port in figure 4.4. an input port also performs linklayer functions needed to interoperate with the link layer at the other side of the incoming link; this is represented by the middle boxes in the input and output ports. perhaps most crucially, a lookup function is also performed at the input port; this will occur in the rightmost box of the input port. it is here that the forwarding table is consulted to determine the router output port to which an arriving packet will be forwarded via the switching fabric. control packets for example, packets carrying routing protocol information are forwarded from an input port to the routing processor. note that the term port herereferring to the physical input and output router interfacesis distinctly different from the software ports associated with network applications and sockets discussed in chapters 2 and 3. in practice, the number of ports supported by a router can range from a relatively small number in enterprise routers, to hundreds of 10 gbps ports in a router at an isps edge, where the number of incoming lines tends to be the greatest. the juniper mx2020, edge router, for example, supports up to 800 100 gbps ethernet ports, with an overall router system capacity of 800 tbps juniper mx 2020 2020. switching fabric. the switching fabric connects the routers input ports to its output ports. this switching fabric is completely contained within the routera network inside of a network router! output ports. an output port stores packets received from the switching fabric and transmits these packets on the outgoing link by performing the necessary linklayer and physicallayer functions. when a link is bidirectional that is, carries traffic in both directions, an output port will typically be paired with the input port for that link on the same line card. routing processor. the routing processor performs controlplane functions. in traditional routers, it executes the routing protocols which well study in sections 5.3 and 5.4, maintains routing tables and attached link state information, and computes the forwarding table for the router. in sdn routers, the routing processor is responsible for communicating with the remote controller in order to among other activities receive forwarding table entries computed by the remote controller, and install these entries in the routers input ports. the routing processor also performs the network management functions that well study in section 5.7. a routers input ports, output ports, and switching fabric are almost always implemented in hardware, as shown in figure 4.4. to appreciate why a hardware implementation is needed, consider that with a 100 gbps input link and a 64byte ip datagram, the input port has only 5.12 ns to process the datagram before another datagram may arrive. if n ports are combined on a line card as is often done in practice, the datagramprocessing pipeline must operate n times fasterfar too m04_kuro5469_08_ge_c04.indd 342 08052021 1406 4.2 whats inside a router? 343 fast for software implementation. forwarding hardware can be implemented either using a
router vendors own hardware designs, or constructed using purchased merchantsilicon chips for example, as sold by companies such as intel and broadcom. while the data plane operates at the nanosecond time scale, a routers control functionsexecuting the routing protocols, responding to attached links that go up or down, communicating with the remote controller in the sdn case and performing management functionsoperate at the millisecond or second timescale. these control plane functions are thus usually implemented in software and execute on the routing processor typically a traditional cpu. before delving into the details of router internals, lets return to our analogy from the beginning of this chapter, where packet forwarding was compared to cars entering and leaving an interchange. lets suppose that the interchange is a roundabout, and that as a car enters the roundabout, a bit of processing is required. lets consider what information is required for this processing destinationbased forwarding. suppose the car stops at an entry station and indi cates its final destination not at the local roundabout, but the ultimate destination of its journey. an attendant at the entry station looks up the final destination, determines the roundabout exit that leads to that final destination, and tells the driver which roundabout exit to take. generalized forwarding. the attendant could also determine the cars exit ramp on the basis of many other factors besides the destination. for example, the selected exit ramp might depend on the cars origin, for example the state that issued the cars license plate. cars from a certain set of states might be directed to use one exit ramp that leads to the destination via a slow road, while cars from other states might be directed to use a different exit ramp that leads to the destination via superhighway. the same decision might be made based on the model, make and year of the car. or a car not deemed roadworthy might be blocked and not be allowed to pass through the roundabout. in the case of generalized forwarding, any number of factors may contribute to the attendants choice of the exit ramp for a given car. once the car enters the roundabout which may be filled with other cars entering from other input roads and heading to other roundabout exits, it eventually leaves at the prescribed roundabout exit ramp, where it may encounter other cars leaving the roundabout at that exit. we can easily recognize the principal router components in figure 4.4 in this analogythe entry road and entry station correspond to the input port with a lookup function to determine to local outgoing port; the roundabout corresponds to the switch fabric; and the roundabout exit road corresponds to the output port. with this analogy, its instructive to consider where bottlenecks might occur. what happens if cars arrive blazingly fast for example, the roundabout is in germany or italy! but the station attendant is slow? how fast must the attendant work to ensure theres no backup on an entry road? even with a
blazingly fast attendant, what happens if cars m04_kuro5469_08_ge_c04.indd 343 08052021 1406 344 chapter 4 the network layer data plane traverse the roundabout slowlycan backups still occur? and what happens if most of the cars entering at all of the roundabouts entrance ramps all want to leave the roundabout at the same exit rampcan backups occur at the exit ramp or elsewhere? how should the roundabout operate if we want to assign priorities to different cars, or block certain cars from entering the roundabout in the first place? these are all analogous to critical questions faced by router and switch designers. in the following subsections, well look at router functions in more detail. turner 1988; mckeown 1997a; partridge 1998; iyer 2008; serpanos 2011; zilberman 2019 provide a discussion of specific router architectures. for concreteness and simplicity, well initially assume in this section that forwarding decisions are based only on the packets destination address, rather than on a generalized set of packet header fields. we will cover the case of more generalized packet forwarding in section 4.4. 4.2.1 input port processing and destinationbased forwarding a more detailed view of input processing is shown in figure 4.5. as just discussed, the input ports linetermination function and linklayer processing implement the physical and link layers for that individual input link. the lookup performed in the input port is central to the routers operationit is here that the router uses the forwarding table to look up the output port to which an arriving packet will be forwarded via the switching fabric. the forwarding table is either computed and updated by the routing processor using a routing protocol to interact with the routing processors in other network routers or is received from a remote sdn controller. the forwarding table is copied from the routing processor to the line cards over a separate bus e.g., a pci bus indicated by the dashed line from the routing processor to the input line cards in figure 4.4. with such a shadow copy at each line card, forwarding decisions can be made locally, at each input port, without invoking the centralized routing processor on a perpacket basis and thus avoiding a centralized processing bottleneck. lets now consider the simplest case that the output port to which an incoming packet is to be switched is based on the packets destination address. in the case of 32bit ip addresses, a bruteforce implementation of the forwarding table would have one entry for every possible destination address. since there are more than 4 billion possible addresses, this option is totally out of the question. line terminationdata link processing protocol, decapsulationlookup, fowarding, queuing switch fabric figure 4.5 input port processing m04_kuro5469_08_ge_c04.indd 344 08052021 1406 4.2 whats inside a router? 345 as an example of how this issue of scale can be handled, lets suppose that our router has four links, numbered 0 through 3, and that packets are to be forwarded to the link interfaces as follows destination address range link interface 11001000 00010111 00010000
00000000 through 0 11001000 00010111 00010111 11111111 11001000 00010111 00011000 00000000 through 1 11001000 00010111 00011000 11111111 11001000 00010111 00011001 00000000 through 2 11001000 00010111 00011111 11111111 otherwise 3 clearly, for this example, it is not necessary to have 4 billion entries in the routers forwarding table. we could, for example, have the following forwarding table with just four entries prefix link interface 11001000 00010111 00010 0 11001000 00010111 00011000 1 11001000 00010111 00011 2 otherwise 3 with this style of forwarding table, the router matches a prefix of the packets des tination address with the entries in the table; if theres a match, the router forwards the packet to a link associated with the match. for example, suppose the packets destination address is 11001000 00010111 00010110 10100001; because the 21bit prefix of this address matches the first entry in the table, the router forwards the packet to link interface 0. if a prefix doesnt match any of the first three entries, then the router forwards the packet to the default interface 3. although this sounds simple enough, theres a very important subtlety here. you may have noticed that it is possible for a destination address to match more than one entry. for example, the first 24 bits of the address 11001000 00010111 00011000 10101010 match the second entry in the table, and the first 21 bits of the address match the third entry in the table. when there are multiple matches, the router uses the longest prefix matching rule; that is, it finds the longest matching entry in the table and forwards the packet to the link interface associated with the longest prefix match. well see exactly why this m04_kuro5469_08_ge_c04.indd 345 08052021 1406 346 chapter 4 the network layer data plane longest prefixmatching rule is used when we study internet addressing in more detail in section 4.3. given the existence of a forwarding table, lookup is conceptually simple hardware logic just searches through the forwarding table looking for the longest prefix match. but at gigabit transmission rates, this lookup must be performed in nanoseconds recall our earlier example of a 10 gbps link and a 64byte ip datagram. thus, not only must lookup be performed in hardware, but techniques beyond a simple linear search through a large table are needed; surveys of fast lookup algorithms can be found in gupta 2001, ruizsanchez 2001. special attention must also be paid to memory access times, resulting in designs with embedded onchip dram and faster sram used as a dram cache memories. in practice, ternary content addressable memories tcams are also often used for lookup yu 2004. with a tcam, a 32bit ip address is presented to the memory, which returns the content of the forwarding table entry for that address in essentially constant time. the cisco catalyst 6500 and 7600 series routers and switches can hold upwards of a million tcam forwarding table entries cisco tcam 2014. once a packets output port has been determined via the lookup, the packet can
be sent into the switching fabric. in some designs, a packet may be temporarily blocked from entering the switching fabric if packets from other input ports are currently using the fabric. a blocked packet will be queued at the input port and then scheduled to cross the fabric at a later point in time. well take a closer look at the blocking, queuing, and scheduling of packets at both input ports and output ports shortly. although lookup is arguably the most important action in input port processing, many other actions must be taken 1 physical and linklayer processing must occur, as discussed previously; 2 the packets version number, checksum and timetolive fieldall of which well study in section 4.3must be checked and the latter two fields rewritten; and 3 counters used for network management such as the number of ip datagrams received must be updated. lets close our discussion of input port processing by noting that the input port steps of looking up a destination ip address match and then sending the packet into the switching fabric to the specified output port action is a specific case of a more general match plus action abstraction that is performed in many networked devices, not just routers. in linklayer switches covered in chapter 6, linklayer destination addresses are looked up and several actions may be taken in addition to sending the frame into the switching fabric towards the output port. in firewalls covered in chapter 8devices that filter out selected incoming packetsan incoming packet whose header matches a given criteria e.g., a combination of sourcedestination ip addresses and transportlayer port numbers may be dropped action. in a network address translator nat, covered in section 4.3, an incoming packet whose transportlayer port number matches a given value will have its port number rewritten before forwarding action. indeed, the match plus action abstraction bosshart 2013 is both powerful and prevalent in network devices today, and is central to the notion of generalized forwarding that well study in section 4.4. m04_kuro5469_08_ge_c04.indd 346 08052021 1406 4.2 whats inside a router? 347 4.2.2 switching the switching fabric is at the very heart of a router, as it is through this fabric that the packets are actually switched that is, forwarded from an input port to an output port. switching can be accomplished in a number of ways, as shown in figure 4.6 switching via memory. the simplest, earliest routers were traditional computers, with switching between input and output ports being done under direct control of the cpu routing processor. input and output ports functioned as traditional io devices in a traditional operating system. an input port with an arriving packet first signaled the routing processor via an interrupt. the packet was then copied from the input port into processor memory. the routing processor then extracted the destination address from the header, looked up the appropriate output port in the forwarding table, and copied the packet to the output ports buffers. in this scenario, if the memory bandwidth
is such that a maximum of b packets per second can be written into, or read from, memory, then the overall forwarding throughput the total rate at which packets are transferred from input ports to output ports must be less than b2. note also that two packets cannot be forwarded memory a b cx y zmemory key input port output porta xy zb cinter connection network a b cx y zbus figure 4.6 three switching techniques m04_kuro5469_08_ge_c04.indd 347 08052021 1406 348 chapter 4 the network layer data plane at the same time, even if they have different destination ports, since only one memory readwrite can be done at a time over the shared system bus. some modern routers switch via memory. a major difference from early routers, however, is that the lookup of the destination address and the storing of the packet into the appropriate memory location are performed by processing on the input line cards. in some ways, routers that switch via memory look very much like sharedmemory multiprocessors, with the processing on a line card switching writing packets into the memory of the appropriate output port. ciscos catalyst 8500 series switches cisco 8500 2020 internally switches packets via a shared memory. switching via a bus. in this approach, an input port transfers a packet directly to the output port over a shared bus, without intervention by the routing processor. this is typically done by having the input port prepend a switchinternal label header to the packet indicating the local output port to which this packet is being transferred and transmitting the packet onto the bus. all output ports receive the packet, but only the port that matches the label will keep the packet. the label is then removed at the output port, as this label is only used within the switch to cross the bus. if multiple packets arrive to the router at the same time, each at a different input port, all but one must wait since only one packet can cross the bus at a time. because every packet must cross the single bus, the switching speed of the router is limited to the bus speed; in our roundabout analogy, this is as if the roundabout could only contain one car at a time. nonetheless, switching via a bus is often sufficient for routers that operate in small local area and enterprise networks. the cisco 6500 router cisco 6500 2020 internally switches packets over a 32gbpsbackplane bus. switching via an interconnection network. one way to overcome the bandwidth limitation of a single, shared bus is to use a more sophisticated interconnection network, such as those that have been used in the past to interconnect processors in a multiprocessor computer architecture. a crossbar switch is an interconnection network consisting of 2n buses that connect n input ports to n output ports, as shown in figure 4.6. each vertical bus intersects each horizontal bus at a crosspoint, which can be opened or closed at any time by the
switch fabric controller whose logic is part of the switching fabric itself. when a packet arrives from port a and needs to be forwarded to port y, the switch controller closes the crosspoint at the intersection of busses a and y, and port a then sends the packet onto its bus, which is picked up only by bus y. note that a packet from port b can be forwarded to port x at the same time, since the atoy and btox packets use different input and output busses. thus, unlike the previous two switching approaches, crossbar switches are capable of forwarding multiple packets in parallel. a crossbar switch is nonblockinga packet being forwarded to an output port will not be blocked from reaching that output port as long as no other packet is currently being forwarded to that output port. however, if two packets from two different input ports are destined to that same output port, then one will have to wait at the input, since only one packet can be sent over any given bus at a time. cisco 12000 series m04_kuro5469_08_ge_c04.indd 348 08052021 1406 4.2 whats inside a router? 349 switches cisco 12000 2020 use a crossbar switching network; the cisco 7600 series can be configured to use either a bus or crossbar switch cisco 7600 2020. more sophisticated interconnection networks use multiple stages of switching elements to allow packets from different input ports to proceed towards the same output port at the same time through the multistage switching fabric. see tobagi 1990 for a survey of switch architectures. the cisco crs employs a threestage nonblocking switching strategy. a routers switching capacity can also be scaled by running multiple switching fabrics in parallel. in this approach, input ports and output ports are connected to n switching fabrics that operate in parallel. an input port breaks a packet into k smaller chunks, and sends sprays the chunks through k of these n switching fabrics to the selected output port, which reas sembles the k chunks back into the original packet. 4.2.3 output port processing output port processing, shown in figure 4.7, takes packets that have been stored in the output ports memory and transmits them over the output link. this includes selecting i.e., scheduling and dequeuing packets for transmission, and performing the needed linklayer and physicallayer transmission functions. 4.2.4 where does queuing occur? if we consider input and output port functionality and the configurations shown in figure 4.6, its clear that packet queues may form at both the input ports and the output ports, just as we identified cases where cars may wait at the inputs and outputs of the traffic intersection in our roundabout analogy. the location and extent of queuing either at the input port queues or the output port queues will depend on the traffic load, the relative speed of the switching fabric, and the line speed. lets now consider these queues in a bit more detail, since as these queues grow large, the routers memory
can eventually be exhausted and packet loss will occur when no memory is available to store arriving packets. recall that in our earlier discussions, we said that packets were lost within the network or dropped at a router. it is here, at these queues within a router, where such packets are actually dropped and lost. line terminationdata link processing protocol, encapsulationqueuing buf fer management switch fabric figure 4.7 output port processing m04_kuro5469_08_ge_c04.indd 349 08052021 1406 350 chapter 4 the network layer data plane suppose that the input and output line speeds transmission rates all have an identical transmission rate of rline packets per second, and that there are n input ports and n output ports. to further simplify the discussion, lets assume that all packets have the same fixed length, and that packets arrive to input ports in a synchronous manner. that is, the time to send a packet on any link is equal to the time to receive a packet on any link, and during such an interval of time, either zero or one packets can arrive on an input link. define the switching fabric transfer rate r switch as the rate at which packets can be moved from input port to output port. if rswitch is n times faster than rline, then only negligible queuing will occur at the input ports. this is because even in the worst case, where all n input lines are receiving packets, and all packets are to be forwarded to the same output port, each batch of n packets one packet per input port can be cleared through the switch fabric before the next batch arrives. input queuing but what happens if the switch fabric is not fast enough relative to the input line speeds to transfer all arriving packets through the fabric without delay? in this case, packet queuing can also occur at the input ports, as packets must join input port queues to wait their turn to be transferred through the switching fabric to the output port. to illustrate an important consequence of this queuing, consider a crossbar switching fabric and suppose that 1 all link speeds are identical, 2 that one packet can be transferred from any one input port to a given output port in the same amount of time it takes for a packet to be received on an input link, and 3 packets are moved from a given input queue to their desired output queue in an fcfs manner. multiple packets can be transferred in parallel, as long as their output ports are different. however, if two packets at the front of two input queues are destined for the same output queue, then one of the packets will be blocked and must wait at the input queuethe switching fabric can transfer only one packet to a given output port at a time. figure 4.8 shows an example in which two packets darkly shaded at the front of their input queues are destined for the same upperright output
port. suppose that the switch fabric chooses to transfer the packet from the front of the upperleft queue. in this case, the darkly shaded packet in the lowerleft queue must wait. but not only must this darkly shaded packet wait, so too must the lightly shaded packet that is queued behind that packet in the lowerleft queue, even though there is no contention for the middleright output port the destination for the lightly shaded packet. this phenomenon is known as headoftheline hol blocking in an inputqueued switcha queued packet in an input queue must wait for transfer through the fabric even though its output port is free because it is blocked by another packet at the head of the line. karol 1987 shows that due to hol blocking, the input queue will grow to unbounded length informally, this is equivalent to saying that significant packet loss will occur under certain assumptions as soon as the packet arrival rate on the input links reaches only 58 percent of their capacity. a number of solutions to hol blocking are discussed in mckeown 1997. m04_kuro5469_08_ge_c04.indd 350 08052021 1406 4.2 whats inside a router? 351 output queuing lets next consider whether queuing can occur at a switchs output ports. suppose that rswitch is again n times faster than rline and that packets arriving at each of the n input ports are destined to the same output port. in this case, in the time it takes to send a single packet onto the outgoing link, n new packets will arrive at this output port one from each of the n input ports. since the output port can transmit only a single packet in a unit of time the packet transmission time, the n arriving packets will have to queue wait for transmission over the outgoing link. then n more packets can possibly arrive in the time it takes to transmit just one of the n packets that had just previously been queued. and so on. thus, packet queues can form at the output ports even when the switching fabric is n times faster than the port line speeds. eventually, the number of queued packets can grow large enough to exhaust available memory at the output port.switch fabricoutput port contention at time t one dark packet can be transferred light blue packet experiences hol blocking switch fabric key destined for upper output portdestined for middle output portdestined for lower output port figure 4.8 hol blocking at and inputqueued switch m04_kuro5469_08_ge_c04.indd 351 08052021 1406 352 chapter 4 the network layer data plane when there is not enough memory to buffer an incoming packet, a decision must be made to either drop the arriving packet a policy known as droptail or remove one or more alreadyqueued packets to make room for the newly arrived packet. in some cases, it may be advantageous to drop or mark the header of a packet before the buffer is full in order to provide a congestion signal to the sender. this marking
could be done using the explicit congestion notification bits that we studied in section 3.7.2. a number of proactive packetdropping and marking policies which collectively have become known as active queue management aqm algorithms have been proposed and analyzed labrador 1999, hollot 2002. one of the most widely studied and implemented aqm algorithms is the random early detection red algorithm christiansen 2001. more recent aqm policies include pie the proportional integral controller enhanced rfc 8033, and codel nichols 2012. output port queuing is illustrated in figure 4.9. at time t, a packet has arrived at each of the incoming input ports, each destined for the uppermost outgoing port. assuming identical line speeds and a switch operating at three times the line speed, one time unit later that is, in the time needed to receive or send a packet, all three original packets have been transferred to the outgoing port and are queued awaiting transmission. in the next time unit, one of these three packets will have been transmitted over the outgoing link. in our example, two new packets have arrived at the incoming side of the switch fabricoutput port contention at time t one packet time later switch fabric figure 4.9 output port queuing m04_kuro5469_08_ge_c04.indd 352 08052021 1406 4.2 whats inside a router? 353 switch; one of these packets is destined for this uppermost output port. a consequence of such queuing is that a packet scheduler at the output port must choose one packet, among those queued, for transmissiona topic well cover in the following section. how much buffering is enough? our study above has shown how a packet queue forms when bursts of packets arrive at a routers input or more likely output port, and the packet arrival rate temporarily exceeds the rate at which packets can be forwarded. the longer the amount of time that this mismatch persists, the longer the queue will grow, until eventually a ports buffers become full and packets are dropped. one natural question is how much buffering should be provisioned at a port. it turns out the answer to this question is much more complicated than one might imagine and can teach us quite a bit about the subtle interaction among congestionaware senders at the networks edge and the network core! for many years, the rule of thumb rfc 3439 for buffer sizing was that the amount of buffering b should be equal to an average roundtrip time rtt, say 250 msec times the link capacity c. thus, a 10gbps link with an rtt of 250 msec would need an amount of buffering equal to brtt c2.5 gbits of buff ers. this result was based on an analysis of the queuing dynamics of a relatively small number of tcp flows villamizar 1994. more recent theoretical and experimental efforts appenzeller 2004, however, suggest that when a large number of independent tcp flows n pass through a link, the amount of buffering needed is brtt c2n. in core networks, where a large number of tcp
flows typi cally pass through large backbone router links, the value of n can be large, with the decrease in needed buffer size becoming quite significant. appenzeller 2004; wischik 2005; beheshti 2008 provide very readable discussions of the buffersizing problem from a theoretical, implementation, and operational standpoint. its temping to think that more buffering must be betterlarger buffers would allow a router to absorb larger fluctuations in the packet arrival rate, thereby decreasing the routers packet loss rate. but larger buffers also mean potentially longer queuing delays. for gamers and for interactive teleconferencing users, tens of milliseconds count. increasing the amount of perhop buffer by a factor of 10 to decrease packet loss could increase the endend delay by a factor of 10! increased rtts also make tcp senders less responsive and slower to respond to incipient congestion andor packet loss. these delaybased considerations show that buffering is a doubleedged swordbuffering can be used to absorb shortterm statistical fluctuations in traffic but can also lead to increased delay and the attendant concerns. buffering is a bit like saltjust the right amount of salt makes food better, but too much makes it inedible! in the discussion above, weve implicitly assumed that many independent send ers are competing for bandwidth and buffers at a congested link. while this is probably an excellent assumption for routers within the network core, at the network edge m04_kuro5469_08_ge_c04.indd 353 08052021 1406 354 chapter 4 the network layer data plane this may not hold. figure 4.10a shows a home router sending tcp segments to a remote game server. following nichols 2012, suppose that it takes 20 ms to transmit a packet containing a gamers tcp segment, that there are negligible queuing delays elsewhere on the path to the game server, and that the rtt is 200 ms. as shown in figure 4.10b, suppose that at time t0, a burst of 25 packets arrives to the queue. one of these queued packets is then transmitted once every 20 ms, so that at t200 msec, the first ack arrives, just as the 21st packet is being transmitted. this ack arrival causes the tcp sender to send another packet, which is queued at the outgoing link of the home router. at t220, the next ack arrives, and another tcp segment is released by the gamer and is queued, as the 22nd packet is being transmitted, and so on. you should convince yourself that in this scenario, ack clocking results in a new packet arriving at the queue every time a queued packet is sent, resulting in queue size at the home routers outgoing link that is always five packets! that is, the endendpipe is full delivering packets to the destination at the path bottleneck rate of one packet every 20 ms, but the amount of queuing delay is constant and persistent. as a result, the gamer is unhappy with the delay, and the parent who even knows wireshark! is confused because he or she doesnt understand why delays are persistent
and excessively long, even when there is no other traffic on the home network. this scenario above of long delay due to persistent buffering is known as buff erbloat and illustrates that not only is throughput important, but also minimal delay is important as well kleinrock 2018, and that the interaction among senders at the network edge and queues within the network can indeed be complex and subtle. the docsis 3.1 standard for cable networks that we will study in chapter 6, recently added a specific aqm mechanism rfc 8033, rfc 8034 to combat bufferbloat, while preserving bulk throughput performance.250 ms rt t time msqueue length 020025 5 a. b.home networkinternet figure 4.10 bufferbloat persistent queues m04_kuro5469_08_ge_c04.indd 354 08052021 1406 4.2 whats inside a router? 355 4.2.5 packet scheduling lets now return to the question of determining the order in which queued packets are transmitted over an outgoing link. since you yourself have undoubtedly had to wait in long lines on many occasions and observed how waiting customers are served, youre no doubt familiar with many of the queuing disciplines commonly used in routers. there is firstcomefirstserved fcfs, also known as firstinfirstout, fifo. the british are famous for patient and orderly fcfs queuing at bus stops and in the marketplace oh, are you queuing?. other countries operate on a priority basis, with one class of waiting customers given priority service over other waiting customers. there is also roundrobin queuing, where customers are again divided into classes as in priority queuing but each class of customer is given service in turn. firstinfirstout fifo figure 4.11 shows the queuing model abstraction for the fifo linkscheduling dis cipline. packets arriving at the link output queue wait for transmission if the link is currently busy transmitting another packet. if there is not sufficient buffering space to hold the arriving packet, the queues packetdiscarding policy then determines whether the packet will be dropped lost or whether other packets will be removed from the queue to make space for the arriving packet, as discussed above. in our discussion below, well ignore packet discard. when a packet is completely transmitted over the outgoing link that is, receives service it is removed from the queue. the fifo also known as firstcomefirstserved, or fcfs scheduling discipline selects packets for link transmission in the same order in which they arrived at the output link queue. were all familiar with fifo queuing from service centers, where arriving customers join the back of the single waiting line, remain in order, and are then served when they reach the front of the line. figure 4.12 shows the fifo queue in operation. packet arrivals are indicated by numbered arrows above the upper timeline, with the number indicating the order in which the packet arrived. individual packet departures are shown below the lower timeline. the time that a packet spends in service being transmitted is indicated by the shaded rectangle between the two timelines. in arrivalsdeparturesqueue waiting area link server figure 4.11 fifo queuing abstraction
m04_kuro5469_08_ge_c04.indd 355 08052021 1406 356 chapter 4 the network layer data plane our examples here, lets assume that each packet takes three units of time to be transmit ted. under the fifo discipline, packets leave in the same order in which they arrived. note that after the departure of packet 4, the link remains idle since packets 1 through 4 have been transmitted and removed from the queue until the arrival of packet 5. priority queuing under priority queuing, packets arriving at the output link are classified into priority classes upon arrival at the queue, as shown in figure 4.13. in practice, a network operator may configure a queue so that packets carrying network management information for example, as indicated by the source or destination tcpudp port number receive priority over user traffic; additionally, realtime voiceoverip packets might receive priority over nonrealtime traffic such email packets. each priority class typically has its own queue. when choosing a packet to transmit, the priority timearrivals departurespacket in service time1 1 2 3 4 52 3 1t 0 t 2 t 4 t 6 t 8 t 10 t 12 t 14 2 3 4 54 5 figure 4.12 the fifo queue in operation arrivals departures lowpriority queue waiting areaclassi fyhighpriority queue waiting area link server figure 4.13 the priority queuing model m04_kuro5469_08_ge_c04.indd 356 08052021 1406 4.2 whats inside a router? 357 net neutrality weve seen that packet scheduling mechanisms e.g., priority traffic scheduling disciplines such a strict priority, and wfq can be used to provide different levels of service to differ ent classes of traffic. the definition of what precisely constitutes a class of traffic is up to an isp to decide, but could be potentially based on any set of fields in the ip datagram header. for example, the port field in the ip datagram header could be used to classify datagrams according to the wellknow service associated with that port snmp network management datagram port 161 might be assigned to a higher priority class than an imap email protocol ports 143, or 993 datagram and therefore receive better service. an isp could also potentially use a datagrams source ip address to provide priority to datagrams being sent by certain companies who have presumably paid the isp for this privilege over datagrams being sent from other companies who have not paid; an isp principles in practicequeuing discipline will transmit a packet from the highest priority class that has a nonempty queue that is, has packets waiting for transmission. the choice among packets in the same priority class is typically done in a fifo manner. figure 4.14 illustrates the operation of a priority queue with two priority classes. packets 1, 3, and 4 belong to the highpriority class, and packets 2 and 5 belong to the lowpriority class. packet 1 arrives and, finding the link idle, begins transmission. during the transmission of packet 1, packets 2 and 3 arrive and are queued in the low and highpriority queues, respectively. after the transmission
of packet 1, packet 3 a highpriority packet is selected for transmission over packet 2 which, even though it arrived earlier, is a lowpriority packet. at the end of the transmission of packet 3, packet 2 then begins transmission. packet 4 a highpriority packet arrives during the transmission of packet 2 a lowpriority packet. under a nonpreemptive priority queuing discipline, the transmission of a packet is not interrupted once it arrivals departurespacket in service1 1 2 3 452 3 145 time time t 0 t 2 t 4 t 6 t 8 t 10 t 12 t 14 2 3 4 5 figure 4.14 the priority queue in operation m04_kuro5469_08_ge_c04.indd 357 08052021 1406 358 chapter 4 the network layer data plane could even block traffic with a source ip address in a given company, or country. there are many mechanisms that would allow an isp to provide different levels of service to dif ferent classes of traffic. the real question is what policies and laws determine what an isp can actually do. of course, these laws will vary by country; see smithsonian 2017 for a brief survey. here, well briefly consider us policy on what has come to be known as net neutrality. the term net neutrality doesnt have a precise decision, but the march 2015 order on protecting and promoting an open internet fcc 2015 by the us federal communications commission provides three clear, bright line rules that are now often associated with net neutrality no blocking. . . . a person engaged in the provision of broadband internet access service, . . . shall not block lawful content, applications, services, or nonharmful devices, subject to reasonable network management. no throttling. . . . a person engaged in the provision of broadband internet access service, . . . shall not impair or degrade lawful internet traffic on the basis of internet content, application, or service, or use of a nonharmful device, subject to rea sonable network management. no paid prioritization. . . . a person engaged in the provision of broadband internet access service, . . . shall not engage in paid prioritization. paid prioritization refers to the management of a broadband providers network to directly or indirectly favor some traffic over other traffic, including through use of techniques such as traffic shaping, prioritization, resource reservation, or other forms of preferential traffic man agement, . . . quite interestingly, before the order, isp behaviors violating the first two of these rules had been observed faulhaber 2012. in 2005, an isp in north carolina agreed to stop its practice of blocking its customers from using vonage, a voiceoverip service that com peted with its own telephone service. in 2007, comcast was judged to be interfering with bittorrent p2p traffic by internally creating and sending tcp rst packets to bittorrent send ers and receivers, which caused them to close their bittorrent connection fcc 2008. both sides of the net neutrality debate have been argued strenuously, mostly focused on the extent to
which net neutrality provides benefits to customers, while at the same time promoting innovation. see peha 2006, faulhaber 2012, economides 2017, madhyastha 2017. the 2015 fcc order on protecting and promoting an open internet, which banned isps from blocking, throttling, or providing paid prioritizing, was superseded by the 2017 fcc restoring internet freedom order, fcc 2017 which rolled back these prohibitions and focused instead on isp transparency. with so much interest and so many changes, its probably safe to say we arent close to having seen the final chapter written on net neutrality in the united states, or elsewhere. m04_kuro5469_08_ge_c04.indd 358 08052021 1406 4.2 whats inside a router? 359 has begun. in this case, packet 4 queues for transmission and begins being transmit ted after the transmission of packet 2 is completed. round robin and weighted fair queuing wfq under the round robin queuing discipline, packets are sorted into classes as with priority queuing. however, rather than there being a strict service priority among classes, a round robin scheduler alternates service among the classes. in the simplest form of round robin scheduling, a class 1 packet is transmitted, followed by a class 2 packet, followed by a class 1 packet, followed by a class 2 packet, and so on. a socalled workconserving queuing discipline will never allow the link to remain idle whenever there are packets of any class queued for transmission. a workconserving round robin discipline that looks for a packet of a given class but finds none will immediately check the next class in the round robin sequence. figure 4.15 illustrates the operation of a twoclass round robin queue. in this example, packets 1, 2, and 4 belong to class 1, and packets 3 and 5 belong to the second class. packet 1 begins transmission immediately upon arrival at the output queue. packets 2 and 3 arrive during the transmission of packet 1 and thus queue for transmission. after the transmission of packet 1, the link scheduler looks for a class 2 packet and thus transmits packet 3. after the transmission of packet 3, the scheduler looks for a class 1 packet and thus transmits packet 2. after the transmission of packet 2, packet 4 is the only queued packet; it is thus transmitted immediately after packet 2. a generalized form of round robin queuing that has been widely implemented in routers is the socalled weighted fair queuing wfq discipline demers 1990; parekh 1993. wfq is illustrated in figure 4.16. here, arriving packets are classified and queued in the appropriate perclass waiting area. as in round robin scheduling, a wfq scheduler will serve classes in a circular mannerfirst serving class 1, then serving class 2, then serving class 3, and then assuming there are three classes repeating the service pattern. wfq is also a workconserving queuing discipline and arrivals packet in service1 1 2 3 452 3 1 2 3 4 545 departurestime time t 0 t 2 t 4 t 6 t 8 t 10 t 12
t 14 figure 4.15 the twoclass robin queue in operation m04_kuro5469_08_ge_c04.indd 359 08052021 1406 360 chapter 4 the network layer data plane thus will immediately move on to the next class in the service sequence when it finds an empty class queue. wfq differs from round robin in that each class may receive a differential amount of service in any interval of time. specifically, each class, i , is assigned a weight, wi. under wfq, during any interval of time during which there are class i packets to send, class i will then be guaranteed to receive a fraction of service equal to wigwj, where the sum in the denominator is taken over all classes that also have packets queued for transmission. in the worst case, even if all classes have queued packets, class i will still be guaranteed to receive a fraction w i gwj of the bandwidth, where in this worst case the sum in the denominator is over all classes. thus, for a link with transmission rate r, class i will always achieve a throughput of at least rwi gwj. our descrip tion of wfq has been idealized, as we have not considered the fact that packets are discrete and a packets transmission will not be interrupted to begin transmission of another packet; demers 1990; parekh 1993 discuss this packetization issue. 4.3 the internet protocol ip ipv4, addressing, ipv6, and more our study of the network layer thus far in chapter 4the notion of the data and con trol plane component of the network layer, our distinction between forwarding and routing, the identification of various network service models, and our look inside a routerhave often been without reference to any specific computer network architecture or protocol. in this section, well focus on key aspects of the network layer on todays internet and the celebrated internet protocol ip. there are two versions of ip in use today. well first examine the widely deployed ip protocol version 4, which is usually referred to simply as ipv4 rfc 791 in section 4.3.1. well examine ip version 6 rfc 2460; rfc 4291, which has classi fy arrivals departuresw1 w2 w3link figure 4.16 weighted fair queuing m04_kuro5469_08_ge_c04.indd 360 08052021 1406 4.3 the internet protocol ip ipv4, addressing, ipv6, and more 361 been proposed to replace ipv4, in section 4.3.4. in between, well primarily cover internet addressinga topic that might seem rather dry and detailoriented but well see is crucial to understanding how the internets network layer works. to master ip addressing is to master the internets network layer itself! 4.3.1 ipv4 datagram format recall that the internets networklayer packet is referred to as a datagram. we begin our study of ip with an overview of the syntax and semantics of the ipv4 datagram. you might be thinking that nothing could be drier than the syntax and semantics of a packets bits. nevertheless, the datagram plays a central role in the internetevery networking student and professional needs to see it, absorb it, and
master it. and just to see that protocol headers can indeed be fun to study, check out pomeranz 2010. the ipv4 datagram format is shown in figure 4.17. the key fields in the ipv4 datagram are the following version number. these 4 bits specify the ip protocol version of the datagram. by looking at the version number, the router can determine how to interpret the remainder of the ip datagram. different versions of ip use different datagram formats. the datagram format for ipv4 is shown in figure 4.17. the datagram format for the new version of ip ipv6 is discussed in section 4.3.4. header length. because an ipv4 datagram can contain a variable number of options which are included in the ipv4 datagram header, these 4 bits are needed version type of serviceheader length upper layer protocol16bit identi Ô¨Åer timetolive13bit fragmentation of fset flagsdatagram length bytes header checksum32 bits 32bit source ip address 32bit destination ip address options i f any data figure 4.17 ipv4 datagram format m04_kuro5469_08_ge_c04.indd 361 08052021 1406 362 chapter 4 the network layer data plane to determine where in the ip datagram the payload for example, the transport layer segment being encapsulated in this datagram actually begins. most ip datagrams do not contain options, so the typical ip datagram has a 20byte header. type of service. the type of service tos bits were included in the ipv4 header to allow different types of ip datagrams to be distinguished from each other. for example, it might be useful to distinguish realtime datagrams such as those used by an ip telephony application from nonrealtime traffic e.g., ftp. the specific level of service to be provided is a policy issue determined and config ured by the network administrator for that router. we also learned in section 3.7.2 that two of the tos bits are used for explicit congestion notification. datagram length. this is the total length of the ip datagram header plus data, measured in bytes. since this field is 16 bits long, the theoretical maximum size of the ip datagram is 65,535 bytes. however, datagrams are rarely larger than 1,500 bytes, which allows an ip datagram to fit in the payload field of a maximally sized ethernet frame. identifier, flags, fragmentation offset. these three fields have to do with socalled ip fragmentation, when a large ip datagram is broken into several smaller ip datagrams which are then forwarded independently to the destination, where they are reassembled before their payload data see below is passed up to the transport layer at the destination host. interestingly, the new version of ip, ipv6, does not allow for fragmentation. well not cover fragmentation here; but readers can find a detailed discussion online, among the retired material from earlier versions of this book. timetolive. the timetolive ttl field is included to ensure that datagrams do not circulate forever due to, for example, a longlived routing loop in the network. this field is decremented by one each time the datagram is processed by a
router. if the ttl field reaches 0, a router must drop that datagram. protocol. this field is typically used only when an ip datagram reaches its final destination. the value of this field indicates the specific transportlayer protocol to which the data portion of this ip datagram should be passed. for example, a value of 6 indicates that the data portion is passed to tcp, while a value of 17 indicates that the data is passed to udp. for a list of all possible values, see iana protocol numbers 2016. note that the protocol number in the ip datagram has a role that is analogous to the role of the port number field in the transportlayer segment. the protocol number is the glue that binds the network and transport layers together, whereas the port number is the glue that binds the transport and application layers together. well see in chapter 6 that the linklayer frame also has a special field that binds the link layer to the network layer. header checksum. the header checksum aids a router in detecting bit errors in a received ip datagram. the header checksum is computed by treating each 2 bytes in the header as a number and summing these numbers using 1s complement arithmetic. as discussed in section 3.3, the 1s complement of this sum, known as the internet checksum, is stored in the checksum field. a router computes the header checksum for each received ip datagram and detects an error condition if m04_kuro5469_08_ge_c04.indd 362 08052021 1406 4.3 the internet protocol ip ipv4, addressing, ipv6, and more 363 the checksum carried in the datagram header does not equal the computed check sum. routers typically discard datagrams for which an error has been detected. note that the checksum must be recomputed and stored again at each router, since the ttl field, and possibly the options field as well, will change. an interesting discussion of fast algorithms for computing the internet checksum is rfc 1071. a question often asked at this point is, why does tcpip perform error checking at both the transport and network layers? there are several reasons for this repetition. first, note that only the ip header is checksummed at the ip layer, while the tcpudp checksum is computed over the entire tcpudp segment. second, tcpudp and ip do not necessarily both have to belong to the same protocol stack. tcp can, in principle, run over a different networklayer protocol for example, atm black 1995 and ip can carry data that will not be passed to tcpudp. source and destination ip addresses. when a source creates a datagram, it inserts its ip address into the source ip address field and inserts the address of the ultimate destination into the destination ip address field. often the source host determines the destination address via a dns lookup, as discussed in chapter 2. well discuss ip addressing in detail in section 4.3.2. options. the options fields allow an ip header to be extended. header options were
meant to be used rarelyhence the decision to save overhead by not including the information in options fields in every datagram header. however, the mere existence of options does complicate matterssince datagram headers can be of variable length, one cannot determine a priori where the data field will start. also, since some datagrams may require options processing and others may not, the amount of time needed to process an ip datagram at a router can vary greatly. these considerations become particularly important for ip processing in highperformance routers and hosts. for these reasons and others, ip options were not included in the ipv6 header, as discussed in section 4.3.4. data payload. finally, we come to the last and most important fieldthe raison detre for the datagram in the first place! in most circumstances, the data field of the ip datagram contains the transportlayer segment tcp or udp to be delivered to the destination. however, the data field can carry other types of data, such as icmp messages discussed in section 5.6. note that an ip datagram has a total of 20 bytes of header assuming no options. if the datagram carries a tcp segment, then each datagram carries a total of 40 bytes of header 20 bytes of ip header plus 20 bytes of tcp header along with the applicationlayer message. 4.3.2 ipv4 addressing we now turn our attention to ipv4 addressing. although you may be thinking that addressing must be a straightforward topic, hopefully by the end of this section youll be convinced that internet addressing is not only a juicy, subtle, and interesting topic m04_kuro5469_08_ge_c04.indd 363 08052021 1406 364 chapter 4 the network layer data plane but also one that is of central importance to the internet. an excellent treatment of ipv4 addressing can be found in the first chapter in stewart 1999. before discussing ip addressing, however, well need to say a few words about how hosts and routers are connected into the internet. a host typically has only a single link into the network; when ip in the host wants to send a datagram, it does so over this link. the boundary between the host and the physical link is called an interface. now consider a router and its interfaces. because a routers job is to receive a datagram on one link and forward the datagram on some other link, a router necessarily has two or more links to which it is connected. the boundary between the router and any one of its links is also called an interface. a router thus has multiple interfaces, one for each of its links. because every host and router is capable of sending and receiving ip datagrams, ip requires each host and router interface to have its own ip address. thus, an ip address is technically associated with an interface, rather than with the host or router containing that interface. each ip address is 32 bits long equivalently, 4 bytes, and there are thus a total of 2 32
or approximately 4 billion possible ip addresses. these addresses are typi cally written in socalled dotteddecimal notation, in which each byte of the address is written in its decimal form and is separated by a period dot from other bytes in the address. for example, consider the ip address 193.32.216.9. the 193 is the decimal equivalent of the first 8 bits of the address; the 32 is the decimal equivalent of the second 8 bits of the address, and so on. thus, the address 193.32.216.9 in binary notation is 11000001 00100000 11011000 00001001 each interface on every host and router in the global internet must have an ip address that is globally unique except for interfaces behind nats, as discussed in section 4.3.3. these addresses cannot be chosen in a willynilly manner, however. a portion of an interfaces ip address will be determined by the subnet to which it is connected. figure 4.18 provides an example of ip addressing and interfaces. in this figure, one router with three interfaces is used to interconnect seven hosts. take a close look at the ip addresses assigned to the host and router interfaces, as there are several things to notice. the three hosts in the upperleft portion of figure 4.18, and the router interface to which they are connected, all have an ip address of the form 223.1.1.xxx. that is, they all have the same leftmost 24 bits in their ip address. these four interfaces are also interconnected to each other by a network that contains no routers. this network could be interconnected by an ethernet lan, in which case the interfaces would be interconnected by an ethernet switch as well discuss in chapter 6, or by a wireless access point as well discuss in chapter 7. well represent this routerless network connecting these hosts as a cloud for now, and dive into the internals of such networks in chapters 6 and 7. in ip terms, this network interconnecting three host interfaces and one router interface forms a subnet rfc 950. a subnet is also called an ip network or simply m04_kuro5469_08_ge_c04.indd 364 08052021 1406 4.3 the internet protocol ip ipv4, addressing, ipv6, and more 365 a network in the internet literature. ip addressing assigns an address to this subnet 223.1.1.024, where the 24 slash24 notation, sometimes known as a subnet mask, indicates that the leftmost 24 bits of the 32bit quantity define the subnet address. the 223.1.1.024 subnet thus consists of the three host interfaces 223.1.1.1, 223.1.1.2, and 223.1.1.3 and one router interface 223.1.1.4. any additional hosts attached to the 223.1.1.024 subnet would be required to have an address of the form 223.1.1.xxx. there are two additional subnets shown in figure 4.18 the 223.1.2.024 network and the 223.1.3.024 subnet. figure 4.19 illustrates the three ip subnets present in figure 4.18. the ip definition of a subnet is not restricted to ethernet segments that connect multiple hosts to a router interface. to get some insight here, consider figure 4.20, which shows three routers
that are interconnected with each other by pointtopoint links. each router has three interfaces, one for each pointtopoint link and one for the broadcast link that directly connects the router to a pair of hosts. what subnets are present here? three subnets, 223.1.1.024, 223.1.2.024, and 223.1.3.024, are similar to the subnets we encountered in figure 4.18. but note that there are three additional subnets in this example as well one subnet, 223.1.9.024, for the interfaces that connect routers r1 and r2; another subnet, 223.1.8.024, for the interfaces that connect routers r2 and r3; and a third subnet, 223.1.7.024, for the interfaces that connect routers r3 and r1. for a general interconnected system of routers and hosts, we can use the following recipe to define the subnets in the system223.1.1.1 223.1.2.1 223.1.2.2223.1.1.2223.1.1.4 223.1.2.9 223.1.3.27 223.1.1.3 223.1.3.1 223.1.3.2 figure 4.18 interface addresses and subnets m04_kuro5469_08_ge_c04.indd 365 08052021 1406 366 chapter 4 the network layer data plane to determine the subnets, detach each interface from its host or router, creating islands of isolated networks, with interfaces terminating the end points of the isolated networks. each of these isolated networks is called a subnet. if we apply this procedure to the interconnected system in figure 4.20, we get six islands or subnets. from the discussion above, its clear that an organization such as a company or academic institution with multiple ethernet segments and pointtopoint links will have multiple subnets, with all of the devices on a given subnet having the same subnet address. in principle, the different subnets could have quite different subnet addresses. in practice, however, their subnet addresses often have much in common. to understand why, lets next turn our attention to how addressing is handled in the global internet. the internets address assignment strategy is known as classless interdomain routing cidrpronounced cider rfc 4632. cidr generalizes the notion of subnet addressing. as with subnet addressing, the 32bit ip address is divided into two parts and again has the dotteddecimal form a.b.c.dx, where x indicates the number of bits in the first part of the address. the x most significant bits of an address of the form a.b.c.dx constitute the network portion of the ip address, and are often referred to as the prefix or network prefix of the address. an organization is typically assigned a block of contiguous addresses, that is, a range of addresses with a common prefix see the principles in practice feature. in this case, the ip addresses of devices within the organization will share the common prefix. when we cover the internets bgp routing protocol in 223.1.1.024 223.1.2.024 223.1.3.024 figure 4.19 subnet addresses m04_kuro5469_08_ge_c04.indd 366 08052021 1406 4.3 the internet protocol ip ipv4, addressing, ipv6, and more 367 section 5.4, well see that only these x leading prefix bits are considered by routers outside the organizations network. that is, when a router outside the organization forwards a datagram whose destination address is inside the organization, only the leading x bits of the address need be considered. this
considerably reduces the size of the forwarding table in these routers, since a single entry of the form a.b.c.dx will be sufficient to forward packets to any destination within the organization. the remaining 32x bits of an address can be thought of as distinguishing among the devices within the organization, all of which have the same network prefix. these are the bits that will be considered when forwarding packets at routers within the organization. these lowerorder bits may or may not have an additional subnetting structure, such as that discussed above. for example, suppose the first 21 bits of the cidrized address a.b.c.d21 specify the organizations network prefix and are common to the ip addresses of all devices in that organization. the remaining 11 bits then identify the specific hosts in the organization. the organizations internal structure might be such that these 11 rightmost bits are used for subnetting within the organization, as discussed above. for example, a.b.c.d24 might refer to a specific subnet within the organization. before cidr was adopted, the network portions of an ip address were constrained to be 8, 16, or 24 bits in length, an addressing scheme known as classful addressing, 223.1.8.1 223.1.8.0223.1.9.1 223.1.7.1 223.1.2.6 223.1.2.1 223.1.2.2 223.1.3.1 223.1.3.2223.1.1.3 223.1.7.0 223.1.9.2 223.1.3.27223.1.1.1 223.1.1.4 r1 r2 r3 figure 4.20 three routers interconnecting six subnets m04_kuro5469_08_ge_c04.indd 367 08052021 1406 368 chapter 4 the network layer data plane since subnets with 8, 16, and 24bit subnet addresses were known as class a, b, and c networks, respectively. the requirement that the subnet portion of an ip address be exactly 1, 2, or 3 bytes long turned out to be problematic for supporting the rapidly growing number of organizations with small and mediumsized subnets. a class c 24 subnet could accommodate only up to 2 8 2 2 5 254 hosts two of the 28 5 256 addresses are reserved for special usetoo small for many organizations. however, a class b 16 subnet, which supports up to 65,634 hosts, was too large. under classful addressing, an organization with, say, 2,000 hosts was typically allocated a class b 16 subnet address. this led to a rapid depletion of the class b address space and poor utilization of the assigned address space. for example, the organization that used a class b address for its 2,000 hosts was allocated enough of the address space for up to 65,534 interfacesleaving more than 63,000 addresses that could not be used by other organizations. this example of an isp that connects eight organizations to the internet nicely illustrates how carefully allocated cidrized addresses facilitate routing. suppose, as shown in figure 4.21, that the isp which well call flybynightisp advertises to the outside world that it should be sent any datagrams whose first 20 address bits match 200.23.16.020. the rest of the world need not know that within the address block 200.23.16.020 there are in fact eight other organizations, each with its own subnets. this ability to use a single prefix to advertise multiple networks is
often referred to as address aggregation also route aggregation or route summarization. address aggregation works extremely well when addresses are allocated in blocks to isps and then from isps to client organizations. but what happens when addresses are not allocated in such a hierarchical manner? what would happen, for example, if flybynightisp acquires ispsrus and then has organization 1 connect to the internet through its subsidiary ispsrus? as shown in figure 4.21, the subsidiary ispsrus owns the address block 199.31.0.016, but organization 1s ip addresses are unfortunately outside of this address block. what should be done here? certainly, organization 1 could renumber all of its routers and hosts to have addresses within the ispsrus address block. but this is a costly solution, and organization 1 might well be reassigned to another subsidiary in the future. the solution typically adopted is for organization 1 to keep its ip addresses in 200.23.18.023. in this case, as shown in figure 4.22, flybynightisp continues to advertise the address block 200.23.16.020 and ispsrus continues to advertise 199.31.0.016. however, ispsrus now also advertises the block of addresses for organization 1, 200.23.18.023. when other routers in the larger internet see the address blocks 200.23.16.020 from flybynightisp and 200.23.18.023 from isps rus and want to route to an address in the block 200.23.18.023, they will use longest prefix matching see section 4.2.1, and route toward ispsrus, as it advertises the long est i.e., mostspecific address prefix that matches the destination address.principles in practice m04_kuro5469_08_ge_c04.indd 368 08052021 1406 4.3 the internet protocol ip ipv4, addressing, ipv6, and more 369 organization 0 200.23.16.023 organization 1 flybynightispsend me anything with addresses beginning 200.23.16.020 ispsrus200.23.18.023 organization 2 200.23.20.023 organization 7 200.23.30.023internet send me anything with addresses beginning 199.31.0.016 figure 4.21 hierarchical addressing and route aggregation organization 0 200.23.16.023 organization 2 flybynightispsend me anything with addresses beginning 200.23.16.020 ispsrus200.23.20.023 organization 7 200.23.30.023 organization 1 200.23.18.023internetsend me anything with addresses beginning 199.31.0.016 or 200.23.18.023 figure 4.22 ispsrus has a more specific route to organization 1 m04_kuro5469_08_ge_c04.indd 369 08052021 1406 370 chapter 4 the network layer data plane we would be remiss if we did not mention yet another type of ip address, the ip broadcast address 255.255.255.255. when a host sends a datagram with destination address 255.255.255.255, the message is delivered to all hosts on the same subnet. routers optionally forward the message into neighboring subnets as well although they usually dont. having now studied ip addressing in detail, we need to know how hosts and subnets get their addresses in the first place. lets begin by looking at how an organization gets a block of addresses for its devices, and then look at how a device such as a host is assigned an address from within the organizations block of addresses. obtaining a block of addresses in order to obtain a block of ip addresses for use within an organizations subnet, a network administrator might first contact its isp, which would provide addresses from a larger block of addresses that had already been
allocated to the isp. for example, the isp may itself have been allocated the address block 200.23.16.020. the isp, in turn, could divide its address block into eight equalsized contiguous address blocks and give one of these address blocks out to each of up to eight organizations that are supported by this isp, as shown below. we have underlined the subnet part of these addresses for your convenience. isps block 200.23.16.020 11001000 00010111 00010000 00000000 organization 0 200.23.16.023 11001000 00010111 00010000 00000000 organization 1 200.23.18.023 11001000 00010111 00010010 00000000 organization 2 200.23.20.023 11001000 00010111 00010100 00000000 organization 7 200.23.30.023 11001000 00010111 00011110 00000000 while obtaining a set of addresses from an isp is one way to get a block of addresses, it is not the only way. clearly, there must also be a way for the isp itself to get a block of addresses. is there a global authority that has ultimate responsibility for managing the ip address space and allocating address blocks to isps and other organizations? indeed there is! ip addresses are managed under the authority of the internet corporation for assigned names and numbers icann icann 2020, based on guidelines set forth in rfc 7020. the role of the nonprofit icann organization is not only to allocate ip addresses, but also to manage the dns root servers. it also has the very contentious job of assigning domain names and resolving domain name disputes. the icann allocates addresses to regional internet registries for example, arin, ripe, apnic, and lacnic, which together form the address m04_kuro5469_08_ge_c04.indd 370 08052021 1406 4.3 the internet protocol ip ipv4, addressing, ipv6, and more 371 supporting organization of icann asoicann 2020, and handle the alloca tionmanagement of addresses within their regions. obtaining a host address the dynamic host configuration protocol once an organization has obtained a block of addresses, it can assign individual ip addresses to the host and router interfaces in its organization. a system administrator will typically manually configure the ip addresses into the router often remotely, with a network management tool. host addresses can also be configured manually, but typically this is done using the dynamic host configuration protocol dhcp rfc 2131. dhcp allows a host to obtain be allocated an ip address automatically. a network administrator can configure dhcp so that a given host receives the same ip address each time it connects to the network, or a host may be assigned a temporary ip address that will be different each time the host connects to the network. in addition to host ip address assignment, dhcp also allows a host to learn additional information, such as its subnet mask, the address of its firsthop router often called the default gateway, and the address of its local dns server. because of dhcps ability to automate the networkrelated aspects of connect ing a host into a network, it is often referred to as a plugandplay or zeroconf zeroconfiguration protocol. this capability makes it very attractive to the network administrator who would otherwise
have to perform these tasks manually! dhcp is also enjoying widespread use in residential internet access networks, enterprise networks, and in wireless lans, where hosts join and leave the network frequently. consider, for example, the student who carries a laptop from a dormitory room to a library to a classroom. it is likely that in each location, the student will be connecting into a new subnet and hence will need a new ip address at each location. dhcp is ideally suited to this situation, as there are many users coming and going, and addresses are needed for only a limited amount of time. the value of dhcps plugandplay capability is clear, since its unimaginable that a system administrator would be able to reconfigure laptops at each location, and few students except those taking a computer networking class! would have the expertise to configure their laptops manually. dhcp is a clientserver protocol. a client is typically a newly arriving host wanting to obtain network configuration information, including an ip address for itself. in the simplest case, each subnet in the addressing sense of figure 4.20 will have a dhcp server. if no server is present on the subnet, a dhcp relay agent typically a router that knows the address of a dhcp server for that network is needed. figure 4.23 shows a dhcp server attached to subnet 223.1.224, with the router serving as the relay agent for arriving clients attached to subnets 223.1.124 and 223.1.324. in our discussion below, well assume that a dhcp server is available on the subnet. m04_kuro5469_08_ge_c04.indd 371 08052021 1406 372 chapter 4 the network layer data plane for a newly arriving host, the dhcp protocol is a fourstep process, as shown in figure 4.24 for the network setting shown in figure 4.23. in this figure, yiaddr as in your internet address indicates the address being allocated to the newly arriving client. the four steps are dhcp server discovery. the first task of a newly arriving host is to find a dhcp server with which to interact. this is done using a dhcp discover message, which a client sends within a udp packet to port 67. the udp packet is encapsulated in an ip datagram. but to whom should this datagram be sent? the host doesnt even know the ip address of the network to which it is attaching, much less the address of a dhcp server for this network. given this, the dhcp client creates an ip datagram containing its dhcp discover message along with the broadcast destination ip address of 255.255.255.255 and a this host source ip address of 0.0.0.0. the dhcp client passes the ip datagram to the link layer, which then broadcasts this frame to all nodes attached to the subnet we will cover the details of linklayer broadcasting in section 6.4. dhcp server offers. a dhcp server receiving a dhcp discover message responds to the client with a dhcp offer message that is broadcast to all 223.1.1.1 223.1.1.2223.1.1.4 223.1.2.9 223.1.3.27 223.1.1.3 223.1.3.1
223.1.3.2223.1.2.1223.1.2.5 223.1.2.2arriving dhcp clientdhcp server figure 4.23 dhcp client and server m04_kuro5469_08_ge_c04.indd 372 08052021 1406 4.3 the internet protocol ip ipv4, addressing, ipv6, and more 373 dhcp server 223.1.2.5arriving client dhcp discover time timesrc 0.0.0.0, 68 dest 255.255.255.255,67 dhcpdiscover yiaddr 0.0.0.0 transaction id 654 src 223.1.2.5, 67 dest 255.255.255.255,68dhcpoffer yiaddrr 223.1.2.4 transaction id 654 dhcp server id 223.1.2.5 lifetime 3600 secsdhcp of fer src 223.1.2.5, 67 dest 255.255.255.255,68 dhcp ack yiaddrr 223.1.2.4 transaction id 655dhcp server id 223.1.2.5 lifetime 3600 secsdhcp acksrc 0.0.0.0, 68 dest 255.255.255.255, 67 dhcprequest yiaddrr 223.1.2.4 transaction id 655 dhcp server id 223.1.2.5lifetime 3600 secsdhcp request figure 4.24 dhcp clientserver interaction nodes on the subnet, again using the ip broadcast address of 255.255.255.255. you might want to think about why this server reply must also be broadcast. since several dhcp servers can be present on the subnet, the client may find itself in the enviable position of being able to choose from among several offers. each server offer message contains the transaction id of the received discover message, the proposed ip address for the client, the network mask, and an ip address lease timethe amount of time for which the ip address will be valid. it is common for the server to set the lease time to several hours or days droms 2002. m04_kuro5469_08_ge_c04.indd 373 08052021 1406 374 chapter 4 the network layer data plane dhcp request. the newly arriving client will choose from among one or more server offers and respond to its selected offer with a dhcp request message, echoing back the configuration parameters. dhcp ack. the server responds to the dhcp request message with a dhcp ack message, confirming the requested parameters. once the client receives the dhcp ack, the interaction is complete and the client can use the dhcpallocated ip address for the lease duration. since a client may want to use its address beyond the leases expiration, dhcp also provides a mechanism that allows a client to renew its lease on an ip address. from a mobility aspect, dhcp does have one very significant shortcoming. since a new ip address is obtained from dhcp each time a node connects to a new subnet, a tcp connection to a remote application cannot be maintained as a mobile node moves between subnets. in chapter 7, we will learn how mobile cel lular networks allow a host to retain its ip address and ongoing tcp connections as it moves between base stations in a providers cellular network. additional details about dhcp can be found in droms 2002 and dhc 2020. an open source reference implementation of dhcp is available from the internet systems consortium isc 2020. 4.3.3 network address translation nat given our discussion about internet addresses and the ipv4 datagram format, were now well aware that every ipcapable device needs an ip address. with the proliferation of small office, home office soho subnets, this would seem to imply that whenever a soho wants to install a lan to connect multiple machines, a range
of addresses would need to be allocated by the isp to cover all of the sohos ip devices including phones, tablets, gaming devices, ip tvs, printers and more. if the subnet grew bigger, a larger block of addresses would have to be allocated. but what if the isp had already allocated the contiguous portions of the soho networks current address range? and what typical homeowner wants or should need to know how to manage ip addresses in the first place? fortunately, there is a simpler approach to address allocation that has found increasingly widespread use in such scenarios network address translation nat rfc 2663; rfc 3022; huston 2004, zhang 2007; huston 2017. figure 4.25 shows the operation of a natenabled router. the natenabled router, residing in the home, has an interface that is part of the home network on the right of figure 4.25. addressing within the home network is exactly as we have seen aboveall four interfaces in the home network have the same subnet address of 10.0.0.024. the address space 10.0.0.08 is one of three portions of the ip address space that is reserved in rfc 1918 for a private network or a realm with private addresses, such as the home network in figure 4.25. a realm with private addresses refers to a network whose addresses only have meaning to m04_kuro5469_08_ge_c04.indd 374 08052021 1406 4.3 the internet protocol ip ipv4, addressing, ipv6, and more 375 devices within that network. to see why this is important, consider the fact that there are hundreds of thousands of home networks, many using the same address space, 10.0.0.024. devices within a given home network can send packets to each other using 10.0.0.024 addressing. however, packets forwarded beyond the home network into the larger global internet clearly cannot use these addresses as either a source or a destination address because there are hundreds of thousands of networks using this block of addresses. that is, the 10.0.0.024 addresses can only have meaning within the given home network. but if private addresses only have meaning within a given network, how is addressing handled when packets are sent to or received from the global internet, where addresses are necessarily unique? the answer lies in understanding nat. the natenabled router does not look like a router to the outside world. instead the nat router behaves to the outside world as a single device with a single ip address. in figure 4.25, all traffic leaving the home router for the larger internet has a source ip address of 138.76.29.7, and all traffic entering the home router must have a destination address of 138.76.29.7. in essence, the natenabled router is hiding the details of the home network from the outside world. as an aside, you might wonder where the home network computers get their addresses and where the router gets its single ip address. often, the answer is the samedhcp! the router gets its address from the isps dhcp server, and the router runs a dhcp server to provide
addresses to computers within the natdhcproutercontrolled home networks address space.3210.0.0.1 138.76.29.710.0.0.410.0.0.2 10.0.0.3nat translation table wan side 138.76.29.7, 5001lan side 10.0.0.1, 3345 . . .. . . s 138.76.29.7, 5001 d 128.119.40.186, 80 1 4 s 128.119.40.186, 80d 138.76.29.7, 5001 s 128.119.40.186, 80d 10.0.0.1, 3345 s 10.0.0.1, 3345d 128.119.40.186, 80 figure 4.25 network address translation m04_kuro5469_08_ge_c04.indd 375 08052021 1406 376 chapter 4 the network layer data plane if all datagrams arriving at the nat router from the wan have the same desti nation ip address specifically, that of the wanside interface of the nat router, then how does the router know the internal host to which it should forward a given datagram? the trick is to use a nat translation table at the nat router, and to include port numbers as well as ip addresses in the table entries. consider the example in figure 4.25. suppose a user sitting in a home net work behind host 10.0.0.1 requests a web page on some web server port 80 with ip address 128.119.40.186. the host 10.0.0.1 assigns the arbitrary source port number 3345 and sends the datagram into the lan. the nat router receives the datagram, generates a new source port number 5001 for the datagram, replaces the source ip address with its wanside ip address 138.76.29.7, and replaces the original source port number 3345 with the new source port number 5001. when generating a new source port number, the nat router can select any source port number that is not currently in the nat translation table. note that because a port number field is 16 bits long, the nat protocol can support over 60,000 simultaneous connections with a single wanside ip address for the router! nat in the router also adds an entry to its nat translation table. the web server, blissfully unaware that the arriving datagram containing the http request has been manipulated by the nat router, responds with a datagram whose destination address is the ip address of the nat router, and whose destination port number is 5001. when this datagram arrives at the nat router, the router indexes the nat translation table using the destination ip address and destination port number to obtain the appropriate ip address 10.0.0.1 and destination port number 3345 for the browser in the home network. the router then rewrites the datagrams destination address and destination port number, and forwards the datagram into the home network. nat has enjoyed widespread deployment in recent years. but nat is not without detractors. first, one might argue that, port numbers are meant to be used for addressing processes, not for addressing hosts. this violation can indeed cause problems for servers running on the home network, since, as we have seen in chapter 2, server processes wait for incoming requests at well known port numbers and peers in a p2p protocol need to accept incoming connections when acting as servers. how can one peer connect to another peer that is behind a nat server, and has a dhcpprovided nat
address? technical solutions to these problems include nat traversal tools rfc 5389 rfc 5389, rfc 5128, ford 2005. more philosophical arguments have also been raised against nat by architectural purists. here, the concern is that routers are meant to be layer 3 i.e., networklayer devices, and should process packets only up to the network layer. nat violates this principle that hosts should be talking directly with each other, without interfering nodes modifying ip addresses, much less port numbers. well return to this debate later in section 4.5, when we cover middleboxes. m04_kuro5469_08_ge_c04.indd 376 08052021 1406 4.3 the internet protocol ip ipv4, addressing, ipv6, and more 377 4.3.4 ipv6 in the early 1990s, the internet engineering task force began an effort to develop a successor to the ipv4 protocol. a prime motivation for this effort was the realization that the 32bit ipv4 address space was beginning to be used up, with new subnets inspecting datagrams firewalls and intrusion detection systems suppose you are assigned the task of administering a home, departmental, university, or corporate network. attackers, knowing the ip address range of your network, can easily send ip datagrams to addresses in your range. these datagrams can do all kinds of devious things, including mapping your network with ping sweeps and port scans, crashing vulnerable hosts with malformed packets, scanning for open tcpudp ports on servers in your network, and infecting hosts by including malware in the packets. as the network administrator, what are you going to do about all those bad guys out there, each capable of sending malicious packets into your network? two popular defense mechanisms to malicious packet attacks are firewalls and intrusion detection systems idss. as a network administrator, you may first try installing a firewall between your network and the internet. most access routers today have firewall capability. firewalls inspect the datagram and segment header fields, denying suspicious data grams entry into the internal network. for example, a firewall may be configured to block all icmp echo request packets see section 5.6, thereby preventing an attack er from doing a traditional port scan across your ip address range. firewalls can also block packets based on source and destination ip addresses and port numbers. additionally, firewalls can be configured to track tcp connections, granting entry only to datagrams that belong to approved connections. additional protection can be provided with an ids. an ids, typically situated at the network boundary, performs deep packet inspection, examining not only header fields but also the payloads in the datagram including applicationlayer data. an ids has a database of packet signatures that are known to be part of attacks. this database is automatically updated as new attacks are discovered. as packets pass through the ids, the ids attempts to match header fields and payloads to the signatures in its signature database. if such a match is found, an alert is created. an intrusion prevention system ips is similar to an ids, except that it actually blocks packets in addition to creating alerts.
well explore firewalls and idss in more detail in section 4.5 and in again chapter 8. can firewalls and idss fully shield your network from all attacks? the answer is clearly no, as attackers continually find new attacks for which signatures are not yet available. but firewalls and traditional signaturebased idss are useful in protecting your network from known attacks.focus on security m04_kuro5469_08_ge_c04.indd 377 08052021 1406 378 chapter 4 the network layer data plane and ip nodes being attached to the internet and being allocated unique ip addresses at a breathtaking rate. to respond to this need for a large ip address space, a new ip protocol, ipv6, was developed. the designers of ipv6 also took this opportunity to tweak and augment other aspects of ipv4, based on the accumulated operational experience with ipv4. the point in time when ipv4 addresses would be completely allocated and hence no new networks could attach to the internet was the subject of considerable debate. the estimates of the two leaders of the ietfs address lifetime expectations working group were that addresses would become exhausted in 2008 and 2018, respectively solensky 1996. in february 2011, iana allocated out the last remaining pool of unassigned ipv4 addresses to a regional registry. while these registries still have available ipv4 addresses within their pool, once these addresses are exhausted, there are no more available address blocks that can be allocated from a central pool huston 2011a. a recent survey of ipv4 addressspace exhaustion, and the steps taken to prolong the life of the address space is richter 2015; a recent analysis of ipv4 address use is huston 2019. although the mid1990s estimates of ipv4 address depletion suggested that a considerable amount of time might be left until the ipv4 address space was exhausted, it was realized that considerable time would be needed to deploy a new technology on such an extensive scale, and so the process to develop ip version 6 ipv6 rfc 2460 was begun rfc 1752. an oftenasked question is what happened to ipv5? it was initially envisioned that the st2 protocol would become ipv5, but st2 was later dropped. an excellent source of information about ipv6 is huitema 1998. ipv6 datagram format the format of the ipv6 datagram is shown in figure 4.26. the most important changes introduced in ipv6 are evident in the datagram format expanded addressing capabilities. ipv6 increases the size of the ip address from 32 to 128 bits. this ensures that the world wont run out of ip addresses. now, every grain of sand on the planet can be ipaddressable. in addition to unicast and multicast addresses, ipv6 has introduced a new type of address, called an anycast address, that allows a datagram to be delivered to any one of a group of hosts. this feature could be used, for example, to send an http get to the nearest of a number of mirror sites that contain a given document. a streamlined 40byte header. as discussed below, a number of
ipv4 fields have been dropped or made optional. the resulting 40byte fixedlength header allows for faster processing of the ip datagram by a router. a new encoding of options allows for more flexible options processing. flow labeling. ipv6 has an elusive definition of a flow. rfc 2460 states that this allows labeling of packets belonging to particular flows for which the sender m04_kuro5469_08_ge_c04.indd 378 08052021 1406 4.3 the internet protocol ip ipv4, addressing, ipv6, and more 379 requests special handling, such as a nondefault quality of service or realtime service. for example, audio and video transmission might likely be treated as a flow. on the other hand, the more traditional applications, such as file transfer and email, might not be treated as flows. it is possible that the traffic carried by a highpriority user for example, someone paying for better service for their traffic might also be treated as a flow. what is clear, however, is that the designers of ipv6 foresaw the eventual need to be able to differentiate among the flows, even if the exact meaning of a flow had yet to be determined. as noted above, a comparison of figure 4.26 with figure 4.17 reveals the sim pler, more streamlined structure of the ipv6 datagram. the following fields are defined in ipv6 version. this 4bit field identifies the ip version number. not surprisingly, ipv6 carries a value of 6 in this field. note that putting a 4 in this field does not create a valid ipv4 datagram. if it did, life would be a lot simplersee the discussion below regarding the transition from ipv4 to ipv6. traffic class. the 8bit traffic class field, like the tos field in ipv4, can be used to give priority to certain datagrams within a flow, or it can be used to give priority to datagrams from certain applications for example, voiceoverip over datagrams from other applications for example, smtp email. flow label. as discussed above, this 20bit field is used to identify a flow of datagrams. payload length. this 16bit value is treated as an unsigned integer giving the number of bytes in the ipv6 datagram following the fixedlength, 40byte datagram header.version trafÔ¨Åc class payload length next hdr hop limitflow label32 bits source address 128 bits destination address 128 bits data figure 4.26 ipv6 datagram format m04_kuro5469_08_ge_c04.indd 379 08052021 1406 380 chapter 4 the network layer data plane next header. this field identifies the protocol to which the contents data field of this datagram will be delivered for example, to tcp or udp. the field uses the same values as the protocol field in the ipv4 header. hop limit. the contents of this field are decremented by one by each router that forwards the datagram. if the hop limit count reaches zero, a router must discard that datagram. source and destination addresses. the various formats of the ipv6 128bit address are described in rfc 4291. data. this is the payload portion of the ipv6 datagram. when the datagram reaches its destination,
the payload will be removed from the ip datagram and passed on to the protocol specified in the next header field. the discussion above identified the purpose of the fields that are included in the ipv6 datagram. comparing the ipv6 datagram format in figure 4.26 with the ipv4 datagram format that we saw in figure 4.17, we notice that several fields appearing in the ipv4 datagram are no longer present in the ipv6 datagram fragmentationreassembly. ipv6 does not allow for fragmentation and reassem bly at intermediate routers; these operations can be performed only by the source and destination. if an ipv6 datagram received by a router is too large to be forwarded over the outgoing link, the router simply drops the datagram and sends a packet too big icmp error message see section 5.6 back to the sender. the sender can then resend the data, using a smaller ip datagram size. fragmentation and reassembly is a timeconsuming operation; removing this functionality from the routers and placing it squarely in the end systems considerably speeds up ip forwarding within the network. header checksum. because the transportlayer for example, tcp and udp and linklayer for example, ethernet protocols in the internet layers perform checksumming, the designers of ip probably felt that this functionality was sufficiently redundant in the network layer that it could be removed. once again, fast processing of ip packets was a central concern. recall from our discussion of ipv4 in section 4.3.1 that since the ipv4 header contains a ttl field similar to the hop limit field in ipv6, the ipv4 header checksum needed to be recomputed at every router. as with fragmentation and reassembly, this too was a costly operation in ipv4. options. an options field is no longer a part of the standard ip header. however, it has not gone away. instead, the options field is one of the possible next headers pointed to from within the ipv6 header. that is, just as tcp or udp protocol headers can be the next header within an ip packet, so too can an options field. the removal of the options field results in a fixedlength, 40byte ip header. m04_kuro5469_08_ge_c04.indd 380 08052021 1406 4.3 the internet protocol ip ipv4, addressing, ipv6, and more 381 transitioning from ipv4 to ipv6 now that we have seen the technical details of ipv6, let us consider a very practi cal matter how will the public internet, which is based on ipv4, be transitioned to ipv6? the problem is that while new ipv6capable systems can be made backwardcompatible, that is, can send, route, and receive ipv4 datagrams, already deployed ipv4capable systems are not capable of handling ipv6 datagrams. several options are possible huston 2011b, rfc 4213. one option would be to declare a flag daya given time and date when all internet machines would be turned off and upgraded from ipv4 to ipv6. the last major technology transition from using ncp to using tcp for reliable transport service occurred almost 40 years ago. even back
then rfc 801, when the internet was tiny and still being administered by a small number of wizards, it was realized that such a flag day was not possible. a flag day involving billions of devices is even more unthinkable today. the approach to ipv4toipv6 transition that has been most widely adopted in practice involves tunneling rfc 4213. the basic idea behind tunnelinga key concept with applications in many other scenarios beyond ipv4toipv6 transition, including wide use in the allip cellular networks that well cover in chapter 7is the following. suppose two ipv6 nodes in this example, b and e in figure 4.27 want to interoperate using ipv6 datagrams but are connected to each other by intervening ipv4 routers. we refer to the intervening set of ipv4 routers between two ipv6 routers as a tunnel, as illustrated in figure 4.27. with tunneling, the ipv6 node on the sending side of the tunnel in this example, b takes the entire ipv6 datagram and puts it in the data payload field of an ipv4 datagram. this ipv4 datagram is then addressed to the ipv6 node on the receiving side of the tunnel in this example, e and sent to the first node in the tunnel in this example, c. the intervening ipv4 routers in the tunnel route this ipv4 datagram among themselves, just as they would any other datagram, blissfully unaware that the ipv4 datagram itself contains a complete ipv6 datagram. the ipv6 node on the receiving side of the tunnel eventually receives the ipv4 datagram it is the destination of the ipv4 datagram!, determines that the ipv4 datagram contains an ipv6 datagram by observing that the protocol number field in the ipv4 datagram is 41 rfc 4213, indicating that the ipv4 payload is a ipv6 datagram, extracts the ipv6 datagram, and then routes the ipv6 datagram exactly as it would if it had received the ipv6 datagram from a directly connected ipv6 neighbor. we end this section by noting that while the adoption of ipv6 was initially slow to take off lawton 2001; huston 2008b, momentum has been building. nist nist ipv6 2020 reports that more than a third of us government secondlevel domains are ipv6enabled. on the client side, google reports that about 25 percent of the clients accessing google services do so via ipv6 google ipv6 2020. other recent measurements czyz 2014 indicate that ipv6 adoption has been accelerating. the proliferation of devices such as ipenabled phones and other portable devices m04_kuro5469_08_ge_c04.indd 381 08052021 1406 382 chapter 4 the network layer data plane provides an additional push for more widespread deployment of ipv6. europes third generation partnership program 3gpp 2020 has specified ipv6 as the standard addressing scheme for mobile multimedia. one important lesson that we can learn from the ipv6 experience is that it is enor mously difficult to change networklayer protocols. since the early 1990s, numerous new networklayer protocols have been trumpeted as the next major revolution for the internet, but most of these protocols have had
limited penetration to date. these protocols include ipv6, multicast protocols, and resource reservation protocols; a discussion of these latter two classes of protocols can be found in the online supplement to this text. indeed, introducing new protocols into the network layer is like replacing the foundation of a houseit is difficult to do without tearing the whole house down or at least temporarily relocating the houses residents. on the other hand, the internet has witnessed rapid deployment of new protocols at the application layer. the classic examples, of course, are the web, instant messaging, streaming media, distributed games, and various forms of social media. introducing new applicationlayer protocols is like adding a new layer of paint to a houseit is relatively easy to do, and if you choose an attractive color, others in the neighborhood will copy you. a b c d e fipv6 a to b ipv6physical view b to c ipv4 encapsulating ipv6d to e ipv4 encapsulating ipv6e to f ipv6ipv6 ipv4 ipv4 ipv6 ipv6 flow x source a dest f datasource b dest esource b dest ea b e fipv6logical view ipv6 tunnelipv6 ipv6 flow x source a dest f dataflow x source a dest f dataflow x source a dest f data figure 4.27 tunneling m04_kuro5469_08_ge_c04.indd 382 08052021 1406 4.4 generalized forwarding and sdn 383 in summary, in the future, we can certainly expect to see changes in the internets network layer, but these changes will likely occur on a time scale that is much slower than the changes that will occur at the application layer. 4.4 generalized forwarding and sdn recall that section 4.2.1 characterized destinationbased forwarding as the two steps of looking up a destination ip address match, then sending the packet into the switching fabric to the specified output port action. lets now consider a significantly more general matchplusaction paradigm, where the match can be made over multiple header fields associated with different protocols at different layers in the protocol stack. the action can include forwarding the packet to one or more output ports as in destinationbased forwarding, load balancing packets across multiple outgoing interfaces that lead to a service as in load balancing, rewriting header values as in nat, purposefully blockingdropping a packet as in a firewall, sending a packet to a special server for further processing and action as in dpi, and more. in generalized forwarding, a matchplusaction table generalizes the notion of the destinationbased forwarding table that we encountered in section 4.2.1. because forwarding decisions may be made using networklayer andor linklayer source and destination addresses, the forwarding devices shown in figure 4.28 are more accurately described as packet switches rather than layer 3 routers or layer 2 switches. thus, in the remainder of this section, and in section 5.5, well refer to these devices as packet switches, adopting the terminology that is gaining widespread adoption in sdn literature. figure 4.28 shows a matchplusaction table in each packet switch, with the table being computed, installed, and updated by a remote
controller. we note that while it is possible for the control components at the individual packet switches to interact with each other e.g., in a manner similar to that in figure 4.2, in practice, generalized matchplusaction capabilities are implemented via a remote controller that computes, installs, and updates these tables. you might take a minute to compare figures 4.2, 4.3, and 4.28what similarities and differences do you notice between destinationbased forwarding shown in figures 4.2 and 4.3, and generalized forwarding shown in figure 4.28? our following discussion of generalized forwarding will be based on open flow mckeown 2008, onf 2020, casado 2014, tourrilhes 2014a highly visible standard that has pioneered the notion of the matchplusaction forwarding abstraction and controllers, as well as the sdn revolution more generally feamster 2013. well primarily consider openflow 1.0, which introduced key sdn abstractions and functionality in a particularly clear and concise manner. later versions of openflow introduced additional capabilities as a result of experience gained through m04_kuro5469_08_ge_c04.indd 383 08052021 1406 384 chapter 4 the network layer data plane implementation and use; current and earlier versions of the openflow standard can be found at onf 2020. each entry in the matchplusaction forwarding table, known as a flow table in openflow, includes a set of header field values to which an incoming packet will be matched. as in the case of destinationbased forwarding, hardwarebased matching is most rapidly performed in tcam memory, with more than a million destination address entries being possible bosshart 2013. a packet that matches no flow table entry can be dropped or sent to the remote controller for more processing. in practice, a flow table may be implemented by multiple flow tables for performance or cost reasons bosshart 2013, but well focus here on the abstraction of a single flow table.1101 0100remote controller values in arriving packet s header 1 23local Ô¨Çow table ... ... ... ...... ... ... ...... ... ... ...headersc ounters actionscontr ol plane data plane figure 4.28 generalized forwarding each packet switch contains a matchplusaction table that is computed and distributed by a remote controller m04_kuro5469_08_ge_c04.indd 384 08052021 1406 4.4 generalized forwarding and sdn 385 a set of counters that are updated as packets are matched to flow table entries. these counters might include the number of packets that have been matched by that table entry, and the time since the table entry was last updated. a set of actions to be taken when a packet matches a flow table entry. these actions might be to forward the packet to a given output port, to drop the packet, makes copies of the packet and sent them to multiple output ports, andor to rewrite selected header fields. well explore matching and actions in more detail in sections 4.4.1 and 4.4.2, respectively. well then study how the networkwide collection of perpacket switch matching rules can be used to implement a wide range of functions including routing, layer2 switching, firewalling, loadbalancing, virtual networks, and more in section 4.4.3. in closing, we
note that the flow table is essentially an api, the abstraction through which an individual packet switchs behavior can be programmed; well see in section 4.4.3 that networkwide behaviors can similarly be programmed by appropriately programmingconfiguring these tables in a collection of network packet switches casado 2014. 4.4.1 match figure 4.29 shows the 11 packetheader fields and the incoming port id that can be matched in an openflow 1.0 matchplusaction rule. recall from section 1.5.2 that a linklayer layer 2 frame arriving to a packet switch will contain a networklayer layer 3 datagram as its payload, which in turn will typically contain a transportlayer layer 4 segment. the first observation we make is that openflows match abstraction allows for a match to be made on selected fields from three layers of protocol headers thus rather brazenly defying the layer ing principle we studied in section 1.5 . since weve not yet covered the link layer, suffice it to say that the source and destination mac addresses shown in figure 4.29 are the linklayer addresses associated with the frames sending and receiving interfaces; by forwarding on the basis of ethernet addresses rather than ip addresses, we can see that an openflowenabled device can equally perform ingress portsrc macdst maceth typevlan idvlan priip src ip dstip protoip tostcpudp src porttcpudp dst port transport layer network layer link layer figure 4.29 packet matching fields, openflow 1.0 flow table m04_kuro5469_08_ge_c04.indd 385 08052021 1406 386 chapter 4 the network layer data plane as a router layer3 device forwarding datagrams as well as a switch layer2 device forwarding frames. the ethernet type field corresponds to the upper layer protocol e.g., ip to which the frames payload will be demultiplexed, and the vlan fields are concerned with socalled virtual local area networks that well study in chapter 6. the set of 12 values that can be matched in the openflow 1.0 specification has grown to 41 values in more recent openflow specifications bosshart 2014. the ingress port refers to the input port at the packet switch on which a packet is received. the packets ip source address, ip destination address, ip protocol field, and ip type of service fields were discussed earlier in section 4.3.1. the transportlayer source and destination port number fields can also be matched. flow table entries may also have wildcards. for example, an ip address of 128.119.. in a flow table will match the corresponding address field of any datagram that has 128.119 as the first 16 bits of its address. each flow table entry also has an associated priority. if a packet matches multiple flow table entries, the selected match and corresponding action will be that of the highest priority entry with which the packet matches. lastly, we observe that not all fields in an ip header can be matched. for exam ple openflow does not allow matching on the basis of ttl field or datagram length field. why are some fields allowed for matching, while others are not? undoubtedly, the answer
has to do with the tradeoff between functionality and complexity. the art in choosing an abstraction is to provide for enough functionality to accomplish a task in this case to implement, configure, and manage a wide range of networklayer functions that had previously been implemented through an assortment of networklayer devices, without overburdening the abstraction with so much detail and generality that it becomes bloated and unusable. butler lampson has famously noted lampson 1983 do one thing at a time, and do it well. an interface should capture the minimum essentials of an abstraction. dont generalize; generalizations are generally wrong. given openflows success, one can surmise that its designers indeed chose their abstraction well. additional details of openflow matching can be found in onf 2020. 4.4.2 action as shown in figure 4.28, each flow table entry has a list of zero or more actions that determine the processing that is to be applied to a packet that matches a flow table entry. if there are multiple actions, they are performed in the order specified in the list. m04_kuro5469_08_ge_c04.indd 386 08052021 1406 4.4 generalized forwarding and sdn 387 among the most important possible actions are forwarding. an incoming packet may be forwarded to a particular physical output port, broadcast over all ports except the port on which it arrived or multicast over a selected set of ports. the packet may be encapsulated and sent to the remote controller for this device. that controller then may or may not take some action on that packet, including installing new flow table entries, and may return the packet to the device for forwarding under the updated set of flow table rules. dropping. a flow table entry with no action indicates that a matched packet should be dropped. modifyfield. the values in 10 packetheader fields all layer 2, 3, and 4 fields shown in figure 4.29 except the ip protocol field may be rewritten before the packet is forwarded to the chosen output port. 4.4.3 openflow examples of matchplusaction in action having now considered both the match and action components of generalized forwarding, lets put these ideas together in the context of the sample network shown in figure 4.30. the network has 6 hosts h1, h2, h3, h4, h5 and h6 and three packet switches s1, s2 and s3, each with four local interfaces numbered 1 through 4. well consider a number of networkwide behaviors that wed like to implement, and the flow table entries in s1, s2 and s3 needed to implement this behavior. 1 4 s3s3 s1s2 231 234host h6 10.3.0.6openflow controller host h5 10.3.0.5 host h1 10.1.0.1host h2 10.1.0.2host h3 10.2.0.3host h4 10.2.0.4 1 4 23 figure 4.30 openflow matchplusaction network with three packet switches, 6 hosts, and an openflow controller m04_kuro5469_08_ge_c04.indd 387 08052021 1406 388 chapter 4 the network layer data plane a first example simple forwarding as a very simple example, suppose that the desired forwarding behavior is that packets from h5 or h6 destined to h3 or h4 are
to be forwarded from s3 to s1, and then from s1 to s2 thus completely avoiding the use of the link between s3 and s2. the flow table entry in s1 would be s1 flow table example 1 match action ingress port 1 ; ip src 10.3.. ; ip dst 10.2.. forward4 of course, well also need a flow table entry in s3 so that datagrams sent from h5 or h6 are forwarded to s1 over outgoing interface 3 s3 flow table example 1 match action ip src 10.3.. ; ip dst 10.2.. forward3 lastly, well also need a flow table entry in s2 to complete this first example, so that datagrams arriving from s1 are forwarded to their destination, either host h3 or h4 s2 flow table example 1 match action ingress port 2 ; ip dst 10.2.0.3 forward3 ingress port 2 ; ip dst 10.2.0.4 forward4 a second example load balancing as a second example, lets consider a loadbalancing scenario, where datagrams from h3 destined to 10.1.. are to be forwarded over the direct link between s2 and s1, while datagrams from h4 destined to 10.1.. are to be forwarded over the link between s2 and s3 and then from s3 to s1. note that this behavior couldnt be achieved with ips destinationbased forwarding. in this case, the flow table in s2 would be m04_kuro5469_08_ge_c04.indd 388 08052021 1406 4.4 generalized forwarding and sdn 389 s2 flow table example 2 match action ingress port 3; ip dst 10.1.. forward2 ingress port 4; ip dst 10.1.. forward1 flow table entries are also needed at s1 to forward the datagrams received from s2 to either h1 or h2; and flow table entries are needed at s3 to forward datagrams received on interface 4 from s2 over interface 3 toward s1. see if you can figure out these flow table entries at s1 and s3. a third example firewalling as a third example, lets consider a firewall scenario in which s2 wants only to receive on any of its interfaces traffic sent from hosts attached to s3. s2 flow table example 3 match action ip src 10.3.. ip dst 10.2.0.3 forward3 ip src 10.3.. ip dst 10.2.0.4 forward4 if there were no other entries in s2s flow table, then only traffic from 10.3.. would be forwarded to the hosts attached to s2. although weve only considered a few basic scenarios here, the versatility and advantages of generalized forwarding are hopefully apparent. in homework problems, well explore how flow tables can be used to create many different logical behaviors, including virtual networkstwo or more logically separate networks each with their own independent and distinct forwarding behaviorthat use the same physical set of packet switches and links. in section 5.5, well return to flow tables when we study the sdn controllers that compute and distribute the flow tables, and the protocol used for communicating between a packet switch and its controller. the matchplusaction flow tables that weve seen in this section are actually a
limited form of programmability, specifying how a router should forward and manipulate e.g., change a header field a datagram, based on the match between the datagrams header values and the matching conditions. one could imagine an even richer form of programmabilitya programming language with higherlevel constructs such as variables, general purpose arithmetic and boolean operations, variables, functions, and conditional statements, as well as constructs specifically m04_kuro5469_08_ge_c04.indd 389 08052021 1406 390 chapter 4 the network layer data plane designed for datagram processing at line rate. p4 programming protocolindependent packet processors p4 2020 is such a language, and has gained considerable interest and traction since its introduction five years ago bosshart 2014. 4.5 middleboxes routers are the workhorses of the network layer, and in this chapter, weve learned how they accomplish their bread and butter job of forwarding ip datagrams toward their destination. but in this chapter, and in earlier chapters, weve also encountered other network equipment boxes within the network that sit on the data path and perform functions other than forwarding. we encountered web caches in section 2.2.5; tcp connection splitters in section 3.7; and network address translation nat, firewalls, and intrusion detection systems in section 4.3.4. we learned in section 4.4 that generalized forwarding allows a modern router to easily and natu rally perform firewalling and load balancing with generalized match plus action operations. in the past 20 years, weve seen tremendous growth in such middleboxes, which rfc 3234 defines as any intermediary box performing functions apart from normal, standard functions of an ip router on the data path between a source host and destination host we can broadly identify three types of services performed by middleboxes nat translation. as we saw in section 4.3.4, nat boxes implement private network addressing, rewriting datagram header ip addresses and port numbers. security services. firewalls block traffic based on headerfield values or redirect packets for additional processing, such as deep packet inspection dpi. intrusion detection systems ids are able to detect predetermined patterns and filter packets accordingly. applicationlevel email filters block emails considered to be junk, phishing or otherwise posing a security threat. performance enhancement. these middleboxes perform services such as compression, content caching, and load balancing of service requests e.g., an http request, or a search engine query to one of a set of servers that can provide the desired service. many other middleboxes rfc 3234 provide capabilities belonging to these three types of services, in both wired and wireless cellular wang 2011 networks. with the proliferation of middleboxes comes the attendant need to operate, manage, and upgrade this equipment. separate specialized hardware boxes, separate m04_kuro5469_08_ge_c04.indd 390 08052021 1406 4.5 middleboxes 391 software stacks, and separate managementoperation skills translate to significant operational and capital costs. it is perhaps not surprising then that researchers are exploring the use of commodity hardware networking, computing, and storage with specialized software built on top of a common software stackexactly the approach taken in sdn a decade earlierto implement these services. this approach has become known
as network function virtualization nfv mijumbi 2016. an alternate approach that has also been explored is to outsource middlebox functionality to the cloud sherry 2012. for many years, the internet architecture had a clear separation between the network layer and the transportapplication layers. in these good old days, the network layer consisted of routers, operating within the network core, to forward datagrams toward their destinations using fields only in the ip datagram header. the transport and application layers were implemented in hosts operating at the network edge. hosts exchanged packets among themselves in transportlayer segments and applicationlayer messages. todays middleboxes clearly violate this separation a nat box, sitting between a router and host, rewrites networklayer ip addresses and transportlayer port numbers; an innetwork firewall blocks suspect datagrams using applicationlayer e.g., http, transportlayer, and networklayer header fields; email security gateways are injected between the email sender whether malicious or not and the intended email receiver, filtering applicationlayer email messages based on whitelistedblacklisted ip addresses as well as email message content. while there are those who have considered such middleboxes as a bit of an architectural abomination garfinkel 2003, others have adopted the philosophy that such middleboxes exist for important and permanent reasonsthat they fill an important needand that well have more, not fewer, middleboxes in the future walfish 2004. see the section in attached sidebar on the endtoend argument for a slightly different lens on the question of where to place service functionality in a network. architectural principles of the internet given the phenomenal success of the internet, one might naturally wonder about the architectural principles that have guided the development of what is arguably the larg est and most complex engineered system ever built by humankind. rfc 1958, entitled architectural principles of the internet, suggests that these principles, if indeed they exist, are truly minimal many members of the internet community would argue that there is no architecture, but only a tradition, which was not written down for the first 25 years or at least not by the iab. however, in very general terms, the community believes that the goal is connectivity, the tool is the internet protocol, and the intelligence is end to end rather than hidden in the network. rfc 1958principles in practice m04_kuro5469_08_ge_c04.indd 391 08052021 1406 392 chapter 4 the network layer data plane so there we have it! the goal was to provide connectivity, there would be just one net worklayer protocol the celebrated ip protocol we have studied in this chapter, and intelli gence one might say the complexity would be placed at the network edge, rather than in the network core. lets look these last two considerations in a bit more detail. the ip hourglass by now, were well acquainted with the fivelayer internet protocol stack that we first encountered in figure 1.23. another visualization of this stack, shown in figure 4.31 and sometimes known as the ip hourglass, illustrates the narrow waist of the layered internet architecture. while the internet has many protocols
in the physical, link, transport, and application layers, there is only one network layer protocolthe ip protocol. this is the one protocol that must be implemented by each and every of the billions of internet connected devices. this narrow waist has played a critical role in the phenomenal growth of the internet. the relative simplicity of the ip protocol, and the fact that it is the only universal requirement for internet connectivity has allowed a rich variety of networkswith very different underlying linklayer technologies, from ethernet to wifi to cellular to optical networks to become part of the internet. clark 1997 notes that role of the narrow waist, which he refers to as a spanning layer, is to hide the detailed differences among these various underlying technologies and present a uniform service interface to the applications above. for the ip layer in particular how does the ip spanning layer achieve its purpose? it defines a basic set of services, which were carefully designed so that they could be constructed from a wide range of underlying network technologies. software, as a part of the internet i.e., network layer, translates what each of these lowerlayer tech nologies offers into the common service of the internet layer. for a discussion the narrow waist, including examples beyond the internet, see beck 2019; akhshabi 2011. we note here that as the internet architecture enters midlife certainly, iptcp udphttpsmtp quic dashrtp ethernet pp p wifi bluetoot h pdcp coppe rÔ¨Å ber radio figure 4.31 the narrowwaisted internet hourglass m04_kuro5469_08_ge_c04.indd 392 08052021 1406 4.5 middleboxes 393 the internets age of 40 to 50 years qualifies it for middle age!, one might observe that its narrow waist may indeed be widening a bit as often happens in middle age! via the rise of middleboxes. the endtoend argument the third principle in rfc 1958that intelligence is end to end rather than hidden in the networkspeaks to the placement of functionality within the network. here, weve seen that until the recent rise of middleboxes, most internet functionality was indeed placed at the networks edge. its worth noting that, in direct contrast with the 20 th century telephone networkwhich had dumb nonprogrammable endpoints and smart switchesthe internet has always had smart endpoints programmable computers, enabling complex functionality to be placed at those endpoints. but a more principled argument for actually placing functionality at the endpoints was made in an extremely influential paper saltzer 1984 that articulated the endtoend argument. it stated . . . there is a list of functions each of which might be implemented in any of several ways by the communication subsystem, by its client, as a joint venture, or perhaps redundantly, each doing its own version. in reasoning about this choice, the require ments of the application provide the basis for a class of arguments, which go as follows the function in question can completely and correctly be implemented only with the knowledge and help of the application standing at the end points of the com munication
system. therefore, providing that questioned function as a feature of the communication system itself is not possible. sometimes an incomplete version of the function provided by the communication system may be useful as a performance enhancement. we call this line of reasoning against lowlevel function implementation the endtoend argument. an example illustrating the endtoend argument is that of reliable data transfer. since packets can be lost within the network e.g., even without buffer overflows, a router hold ing a queued packet could crash, or a portion of the network in which a packet is queued becomes detached due to link failures, the endpoints in this case via the tcp protocol must perform error control. as we will see in chapter 6, some linklayer protocols do indeed perform local error control, but this local error control alone is incomplete and not sufficient to provide endtoend reliable data transfer. and so reliable data transfer must be implemented end to end. rfc 1958 deliberately includes only two references, both of which are fundamental papers on the internet architecture. one of these is the endtoend paper itself saltzer 1984; the second paper clark 1988 discusses the design philosophy of the darpa internet protocols. both are interesting must reads for anyone interested in internet architecture. followons to clark 1988 are blumenthal 2001; clark 2005 which reconsider internet architecture in light of the much more complex environment in which todays internet must now operate. m04_kuro5469_08_ge_c04.indd 393 08052021 1406 394 chapter 4 the network layer data plane 4.6 summary in this chapter, weve covered the data plane functions of the network layerthe per router functions that determine how packets arriving on one of a routers input links are forwarded to one of that routers output links. we began by taking a detailed look at the internal operations of a router, studying input and output port functionality and destinationbased forwarding, a routers internal switching mechanism, packet queue management and more. we covered both traditional ip forwarding where forwarding is based on a datagrams destination address and generalized forwarding where forwarding and other functions may be performed using values in several different fields in the datagrams header and seen the versatility of the latter approach. we also studied the ipv4 and ipv6 protocols in detail, and internet addressing, which we found to be much deeper, subtler, and more interesting than we might have expected. we completed our study of the networklayer data plane with a study of middleboxes, and a broad discussion of internet architecture. with our newfound understanding of the networklayers data plane, were now ready to dive into the network layers control plane in chapter 5! homework problems and questions chapter 4 review questions section 4.1 r1. lets review some of the terminology used in this textbook. recall that the name of a transportlayer packet is segment and that the name of a linklayer packet is frame. what is the name of a networklayer packet? recall that both routers and linklayer switches are called packet switches. what
is the fundamental difference between a router and linklayer switch? r2. we noted that network layer functionality can be broadly divided into data plane functionality and control plane functionality. what are the main functions of the data plane? of the control plane? r3. we made a distinction between the forwarding function and the routing function performed in the network layer. what are the key differences between routing and forwarding? r4. what is the role of the forwarding table within a router? r5. we said that a network layers service model defines the characteristics of endtoend transport of packets between sending and receiving hosts. what is the service model of the internets network layer? what guarantees are made by the internets service model regarding the hosttohost delivery of datagrams? section 4.2 r6. in section 4.2, we saw that a router typically consists of input ports, output ports, a switching fabric and a routing processor. which of these are implemented in m04_kuro5469_08_ge_c04.indd 394 08052021 1406 homework problems and ques tions 395 hardware and which are implemented in software? why? returning to the notion of the network layers data plane and control plane, which are implemented in hardware and which are implemented in software? why? r7. how can the input ports of a highspeed router facilitate fast forwarding decisions? r8. what is meant by destinationbased forwarding? how does this differ from generalized forwarding assuming youve read section 4.4, which of the two approaches are adopted by softwaredefined networking? r9. suppose that an arriving packet matches two or more entries in a routers forwarding table. with traditional destinationbased forwarding, what rule does a router apply to determine which of these rules should be applied to determine the output port to which the arriving packet should be switched? r10. switching in a router forwards data from an input port to an output port. what is the advantage of switching via an interconnection network over switching via memory and switching via bus? r11. what is the role of a packet scheduler at the output port of a router? r12. a. what is a droptail policy? b. what are aqm algorithms? c. name one of the most widely studied and implemented aqm algorithms and explain how it works. r13. what is hol blocking? does it occur in input ports or output ports? r14. in section 4.2, we studied fifo, priority, round robin rr, and weighted fair queuing wfq packet scheduling disciplines? which of these queuing disciplines ensure that all packets depart in the order in which they arrived? r15. give an example showing why a network operator might want one class of packets to be given priority over another class of packets. r16. what is an essential different between rr and wfq packet scheduling? is there a case hint consider the wfq weights where rr and wfq will behave exactly the same? section 4.3 r17. suppose host a sends host b a tcp segment encapsulated in an ip data gram. when host b receives the datagram, how
does the network layer in host b know it should pass the segment that is, the payload of the datagram to tcp rather than to udp or to some other upperlayer protocol? r18. what field in the ip header can be used to ensure that a packet is forwarded through no more than n routers? r19. recall that we saw the internet checksum being used in both transportlayer segment in udp and tcp headers, figures 3.7 and 3.29 respectively and in networklayer datagrams ip header, figure 4.17. now consider a transport m04_kuro5469_08_ge_c04.indd 395 08052021 1406 396 chapter 4 the network layer data plane layer segment encapsulated in an ip datagram. are the checksums in the seg ment header and datagram header computed over any common bytes in the ip datagram? explain your answer. r20. when a large datagram is fragmented into multiple smaller datagrams, where are these smaller datagrams reassembled into a single larger datagram? r21. how many ip addresses does a router have? r22. what is the 32bit binary equivalent of the ip address 202.3.14.25? r23. visit a host that uses dhcp to obtain its ip address, network mask, default router, and ip address of its local dns server. list these values. r24. suppose there are four routers between a source host and a destination host. ignoring fragmentation, an ip datagram sent from the source host to the destination host will travel over how many interfaces? how many forwarding tables will be indexed to move the datagram from the source to the destination? r25. suppose an application generates chunks of 40 bytes of data every 20 msec, and each chunk gets encapsulated in a tcp segment and then an ip datagram. what percentage of each datagram will be overhead, and what percentage will be application data? r26. suppose you purchase a wireless router and connect it to your cable modem. also suppose that your isp dynamically assigns your connected device that is, your wireless router one ip address. also suppose that you have five pcs at home that use 802.11 to wirelessly connect to your wireless router. how are ip addresses assigned to the five pcs? does the wireless router use nat? why or why not? r27. what is meant by the term route aggregation? why is it useful for a router to perform route aggregation? r28. what is meant by a plugandplay or zeroconf protocol? r29. what is a private network address? should a datagram with a private network address ever be present in the larger public internet? explain. r30. compare and contrast the ipv4 and the ipv6 header fields. do they have any fields in common? r31. it has been said that when ipv6 tunnels through ipv4 routers, ipv6 treats the ipv4 tunnels as linklayer protocols. do you agree with this statement? why or why not? section 4.4 r32. how does generalized forwarding differ from destinationbased forwarding? r33. what is the difference between a forwarding table that we encountered in destinationbased forwarding in section 4.1 and openflows
flow table that we encountered in section 4.4? m04_kuro5469_08_ge_c04.indd 396 08052021 1406 problems 397 r34. what is meant by the match plus action operation of a router or switch? in the case of destinationbased forwarding packet switch, what is matched and what is the action taken? in the case of an sdn, name three fields that can be matched, and three actions that can be taken. r35. name three header fields in an ip datagram that can be matched in open flow 1.0 generalized forwarding. what are three ip datagram header fields that cannot be matched in openflow? problems p1. consider the network below. a. show the forwarding table in router a, such that all traffic destined to host h3 is forwarded through interface 3. b. can you write down a forwarding table in router a, such that all traffic from h1 destined to host h3 is forwarded through interface 3, while all traffic from h2 destined to host h3 is forwarded through interface 4? hint this is a trick question. b a13 242 d1 23 h3h1 h21 12 c p2. suppose two packets arrive to two different input ports of a router at exactly the same time. also suppose there are no other packets anywhere in the router. a. suppose the two packets are to be forwarded to two different output ports. is it possible to forward the two packets through the switch fabric at the same time when the fabric uses a shared bus? b. suppose the two packets are to be forwarded to two different output ports. is it possible to forward the two packets through the switch fabric at the same time when the fabric uses switching via memory? c. suppose the two packets are to be forwarded to the same output port. is it possible to forward the two packets through the switch fabric at the same time when the fabric uses a crossbar? m04_kuro5469_08_ge_c04.indd 397 08052021 1406 398 chapter 4 the network layer data plane p3. in section 4.2.4, it was said that if r_switch is n times faster than r_line, then only negligible queuing will occur at the input ports, even if all the packets are to be forwarded to the same output port. now suppose that r_switch r_line, but all packets are to be forwarded to different output ports. let d be the time to transmit a packet. as a function of d, what is the maximum input queuing delay for a packet for the a memory, b bus, and c crossbar switching fabrics? p4. consider the switch shown below. suppose that all datagrams have the same fixed length, that the switch operates in a slotted, synchronous manner, and that in one time slot a datagram can be transferred from an input port to an output port. the switch fabric is a crossbar so that at most one datagram can be transferred to a given output port in a time slot, but different output ports can receive datagrams from different input ports
in a single time slot. what is the minimal number of time slots needed to transfer the packets shown from input ports to their output ports, assuming any input queue scheduling order you want i.e., it need not have hol blocking? what is the largest number of slots needed, assuming the worstcase scheduling order you can devise, assuming that a nonempty input queue is never idle? xyswitch fabricoutput port x output port y output port zx yz p5. suppose that the weq scheduling policy is applied to a buffer that supports three classes, and suppose the weights are 0.5, 0.25, and 0.25 for the three classes. a. suppose that each class has a large number of packets in the buffer. in what sequence might the three classes be served in order to achieve the wfq weights? for round robin scheduling, a natural sequence is 123123123 . . .. b. suppose that classes 1 and 2 have a large number of packets in the buffer, and there are no class 3 packets in the buffer. in what sequence might the three classes be served in to achieve the wfq weights? m04_kuro5469_08_ge_c04.indd 398 08052021 1406 problems 399 p6. consider the figure below. answer the following questions timearrivals departurespacket in service time1 16 102 89 34 57 1112 1t 0 t 2 t 4 t 6 t 8 t 10 t 12 t 14 a. assuming fifo service, indicate the time at which packets 2 through 12 each leave the queue. for each packet, what is the delay between its arrival and the beginning of the slot in which it is transmitted? what is the average of this delay over all 12 packets? b. now assume a priority service, and assume that oddnumbered packets are high priority, and evennumbered packets are low priority. indicate the time at which packets 2 through 12 each leave the queue. for each packet, what is the delay between its arrival and the beginning of the slot in which it is transmitted? what is the average of this delay over all 12 packets? c. now assume round robin service. assume that packets 1, 2, 3, 6, 11, and 12 are from class 1, and packets 4, 5, 7, 8, 9, and 10 are from class 2. indicate the time at which packets 2 through 12 each leave the queue. for each packet, what is the delay between its arrival and its departure? what is the average delay over all 12 packets? d. now assume weighted fair queuing wfq service. assume that oddnumbered packets are from class 1, and evennumbered packets are from class 2. class 1 has a wfq weight of 2, while class 2 has a wfq weight of 1. note that it may not be possible to achieve an idealized wfq schedule as described in the text, so indicate why you have chosen the particular packet to go into service at each time slot. for each packet what is the delay between its arrival and its
departure? what is the average delay over all 12 packets? e. what do you notice about the average delay in all four cases fifo, rr, priority, and wfq? m04_kuro5469_08_ge_c04.indd 399 08052021 1406 400 chapter 4 the network layer data plane p7. consider again the figure for p6. a. assume a priority service, with packets 1, 4, 5, 6, and 11 being high priority packets. the remaining packets are low priority. indicate the slots in which packets 2 through 12 each leave the queue. b. now suppose that round robin service is used, with packets 1, 4, 5, 6, and 11 belonging to one class of traffic, and the remaining packets belonging to the second class of traffic. indicate the slots in which packets 2 through 12 each leave the queue. c. now suppose that wfq service is used, with packets 1, 4, 5, 6, and 11 belonging to one class of traffic, and the remaining packets belonging to the second class of traffic. class 1 has a wfq weight of 1, while class 2 has a wfq weight of 2 note that these weights are different than in the previous question. indicate the slots in which packets 2 through 12 each leave the queue. see also the caveat in the question above regarding wfq service. p8. consider a datagram network using 32bit host addresses. suppose a router has four links, numbered 0 through 3, and packets are to be forwarded to the link interfaces as follows destination address range link interface 11100000 00000000 00000000 00000000 through 0 11100000 00111111 11111111 11111111 11100000 01000000 00000000 00000000 through 1 11100000 01000000 11111111 11111111 11100000 01000001 00000000 00000000 through 2 11100001 01111111 11111111 11111111 otherwise 3 a. provide a forwarding table that has five entries, uses longest prefix matching, and forwards packets to the correct link interfaces. b. describe how your forwarding table determines the appropriate link interface for datagrams with destination addresses 11001000 10010001 01010001 01010101 11100001 01000000 11000011 00111100 11100001 10000000 00010001 01110111 m04_kuro5469_08_ge_c04.indd 400 08052021 1406 problems 401 p9. consider a datagram network using 8bit host addresses. suppose a router uses longest prefix matching and has the following forwarding table prefix match interface 00 0 010 1 011 2 10 2 11 3 for each of the four interfaces, give the associated range of destination host addresses and the number of addresses in the range. p10. consider a datagram network using 8bit host addresses. suppose a router uses longest prefix matching and has the following forwarding table prefix match interface 1 0 10 1 111 2 otherwise 3 for each of the four interfaces, give the associated range of destination host addresses and the number of addresses in the range. p11. consider a router that interconnects three subnets subnet 1, subnet 2, and subnet 3. suppose all of the interfaces in each of these three subnets are required to have the prefix 223.1.1724. also suppose that subnet 1 is required to support at least 60 interfaces, subnet 2 is to
support at least 90 interfaces, and subnet 3 is to support at least 12 interfaces. provide three network addresses of the form a.b.c.dx that satisfy these constraints. p12. in section 4.2.2, an example forwarding table using longest prefix matching is given. rewrite this forwarding table using the a.b.c.dx notation instead of the binary string notation. p13. in problem p8, you are asked to provide a forwarding table using longest prefix matching. rewrite this forwarding table using the a.b.c.dx notation instead of the binary string notation. p14. consider a subnet with prefix 128.119.40.12826. give an example of one ip address of form xxx.xxx.xxx.xxx that can be assigned to this network. m04_kuro5469_08_ge_c04.indd 401 08052021 1406 402 chapter 4 the network layer data plane suppose an isp owns the block of addresses of the form 128.119.40.6426. suppose it wants to create four subnets from this block, with each block having the same number of ip addresses. what are the prefixes of form a.b.c.dx for the four subnets? p15. consider the topology shown in figure 4.20. denote the three subnets with hosts starting clockwise at 1200 as networks a, b, and c. denote the subnets without hosts as networks d, e, and f. a. assign network addresses to each of these six subnets, with the following constraints all addresses must be allocated from 214.97.25423; subnet a should have enough addresses to support 250 interfaces; subnet b should have enough addresses to support 120 interfaces; and subnet c should have enough addresses to support 120 interfaces. of course, subnets d, e and f should each be able to support two interfaces. for each subnet, the assignment should take the form a.b.c.dx or a.b.c.dx e.f.g.hy. b. using your answer to part a, provide the forwarding tables using longest prefix matching for each of the three routers. p16. use the whois service at the american registry for internet numbers httpwww.arin.netwhois to determine the ip address blocks for three universities. can the whois services be used to determine with certainty the geographical location of a specific ip address? use www.maxmind.com to determine the locations of the web servers at each of these universities. p17. suppose datagrams are limited to 1,500 bytes including header between source host a and destination host b. assuming a 20byte ip header, how many datagrams would be required to send an mp3 consisting of 5 million bytes? explain how you computed your answer. p18. consider the network setup in figure 4.25. suppose that the isp instead assigns the router the address 24.34.101.225 and that the network address of the home network is 192.168.024. a. assign addresses to all interfaces in the home network. b. suppose each host has two ongoing tcp connections, all to port 80 at host 128.119.40.86. provide the six corresponding entries in the nat translation table. p19. suppose you are interested in detecting the number of hosts behind a nat. you observe that the ip layer stamps an identification number sequentially on each ip packet. the identification number of the first
ip packet generated by a host is a random number, and the identification numbers of the subsequent ip packets are sequentially assigned. assume all ip packets generated by hosts behind the nat are sent to the outside world. a. based on this observation, and assuming you can sniff all packets sent by the nat to the outside, can you outline a simple technique that detects the number of unique hosts behind a nat? justify your answer. m04_kuro5469_08_ge_c04.indd 402 08052021 1406 problems 403 b. if the identification numbers are not sequentially assigned but randomly assigned, would your technique work? justify your answer. p20. in this problem, well explore the impact of nats on p2p applications. suppose a peer with username arnold discovers through querying that a peer with username bernard has a file it wants to download. also suppose that bernard and arnold are both behind a nat. try to devise a technique that will allow arnold to establish a tcp connection with bernard without applicationspecific nat configuration. if you have difficulty devising such a technique, discuss why. p21. consider the sdn openflow network shown in figure 4.30. suppose that the desired forwarding behavior for datagrams arriving at s2 is as follows any datagrams arriving on input port 1 from hosts h5 or h6 that are des tined to hosts h1 or h2 should be forwarded over output port 2; any datagrams arriving on input port 2 from hosts h1 or h2 that are destined to hosts h5 or h6 should be forwarded over output port 1; any arriving datagrams on input ports 1 or 2 and destined to hosts h3 or h4 should be delivered to the host specified; hosts h3 and h4 should be able to send datagrams to each other. specify the flow table entries in s2 that implement this forwarding behavior. p22. consider again the sdn openflow network shown in figure 4.30. suppose that the desired forwarding behavior for datagrams arriving from hosts h3 or h4 at s2 is as follows any datagrams arriving from host h3 and destined for h1, h2, h5 or h6 should be forwarded in a clockwise direction in the network; any datagrams arriving from host h4 and destined for h1, h2, h5 or h6 should be forwarded in a counterclockwise direction in the network. specify the flow table entries in s2 that implement this forwarding behavior. p23. consider again the scenario from p21 above. give the flow tables entries at packet switches s1 and s3, such that any arriving datagrams with a source address of h3 or h4 are routed to the destination hosts specified in the destination address field in the ip datagram. hint your forwarding table rules should include the cases that an arriving datagram is destined for a directly attached host or should be forwarded to a neighboring router for eventual host delivery there. p24. consider again the sdn openflow network shown in figure 4.30. suppose we want switch s2 to function as a firewall. specify the flow table
in s2 that implements the following firewall behaviors specify a different flow table for each of the four firewalling behaviors below for delivery of datagrams m04_kuro5469_08_ge_c04.indd 403 08052021 1406 404 chapter 4 the network layer data plane destined to h3 and h4. you do not need to specify the forwarding behavior in s2 that forwards traffic to other routers. only traffic arriving from hosts h1 and h6 should be delivered to hosts h3 or h4 i.e., that arriving traffic from hosts h2 and h5 is blocked. only tcp traffic is allowed to be delivered to hosts h3 or h4 i.e., that udp traffic is blocked. only traffic destined to h3 is to be delivered i.e., all traffic to h4 is blocked. only udp traffic from h1 and destined to h3 is to be delivered. all other traffic is blocked. p25. consider the internet protocol stack in figures 1.23 and 4.31. would you consider the icmp protocol to be a networklayer protocol or a transportlayer protocol? justify your answer. wireshark lab ip in the web site for this textbook, www.pearsonglobaleditions.com, youll find a wireshark lab assignment that examines the operation of the ip protocol, and the ip datagram format in particular. m04_kuro5469_08_ge_c04.indd 404 08052021 1406 405what brought you to specialize in networking? i was working as a programmer at ucla in the late 1960s. my job was supported by the us defense advanced research projects agency called arpa then and darpa now. i was working in the laboratory of professor leonard kleinrock in the network measurement center of the newly created arpanet. the first node of the arpanet was installed at ucla on september 1, 1969. i was responsible for programming a computer that was used to capture performance information about the arpanet and to report this information back for comparison with mathematical models and predictions of the performance of the network. several of the other graduate students and i were made responsible for working on the socalled hostlevel protocols of the arpanetthe procedures and formats that would allow many different kinds of computers on the network to interact with each other. it was a fascinating exploration into a new world for me of distributed computing and communication. did you imagine that ip would become as pervasive as it is today when you first designed the protocol? when bob kahn and i first worked on this in 1973, i think we were mostly very focused on the central question how can we make heterogeneous packet networks interoperate with one another, assuming we cannot actually change the networks themselves? we hoped that we could find a way to permit an arbitrary collection of packetswitched networks to be interconnected in a transparent fashion, so that host computers could communicate endtoend without having to do any translations in between. i think we knew that we were dealing vinton g. cerf has served as vice president and chief internet evangelist for google since 2005. he served for over 15 years at mci in various positions,
ending up his tenure there as senior vice president for technology strategy. he is widely known as the codesigner of the tcpip protocols and the architecture of the internet. during his time from 1976 to 1982 at the us department of defense advanced research projects agency darpa, he played a key role leading the development of internet and internetrelated packet communication and security techniques. he received the us presidential medal of freedom in 2005 and the us national medal of technology in 1997. he holds a bs in mathematics from stanford university and an ms and phd in computer science from ucla.vinton g. cerfan interview with courtesy of vinton g. cerf m04_kuro5469_08_ge_c04.indd 405 08052021 1406 with powerful and expandable technology, but i doubt we had a clear image of what the world would be like with billions of computers all interlinked on the internet. what do you now envision for the future of networking and the internet? what major challengesobstacles do you think lie ahead in their development? i believe the internet itself and networks in general will continue to proliferate. there are already billions of internetenabled devices on the internet, including appliances like cell phones, refrigerators, personal digital assistants, home servers, televisions, as well as the usual array of laptops, servers, and so on. big challenges include support for mobility, bat tery life, capacity of the access links to the network, and ability to scale the optical core of the network in an unlimited fashion. the interplanetary extension of the internet is a project that is well underway at nasa and other space agencies. we still need to add ipv6 128 bit addressing to the original ipv4 32bit addresses packet format. the list is long! who has inspired you professionally? my colleague bob kahn; my thesis advisor, gerald estrin; my best friend, steve crocker we met in high school and he introduced me to computers in 1960!; and the thousands of engineers who continue to evolve the internet today. do you have any advice for students entering the networkinginternet field? think outside the limitations of existing systemsimagine what might be possible; but then do the hard work of figuring out how to get there from the current state of affairs. dare to dream. the internet of things is the next big phase of internet expansion. safety, security, privacy, reliability, and autonomy all need attention. the interplanetary extension of the terrestrial internet started as a speculative design but is becoming a reality. it may take decades to implement this, mission by mission, but to paraphrase a mans reach should exceed his grasp, or what are the heavens for? 406 m04_kuro5469_08_ge_c04.indd 406 08052021 1406 in this chapter, well complete our journey through the network layer by covering the controlplane component of the network layerthe networkwide logic that controls not only how a datagram is routed along an endtoend path from the source host to the destination host, but also how networklayer components and services are configured and managed. in section 5.2,
well cover traditional routing algorithms for computing least cost paths in a graph; these algorithms are the basis for two widely deployed internet routing protocols ospf and bgp, that well cover in sections 5.3 and 5.4, respectively. as well see, ospf is a routing protocol that operates within a single isps network. bgp is a routing protocol that serves to interconnect all of the networks in the internet; bgp is thus often referred to as the glue that holds the internet together. traditionally, controlplane routing protocols have been implemented together with dataplane forwarding functions, monolithically, within a router. as we learned in the introduction to chapter 4, softwaredefined networking sdn makes a clear separation between the data and control planes, implementing controlplane functions in a separate controller service that is distinct, and remote, from the forwarding components of the routers it controls. well cover sdn controllers in section 5.5. in sections 5.6 and 5.7, well cover some of the nuts and bolts of managing an ip network icmp the internet control message protocol and snmp the simple network management protocol.the network layer control plane5chapter 407 m05_kuro5469_08_ge_c05.indd 407 03052021 1642 408 chapter 5 the network layer control plane 5.1 introduction lets quickly set the context for our study of the network control plane by recall ing figures 4.2 and 4.3. there, we saw that the forwarding table in the case of destinationbased forwarding and the flow table in the case of generalized forward ing were the principal elements that linked the network layers data and control planes. we learned that these tables specify the local dataplane forwarding behavior of a router. we saw that in the case of generalized forwarding, the actions taken could include not only forwarding a packet to a routers output port, but also dropping a packet, replicating a packet, andor rewriting layer 2, 3 or 4 packetheader fields. in this chapter, well study how those forwarding and flow tables are computed, maintained and installed. in our introduction to the network layer in section 4.1, we learned that there are two possible approaches for doing so. perrouter control. figure 5.1 illustrates the case where a routing algorithm runs in each and every router; both a forwarding and a routing function are contained contr ol plane data planerouting algorithm forwarding table figure 5.1 perrouter control individual routing algorithm components interact in the control plane m05_kuro5469_08_ge_c05.indd 408 03052021 1642 5.1 introduction 409 within each router. each router has a routing component that communicates with the routing components in other routers to compute the values for its forwarding table. this perrouter control approach has been used in the internet for decades. the ospf and bgp protocols that well study in sections 5.3 and 5.4 are based on this perrouter approach to control. logically centralized control. figure 5.2 illustrates the case in which a logically centralized controller computes and distributes the forwarding tables to be used by each and every router. as we saw in sections 4.4 and 4.5, the generalized matchplusaction
abstraction allows the router to perform traditional ip forwarding as well as a rich set of other functions load sharing, firewalling, and nat that had been previously implemented in separate middleboxes. logically centralized routing controller contr ol plane data plane control agent ca caca caca figure 5.2 logically centralized control a distinct, typically remote, controller interacts with local control agents cas m05_kuro5469_08_ge_c05.indd 409 03052021 1642 410 chapter 5 the network layer control plane the controller interacts with a control agent ca in each of the routers via a welldefined protocol to configure and manage that routers flow table. typically, the ca has minimum functionality; its job is to communicate with the controller, and to do as the controller commands. unlike the routing algorithms in figure 5.1, the cas do not directly interact with each other nor do they actively take part in computing the forwarding table. this is a key distinction between perrouter control and logically centralized control. by logically centralized control levin 2012 we mean that the routing control service is accessed as if it were a single central service point, even though the service is likely to be implemented via multiple servers for faulttolerance, and performance scalability reasons. as we will see in section 5.5, sdn adopts this notion of a logically centralized controlleran approach that is finding increased use in production deployments. google uses sdn to control the routers in its internal b4 global widearea network that interconnects its data centers jain 2013. swan hong 2013, from microsoft research, uses a logically centralized controller to manage routing and forwarding between a wide area network and a data center network. major isp deployments, including comcasts activecore and deutsche telecoms access 4.0 are actively integrating sdn into their networks. and as well see in chapter 8, sdn control is central to 4g5g cellular networking as well. att 2019 notes, sdn, isnt a vision, a goal, or a promise. its a reality. by the end of next year, 75 of our network functions will be fully virtualized and softwarecontrolled. china telecom and china unicom are using sdn both within data centers and between data centers li 2015. 5.2 routing algorithms in this section, well study routing algorithms, whose goal is to determine good paths equivalently, routes, from senders to receivers, through the network of routers. typically, a good path is one that has the least cost. well see that in practice, however, realworld concerns such as policy issues for example, a rule such as router x , belonging to organization y , should not forward any packets originating from the network owned by organization z also come into play. we note that whether the network control plane adopts a perrouter control approach or a logically centralized approach, there must always be a welldefined sequence of routers that a packet will cross in traveling from sending to receiving host. thus, the routing algorithms that compute these paths are of fundamental importance, and another candidate for our top10 list of fundamentally important
networking concepts. a graph is used to formulate routing problems. recall that a graph gn, e is a set n of nodes and a collection e of edges, where each edge is a pair of nodes from n. in the context of networklayer routing, the nodes in the graph represent m05_kuro5469_08_ge_c05.indd 410 03052021 1642 5.2 routing al gorithms 411 routersthe points at which packetforwarding decisions are madeand the edges connecting these nodes represent the physical links between these routers. such a graph abstraction of a computer network is shown in figure 5.3. when we study the bgp interdomain routing protocol, well see that nodes represent networks, and the edge connecting two such nodes represents direction connectivity know as peering between the two networks. to view some graphs representing real network maps, see caida 2020; for a discussion of how well different graphbased models model the internet, see zegura 1997, faloutsos 1999, li 2004. as shown in figure 5.3, an edge also has a value representing its cost. typically, an edges cost may reflect the physical length of the corresponding link for example, a transoceanic link might have a higher cost than a shorthaul terrestrial link, the link speed, or the monetary cost associated with a link. for our purposes, well simply take the edge costs as a given and wont worry about how they are determined. for any edge x, y in e, we denote cx, y as the cost of the edge between nodes x and y. if the pair x, y does not belong to e, we set cx, y. also, well only consider undirected graphs i.e., graphs whose edges do not have a direction in our discussion here, so that edge x, y is the same as edge y, x and that cx, ycy, x; however, the algorithms well study can be easily extended to the case of directed links with a different cost in each direction. also, a node y is said to be a neighbor of node x if x, y belongs to e. given that costs are assigned to the various edges in the graph abstraction, a natural goal of a routing algorithm is to identify the least costly paths between sources and destinations. to make this problem more precise, recall that a path in a graph gn, e is a sequence of nodes x1, x2, g, xp such that each of the pairs x1, x2, x 2, x3, g, xp1, xp are edges in e. the cost of a path x1, x2, g, xp is simply the sum of all the edge costs along the path, that is, xyv35 25 231 12 1u zw figure 5.3 abstract graph model of a computer network m05_kuro5469_08_ge_c05.indd 411 03052021 1642 412 chapter 5 the network layer control plane cx1, x2cx2, x3 g cxp1, xp. given any two nodes x and y, there are typi cally many paths between the two nodes, with each path having a cost. one or more of these paths is a leastcost
path. the leastcost problem is therefore clear find a path between the source and destination that has least cost. in figure 5.3, for exam ple, the leastcost path between source node u and destination node w is u, x, y, w with a path cost of 3. note that if all edges in the graph have the same cost, the leastcost path is also the shortest path that is, the path with the smallest number of links between the source and the destination. as a simple exercise, try finding the leastcost path from node u to z in figure 5.3 and reflect for a moment on how you calculated that path. if you are like most people, you found the path from u to z by examining figure 5 .3, tracing a few routes from u to z, and somehow convincing yourself that the path you had chosen had the least cost among all possible paths. did you check all of the 17 possible paths between u and z ? probably not! such a calculation is an example of a centralized routing algorithmthe routing algorithm was run in one location, your brain, with complete information about the network. broadly, one way in which we can classify routing algorithms is according to whether they are centralized or decentralized. a centralized routing algorithm computes the leastcost path between a source and destination using complete, global knowledge about the network. that is, the algorithm takes the connectivity between all nodes and all link costs as inputs. this then requires that the algorithm somehow obtain this information before actually performing the calculation. the calculation itself can be run at one site e.g., a logically centralized controller as in figure 5.2 or could be replicated in the routing component of each and every router e.g., as in figure 5.1. the key distinguishing feature here, however, is that the algorithm has complete information about connectivity and link costs. algorithms with global state information are often referred to as linkstate ls algorithms, since the algorithm must be aware of the cost of each link in the network. well study ls algorithms in section 5.2.1. in a decentralized routing algorithm, the calculation of the leastcost path is carried out in an iterative, distributed manner by the routers. no node has complete information about the costs of all network links. instead, each node begins with only the knowledge of the costs of its own directly attached links. then, through an iterative process of calculation and exchange of information with its neighboring nodes, a node gradually calculates the leastcost path to a destination or set of destinations. the decentralized routing algorithm well study below in section 5.2.2 is called a distancevector dv algorithm, because each node main tains a vector of estimates of the costs distances to all other nodes in the network. such decentralized algorithms, with interactive message exchange between m05_kuro5469_08_ge_c05.indd 412 03052021 1642 5.2 routing al gorithms 413 neighboring routers is perhaps more naturally suited to control planes
where the routers interact directly with each other, as in figure 5.1. a second broad way to classify routing algorithms is according to whether they are static or dynamic. in static routing algorithms, routes change very slowly over time, often as a result of human intervention for example, a human manually editing a link costs. dynamic routing algorithms change the routing paths as the network traffic loads or topology change. a dynamic algorithm can be run either periodically or in direct response to topology or link cost changes. while dynamic algorithms are more responsive to network changes, they are also more susceptible to problems such as routing loops and route oscillation. a third way to classify routing algorithms is according to whether they are load sensitive or loadinsensitive. in a loadsensitive algorithm, link costs vary dynamically to reflect the current level of congestion in the underlying link. if a high cost is associated with a link that is currently congested, a routing algorithm will tend to choose routes around such a congested link. while early arpanet routing algorithms were loadsensitive mcquillan 1980, a number of difficulties were encountered huitema 1998. todays internet routing algorithms such as rip, ospf, and bgp are loadinsensitive, as a links cost does not explicitly reflect its current or recent past level of congestion. 5.2.1 the linkstate ls routing algorithm recall that in a linkstate algorithm, the network topology and all link costs are known, that is, available as input to the ls algorithm. in practice, this is accomplished by having each node broadcast linkstate packets to all other nodes in the network, with each linkstate packet containing the identities and costs of its attached links. in practice for example, with the internets ospf routing protocol, discussed in section 5.3, this is often accomplished by a linkstate broadcast algorithm perlman 1999. the result of the nodes broadcast is that all nodes have an identical and complete view of the network. each node can then run the ls algorithm and compute the same set of leastcost paths as every other node. the linkstate routing algorithm we present below is known as dijkstras algorithm, named after its inventor. a closely related algorithm is prims algorithm; see cormen 2001 for a general discussion of graph algorithms. dijkstras algorithm computes the leastcost path from one node the source, which we will refer to as u to all other nodes in the network. dijkstras algorithm is iterative and has the property that after the k th iteration of the algorithm, the leastcost paths are known to k destination nodes, and among the leastcost paths to all destination m05_kuro5469_08_ge_c05.indd 413 03052021 1642 414 chapter 5 the network layer control plane nodes, these k paths will have the k smallest costs. let us define the following notation dv cost of the leastcost path from the source node to destination v as of this iteration of the algorithm. pv previous node neighbor of v along the current leastcost path from the source to v.
nuni2032 subset of nodes; v is in nuni2032 if the leastcost path from the source to v is defini tively known. the centralized routing algorithm consists of an initialization step followed by a loop. the number of times the loop is executed is equal to the number of nodes in the network. upon termination, the algorithm will have calculated the shortest paths from the source node u to every other node in the network. linkstate ls algorithm for source node u 1 initialization 2 n u3 for all nodes v4 if v is a neighbor of u5 then dv cu,v6 else dv 78 loop9 find w not in n such that dw is a minimum10 add w to n11 update dv for each neighbor v of w and not in n12 dv mindv, dw cw,v 13 new cost to v is either old cost to v or known14 least path cost to w plus cost from w to v 15 until n n as an example, lets consider the network in figure 5.3 and compute the least cost paths from u to all possible destinations. a tabular summary of the algorithms computation is shown in table 5.1, where each line in the table gives the values of the algorithms variables at the end of the iteration. lets consider the few first steps in detail. in the initialization step, the currently known leastcost paths from u to its directly attached neighbors, v, x, and w, are initialized to 2, 1, and 5, respectively. note in m05_kuro5469_08_ge_c05.indd 414 03052021 1642 5.2 routing al gorithms 415 particular that the cost to w is set to 5 even though we will soon see that a lessercost path does indeed exist since this is the cost of the direct one hop link from u to w. the costs to y and z are set to infinity because they are not directly connected to u. in the first iteration, we look among those nodes not yet added to the set nuni2032 and find that node with the least cost as of the end of the previous iteration. that node is x, with a cost of 1, and thus x is added to the set nuni2032. line 12 of the ls algorithm is then performed to update dv for all nodes v, yielding the results shown in the second line step 1 in table 5.1. the cost of the path to v is unchanged. the cost of the path to w which was 5 at the end of the initialization through node x is found to have a cost of 4. hence this lowercost path is selected and ws predecessor along the shortest path from u is set to x. similarly, the cost to y through x is computed to be 2, and the table is updated accordingly. in the second iteration, nodes v and y are found to have the leastcost paths 2, and we break the tie arbitrarily and add y to the set nuni2032
so that nuni2032 now contains u, x, and y. the cost to the remaining nodes not yet in nuni2032, that is, nodes v, w, and z, are updated via line 12 of the ls algorithm, yielding the results shown in the third row in table 5.1. and so on . . . when the ls algorithm terminates, we have, for each node, its predecessor along the leastcost path from the source node. for each predecessor, we also have its predecessor, and so in this manner we can construct the entire path from the source to all destinations. the forwarding table in a node, say node u, can then be constructed from this information by storing, for each destination, the nexthop node on the leastcost path from u to the destination. figure 5.4 shows the resulting leastcost paths and forwarding table in u for the network in figure 5.3.table 5.1 running the linkstate algorithm on the network in figure 5.3step n d v, p v d w, p w d x, p x d y, p y d z, p z 0 u 2, u 5, u 1,u 1 ux 2, u 4, x 2, x 2 uxy 2, u 3, y 4, y 3 uxyv 3, y 4, y 4 uxyvw 4, y 5 uxyvwz m05_kuro5469_08_ge_c05.indd 415 03052021 1642 416 chapter 5 the network layer control plane what is the computational complexity of this algorithm? that is, given n nodes not counting the source, how much computation must be done in the worst case to find the leastcost paths from the source to all destinations? in the first iteration, we need to search through all n nodes to determine the node, w, not in nuni2032 that has the minimum cost. in the second iteration, we need to check n1 nodes to determine the minimum cost; in the third iteration n2 nodes, and so on. overall, the total number of nodes we need to search through over all the iterations is nn12, and thus we say that the preceding implementation of the ls algorithm has worstcase complexity of order n squared on2. a more sophisticated implementation of this algorithm, using a data structure known as a heap, can find the minimum in line 9 in logarithmic rather than linear time, thus reducing the complexity. before completing our discussion of the ls algorithm, let us consider a pathol ogy that can arise. figure 5.5 shows a simple network topology where link costs are equal to the load carried on the link, for example, reflecting the delay that would be experienced. in this example, link costs are not symmetric; that is, cu,v equals cv,u only if the load carried on both directions on the link u,v is the same. in this example, node z originates a unit of traffic destined for w, node x also originates a unit of traffic destined for w, and node y injects an amount of traffic equal to e, also destined for w. the initial routing is shown
in figure 5.5a with the link costs corresponding to the amount of traffic carried. when the ls algorithm is next run, node y determines based on the link costs shown in figure 5.5a that the clockwise path to w has a cost of 1, while the coun terclockwise path to w which it had been using has a cost of 1e. hence ys least cost path to w is now clockwise. similarly, x determines that its new leastcost path to w is also clockwise, resulting in costs shown in figure 5.5b. when the ls algorithm is run next, nodes x, y, and z all detect a zerocost path to w in the counterclockwise direction, and all route their traffic to the counterclockwise routes. the next time the ls algorithm is run, x, y, and z all then route their traffic to the clockwise routes. what can be done to prevent such oscillations which can occur in any algo rithm, not just an ls algorithm, that uses a congestion or delaybased link metric? one solution would be to mandate that link costs not depend on the amount of traffic destination link v w x yzu, vu, x u, x u, xu, x x yv u zw figure 5.4 least cost path and forwarding table for node u m05_kuro5469_08_ge_c05.indd 416 03052021 1642 5.2 routing al gorithms 417 carriedan unacceptable solution since one goal of routing is to avoid highly con gested for example, highdelay links. another solution is to ensure that not all routers run the ls algorithm at the same time. this seems a more reasonable solution, since we would hope that even if routers ran the ls algorithm with the same periodicity, the execution instance of the algorithm would not be the same at each node. interestingly, researchers have found that routers in the internet can selfsynchronize among themselves floyd synchronization 1994. that is, even though they initially execute the algorithm with the same period but at different instants of time, the algorithm execution instance can eventually become, and remain, synchronized at the routers. one way to avoid such selfsynchronization is for each router to randomize the time it sends out a link advertisement. having studied the ls algorithm, lets consider the other major routing algo rithm that is used in practice todaythe distancevector routing algorithm.w yz x1 00 0 e1 e 1 a. initial r outing1 ew yz x2 e 1 e1 0 00 b. x, y detect better path to w , clockwise w yz x0 00 1 1 e2 e c. x, y, z detect better path to w , counterclockwisew yz x2 e 1 e1 000 d. x, y, z, detect better path to w , clockwise11 e 11 e11 e figure 5.5 oscillations with congestionsensitive routing m05_kuro5469_08_ge_c05.indd 417 03052021 1642 418 chapter 5 the network layer control plane 5.2.2 the distancevector dv routing algorithm whereas the ls algorithm is an algorithm using global information, the distance vector dv algorithm is iterative, asynchronous, and distributed. it
is distributed in that each node receives some information from one or more of its directly attached neighbors, performs a calculation, and then distributes the results of its calculation back to its neighbors. it is iterative in that this process continues on until no more information is exchanged between neighbors. interestingly, the algorithm is also selfterminatingthere is no signal that the computation should stop; it just stops. the algorithm is asynchronous in that it does not require all of the nodes to operate in lockstep with each other. well see that an asynchronous, iterative, selfterminating, distributed algorithm is much more interesting and fun than a centralized algorithm! before we present the dv algorithm, it will prove beneficial to discuss an impor tant relationship that exists among the costs of the leastcost paths. let dxy be the cost of the leastcost path from node x to node y. then the least costs are related by the celebrated bellmanford equation, namely, dxyminv5cx, vdv y6, 5.1 where the minv in the equation is taken over all of xs neighbors. the bellman ford equation is rather intuitive. indeed, after traveling from x to v, if we then take the leastcost path from v to y, the path cost will be cx, vdvy. since we must begin by traveling to some neighbor v, the least cost from x to y is the minimum of cx, vdvy taken over all neighbors v. but for those who might be skeptical about the validity of the equation, lets check it for source node u and destination node z in figure 5.3. the source node u has three neighbors nodes v, x, and w. by walking along various paths in the graph, it is easy to see that dvz5, dxz3, and dwz3. plugging these values into equation 5.1, along with the costs cu, v2, cu, x1, and cu, w5, gives duzmin525, 53, 1364, which is obviously true and which is exactly what the dijskstra algorithm gave us for the same network. this quick verification should help relieve any skepticism you may have. the bellmanford equation is not just an intellectual curiosity. it actually has signif icant practical importance the solution to the bellmanford equation provides the entries in node x s forwarding table. to see this, let v be any neighboring node that achieves the minimum in equation 5.1. then, if node x wants to send a packet to node y along a leastcost path, it should first forward the packet to node v. thus, node x s forwarding table would specify node v as the nexthop router for the ultimate destination y . another important practical contribution of the bellmanford equation is that it suggests the form of the neighbortoneighbor communication that will take place in the dv algorithm. the basic idea is as follows. each node x begins with dxy, an estimate of the cost of the leastcost path from itself to node y , for all nodes, y, in n . let dxdxy y in n
be node xs distance vector, which is the vector of cost estimates from x to all other nodes, y, in n. with the dv algorithm, each node x maintains the following routing information m05_kuro5469_08_ge_c05.indd 418 03052021 1642 5.2 routing al gorithms 419 for each neighbor v, the cost cx,v from x to directly attached neighbor, v node xs distance vector, that is, dxdxy y in n, containing xs estimate of its cost to all destinations, y, in n the distance vectors of each of its neighbors, that is, dvdvy y in n for each neighbor v of x in the distributed, asynchronous algorithm, from time to time, each node sends a copy of its distance vector to each of its neighbors. when a node x receives a new distance vector from any of its neighbors w, it saves ws distance vector, and then uses the bellmanford equation to update its own distance vector as follows dxyminv5cx, vdvy6 for each node y in n if node xs distance vector has changed as a result of this update step, node x will then send its updated distance vector to each of its neighbors, which can in turn update their own distance vectors. miraculously enough, as long as all the nodes continue to exchange their distance vectors in an asynchronous fashion, each cost estimate dxy converges to dxy, the actual cost of the leastcost path from node x to node y bertsekas 1991! distancevector dv algorithm at each node, x 1 initialization 2 for all destinations y in n3 d xy cx,y if y is not a neighbor then cx,y 4 for each neighbor w5 d wy ? for all destinations y in n 6 for each neighbor w7 send distance vector d x dxy y in n to w 89 loop 10 wait until i see a link cost change to some neighbor w or11 until i receive a distance vector from some neighbor w1213 for each y in n14 d xy minvcx,v dvy 1516 if d xy changed for any destination y 17 send distance vector dx dxy y in n to all neighbors 1819 forever m05_kuro5469_08_ge_c05.indd 419 03052021 1642 420 chapter 5 the network layer control plane in the dv algorithm, a node x updates its distancevector estimate when it either sees a cost change in one of its directly attached links or receives a distancevector update from some neighbor. but to update its own forwarding table for a given destination y, what node x really needs to know is not the shortestpath distance to y but instead the neighboring node vy that is the nexthop router along the shortest path to y. as you might expect, the nexthop router vy is the neighbor v that achieves the minimum in line 14 of the dv algorithm. if there are multiple neighbors v that achieve the minimum, then vy can be any of the minimizing neighbors. thus, in lines 1314, for each destination y, node x also determines vy and updates
its forwarding table for destination y. recall that the ls algorithm is a centralized algorithm in the sense that it requires each node to first obtain a complete map of the network before running the dijkstra algorithm. the dv algorithm is decentralized and does not use such global information. indeed, the only information a node will have is the costs of the links to its directly attached neighbors and information it receives from these neighbors. each node waits for an update from any neighbor lines 1011, calculates its new distance vector when receiving an update line 14, and distributes its new distance vector to its neighbors lines 1617. dvlike algorithms are used in many routing protocols in practice, including the internets rip and bgp, iso idrp, novell ipx, and the original arpanet. figure 5.6 illustrates the operation of the dv algorithm for the simple three node network shown at the top of the figure. the operation of the algorithm is illustrated in a synchronous manner, where all nodes simultaneously receive distance vectors from their neighbors, compute their new distance vectors, and inform their neighbors if their distance vectors have changed. after studying this example, you should convince yourself that the algorithm operates correctly in an asynchronous manner as well, with node computations and update generationreception occurring at any time. the leftmost column of the figure displays three initial routing tables for each of the three nodes. for example, the table in the upperleft corner is node xs ini tial routing table. within a specific routing table, each row is a distance vector specifically, each nodes routing table includes its own distance vector and that of each of its neighbors. thus, the first row in node xs initial routing table is dxdxx, d xy, d xz0, 2, 7. the second and third rows in this table are the most recently received distance vectors from nodes y and z, respectively. because at initialization node x has not received anything from node y or z, the entries in the second and third rows are initialized to infinity. after initialization, each node sends its distance vector to each of its two neigh bors. this is illustrated in figure 5.6 by the arrows from the first column of tables to the second column of tables. for example, node x sends its distance vector dx 0, 2, 7 to both nodes y and z. after receiving the updates, each node recomputes its own distance vector. for example, node x computes m05_kuro5469_08_ge_c05.indd 420 03052021 1642 5.2 routing al gorithms 421 dxx0 dxymin5cx,ydyy, cx,zdzy6min520, 7162 dxzmin5cx,ydyz, cx,zdzz6min521, 7063 the second column therefore displays, for each node, the nodes new distance vector along with distance vectors just received from its neighbors. note, for example, that node y tablenode x table 0 2 7x y z time721y x z node z table fromcost to x y z0 2 3x y z 2 0 1 7 1 0fromcost to x y z0 2 3x y z 2 0 1 3 1
0fromcost to x y z 2 0 1x y z fromcost to x yz0 2 7x y z 2 0 1 7 1 0fromcost to xyz0 2 3x y z 2 0 1 3 1 0fromcost to xyz 7 1 0x y z fromcost to xyz0 2 7x y z 2 0 1 3 1 0fromcost to xyz0 2 3x y z 2 0 1 3 1 0fromcost to xyz figure 5.6 distancevector dv algorithm in operation m05_kuro5469_08_ge_c05.indd 421 03052021 1642 422 chapter 5 the network layer control plane node xs estimate for the least cost to node z, dxz, has changed from 7 to 3. also note that for node x, neighboring node y achieves the minimum in line 14 of the dv algorithm; thus, at this stage of the algorithm, we have at node x that vyy and vzy. after the nodes recompute their distance vectors, they again send their updated distance vectors to their neighbors if there has been a change. this is illustrated in figure 5.6 by the arrows from the second column of tables to the third column of tables. note that only nodes x and z send updates node ys distance vector didnt change so node y doesnt send an update. after receiving the updates, the nodes then recompute their distance vectors and update their routing tables, which are shown in the third column. the process of receiving updated distance vectors from neighbors, recomputing routing table entries, and informing neighbors of changed costs of the leastcost path to a destination continues until no update messages are sent. at this point, since no update messages are sent, no further routing table calculations will occur and the algorithm will enter a quiescent state; that is, all nodes will be performing the wait in lines 1011 of the dv algorithm. the algorithm remains in the quiescent state until a link cost changes, as discussed next. distancevector algorithm linkcost changes and link failure when a node running the dv algorithm detects a change in the link cost from itself to a neighbor lines 1011, it updates its distance vector lines 1314 and, if theres a change in the cost of the leastcost path, informs its neighbors lines 1617 of its new distance vector. figure 5.7a illustrates a scenario where the link cost from y to x changes from 4 to 1. we focus here only on y and z s distance table entries to destination x . the dv algorithm causes the following sequence of events to occur at time t 0, y detects the linkcost change the cost has changed from 4 to 1, updates its distance vector, and informs its neighbors of this change since its dis tance vector has changed. at time t1, z receives the update from y and updates its table. it computes a new least cost to x it has decreased from a cost of 5 to a cost of 2 and sends its new distance vector to its neighbors. at time
t 2, y receives zs update and updates its distance table. ys least costs do not change and hence y does not send any message to z. the algorithm comes to a quiescent state. thus, only two iterations are required for the dv algorithm to reach a quiescent state. the good news about the decreased cost between x and y has propagated quickly through the network. m05_kuro5469_08_ge_c05.indd 422 03052021 1642 5.2 routing al gorithms 423 lets now consider what can happen when a link cost increases. suppose that the link cost between x and y increases from 4 to 60, as shown in figure 5.7b. 1. before the link cost changes, dyx4, dyz1, dzy1, and dzx5. at time t0, y detects the linkcost change the cost has changed from 4 to 60. y computes its new minimumcost path to x to have a cost of dyxmin5cy,xdxx, cy,zdzx6min5600, 1566 of course, with our global view of the network, we can see that this new cost via z is wrong. but the only information node y has is that its direct cost to x is 60 and that z has last told y that z could get to x with a cost of 5. so in order to get to x, y would now route through z, fully expecting that z will be able to get to x with a cost of 5. as of t 1 we have a routing loopin order to get to x, y routes through z, and z routes through y. a routing loop is like a black holea packet destined for x arriving at y or z as of t1 will bounce back and forth between these two nodes forever or until the forwarding tables are changed. 2. since node y has computed a new minimum cost to x, it informs z of its new distance vector at time t1. 3. sometime after t1, z receives ys new distance vector, which indicates that ys minimum cost to x is 6. z knows it can get to y with a cost of 1 and hence computes a new least cost to x of dzxmin5500,1667. since zs least cost to x has increased, it then informs y of its new distance vector at t2. 4. in a similar manner, after receiving zs new distance vector, y determines dyx8 and sends z its distance vector. z then determines dzx9 and sends y its distance vector, and so on. how long will the process continue? you should convince yourself that the loop will persist for 44 iterations message exchanges between y and zuntil z eventually computes the cost of its path via y to be greater than 50. at this point, z will finally! determine that its leastcost path to x is via its direct connection to x. y will then 5041 60 1y x a. b.z5041y x z figure 5.7 changes in link cost m05_kuro5469_08_ge_c05.indd 423 03052021 1642 424 chapter 5 the network layer control plane route to x
via z. the result of the bad news about the increase in link cost has indeed traveled slowly! what would have happened if the link cost cy, x had changed from 4 to 10,000 and the cost cz, x had been 9,999? because of such scenarios, the prob lem we have seen is sometimes referred to as the counttoinfinity problem. distancevector algorithm adding poisoned reverse the specific looping scenario just described can be avoided using a technique known as poisoned reverse. the idea is simpleif z routes through y to get to destination x, then z will advertise to y that its distance to x is infinity, that is, z will advertise to y that dzx even though z knows dzx5 in truth. z will continue telling this little white lie to y as long as it routes to x via y. since y believes that z has no path to x, y will never attempt to route to x via z, as long as z continues to route to x via y and lies about doing so. lets now see how poisoned reverse solves the particular looping problem we encountered before in figure 5.5b. as a result of the poisoned reverse, y s distance table indicates dzx. when the cost of the x, y link changes from 4 to 60 at time t0, y updates its table and continues to route directly to x , albeit at a higher cost of 60, and informs z of its new cost to x, that is, dyx 60. after receiving the update at t1, z immediately shifts its route to x to be via the direct z, x link at a cost of 50. since this is a new leastcost path to x , and since the path no longer passes through y, z now informs y that dzx50 at t2. after receiving the update from z, y updates its distance table with dyx51. also, since z is now on y s least cost path to x, y poisons the reverse path from z to x by informing z at time t3 that dyx even though y knows that dyx51 in truth. does poisoned reverse solve the general counttoinfinity problem? it does not. you should convince yourself that loops involving three or more nodes rather than simply two immediately neighboring nodes will not be detected by the poisoned reverse technique. a comparison of ls and dv routing algorithms the dv and ls algorithms take complementary approaches toward computing routing. in the dv algorithm, each node talks to only its directly connected neighbors, but it provides its neighbors with leastcost estimates from itself to all the nodes that it knows about in the network. the ls algorithm requires global information. con sequently, when implemented in each and every router, for example, as in figures 4.2 and 5.1, each node would need to communicate with all other nodes via broadcast, but it tells them only the costs of its directly connected links. lets conclude
our study of ls and dv algorithms with a quick comparison of some of their attributes. recall that n is the set of nodes routers and e is the set of edges links. message complexity. we have seen that ls requires each node to know the cost of each link in the network. this requires on e messages to be sent. m05_kuro5469_08_ge_c05.indd 424 03052021 1642 5.3 intraas routing in the internet ospf 425 also, whenever a link cost changes, the new link cost must be sent to all nodes. the dv algorithm requires message exchanges between directly connected neighbors at each iteration. we have seen that the time needed for the algorithm to converge can depend on many factors. when link costs change, the dv algorithm will propagate the results of the changed link cost only if the new link cost results in a changed leastcost path for one of the nodes attached to that link. speed of convergence. we have seen that our implementation of ls is an on 2 algorithm requiring on e messages. the dv algorithm can converge slowly and can have routing loops while the algorithm is converging. dv also suffers from the counttoinfinity problem. robustness. what can happen if a router fails, misbehaves, or is sabotaged? under ls, a router could broadcast an incorrect cost for one of its attached links but no others. a node could also corrupt or drop any packets it received as part of an ls broadcast. but an ls node is computing only its own forwarding tables; other nodes are performing similar calculations for themselves. this means route calculations are somewhat separated under ls, providing a degree of robustness. under dv, a node can advertise incorrect leastcost paths to any or all destinations. indeed, in 1997, a malfunctioning router in a small isp provided national backbone routers with erroneous routing information. this caused other routers to flood the malfunctioning router with traffic and caused large portions of the internet to become disconnected for up to several hours neumann 1997. more generally, we note that, at each iteration, a nodes calculation in dv is passed on to its neighbor and then indirectly to its neighbors neighbor on the next iteration. in this sense, an incorrect node calculation can be diffused through the entire network under dv. in the end, neither algorithm is an obvious winner over the other; indeed, both algorithms are used in the internet. 5.3 intraas routing in the internet ospf in our study of routing algorithms so far, weve viewed the network simply as a collection of interconnected routers. one router was indistinguishable from another in the sense that all routers executed the same routing algorithm to compute routing paths through the entire network. in practice, this model and its view of a homogenous set of routers all executing the same routing algorithm is simplistic for two important reasons scale. as the number of routers becomes large, the overhead involved in communi cating, computing, and storing routing information
becomes prohibitive. todays m05_kuro5469_08_ge_c05.indd 425 03052021 1642 426 chapter 5 the network layer control plane internet consists of hundreds of millions of routers. storing routing information for possible destinations at each of these routers would clearly require enormous amounts of memory. the overhead required to broadcast connectivity and link cost updates among all of the routers would be huge! a distancevector algorithm that iterated among such a large number of routers would surely never converge. clearly, something must be done to reduce the complexity of route computation in a network as large as the internet. administrative autonomy. as described in section 1.3, the internet is a network of isps, with each isp consisting of its own network of routers. an isp generally desires to operate its network as it pleases for example, to run whatever routing algorithm it chooses within its network or to hide aspects of its networks internal organization from the outside. ideally, an organization should be able to operate and administer its network as it wishes, while still being able to connect its network to other outside networks. both of these problems can be solved by organizing routers into autonomous systems ass, with each as consisting of a group of routers that are under the same administrative control. often the routers in an isp, and the links that interconnect them, constitute a single as. some isps, however, partition their network into multiple ass. in particular, some tier1 isps use one gigantic as for their entire network, whereas others break up their isp into tens of interconnected ass. an autonomous system is identified by its globally unique autonomous system number asn rfc 1930. as numbers, like ip addresses, are assigned by icann regional registries icann 2020. routers within the same as all run the same routing algorithm and have infor mation about each other. the routing algorithm running within an autonomous sys tem is called an intraautonomous system routing protocol. open shortest path first ospf ospf routing and its closely related cousin, isis, are widely used for intraas routing in the internet. the open in ospf indicates that the routing protocol specification is publicly available for example, as opposed to ciscos eigrp protocol, which was only recently became open savage 2015, after roughly 20 years as a ciscoproprietary protocol. the most recent version of ospf, version 2, is defined in rfc 2328, a public document. ospf is a linkstate protocol that uses flooding of linkstate information and a dijkstras leastcost path algorithm. with ospf, each router constructs a complete topological map that is, a graph of the entire autonomous system. each router then locally runs dijkstras shortestpath algorithm to determine a shortestpath tree to all subnets, with itself as the root node. individual link costs are configured by the network administrator see sidebar, principles and practice m05_kuro5469_08_ge_c05.indd 426 03052021 1642 5.3 intraas routing in the internet ospf 427 setting ospf weights. the administrator might choose to set all link costs to 1, thus achieving minimumhop routing, or might
choose to set the link weights to be inversely proportional to link capacity in order to discourage traffic from using lowbandwidth links. ospf does not mandate a policy for how link weights are set that is the job of the network administrator, but instead provides the mecha nisms protocol for determining leastcost path routing for the given set of link weights. with ospf, a router broadcasts routing information to all other routers in the autonomous system, not just to its neighboring routers. a router broadcasts linkstate information whenever there is a change in a links state for example, a change in cost or a change in updown status. it also broadcasts a links state periodically at least once every 30 minutes, even if the links state has not changed. rfc 2328 notes that this periodic updating of link state advertisements adds robustness to the link state algorithm. ospf advertisements are contained in ospf messages that are setting ospf link weights our discussion of linkstate routing has implicitly assumed that link weights are set, a routing algorithm such as ospf is run, and traffic flows according to the routing tables computed by the ls algorithm. in terms of cause and effect, the link weights are given i.e., they come first and result via dijkstras algorithm in routing paths that minimize overall cost. in this viewpoint, link weights reflect the cost of using a link for example, if link weights are inversely proportional to capacity, then the use of highcapacity links would have smaller weight and thus be more attractive from a routing standpoint and dijsktras algorithm serves to minimize overall cost. in practice, the cause and effect relationship between link weights and routing paths may be reversed, with network operators configuring link weights in order to obtain rout ing paths that achieve certain traffic engineering goals fortz 2000, fortz 2002. for example, suppose a network operator has an estimate of traffic flow entering the network at each ingress point and destined for each egress point. the operator may then want to put in place a specific routing of ingresstoegress flows that minimizes the maximum utilization over all of the networks links. but with a routing algorithm such as ospf, the operators main knobs for tuning the routing of flows through the network are the link weights. thus, in order to achieve the goal of minimizing the maximum link utilization, the operator must find the set of link weights that achieves this goal. this is a reversal of the cause and effect relationshipthe desired routing of flows is known, and the ospf link weights must be found such that the ospf routing algorithm results in this desired routing of flows.principles in practice m05_kuro5469_08_ge_c05.indd 427 03052021 1642 428 chapter 5 the network layer control plane carried directly by ip, with an upperlayer protocol of 89 for ospf. thus, the ospf protocol must itself implement functionality such as reliable message transfer and linkstate broadcast. the ospf protocol also checks that links are operational via
a hello message that is sent to an attached neighbor and allows an ospf router to obtain a neighboring routers database of networkwide link state. some of the advances embodied in ospf include the following security. exchanges between ospf routers for example, linkstate updates can be authenticated. with authentication, only trusted routers can participate in the ospf protocol within an as, thus preventing malicious intruders or networking students taking their newfound knowledge out for a joyride from injecting incorrect information into router tables. by default, ospf packets between routers are not authenticated and could be forged. two types of authentication can be configuredsimple and md5 see chapter 8 for a discussion on md5 and authentication in general. with simple authentication, the same password is configured on each router. when a router sends an ospf packet, it includes the password in plaintext. clearly, simple authentication is not very secure. md5 authentication is based on shared secret keys that are configured in all the routers. for each ospf packet that it sends, the router computes the md5 hash of the content of the ospf packet appended with the secret key. see the discussion of message authentication codes in chapter 8. then the router includes the resulting hash value in the ospf packet. the receiving router, using the preconfigured secret key, will compute an md5 hash of the packet and compare it with the hash value that the packet carries, thus verifying the packets authenticity. sequence numbers are also used with md5 authentication to protect against replay attacks. multiple samecost paths. when multiple paths to a destination have the same cost, ospf allows multiple paths to be used that is, a single path need not be chosen for carrying all traffic when multiple equalcost paths exist. integrated support for unicast and multicast routing. multicast ospf mospf rfc 1584 provides simple extensions to ospf to provide for multicast routing. mospf uses the existing ospf link database and adds a new type of linkstate advertisement to the existing ospf linkstate broadcast mechanism. support for hierarchy within a single as. an ospf autonomous system can be configured hierarchically into areas. each area runs its own ospf linkstate routing algorithm, with each router in an area broadcasting its link state to all other routers in that area. within each area, one or more area border routers are responsible for routing packets outside the area. lastly, exactly one ospf area in the as is configured to be the backbone area. the primary role of the backbone area is to route traffic between the other areas in the as. the backbone always contains all area border routers in the as and may contain nonborder routers as well. interarea routing within the as requires that the packet be first m05_kuro5469_08_ge_c05.indd 428 03052021 1642 5.4 routing among the isps bgp 429 routed to an area border router intraarea routing, then routed through the back bone to the area border router that is in the destination area, and then routed to the
final destination. ospf is a relatively complex protocol, and our coverage here has been necessar ily brief; huitema 1998; moy 1998; rfc 2328 provide additional details. 5.4 routing among the isps bgp we just learned that ospf is an example of an intraas routing protocol. when routing a packet between a source and destination within the same as, the route the packet follows is entirely determined by the intraas routing protocol. however, to route a packet across multiple ass, say from a smartphone in timbuktu to a server in a datacenter in silicon valley, we need an interautonomous system routing protocol. since an interas routing protocol involves coordination among multiple ass, communicating ass must run the same interas routing protocol. in fact, in the internet, all ass run the same interas routing protocol, called the border gateway protocol, more commonly known as bgp rfc 4271; stewart 1999. bgp is arguably the most important of all the internet protocols the only other contender would be the ip protocol that we studied in section 4.3, as it is the protocol that glues the thousands of isps in the internet together. as we will soon see, bgp is a decentralized and asynchronous protocol in the vein of distancevector routing described in section 5.2.2. although bgp is a complex and challenging protocol, to understand the internet on a deep level, we need to become familiar with its underpinnings and operation. the time we devote to learning bgp will be well worth the effort. 5.4.1 the role of bgp to understand the responsibilities of bgp, consider an as and an arbitrary router in that as. recall that every router has a forwarding table, which plays the central role in the process of forwarding arriving packets to outbound router links. as we have learned, for destinations that are within the same as, the entries in the routers forwarding table are determined by the ass intraas routing protocol. but what about destinations that are outside of the as? this is precisely where bgp comes to the rescue. in bgp, packets are not routed to a specific destination address, but instead to cidrized prefixes, with each prefix representing a subnet or a collection of subnets. gluing the internet together bgpvideonote m05_kuro5469_08_ge_c05.indd 429 03052021 1642 430 chapter 5 the network layer control plane in the world of bgp, a destination may take the form 138.16.6822, which for this example includes 1,024 ip addresses. thus, a routers forwarding table will have entries of the form x, i, where x is a prefix such as 138.16.6822 and i is an inter face number for one of the routers interfaces. as an interas routing protocol, bgp provides each router a means to 1. obtain prefix reachability information from neighboring ass. in particular, bgp allows each subnet to advertise its existence to the rest of the internet. a subnet screams, i exist and i am here, and bgp makes sure that all the routers in the internet know about this subnet. if it
werent for bgp, each subnet would be an isolated islandalone, unknown and unreachable by the rest of the internet. 2. determine the best routes to the prefixes. a router may learn about two or more different routes to a specific prefix. to determine the best route, the router will locally run a bgp routeselection procedure using the prefix reachability information it obtained via neighboring routers. the best route will be determined based on policy as well as the reachability information. let us now delve into how bgp carries out these two tasks. 5.4.2 advertising bgp route information consider the network shown in figure 5.8. as we can see, this simple network has three autonomous systems as1, as2, and as3. as shown, as3 includes a subnet with prefix x. for each as, each router is either a gateway router or an internal router. a gateway router is a router on the edge of an as that directly connects to one or more routers in other ass. an internal router connects only to hosts and routers within its own as. in as1, for example, router 1c is a gateway router; routers 1a, 1b, and 1d are internal routers. lets consider the task of advertising reachability information for prefix x to all of the routers shown in figure 5.8. at a high level, this is straightforward. first, as3 sends a bgp message to as2, saying that x exists and is in as3; lets denote this message as as3 x. then as2 sends a bgp message to as1, saying that x exists and that you can get to x by first passing through as2 and then going to as3; lets denote that message as as2 as3 x. in this manner, each of the autonomous systems will not only learn about the existence of x, but also learn about a path of autonomous systems that leads to x. although the discussion in the above paragraph about advertising bgp reacha bility information should get the general idea across, it is not precise in the sense that autonomous systems do not actually send messages to each other, but instead routers do. to understand this, lets now reexamine the example in figure 5.8. in bgp, m05_kuro5469_08_ge_c05.indd 430 03052021 1642 5.4 routing among the isps bgp 431 pairs of routers exchange routing information over semipermanent tcp connections using port 179. each such tcp connection, along with all the bgp messages sent over the connection, is called a bgp connection. furthermore, a bgp connection that spans two ass is called an external bgp ebgp connection, and a bgp session between routers in the same as is called an internal bgp ibgp connection. examples of bgp connections for the network in figure 5.8 are shown in figure 5.9. there is typically one ebgp connection for each link that directly connects gateway routers in different ass; thus, in figure 5.9, there is an ebgp connection between gateway routers 1c and 2a and an ebgp connection between gateway routers 2c and 3a. there
are also ibgp connections between routers within each of the ass. in particular, figure 5.9 displays a common configuration of one bgp connection for each pair of routers internal to an as, creating a mesh of tcp connections within each as. in figure 5.9, the ebgp connections are shown with the long dashes; the ibgp connections are shown with the short dashes. note that ibgp connections do not always correspond to physical links. in order to propagate the reachability information, both ibgp and ebgp sessions are used. consider again advertising the reachability information for prefix x to all routers in as1 and as2. in this process, gateway router 3a first sends an ebgp message as3 x to gateway router 2c. gateway router 2c then sends the ibgp message as3 x to all of the other routers in as2, including to gateway router 2a. gateway router 2a then sends the ebgp message as2 as3 x to gateway router 1c. finally, gateway router 1c uses ibgp to send the 2b 2d2a 2c as21b 1d1a 1c as13b 3d3a 3c as3x figure 5.8 network with three autonomous systems. as3 includes a subnet with prefix x m05_kuro5469_08_ge_c05.indd 431 03052021 1642 432 chapter 5 the network layer control plane message as2 as3 x to all the routers in as1. after this process is complete, each router in as1 and as2 is aware of the existence of x and is also aware of an as path that leads to x. of course, in a real network, from a given router there may be many different paths to a given destination, each through a different sequence of ass. for example, consider the network in figure 5.10, which is the original network in figure 5.8, with an additional physical link from router 1d to router 3d. in this case, there are two paths from as1 to x the path as2 as3 x via router 1c; and the new path as3 x via the router 1d. 5.4.3 determining the best routes as we have just learned, there may be many paths from a given router to a destination subnet. in fact, in the internet, routers often receive reachability information about dozens of different possible paths. how does a router choose among these paths and then configure its forwarding table accordingly? before addressing this critical question, we need to introduce a little more bgp terminology. when a router advertises a prefix across a bgp connection, it includes with the prefix several bgp attributes. in bgp jargon, a prefix along with its attributes is called a route. two of the more important attributes are aspath and nexthop. the aspath attribute contains the list of ass through which the ebgpkey ibgp2b 2d2a 2c as21b 1d1a 1c as13b 3d3a 3c as3x figure 5.9 ebgp and ibgp connections m05_kuro5469_08_ge_c05.indd 432 03052021 1642 5.4 routing among the isps bgp 433 advertisement has passed, as weve seen in our examples above. to generate the as path value, when a prefix is passed to an as, the as
adds its asn to the existing list in the aspath. for example, in figure 5.10, there are two routes from as1 to subnet x one which uses the aspath as2 as3; and another that uses the aspath a3. bgp routers also use the aspath attribute to detect and prevent looping advertisements; specifically, if a router sees that its own as is contained in the path list, it will reject the advertisement. providing the critical link between the interas and intraas routing protocols, the nexthop attribute has a subtle but important use. the nexthop is the ip address of the router interface that begins the aspath. to gain insight into this attribute, lets again refer to figure 5.10. as indicated in figure 5.10, the next hop attribute for the route as2 as3 x from as1 to x that passes through as2 is the ip address of the left interface on router 2a. the nexthop attribute for the route as3 x from as1 to x that bypasses as2 is the ip address of the leftmost interface of router 3d. in summary, in this toy example, each router in as1 becomes aware of two bgp routes to prefix x ip address of leftmost interface for router 2a; as2 as3; xip address of leftmost interface of router 3d; as3; x here, each bgp route is written as a list with three components nexthop; aspath; destination prefix. in practice, a bgp route includes additional attributes, which we will ignore for the time being. note that the nexthop attribute is an ip next hop next hop2b 2d2a 2c as21b 1d1a 1c as13b 3d3a 3c as3x figure 5.10 network augmented with peering link between as1 and as3 m05_kuro5469_08_ge_c05.indd 433 03052021 1642 434 chapter 5 the network layer control plane address of a router that does not belong to as1; however, the subnet that contains this ip address directly attaches to as1. hot potato routing we are now finally in position to talk about bgp routing algorithms in a precise manner. we will begin with one of the simplest routing algorithms, namely, hot potato routing. consider router 1b in the network in figure 5.10. as just described, this router will learn about two possible bgp routes to prefix x. in hot potato routing, the route chosen from among all possible routes is that route with the least cost to the nexthop router beginning that route. in this example, router 1b will consult its intraas routing information to find the leastcost intraas path to nexthop router 2a and the leastcost intraas path to nexthop router 3d, and then select the route with the smallest of these leastcost paths. for example, suppose that cost is defined as the number of links traversed. then the least cost from router 1b to router 2a is 2, the least cost from router 1b to router 2d is 3, and router 2a would therefore be selected. router 1b would then consult its forwarding table configured by its intraas algorithm and find the interface i
that is on the leastcost path to router 2a. it then adds x , i to its forwarding table. the steps for adding an outsideas prefix in a routers forwarding table for hot potato routing are summarized in figure 5.11. it is important to note that when adding an outsideas prefix into a forwarding table, both the interas routing protocol bgp and the intraas routing protocol e.g., ospf are used. the idea behind hotpotato routing is for router 1b to get packets out of its as as quickly as possible more specifically, with the least cost possible without worrying about the cost of the remaining portions of the path outside of its as to the destination. in the name hot potato routing, a packet is analogous to a hot potato that is burning in your hands. because it is burning hot, you want to pass it off to another person another as as quickly as possible. hot potato routing is thus learn from inter as protocol that subnet x is reachable via multiple gateways.use routing info from intraas protocol to determine costs of leastcost paths to each of the gateways.hot potato routing choose the gateway that has the smallest least cost.determine from forwarding table the interface i that leads to leastcost gateway. enter x,i in forwarding table. figure 5.11 steps in adding outsideas destination in a routers forwarding table m05_kuro5469_08_ge_c05.indd 434 03052021 1642 5.4 routing among the isps bgp 435 a selfish algorithmit tries to reduce the cost in its own as while ignoring the other components of the endtoend costs outside its as. note that with hot potato routing, two routers in the same as may choose two different as paths to the same prefix. for example, we just saw that router 1b would send packets through as2 to reach x. however, router 1d would bypass as2 and send packets directly to as3 to reach x. routeselection algorithm in practice, bgp uses an algorithm that is more complicated than hot potato routing, but nevertheless incorporates hot potato routing. for any given destination prefix, the input into bgps routeselection algorithm is the set of all routes to that prefix that have been learned and accepted by the router. if there is only one such route, then bgp obviously selects that route. if there are two or more routes to the same prefix, then bgp sequentially invokes the following elimination rules until one route remains 1. a route is assigned a local preference value as one of its attributes in addition to the aspath and nexthop attributes. the local preference of a route could have been set by the router or could have been learned from another router in the same as. the value of the local preference attribute is a policy decision that is left entirely up to the ass network administrator. we will shortly discuss bgp policy issues in some detail. the routes with the highest local preference values are selected. 2. from the remaining routes all with the
same highest local preference value, the route with the shortest aspath is selected. if this rule were the only rule for route selection, then bgp would be using a dv algorithm for path determination, where the distance metric uses the number of as hops rather than the number of router hops. 3. from the remaining routes all with the same highest local preference value and the same aspath length, hot potato routing is used, that is, the route with the closest nexthop router is selected. 4. if more than one route still remains, the router uses bgp identifiers to select the route; see stewart 1999. as an example, lets again consider router 1b in figure 5.10. recall that there are exactly two bgp routes to prefix x, one that passes through as2 and one that bypasses as2. also recall that if hot potato routing on its own were used, then bgp would route packets through as2 to prefix x. but in the above routeselection algorithm, rule 2 is applied before rule 3, causing bgp to select the route that bypasses as2, since that route has a shorter as path. so we see that with the above routeselection algorithm, bgp is no longer a selfish algorithmit first looks for routes with short as paths thereby likely reducing endtoend delay. as noted above, bgp is the de facto standard for interas routing for the internet. to see the contents of various bgp routing tables large! extracted from m05_kuro5469_08_ge_c05.indd 435 03052021 1642 436 chapter 5 the network layer control plane routers in tier1 isps, see httpwww.routeviews.org. bgp routing tables often contain over half a million routes that is, prefixes and corresponding attributes. statistics about the size and characteristics of bgp routing tables are presented in huston 2019b. 5.4.4 ipanycast in addition to being the internets interas routing protocol, bgp is often used to implement the ipanycast service rfc 1546, rfc 7094, which is commonly used in dns. to motivate ipanycast, consider that in many applications, we are interested in 1 replicating the same content on different servers in many different dispersed geographical locations, and 2 having each user access the content from the server that is closest. for example, a cdn may replicate videos and other objects on servers in different countries. similarly, the dns system can replicate dns records on dns servers throughout the world. when a user wants to access this replicated content, it is desirable to point the user to the nearest server with the replicated content. bgps routeselection algorithm provides an easy and natural mechanism for doing so. to make our discussion concrete, lets describe how a cdn might use ip anycast. as shown in figure 5.12, during the ipanycast configuration stage, the cdn company assigns the same ip address to each of its servers, and uses stand ard bgp to advertise this ip address from each of the servers. when a bgp router receives multiple route advertisements for this ip address, it treats these advertisements as providing different
paths to the same physical location when, in fact, the advertisements are for different paths to different physical locations. when configuring its routing table, each router will locally use the bgp routeselection algorithm to pick the best for example, closest, as determined by ashop counts route to that ip address. for example, if one bgp route corresponding to one location is only one as hop away from the router, and all other bgp routes corresponding to other locations are two or more as hops away, then the bgp router would choose to route packets to the location that is one hop away. after this initial bgp addressadvertisement phase, the cdn can do its main job of distributing content. when a client requests the video, the cdn returns to the client the common ip address used by the geographically dispersed servers, no matter where the client is located. when the client sends a request to that ip address, internet routers then forward the request packet to the closest server, as defined by the bgp routeselection algorithm. although the above cdn example nicely illustrates how ipanycast can be used, in practice, cdns generally choose not to use ipanycast because bgp routing changes can result in different packets of the same tcp connection arriving at different instances of the web server. but ipanycast is extensively used by the dns system to direct dns queries to the closest root dns server. recall from section 2.4, there are currently 13 ip addresses for root dns servers. but corresponding to each of these addresses, there are multiple dns root servers, with some of these addresses having m05_kuro5469_08_ge_c05.indd 436 03052021 1642 5.4 routing among the isps bgp 437 over 100 dns root servers scattered over all corners of the world. when a dns query is sent to one of these 13 ip addresses, ip anycast is used to route the query to the nearest of the dns root servers that is responsible for that address. li 2018 presents recent measurements illustrating internet anycast, use, performance, and challenges. 5.4.5 routing policy when a router selects a route to a destination, the as routing policy can trump all other considerations, such as shortest as path or hot potato routing. indeed, in the routeselection algorithm, routes are first selected according to the localpreference attribute, whose value is fixed by the policy of the local as. lets illustrate some of the basic concepts of bgp routing policy with a simple example. figure 5.13 shows six interconnected autonomous systems a, b, c, w, x, and y. it is important to note that a, b, c, w, x, and y are ass, not routers. lets as1as33b3c 3a 1a1c 1b 1das2as4 2a2c4a 4c4b advertise212.21.21.21 cdn server bcdn server aadvertise212.21.21.21receive bgp advertisements for 212.21.21.21 from as1 and from as4. forward towardserver b since it iscloser .2b figure 5.12 using ipanycast to bring users to the closest cdn server m05_kuro5469_08_ge_c05.indd 437 03052021 1642 438 chapter 5 the network layer control plane assume that autonomous systems w,
x, and y are access isps and that a, b, and c are backbone provider networks. well also assume that a, b, and c, directly send traffic to each other, and provide full bgp information to their customer networks. all traffic entering an isp access network must be destined for that network, and all traffic leaving an isp access network must have originated in that network. w and y are clearly access isps. x is a multihomed access isp, since it is connected to the rest of the network via two different providers a scenario that is becoming increasingly common in practice. however, like w and y, x itself must be the sourcedestination of all traffic leavingentering x. but how will this stub network behavior be implemented and enforced? how will x be prevented from forwarding traffic between b and c? this can easily be accomplished by controlling the manner in which bgp routes are advertised. in particular, x will function as an access isp network if it advertises to its neighbors b and c that it has no paths to any other destinations except itself. that is, even though x may know of a path, say xcy, that reaches network y, it will not advertise this path to b. since b is unaware that x has a path to y, b would never forward traffic destined to y or c via x. this simple example illustrates how a selective route advertisement policy can be used to implement customerprovider routing relationships. lets next focus on a provider network, say as b. suppose that b has learned from a that a has a path aw to w. b can thus install the route aw into its routing information base. clearly, b also wants to advertise the path baw to its customer, x, so that x knows that it can route to w via b. but should b advertise the path baw to c? if it does so, then c could route traffic to w via baw. if a, b, and c are all backbone providers, than b might rightly feel that it should not have to shoulder the burden and cost! of carrying transit traffic between a and c. b might rightly feel that it is as and cs job and cost! to make sure that c can route tofrom as customers via a direct connection between a and c. there are currently no official standards that govern how backbone isps route among themselves. however, a rule of thumb followed by commercial isps is that any traffic flowing across an isps backbone network must have either a source or a destination or both in a network that is a customer of that isp; otherwise the traffic would be getting a free ride on the isps network. individual peering agreements that would govern questions such a wx ybkey provider network customer networkc figure 5.13 a simple bgp policy scenario m05_kuro5469_08_ge_c05.indd 438 03052021 1643 5.4 routing among the isps bgp 439 as those
raised above are typically negotiated between pairs of isps and are often confidential; huston 1999a; huston 2012 provide an interesting discussion of peering agreements. for a detailed description of how routing policy reflects commercial relationships among isps, see gao 2001; dmitiropoulos 2007. for a discussion of bgp routing polices from an isp standpoint, see caesar 2005b.why are there different interas and intraas routing protocols? having now studied the details of specific interas and intraas routing protocols deployed in todays internet, lets conclude by considering perhaps the most fundamental question we could ask about these protocols in the first place hopefully, you have been wondering this all along, and have not lost the forest for the trees! why are different interas and intraas routing protocols used? the answer to this question gets at the heart of the differences between the goals of routing within an as and among ass policy. among ass, policy issues dominate. it may well be important that traffic origi nating in a given as not be able to pass through another specific as. similarly, a given as may well want to control what transit traffic it carries between other ass. we have seen that bgp carries path attributes and provides for controlled distribution of routing information so that such policybased routing decisions can be made. within an as, everything is nominally under the same administrative control, and thus policy issues play a much less important role in choosing routes within the as. scale. the ability of a routing algorithm and its data structures to scale to handle routing toamong large numbers of networks is a critical issue in interas routing. within an as, scalability is less of a concern. for one thing, if a single isp becomes too large, it is always possible to divide it into two ass and perform interas routing between the two new ass. recall that ospf allows such a hierarchy to be built by splitting an as into areas. performance. because interas routing is so policy oriented, the quality for example, performance of the routes used is often of secondary concern that is, a longer or more costly route that satisfies certain policy criteria may well be taken over a route that is shorter but does not meet that criteria. indeed, we saw that among ass, there is not even the notion of cost other than as hop count associated with routes. within a single as, however, such policy concerns are of less importance, allowing routing to focus more on the level of performance realized on a route.principles in practice m05_kuro5469_08_ge_c05.indd 439 03052021 1643 440 chapter 5 the network layer control plane this completes our brief introduction to bgp. understanding bgp is important because it plays a central role in the internet. we encourage you to see the references stewart 1999; huston 2019a; labovitz 1997; halabi 2000; huitema 1998; gao 2001; feamster 2004; caesar 2005b; li 2007 to learn more about bgp. 5.4.6 putting the pieces together obtaining internet presence although this
subsection is not about bgp per se, it brings together many of the protocols and concepts weve seen thus far, including ip addressing, dns, and bgp. suppose you have just created a small company that has a number of servers, including a public web server that describes your companys products and services, a mail server from which your employees obtain their email messages, and a dns server. naturally, you would like the entire world to be able to visit your web site in order to learn about your exciting products and services. moreover, you would like your employees to be able to send and receive email to potential customers throughout the world. to meet these goals, you first need to obtain internet connectivity, which is done by contracting with, and connecting to, a local isp. your company will have a gateway router, which will be connected to a router in your local isp. this connection might be a dsl connection through the existing telephone infrastructure, a leased line to the isps router, or one of the many other access solutions described in chapter 1. your local isp will also provide you with an ip address range, for example, a 24 address range consisting of 256 addresses. once you have your physical connectivity and your ip address range, you will assign one of the ip addresses in your address range to your web server, one to your mail server, one to your dns server, one to your gateway router, and other ip addresses to other servers and networking devices in your companys network. in addition to contracting with an isp, you will also need to contract with an internet registrar to obtain a domain name for your company, as described in chapter 2. for example, if your companys name is, say, xanadu inc., you will naturally try to obtain the domain name xanadu.com. your company must also obtain presence in the dns system. specifically, because outsiders will want to contact your dns server to obtain the ip addresses of your servers, you will also need to provide your registrar with the ip address of your dns server. your registrar will then put an entry for your dns server domain name and corresponding ip address in the .com topleveldomain servers, as described in chapter 2. after this step is completed, any user who knows your domain name e.g., xanadu.com will be able to obtain the ip address of your dns server via the dns system. so that people can discover the ip addresses of your web server, in your dns server you will need to include entries that map the host name of your web server e.g., www.xanadu.com to its ip address. you will want to have similar entries for m05_kuro5469_08_ge_c05.indd 440 03052021 1643 5.5 the sdn c ontrol plane 441 other publicly available servers in your company, including your mail server. in this manner, if alice wants to browse your web server, the dns system will contact your dns server, find
the ip address of your web server, and give it to alice. alice can then establish a tcp connection directly with your web server. however, there still remains one other necessary and crucial step to allow out siders from around the world to access your web server. consider what happens when alice, who knows the ip address of your web server, sends an ip datagram e.g., a tcp syn segment to that ip address. this datagram will be routed through the internet, visiting a series of routers in many different ass, and eventually reach your web server. when any one of the routers receives the datagram, it is going to look for an entry in its forwarding table to determine on which outgoing port it should forward the datagram. therefore, each of the routers needs to know about the existence of your companys 24 prefix or some aggregate entry. how does a router become aware of your companys prefix? as we have just seen, it becomes aware of it from bgp! specifically, when your company contracts with a local isp and gets assigned a prefix i.e., an address range, your local isp will use bgp to advertise your prefix to the isps to which it connects. those isps will then, in turn, use bgp to propagate the advertisement. eventually, all internet routers will know about your prefix or about some aggregate that includes your prefix and thus be able to appropriately forward datagrams destined to your web and mail servers. 5.5 the sdn control plane in this section, well dive into the sdn control planethe networkwide logic that controls packet forwarding among a networks sdnenabled devices, as well as the configuration and management of these devices and their services. our study here builds on our earlier discussion of generalized sdn forwarding in section 4.4, so you might want to first review that section, as well as section 5.1 of this chapter, before continuing on. as in section 4.4, well again adopt the terminology used in the sdn literature and refer to the networks forwarding devices as packet switches or just switches, with packet being understood, since forwarding decisions can be made on the basis of networklayer sourcedestination addresses, linklayer sourcedestination addresses, as well as many other values in transport, network, and linklayer packetheader fields. four key characteristics of an sdn architecture can be identified kreutz 2015 flowbased forwarding. packet forwarding by sdncontrolled switches can be based on any number of header field values in the transportlayer, networklayer, or linklayer header. we saw in section 4.4 that the openflow1.0 abstraction allows forwarding based on eleven different header field values. this contrasts m05_kuro5469_08_ge_c05.indd 441 03052021 1643 442 chapter 5 the network layer control plane sharply with the traditional approach to routerbased forwarding that we studied in sections 5.25.4, where forwarding of ip datagrams was based solely on a datagrams destination ip address. recall from figure 5.2 that packet forwarding rules are specified in a switchs flow table; it is the job of
the sdn control plane to compute, manage and install flow table entries in all of the networks switches. separation of data plane and control plane. this separation is shown clearly in figures 5.2 and 5.14. the data plane consists of the networks switches relatively simple but fast devices that execute the match plus action rules in their flow tables. the control plane consists of servers and software that determine and manage the switches flow tables. network control functions external to dataplane switches. given that the s in sdn is for software, its perhaps not surprising that the sdn control plane is implemented in software. unlike traditional routers, however, this software executes on servers that are both distinct and remote from the networks switches. as shown in figure 5.14, the control plane itself consists of two componentsan sdn controller or network operating system gude 2008 and a set of networkcontrol applications. the controller maintains accurate network state information e.g., the state of remote links, switches, and hosts; provides this information to the networkcontrol applications running in the control plane; and provides the means through which these applications can monitor, program, and control the underlying network devices. although the controller in figure 5.14 is shown as a single central server, in practice the controller is only logically centralized; it is typically implemented on several servers that provide coordinated, scalable performance and high availability. a programmable network. the network is programmable through the networkcontrol applications running in the control plane. these applications represent the brains of the sdn control plane, using the apis provided by the sdn controller to specify and control the data plane in the network devices. for example, a routing networkcontrol application might determine the endend paths between sources and destinations for example, by executing dijkstras algorithm using the nodestate and linkstate information maintained by the sdn controller. another network application might perform access control, that is, determine which packets are to be blocked at a switch, as in our third example in section 4.4.3. yet another application might have switches forward packets in a manner that performs server load balancing the second example we considered in section 4.4.3. from this discussion, we can see that sdn represents a significant unbundling of network functionalitydata plane switches, sdn controllers, and networkcontrol applications are separate entities that may each be provided by different vendors and organizations. this contrasts with the presdn model in which a switchrouter together with its embedded control plane software and protocol implementations was monolithic, vertically integrated, and sold by a single vendor. this unbundling m05_kuro5469_08_ge_c05.indd 442 03052021 1643 5.5 the sdn c ontrol plane 443 of network functionality in sdn has been likened to the earlier evolution from main frame computers where hardware, system software, and applications were provided by a single vendor to personal computers with their separate hardware, operating systems, and applications. the unbundling of computing hardware, system software, and applications has led to a rich, open ecosystem driven by innovation in all three of these
areas; one hope for sdn is that it will continue to drive and enable such rich innovation. given our understanding of the sdn architecture of figure 5.14, many questions naturally arise. how and where are the flow tables actually computed? how are these tables updated in response to events at sdncontrolled devices e.g., an attached link going updown? and how are the flow table entries at multiple switches coordinated in such a way as to result in orchestrated and consistent networkwide functionality e.g., endtoend paths for forwarding packets from sources to destinations, or coordinated distributed firewalls? it is the role of the sdn control plane to provide these, and many other, capabilities. routingnetworkcontr ol applications contr ol plane data plane sdncontr olled switchesaccess controlload balancer northbound api southbound apisdn controller network operating system figure 5.14 components of the sdn architecture sdncontrolled switches, the sdn controller, networkcontrol applications m05_kuro5469_08_ge_c05.indd 443 03052021 1643 444 chapter 5 the network layer control plane 5.5.1 the sdn control plane sdn controller and sdn networkcontrol applications lets begin our discussion of the sdn control plane in the abstract, by consider ing the generic capabilities that the control plane must provide. as well see, this abstract, first principles approach will lead us to an overall architecture that reflects how sdn control planes have been implemented in practice. as noted above, the sdn control plane divides broadly into two components the sdn controller and the sdn networkcontrol applications. lets explore the controller first. many sdn controllers have been developed since the earliest sdn controller gude 2008; see kreutz 2015 for an extremely thorough survey. figure 5.15 provides a more detailed view of a generic sdn controller. a controllers functionality can be broadly organized into three layers. lets consider these layers in an uncharacteristically bottomup fashion a communication layer communicating between the sdn controller and con trolled network devices. clearly, if an sdn controller is going to control the operation of a remote sdnenabled switch, host, or other device, a protocol is needed to transfer information between the controller and that device. in addition, a device must be able to communicate locallyobserved events to the controller for example, a message indicating that an attached link has gone up or down, that a device has just joined the network, or a heartbeat indicating that a device is up and operational. these events provide the sdn controller with an uptodate view of the networks state. this protocol constitutes the lowest layer of the controller architecture, as shown in figure 5.15. the communication between the controller and the controlled devices cross what has come to be known as the controllers southbound interface. in section 5.5.2, well study openflowa specific protocol that provides this communication functionality. openflow is implemented in most, if not all, sdn controllers. a networkwide statemanagement layer. the ultimate control decisions made by the sdn control planefor example, configuring flow tables in all switches to achieve the desired endend forwarding, to implement load balancing, or to implement a particular firewalling
capabilitywill require that the controller have uptodate information about state of the networks hosts, links, switches, and other sdncontrolled devices. a switchs flow table contains counters whose values might also be profitably used by networkcontrol applications; these values should thus be available to the applications. since the ultimate aim of the control plane is to determine flow tables for the various controlled devices, a controller might also maintain a copy of these tables. these pieces of information all constitute examples of the networkwide state maintained by the sdn controller. the interface to the networkcontrol application layer. the controller interacts with networkcontrol applications through its northbound interface. this api m05_kuro5469_08_ge_c05.indd 444 03052021 1643 5.5 the sdn c ontrol plane 445 allows networkcontrol applications to readwrite network state and flow tables within the statemanagement layer. applications can register to be notified when statechange events occur, so that they can take actions in response to network event notifications sent from sdncontrolled devices. different types of apis may be provided; well see that two popular sdn controllers communicate with their applications using a rest fielding 2000 requestresponse interface. we have noted several times that an sdn controller can be considered to be logically centralized, that is, that the controller may be viewed externally for exam ple, from the point of view of sdncontrolled devices and external networkcontrol rout ingaccess controlload balancer interface, abstractions for network control apps network graphrestful apiintent communication tofrom controlled devicesnetworkwide distributed, robust state management linkstate infohost infoswitch infostatisticsflow tables openflow snmpsdn contr ollernorthbound api southbound api figure 5.15 components of an sdn controller m05_kuro5469_08_ge_c05.indd 445 03052021 1643 446 chapter 5 the network layer control plane applications as a single, monolithic service. however, these services and the data bases used to hold state information are implemented in practice by a distributed set of servers for fault tolerance, high availability, or for performance reasons. with controller functions being implemented by a set of servers, the semantics of the controllers internal operations e.g., maintaining logical time ordering of events, consistency, consensus, and more must be considered panda 2013. such concerns are common across many different distributed systems; see lamport 1989, lampson 1996 for elegant solutions to these challenges. modern controllers such as opendaylight opendaylight 2020 and onos onos 2020 see sidebar have placed considerable emphasis on architecting a logically centralized but physically distributed controller platform that provides scalable services and high availability to the controlled devices and networkcontrol applications alike. the architecture depicted in figure 5.15 closely resembles the architecture of the originally proposed nox controller in 2008 gude 2008, as well as that of todays opendaylight opendaylight 2020 and onos onos 2020 sdn controllers see sidebar. well cover an example of controller operation in section 5.5.3. first, however, lets examine the openflow protocol, the earliest and now one of several protocols that can be used for communication between an sdn controller and a controlled device, which lies in the controllers communication layer. 5.5.2 openflow protocol the openflow protocol openflow 2009, onf 2020
operates between an sdn controller and an sdncontrolled switch or other device implementing the openflow api that we studied earlier in section 4.4. the openflow protocol operates over tcp, with a default port number of 6653. among the important messages flowing from the controller to the controlled switch are the following configuration. this message allows the controller to query and set a switchs configuration parameters. modifystate. this message is used by a controller to adddelete or modify entries in the switchs flow table, and to set switch port properties. readstate. this message is used by a controller to collect statistics and counter values from the switchs flow table and ports. sendpacket. this message is used by the controller to send a specific packet out of a specified port at the controlled switch. the message itself contains the packet to be sent in its payload. among the messages flowing from the sdncontrolled switch to the controller are the following flowremoved. this message informs the controller that a flow table entry has been removed, for example by a timeout or as the result of a received modifystate message. m05_kuro5469_08_ge_c05.indd 446 03052021 1643 5.5 the sdn c ontrol plane 447 portstatus. this message is used by a switch to inform the controller of a change in port status. packetin. recall from section 4.4 that a packet arriving at a switch port and not matching any flow table entry is sent to the controller for additional processing. matched packets may also be sent to the controller, as an action to be taken on a match. the packetin message is used to send such packets to the controller. additional openflow messages are defined in openflow 2009, onf 2020. googles softwaredefined global network recall from the case study in section 2.6 that google deploys a dedicated widearea network wan that interconnects its data centers and server clusters in ixps and isps. this network, called b4, has a googledesigned sdn control plane built on openflow. googles network is able to drive wan links at near 70 utilization over the long run a two to three fold increase over typical link utilizations and split application flows among multiple paths based on application priority and existing flow demands jain 2013. the google b4 network is particularly it wellsuited for sdn i google controls all devices from the edge servers in ixps and isps to routers in their network core; ii the most bandwidthintensive applications are largescale data copies between sites that can defer to higherpriority interactive applications during times of resource congestion; iii with only a few dozen data centers being connected, centralized control is feasible. googles b4 network uses custombuilt switches, each implementing a slightly extended ver sion of openflow, with a local open flow agent ofa that is similar in spirit to the control agent we encountered in figure 5.2. each ofa in turn connects to an open flow controller ofc in the network control server ncs, using a separate out of band network, distinct from the
network that carries datacenter traffic between data centers. the ofc thus provides the services used by the ncs to communicate with its controlled switches, similar in spirit to the lowest layer in the sdn architecture shown in figure 5.15. in b4, the ofc also performs state management functions, keeping node and link status in a network information base nib. googles implementation of the ofc is based on the onix sdn controller koponen 2010. two routing protocols, bgp for routing between the data centers and isis a close relative of ospf, for routing within a data center, are implemented. paxos chandra 2007 is used to execute hot replicas of ncs components to protect against failure. a traffic engineering networkcontrol application, sitting logically above the set of network control servers, interacts with these servers to provide global, networkwide bandwidth provisioning for groups of application flows. with b4, sdn made an important leap forward into the operational networks of a global network provider. see jain 2013; hong 2018 for a detailed description of b4.principles in practice m05_kuro5469_08_ge_c05.indd 447 03052021 1643 448 chapter 5 the network layer control plane 5.5.3 data and control plane interaction an example in order to solidify our understanding of the interaction between sdncontrolled switches and the sdn controller, lets consider the example shown in figure 5.16, in which dijkstras algorithm which we studied in section 5.2 is used to determine shortest path routes. the sdn scenario in figure 5.16 has two important differences from the earlier perroutercontrol scenario of sections 5.2.1 and 5.3, where dijkstras algorithm was implemented in each and every router and linkstate updates were flooded among all network routers dijkstras algorithm is executed as a separate application, outside of the packet switches. packet switches send link updates to the sdn controller and not to each other. in this example, lets assume that the link between switch s1 and s2 goes down; that shortest path routing is implemented, and consequently and that incoming and outgoing flow forwarding rules at s1, s3, and s4 are affected, but that s2s figure 5.16 sdn controller scenario linkstate changenetwork graphrestful apiintent statisticsflow tables openflow snmpdijkstra s linkstate routing 4 3 2 15 s1s2 s3s46linkstate infohost infoswitch info m05_kuro5469_08_ge_c05.indd 448 03052021 1643 5.5 the sdn c ontrol plane 449 operation is unchanged. lets also assume that openflow is used as the communi cation layer protocol, and that the control plane performs no other function other than linkstate routing. 1. switch s1, experiencing a link failure between itself and s2, notifies the sdn controller of the linkstate change using the openflow portstatus message. 2. the sdn controller receives the openflow message indicating the linkstate change, and notifies the linkstate manager, which updates a linkstate database. 3. the networkcontrol application that implements dijkstras linkstate routing has previously registered to be notified when link state changes. that application receives the notification of the linkstate change. 4. the linkstate routing application interacts with the linkstate manager to get updated link state; it might also consult other
components in the state management layer. it then computes the new leastcost paths. 5. the linkstate routing application then interacts with the flow table manager, which determines the flow tables to be updated. 6. the flow table manager then uses the openflow protocol to update flow table entries at affected switchess1 which will now route packets destined to s2 via s4, s2 which will now begin receiving packets from s1 via intermediate switch s4, and s4 which must now forward packets from s1 destined to s2. this example is simple but illustrates how the sdn control plane provides controlplane services in this case, networklayer routing that had been previously implemented with perrouter control exercised in each and every network router. one can now easily appreciate how an sdnenabled isp could easily switch from leastcost path routing to a more handtailored approach to routing. indeed, since the controller can tailor the flow tables as it pleases, it can implement any form of forwarding that it pleasessimply by changing its applicationcontrol software. this ease of change should be contrasted to the case of a traditional perrouter control plane, where software in all routers which might be provided to the isp by multiple independent vendors must be changed. 5.5.4 sdn past and future although the intense interest in sdn is a relatively recent phenomenon, the technical roots of sdn, and the separation of the data and control planes in particular, go back considerably further. in 2004, feamster 2004, lakshman 2004, rfc 3746 all argued for the separation of the networks data and control planes. van der merwe 1998 describes a control framework for atm networks black 1995 with multiple controllers, each controlling a number of atm switches. the ethane project casado 2007 pioneered the notion of a network of simple flowbased ethernet switches with matchplusaction flow tables, a centralized controller that managed flow m05_kuro5469_08_ge_c05.indd 449 03052021 1643 450 chapter 5 the network layer control plane admission and routing, and the forwarding of unmatched packets from the switch to the controller. a network of more than 300 ethane switches was operational in 2007. ethane quickly evolved into the openflow project, and the rest as the saying goes is history! numerous research efforts are aimed at developing future sdn architectures and capabilities. as we have seen, the sdn revolution is leading to the disruptive replacement of dedicated monolithic switches and routers with both data and control planes by simple commodity switching hardware and a sophisticated software control plane. a generalization of sdn known as network functions virtualization nfv which we discussed earlier in section 4.5 similarly aims at disruptive replacement of sophisticated middleboxes such as middleboxes with dedicated hardware and proprietary software for media cachingservice with simple commodity servers, switching, and storage. a second area of important research seeks to extend sdn concepts from the intraas setting to the interas setting gupta 2014. sdn controller case studies the opendaylight and onos controllers in the earliest days of sdn, there was a single sdn protocol openflow
mckeown 2008; openflow 2009 and a single sdn controller nox gude 2008. since then, the number of sdn controllers in particular has grown significantly kreutz 2015. some sdn controllers are companyspecific and proprietary, particularly when used to control internal proprietary networks e.g., within or among a companys data centers. but many more controllers are opensource and implemented in a variety of programming languages erickson 2013. most recently, the opendaylight controller opendaylight 2020 and the onos controller onos 2020 have found considerable industry support. they are both opensource and are being developed in partnership with the linux foundation. the opendaylight controller figure 5.17 presents a simplified view of the opendaylight odl controller platform opendaylight 2020, eckel 2017. odls basic network functions are at the heart of the controller, and correspond closely to the networkwide state management capabilities that we encountered in figure 5.15. the service abstraction layer sal is the controllers nerve center, allowing controller components and applications to invoke each others services, access configuration and operational data, and to subscribe to events they generate. the sal also provides a uni form abstract interface to specific protocols operating between the odl controller and the controlled devices. these protocols include openflow which we covered in section 4.5, principles in practice m05_kuro5469_08_ge_c05.indd 450 03052021 1643 5.5 the sdn c ontrol plane 451 and the simple network management protocol snmp and the network configuration netconf protocol, both of which well cover in section 5.7. the open vswitch database management protocol ovsdb is used to manage data center switching, an important application area for sdn technology. well introduce data center networking in chapter 6. network orchestrations and applications determine how dataplane forwarding and other services, such as firewalling and load balancing, are accomplished in the controlled devices. odl provides two ways in which applications can interoperate with native controller services and hence devices and with each other. in the apidriven adsal approach, shown in figure 5.17, applications communicate with controller modules using a rest requestresponse api running over http. initial releases of the opendaylight controller provided only the adsal. as odl became increasingly used for network configuration and management, later odl releases introduced a model driven mdsal approach. here, the yang data modeling language rfc 6020 defines models of device, protocol, and network configuration and operational state data. devices are then configured and managed by manipulating this data using the netconf protocol.figure 5.17 a simplified view of the opendaylight controllerrestrestconfnetconf apis enhanced servicesbasic network functions topology processingswitch mgr.stats mgr. aaa device discoveryforwarding rules mgr.host trackernetwork orchestrations and applications northbound apis southbound apis and protocols pluginsservice abstraction layer salmessaging openÔ¨Çow netconf snmp ovsdbtrafÔ¨Åc engineeringfirewallingload balancing conÔ¨Åg. and operational data store m05_kuro5469_08_ge_c05.indd 451 03052021 1643 452 chapter 5 the network layer control plane the onos controller figure 5.18 presents a simplified view of the onos controller onos 2020. similar to the canonical controller in figure 5.15, three layers can be identified in the onos controller northbound abstractions and protocols. a unique feature of onos is its intent
framework, which allows an application to request a highlevel service e.g., to setup a connection between host a and host b, or conversely to not allow host a and host b to communicate without having to know the details of how this service is performed. state information is provided to networkcontrol applications across the northbound api either synchronously via query or asynchronously via listener callbacks, e.g., when network state changes. distributed core. the state of the networks links, hosts, and devices is maintained in onoss distributed core. onos is deployed as a service on a set of interconnected servers, with each server running an identical copy of the onos software; an increased number of servers offers an increased service capacity. the onos core figure 5.18 onos controller architectureintent rest api hosts paths topology devices linksflow rules statistics device link host flow packet openflow netconf ovsdb network contr ol apps northbound abstractions, protocols onos distributed core southbound abstractions, protocols m05_kuro5469_08_ge_c05.indd 452 03052021 1643 5.6 icmp the internet c ontrol messa ge protocol 453 5.6 icmp the internet control message protocol the internet control message protocol icmp, specified in rfc 792, is used by hosts and routers to communicate networklayer information to each other. the most typical use of icmp is for error reporting. for example, when running an http session, you may have encountered an error message such as destination network unreachable. this message had its origins in icmp. at some point, an ip router was unable to find a path to the host specified in your http request. that router created and sent an icmp message to your host indicating the error. icmp is often considered part of ip, but architecturally it lies just above ip, as icmp messages are carried inside ip datagrams. that is, icmp messages are carried as ip payload, just as tcp or udp segments are carried as ip payload. similarly, when a host receives an ip datagram with icmp specified as the upperlayer protocol an upperlayer protocol number of 1, it demultiplexes the datagrams contents to icmp, just as it would demultiplex a datagrams content to tcp or udp. icmp messages have a type and a code field, and contain the header and the first 8 bytes of the ip datagram that caused the icmp message to be generated in the first place so that the sender can determine the datagram that caused the error. selected icmp message types are shown in figure 5.19. note that icmp messages are used not only for signaling error conditions. the wellknown ping program sends an icmp type 8 code 0 message to the specified host. the destination host, seeing the echo request, sends back a type 0 code 0 icmp echo reply. most tcpip implementations support the ping server directly in the operating system; that is, the server is not a process. chapter 11 of stevens 1990 provides the source code for the ping client program. note that the client program needs to be able to instruct the
operating system to generate an icmp message of type 8 code 0. another interesting icmp message is the source quench message. this message is seldom used in practice. its original purpose was to perform congestion controlto allow a congested router to send an icmp source quench message to a host to force provides the mechanisms for service replication and coordination among instances, providing the applications above and the network devices below with the abstraction of logically centralized core services. southbound abstractions and protocols. the southbound abstractions mask the hetero geneity of the underlying hosts, links, switches, and protocols, allowing the distributed core to be both device and protocol agnostic. because of this abstraction, the south bound interface below the distributed core is logically higher than in our canonical controller in figure 5.14 or the odl controller in figure 5.17. m05_kuro5469_08_ge_c05.indd 453 03052021 1643 454 chapter 5 the network layer control plane that host to reduce its transmission rate. we have seen in chapter 3 that tcp has its own congestioncontrol mechanism that operates at the transport layer, and that explicit congestion notification bits can be used by networklater devices to signal congestion. in chapter 1, we introduced the traceroute program, which allows us to trace a route from a host to any other host in the world. interestingly, traceroute is implemented with icmp messages. to determine the names and addresses of the routers between source and destination, traceroute in the source sends a series of ordinary ip datagrams to the destination. each of these datagrams carries a udp segment with an unlikely udp port number. the first of these datagrams has a ttl of 1, the second of 2, the third of 3, and so on. the source also starts timers for each of the datagrams. when the nth datagram arrives at the n th router, the n th router observes that the ttl of the datagram has just expired. according to the rules of the ip protocol, the router discards the datagram and sends an icmp warning message to the source type 11 code 0. this warning message includes the name of the router and its ip address. when this icmp message arrives back at the source, the source obtains the roundtrip time from the timer and the name and ip address of the n th router from the icmp message. how does a traceroute source know when to stop sending udp segments? recall that the source increments the ttl field for each datagram it sends. thus, one of the datagrams will eventually make it all the way to the destination host. because this datagram contains a udp segment with an unlikely port number, the destination figure 5.19 icmp message typesicmp type code description 0 333 3 334891011120 012 3 67000000echo reply to pingdestination network unreachabledestination host unreachabledestination protocol unreachable destination port unreachable destination network unknowndestination host unknownsource quench congestion controlecho requestrouter advertisementrouter discoveryttl expiredip header bad m05_kuro5469_08_ge_c05.indd 454 03052021 1643 5.7 network mana gement and snmp, netconfyang 455
host sends a port unreachable icmp message type 3 code 3 back to the source. when the source host receives this particular icmp message, it knows it does not need to send additional probe packets. the standard traceroute program actually sends sets of three packets with the same ttl; thus, the traceroute output provides three results for each ttl. in this manner, the source host learns the number and the identities of routers that lie between it and the destination host and the roundtrip time between the two hosts. note that the traceroute client program must be able to instruct the operating system to generate udp datagrams with specific ttl values and must also be able to be notified by its operating system when icmp messages arrive. now that you understand how traceroute works, you may want to go back and play with it some more. a new version of icmp has been defined for ipv6 in rfc 4443. in addition to reorganizing the existing icmp type and code definitions, icmpv6 also added new types and codes required by the new ipv6 functionality. these include the packet too big type and an unrecognized ipv6 options error code. 5.7 network management and snmp, netconfyang having now made our way to the end of our study of the network layer, with only the linklayer before us, were well aware that a network consists of many complex, interacting pieces of hardware and softwarefrom the links, switches, routers, hosts, and other devices that comprise the physical components of the network to the many protocols that control and coordinate these devices. when hundreds or thousands of such components are brought together by an organization to form a network, the job of the network administrator to keep the network up and running is surely a challenge. we saw in section 5.5 that the logically centralized controller can help with this process in an sdn context. but the challenge of network management has been around long before sdn, with a rich set of network management tools and approaches that help the network administrator monitor, manage, and control the network. well study these tools and techniques in this section, as well as new tools and techniques that have coevolved along with sdn. an oftenasked question is what is network management? a wellconceived, singlesentence albeit a rather long runon sentence definition of network management from saydam 1996 is network management includes the deployment, integration, and coordination of the hardware, software, and human elements to monitor, test, poll, configure, analyze, evaluate, and control the network and element resources to meet the realtime, operational performance, and quality of service requirements at a reasonable cost. given this broad definition, well cover only the rudiments of network man agement in this sectionthe architecture, protocols, and data used by a network m05_kuro5469_08_ge_c05.indd 455 03052021 1643 456 chapter 5 the network layer control plane administrator in performing their task. well not cover the administrators decision making processes, where topics such as fault identification labovitz 1997;
steinder 2002; feamster 2005; wu 2005; teixeira 2006, anomaly detection lakhina 2005; barford 2009, network designengineering to meet contracted service level agreements slas huston 1999a, and more come into consideration. our focus is thus purposefully narrow; the interested reader should consult these references, the excellent overviews in subramanian 2000; schonwalder 2010; claise 2019, and the more detailed treatment of network management available on the web site for this text. 5.7.1 the network management framework figure 5.20 shows the key components of network management managing server. the managing server is an application, typically with network managers humans in the loop, running in a centralized network management station in the network operations center noc. the managing server is the locus of activity for network management it controls the collection, processing, analysis, and dispatching of network management information and commands. it is here that actions are initiated to configure, monitor, and control the networks managed devices. in practice, a network may have several such managing servers. managed device. a managed device is a piece of network equipment including its software that resides on a managed network. a managed device might be a host, router, switch, middlebox, modem, thermometer, or other networkconnected device. the device itself will have many manageable components e.g., a network interface is but one component of a host or router, and configuration parameters for these hardware and software components e.g., an intraas routing protocol, such as ospf. data. each managed device will have data, also known as state, associated with it. there are several different types of data. configuration data is device information explicitly configured by the network manager, for example, a managerassignedconfigured ip address or interface speed for a device interface. operational data is information that the device acquires as it operates, for example, the list of immediate neighbors in ospf protocol. device statistics are status indicators and counts that are updated as the device operators e.g., the number of dropped packets on an interface, or the devices cooling fan speed. the network manager can query remote device data, and in some cases, control the remote device by writing device data values, as discussed below. as shown in figure 5.17, the managing server also maintains its own copy of configuration, operational and statistics data from its managed devices as well as networkwide data e.g., the networks topology. network management agent. the network management agent is a software process running in the managed device that communicates with the managing server, taking local actions at the managed device under the command and control of the managing server. the network management agent is similar to the routing agent that we saw in figure 5.2. m05_kuro5469_08_ge_c05.indd 456 03052021 1643 5.7 network mana gement and snmp, netconfyang 457 network management protocol. the final component of a network management framework is the network management protocol. this protocol runs between the managing server and the managed devices, allowing the managing server to query the status of managed devices and take actions at these devices via its
agents. agents can use the network management protocol to inform the managing server of exceptional events e.g., component failures or violation of performance thresholds. its important to note that the network management protocol does not itself manage the network. instead, it provides capabilities that network managers can use to manage monitor, test, poll, configure, analyze, evaluate, and control the network. this is a subtle, but important, distinction. in practice, there are three commonly used ways in a network operator can man age the network, using the components described above cli. a network operator may issue direct command line interface cli commands to the device. these commands can be typed directly on a managed devices console if the operator is physically present at the device, or over a telnet or secure shell ssh connection, possibly via scripting, between the figure 5.20 elements of network managementagent device data agent device dataagent device datamanaging servercontroller managed devicemanaged devicemanaged device manageddeviceagent controller todevice protocolkeymanaged devicenetwork managers conÔ¨Åg. and operational data storedevice data agent device data m05_kuro5469_08_ge_c05.indd 457 03052021 1643 458 chapter 5 the network layer control plane managing servercontroller and the managed device. cli commands are vendor and devicespecific and can be rather arcane. while seasoned network wizards may be able to use cli to flawlessly configure network devices, cli use is prone to errors, and it is difficult to automate or efficiently scale for large networks. consumeroriented network devices, such as your wireless home router, may export a management menu that you the network manager! can access via http to configure that device. while this approach may work well for single, simple devices and is less errorprone than cli, it also doesnt scale to largersized networks. snmpmib. in this approach, the network operator can queryset the data contained in a devices management information base mib objects using the simple network management protocol snmp. some mibs are device and vendorspecific, while other mibs e.g., the number of ip datagrams discarded at a router due to errors in an ip datagram header, or the number of udp segments received at a host are deviceagnostic, providing abstraction and generality. a network operator would most typically use this approach to query and monitor operational state and device statistics, and then use cli to actively controlconfigure the device. we note, importantly, that both approaches manage devices individually. well cover the snmp and mibs, which have been in use since the late 1980s, in section 5.7.2 below. a networkmanagement workshop convened by the internet architecture board in 2002 rfc 3535 noted not only the value of the snmpmib approach for device monitoring but also noted its shortcomings, particularly for device configuration and network management at scale. this gave rise to the most recent approach for network management, using netconf and yang. netconfyang. the netconfyang approach takes a more abstract, networkwide, and holistic view toward network management, with a much stronger emphasis on configuration management, including specifying correctness constraints and providing atomic management operations over multiple controlled devices. yang rfc
6020 is a data modeling language used to model configu ration and operational data. the netconf protocol rfc 6241 is used to com municate yangcompatible actions and data tofromamong remote devices. we briefly encountered netconf and yang in our case study of opendaylight controller in figure 5.17 and will study them in section 5.7.3 below. 5.7.2 the simple network management protocol snmp and the management information base mib the simple network management protocol version 3 snmpv3 rfc 3410 is an applicationlayer protocol used to convey networkmanagement control and information messages between a managing server and an agent executing on behalf of that managing server. the most common usage of snmp is in a requestresponse mode in which an snmp managing server sends a request to an snmp agent, who m05_kuro5469_08_ge_c05.indd 458 03052021 1643 5.7 network mana gement and snmp, netconfyang 459 receives the request, performs some action, and sends a reply to the request. typi cally, a request will be used to query retrieve or modify set mib object values associated with a managed device. a second common usage of snmp is for an agent to send an unsolicited message, known as a trap message, to a managing server. trap messages are used to notify a managing server of an exceptional situation e.g., a link interface going up or down that has resulted in changes to mib object values. mib objects are specified in a data description language known as smi structure of management information rfc 2578; rfc 2579; rfc 2580, a rather oddly named component of the network management framework whose name gives no hint of its functionality. a formal definition language is used to ensure that the syntax and semantics of the network management data are well defined and unambiguous. related mib objects are gathered into mib modules. as of late 2019, there are more than 400 mibrelated rfcs and a much larger number of vendorspecific private mib modules. snmpv3 defines seven types of messages, known generically as protocol data unitspdusas shown in table 5.2 and described below. the format of the pdu is shown in figure 5.21. the getrequest, getnextrequest, and getbulkrequest pdus are all sent from a managing server to an agent to request the value of one or more table 5.2 snmpv3 pdu typessnmpv3 pdu type senderreceiver description getrequest managertoagent get value of one or more mib object instances getnextrequest managertoagent get value of next mib object instance in list or table getbulkrequest managertoagent get values in large block of data, for example, values in a large table informrequest managertomanager inform remote managing entity of mib values remote to its access setrequest managertoagent set value of one or more mib object instances response agenttomanager or generated in response to managertomanager getrequest, getnextrequest, getbulkrequest, setrequest pdu, or informrequest snmpv2trap agenttomanager inform manager of an exceptional event m05_kuro5469_08_ge_c05.indd 459 03052021 1643 460 chapter 5 the network layer control plane mib objects at the agents managed device. the mib objects whose values are being requested are specified in
the variable binding portion of the pdu. getrequest, getnextrequest, and getbulkrequest differ in the granularity of their data requests. getrequest can request an arbitrary set of mib values; multiple getnextrequests can be used to sequence through a list or table of mib objects; getbulkrequest allows a large block of data to be returned, avoiding the overhead incurred if multiple getrequest or getnextrequest messages were to be sent. in all three cases, the agent responds with a response pdu containing the object identifiers and their associated values. the setrequest pdu is used by a managing server to set the value of one or more mib objects in a managed device. an agent replies with a response pdu with the noerror error status to confirm that the value has indeed been set. the informrequest pdu is used by a managing server to notify another managing server of mib information that is remote to the receiving server. the response pdu is typically sent from a managed device to the managing server in response to a request message from that server, returning the requested information. the final type of snmpv3 pdu is the trap message. trap messages are generated asynchronously; that is, they are not generated in response to a received request but rather in response to an event for which the managing server requires notification. rfc 3418 defines wellknown trap types that include a cold or warm start by a device, a link going up or down, the loss of a neighbor, or an authentication failure event. a received trap request has no required response from a managing server.figure 5.21 snmp pdu formatpdu type 03request iderror status 05error indexname value namename value pdu type 4enterpriseagent addrtrap type 07speci Ô¨Åc codetime stampvaluegetset header trap header trap information snmp pduvariables to getset m05_kuro5469_08_ge_c05.indd 460 03052021 1643 5.7 network mana gement and snmp, netconfyang 461 given the requestresponse nature of snmp, it is worth noting here that although snmp pdus can be carried via many different transport protocols, the snmp pdu is typically carried in the payload of a udp datagram. indeed, rfc 3417 states that udp is the preferred transport mapping. however, since udp is an unreli able transport protocol, there is no guarantee that a request, or its response, will be received at the intended destination. the request id field of the pdu see figure 5.21 is used by the managing server to number its requests to an agent; the agents response takes its request id from that of the received request. thus, the request id field can be used by the managing server to detect lost requests or replies. it is up to the managing server to decide whether to retransmit a request if no corresponding response is received after a given amount of time. in particular, the snmp standard does not mandate any particular procedure for retransmission, or even if retransmission is to be done in the first place. it only requires that the managing server needs to act responsibly in respect
to the frequency and duration of retransmissions. this, of course, leads one to wonder how a responsible protocol should act! snmp has evolved through three versions. the designers of snmpv3 have said that snmpv3 can be thought of as snmpv2 with additional security and administration capabilities rfc 3410. certainly, there are changes in snmpv3 over snmpv2, but nowhere are those changes more evident than in the area of administration and security. the central role of security in snmpv3 was particularly important, since the lack of adequate security resulted in snmp being used primarily for monitoring rather than control for example, setrequest is rarely used in snmpv1. once again, we see that securitya topic well cover in detail in chapter 8 is of critical concern, but once again a concern whose importance had been realized perhaps a bit late and only then added on. the management information base mib we learned earlier that a managed devices operational state data and to some extent its configuration data in the snmpmib approach to network management are represented as objects that are gathered together into an mib for that device. an mib object might be a counter, such as the number of ip datagrams discarded at a router due to errors in an ip datagram header; or the number of carrier sense errors in an ethernet interface card; descriptive information such as the version of the software running on a dns server; status information such as whether a particular device is functioning correctly; or protocolspecific information such as a routing path to a destination. related mib objects are gathered into mib modules. there are over 400 mib modules defined in various ietc rfcs; there are many more device and vendorspecific mibs. rfc 4293 specifies the mib module that defines managed objects including ipsystemstatsindelivers for managing implementations of the internet protocol ip and its associated internet control message protocol icmp. rfc 4022 specifies the mib module for tcp, and rfc 4113 specifies the mib module for udp. m05_kuro5469_08_ge_c05.indd 461 03052021 1643 462 chapter 5 the network layer control plane while mibrelated rfcs make for rather tedious and dry reading, it is nonethe less instructive i.e., like eating vegetables, it is good for you to consider an exam ple of a mib object, the ipsystemstatsindelivers objecttype definition from rfc 4293 defines a 32bit readonly counter that keeps track of the number of ip datagrams that were received at the managed device and were successfully delivered to an upperlayer protocol. in the example below, counter32 is one of the basic data types defined in the smi. ipsystemstatsindelivers objecttype syntax counter32 maxaccess readonly status current description the total number of datagrams successfully delivered to ipuserprotocols including icmp. when tracking interface statistics, the counter of the interface to which these datagrams were addressed is incremented. this interface might not be the same as the input interface for some of the datagrams. discontinuities in the value of this counter can occur at reinitialization of the management system, and at other
times as indicated by the value of ipsystemstatsdiscontinuitytime. ipsystemstatsentry 18 5.7.3 the network configuration protocol netconf and yang the netconf protocol operates between the managing server and the man aged network devices, providing messaging to i retrieve, set, and modify configuration data at managed devices; ii to query operational data and statistics at managed devices; and iii to subscribe to notifications generated by managed devices. the managing server actively controls a managed device by sending it configurations, which are specified in a structured xml document, and activating a configuration at the managed device. netconf uses a remote procedure call rpc paradigm, where protocol messages are also encoded in xml and exchanged between the managing server and a managed device over a secure, connectionoriented session such as the tls transport layer security protocol discussed in chapter 8 over tcp. m05_kuro5469_08_ge_c05.indd 462 03052021 1643 5.7 network mana gement and snmp, netconfyang 463 figure 5.22 shows an example netconf session. first, the managing server establishes a secure connection to the managed device. in netconf parlance, the managing server is actually referred to as the client and the managed device as the server, since the managing server establishes the connection to the managed device. but well ignore that here for consistency with the longerstanding networkmanagement serverclient terminology shown in figure 5.20. once a secure connection has been established, the managing server and the managed device exchange hello messages, declaring their capabilitiesnetconf functionality that supplements the base netconf specification in rfc 6241. interactions between the managing server and managed device take the form of a remote procedure call, using the rpc and rpcresponse messages. these messages are used to retrieve, set, query and modify device configurations, operational data and statistics, and to subscribe to device notifications. device notifications themselves are proactively sent from managed device to the managing server using netconf notification messages. a session is closed with the sessionclose message.figure 5.22 netconf session between managing servercontroller and managed devicesession initiation, capabilities exchange hello session close closesessionrpc rpcr eply notiÔ¨Åcationagent device datamanaging servercontroller rpc rpcrpcreply rpcreplyconÔ¨Åg. and operational data store m05_kuro5469_08_ge_c05.indd 463 03052021 1643 464 chapter 5 the network layer control plane table 5.3 shows a number of the important netconf operations that a man aging server can perform at a managed device. as in the case of snmp, we see operations for retrieving operational state data get, and for event notification. however, the getconfig, editconfig, lock and unlock operation demonstrate netconfs particular emphasis on device configuration. using the basic operations shown in table 5.3, it is also possible to create a set of more sophisticated network management transactions that either complete atomically i.e., as a group and successfully on a set of devices, or are fully reversed and leave the devices in their pretransaction state. such multidevice transactionsenabling operators to concentrate on the configuration of the network as a whole rather than individual devices was an important operator requirement put forth in rfc 3535. a full description of netconf is beyond our scope here;
rfc 6241, rfc 5277, claise 2019; schonwalder 2010 provide more indepth coverage. but since this is the first time weve seen protocol messages formatted as an xml document rather than the traditional message with header fields and message body, e.g., as shown in figure 5.21 for the snmp pdu, lets conclude our brief study of netconf with two examples. in the first example, the xml document sent from the managing server to the managed device is a netconf get command requesting all device configuration table 5.3 selected netconf operationsnetconf operation description getconfig retrieve all or part of a given configuration. a device may have multiple configurations. there is always a running configuration that describes the devices current running configuration. get retrieve all or part of both configuration state and operational state data. editconfig change all or part of a specified configuration at the managed device. if the runningconfiguration is specified, then the devices current running configuration will be changed. if the managed device was able to satisfy the request, an rpcreply is sent containing an ok element; otherwise rpcerror response is returned. on error, the devices configuration state can be rolledback to its previous state. lock, unlock the lock unlock operation allows the managing server to lock unlock the entire configuration datastore system of a managed device. locks are intended to be shortlived and allow a client to make a change without fear of interaction with other netconf, snmp , or clis commands from other sources. createsubscription , notificationthis operation initiates an event notification subscription that will send asynchronous event notification for specified events of interest from the managed device to the managing server, until the subscription is terminated. m05_kuro5469_08_ge_c05.indd 464 03052021 1643 5.7 network mana gement and snmp, netconfyang 465 and operational data. with this command, the server can learn about the devices configuration. 01 ?xml version1.0 encodingutf8? 02 rpc messageid101 03 xmlnsurnietfparamsxmlnsnetconfbase1.0 04 get 05 rpcalthough few people can completely parse xml directly, we see that the net conf command is relatively humanreadable, and is much more reminiscent of http and html than the protocol message formats that we saw for snmp pdu format in figure 5.21. the rpc message itself spans lines 0205 we have added line numbers here for pedagogical purposes. the rpc has a message id value of 101, declared in line 02, and contains a single netconf get command. the reply from the device contains a matching id number 101, and all of the devices configuration data in xml format, of course, starting in line 04, ultimately with a closing rpcreply. 01 ?xml version1.0 encodingutf8? 02 rpcreply messageid101 03 xmlnsurnietfparamsxmlnsnetconfbase1.0 04 ! . . . all configuration data returned... . . . rpcreply in the second example below, adapted from rfc 6241, the xml document sent from the managing server to the managed device sets the maximum transmission unit mtu of an interface named ethernet00 to 1500 bytes 01 ?xml version1.0 encodingutf8? 02 rpc messageid101 03 xmlnsurnietfparamsxmlnsnetconfbase1.0 04 editconfig 05 target 06 running 07
target 08 config 09 top xmlnshttpexample.comschema 1.2config 10 interface 11 nameethernet00name 12 mtu1500mtu 13 interface 14 top 15 config 16 editconfig 17 rpc m05_kuro5469_08_ge_c05.indd 465 03052021 1643 466 chapter 5 the network layer control plane the rpc message itself spans lines 0217, has a message id value of 101, and contains a single netconf editconfig command, spanning lines 0415. line 06 indicates that the running device configuration at the managed device will be changed. lines 11 and 12 specify the mtu size to be set of the ethernet00 interface. once the managed device has changed the interfaces mtu size in the configu ration, it responds back to the managing server with an ok reply line 04 below, again within an xml document 01 ?xml version1.0 encodingutf8? 02 rpcreply messageid101 03 xmlnsurnietfparamsxmlnsnetconfbase1.0 04 ok 05 rpcreply yang yang is the data modeling language used to precisely specify the structure, syntax, and semantics of network management data used by netconf, in much the same way that the smi is used to specify mibs in snmp. all yang definitions are contained in modules, and an xml document describing a device and its capabilities can be generated from a yang module. yang features a small set of builtin data types as in the case of smi and also allows data modelers to express constraints that must be satisfied by a valid netconf configurationa powerful aid in helping ensure that netconf configurations satisfy specified correctness and consistency constraints. yang is also used to specify netconf notifications. a fuller discussion of yang is beyond our scope here. for more information, we refer the interested reader to the excellent book claise 2019. 5.8 summary we have now completed our twochapter journey into the network corea journey that began with our study of the network layers data plane in chapter 4 and finished here with our study of the network layers control plane. we learned that the control plane is the networkwide logic that controls not only how a datagram is forwarded among routers along an endtoend path from the source host to the destination host, but also how networklayer components and services are configured and managed. we learned that there are two broad approaches towards building a control plane traditional perrouter control where a routing algorithm runs in each and every router and the routing component in the router communicates with the routing components in other routers and softwaredefined networking sdn control where a logically centralized controller computes and distributes the forwarding tables to be used by each and every router. we studied two fundamental routing algorithms for computing least cost paths in a graphlinkstate routing and distancevector routingin section 5.2; m05_kuro5469_08_ge_c05.indd 466 03052021 1643 homework problems and ques tions 467 these algorithms find application in both perrouter control and in sdn control. these algorithms are the basis for two widely deployed internet routing protocols, ospf and bgp, that we covered in sections 5.3 and 5.4. we covered the sdn approach to the networklayer control plane in
section 5.5, investigating sdn networkcontrol applications, the sdn controller, and the openflow protocol for communicating between the controller and sdncontrolled devices. in sections 5.6 and 5.7, we covered some of the nuts and bolts of managing an ip network icmp the internet control message protocol and network management using snmp and netconfyang. having completed our study of the network layer, our journey now takes us one step further down the protocol stack, namely, to the link layer. like the network layer, the link layer is part of each and every networkconnected device. but we will see in the next chapter that the link layer has the much more localized task of moving packets between nodes on the same link or lan. although this task may appear on the surface to be rather simple compared with that of the network layers tasks, we will see that the link layer involves a number of important and fascinating issues that can keep us busy for a long time. homework problems and questions chapter 5 review questions section 5.1 r1. what is meant by a control plane that is based on perrouter control? in such cases, when we say the network control and data planes are implemented monolithically, what do we mean? r2. what is meant by a control plane that is based on logically centralized control? in such cases, are the data plane and the control plane implemented within the same device or in separate devices? explain. section 5.2 r3. compare and contrast the properties of a centralized and a distributed routing algorithm. give an example of a routing protocol that takes a centralized and a decentralized approach. r4. compare and contrast static and dynamic routing algorithms. r5. what is the count to infinity problem in distance vector routing? r6. how is a least cost path calculated in a decentralized routing algorithm? sections 5.35.4 r7. why are different interas and intraas protocols used in the internet? r8. true or false when an ospf route sends its link state information, it is sent only to those nodes directly attached neighbors. explain. m05_kuro5469_08_ge_c05.indd 467 03052021 1643 468 chapter 5 the network layer control plane r9. what is meant by an area in an ospf autonomous system? why was the concept of an area introduced? r10. define and contrast the following terms subnet, prefix, and bgp route. r11. how does bgp use the nexthop attribute? how does it use the aspath attribute? r12. describe how a network administrator of an uppertier isp can implement policy when configuring bgp. r13. true or false when a bgp router receives an advertised path from its neigh bor, it must add its own identity to the received path and then send that new path on to all of its neighbors. explain. section 5.5 r14. describe the main role of the communication layer, the networkwide state management layer, and the networkcontrol application layer in an sdn controller. r15. suppose you wanted to implement a new routing protocol in the sdn control
plane. at which layer would you implement that protocol? explain. r16. what types of messages flow across an sdn controllers northbound and southbound apis? who is the recipient of these messages sent from the controller across the southbound interface, and who sends messages to the controller across the northbound interface? r17. describe the purpose of two types of openflow messages of your choosing that are sent from a controlled device to the controller. describe the purpose of two types of openflow messages of your choosing that are send from the controller to a controlled device. r18. what is the purpose of the service abstraction layer in the opendaylight sdn controller? sections 5.65.7 r19. names four different types of icmp messages r20. what two types of icmp messages are received at the sending host executing the traceroute program? r21. define the following terms in the context of snmp managing server, managed device, network management agent and mib. r22. what are the purposes of the snmp getrequest and setrequest messages? r23. what is the purpose of the snmp trap message? m05_kuro5469_08_ge_c05.indd 468 03052021 1643 problems 469 problems p1. consider the figure below. c db47 23 121 15 4a fe enumerate all paths from a to d that do not contain any loops p2. repeat problem p1 for paths from c to d, b to f, and c to f. p3. consider the following network. with the indicated link costs, use dijkstras shortestpath algorithm to compute the shortest path from x to all network nodes. show how the algorithm works by computing a table similar to table 5.1. xvt yz u w612 87 8 3 64324 3 p4. consider the network shown in problem p3. using dijkstras algorithm, and showing your work using a table similar to table 5.1, do the following a. compute the shortest path from t to all network nodes. b. compute the shortest path from u to all network nodes. c. compute the shortest path from v to all network nodes. d. compute the shortest path from w to all network nodes. e. compute the shortest path from y to all network nodes. f. compute the shortest path from z to all network nodes.dijkstras algorithm discussion and examplevideonote m05_kuro5469_08_ge_c05.indd 469 03052021 1643 470 chapter 5 the network layer control plane p5. consider the network shown below. assume that each node initially knows the costs to each of its neighbors. consider the distancevector algorithm and show the distance table entries at node z. yxu2 3 341 2 7zv p6. consider a general topology that is, not the specific network shown above and a synchronous version of the distancevector algorithm. suppose that at each iteration, a node exchanges its distance vectors with its neighbors and receives their distance vectors. assuming that the algorithm begins with each node knowing only the costs to its immediate neighbors, what is the maximum number of iterations required before the distributed algorithm converges? justify your answer. p7. consider the network fragment shown below. x has only
two attached neighbors, w and y . w has a minimumcost path to destination u illustrated with the dotted line through the remaining network of 9, and y has a mini mumcost path to u of 11. the complete paths from w and y to u and between w and y are pictured with dotted lines, as they are irrelevant to the solution. wy 4 111 6 9x u a. give xs distance vector for destinations w, y, and u. b. give a linkcost change for either cx,w or cx,y such that x will inform its neighbors of a new minimumcost path to u as a result of executing the distancevector algorithm. c. give a linkcost change for either cx, w or cx,y such that x will not inform its neighbors of a new minimumcost path to u as a result of executing the distancevector algorithm. p8. consider the threenode topology shown in figure 5.6. rather than having the link costs shown in figure 5.6, the link costs are cx,y 3, cy,z 6, cz,x 4. compute the distance tables after the initialization step and after each iteration of a synchronous version of the distancevector algorithm as we did in our earlier discussion of figure 5.6. p9. can the poisoned reverse solve the general counttoinfinity problem? justify your answer. m05_kuro5469_08_ge_c05.indd 470 03052021 1643 problems 471 p10. argue that for the distancevector algorithm in figure 5.6, each value in the distance vector dx is nonincreasing and will eventually stabilize in a finite number of steps. p11. consider figure 5.7. suppose there is another router w, connected to router y and z. the costs of all links are given as follows cx,y 4, cx,z 50, cy,w 1, cz,w 1, cy,z 3. suppose that poisoned reverse is used in the distancevector routing algorithm. a. when the distance vector routing is stabilized, router w , y, and z inform their distances to x to each other. what distance values do they tell each other? b. now suppose that the link cost between x and y increases to 60. will there be a counttoinfinity problem even if poisoned reverse is used? why or why not? if there is a counttoinfinity problem, then how many iterations are needed for the distancevector routing to reach a stable state again? justify your answer. c. how do you modify cy,z such that there is no counttoinfinity problem at all if cy,x changes from 4 to 60? p12. what is the message complexity of ls routing algorithm? p13. will a bgp router always choose the loopfree route with the shortest aspath length? justify your answer. p14. consider the network shown below. suppose as3 and as2 are running ospf for their intraas routing protocol. suppose as1 and as4 are running rip for their intraas routing protocol. suppose ebgp and ibgp are used for the interas routing protocol. initially suppose there is no physical link between as2 and as4. a. router 3c learns about prefix x from which routing protocol ospf, rip, ebgp,
or ibgp? b. router 3a learns about x from which routing protocol? c. router 1c learns about x from which routing protocol? d. router 1d learns about x from which routing protocol? as4 as3 as1as2x4b 4c4a 3c 3b3a 1c 1b 1d1a i1 i22c 2a 2b m05_kuro5469_08_ge_c05.indd 471 03052021 1643 472 chapter 5 the network layer control plane p15. referring to the previous problem, once router 1d learns about x it will put an entry x, i in its forwarding table. a. will i be equal to i1 or i2 for this entry? explain why in one sentence. b. now suppose that there is a physical link between as2 and as4, shown by the dotted line. suppose router 1d learns that x is accessible via as2 as well as via as3. will i be set to i1 or i2? explain why in one sentence. c. now suppose there is another as, called as5, which lies on the path between as2 and as4 not shown in diagram. suppose router 1d learns that x is accessible via as2 as5 as4 as well as via as3 as4. will i be set to i1 or i2? explain why in one sentence. p16. consider the following network. isp b provides national backbone service to regional isp a. isp c provides national backbone service to regional isp d. each isp consists of one as. b and c peer with each other in two places using bgp. consider traffic going from a to d. b would prefer to hand that traffic over to c on the west coast so that c would have to absorb the cost of carrying the traffic crosscountry, while c would prefer to get the traffic via its east coast peering point with b so that b would have carried the traffic across the country. what bgp mechanism might c use, so that b would hand over atod traffic at its east coast peering point? to answer this question, you will need to dig into the bgp specification. isp b isp c isp disp a m05_kuro5469_08_ge_c05.indd 472 03052021 1643 socket programming assignment 5 icmp ping 473 p17. in figure 5.13, consider the path information that reaches stub networks w, x, and y. based on the information available at w and x, what are their respective views of the network topology? justify your answer. the topology view at y is shown below. w yx a cstub network ys view of the topology p18. consider figure 5.13. b would never forward traffic destined to y via x based on bgp routing. but there are some very popular applications for which data packets go to x first and then flow to y. identify one such application, and describe how data packets follow a path not given by bgp routing. p19. in figure 5.13, suppose that there is another stub network v that is a cus tomer of isp a. suppose that b and c have a peering relationship, and a is a customer of both b and
c. suppose that a would like to have the traffic destined to w to come from b only, and the traffic destined to v from either b or c. how should a advertise its routes to b and c? what as routes does c receive? p20. suppose ass x and z are not directly connected but instead are connected by as y. further suppose that x has a peering agreement with y, and that y has a peering agreement with z. finally, suppose that z wants to transit all of ys traffic but does not want to transit xs traffic. does bgp allow z to implement this policy? p21. consider the two ways in which communication occurs between a managing entity and a managed device requestresponse mode and trapping. what are the pros and cons of these two approaches, in terms of 1 overhead, 2 notification time when exceptional events occur, and 3 robustness with respect to lost messages between the managing entity and the device? p22. in section 5.7, we saw that it was preferable to transport snmp messages in unreliable udp datagrams. why do you think the designers of snmp chose udp rather than tcp as the transport protocol of choice for snmp? socket programming assignment 5 icmp ping at the end of chapter 2, there are four socket programming assignments. here you will find a fifth assignment which employs icmp, a protocol discussed in this chapter. m05_kuro5469_08_ge_c05.indd 473 03052021 1643 474 chapter 5 the network layer control plane ping is a popular networking application used to test from a remote location whether a particular host is up and reachable. it is also often used to measure latency between the client host and the target host. it works by sending icmp echo request packets i.e., ping packets to the target host and listening for icmp echo response replies i.e., pong packets. ping measures the rrt, records packet loss, and calculates a statistical summary of multiple pingpong exchanges the minimum, mean, max, and standard deviation of the roundtrip times. in this lab, you will write your own ping application in python. your appli cation will use icmp. but in order to keep your program simple, you will not exactly follow the official specification in rfc 1739. note that you will only need to write the client side of the program, as the functionality needed on the server side is built into almost all operating systems. you can find full details of this assignment, as well as important snippets of the python code, at the web site httpwww.pearsonglobaleditions.com. programming assignment routing in this programming assignment, you will be writing a distributed set of procedures that implements a distributed asynchronous distancevector routing for the network shown below. you are to write the following routines that will execute asynchronously within the emulated environment provided for this assignment. for node 0, you will write the routines 3201 731 21 rtinit0. this routine will be called once at the beginning of the emulation. rtinit0
has no arguments. it should initialize your distance table in node 0 to reflect the direct costs of 1, 3, and 7 to nodes 1, 2, and 3, respectively. in the figure above, all links are bidirectional and the costs in both directions are identical. after initializing the distance table and any other data structures needed by your node 0 routines, it should then send its directly connected neighbors in this case, 1, 2, and 3 the cost of its minimumcost paths to all other network nodes. m05_kuro5469_08_ge_c05.indd 474 03052021 1643 wireshark lab icmp 475 this minimumcost information is sent to neighboring nodes in a routing update packet by calling the routine tolayer2, as described in the full assignment. the format of the routing update packet is also described in the full assignment. rtupdate0struct rtpkt rcvdpkt. this routine will be called when node 0 receives a routing packet that was sent to it by one of its directly connected neighbors. the parameter rcvdpkt is a pointer to the packet that was received. rtupdate0 is the heart of the distancevector algorithm. the values it receives in a routing update packet from some other node i contain is current shortestpath costs to all other network nodes. rtupdate0 uses these received values to update its own distance table as specified by the distancevector algorithm. if its own minimum cost to another node changes as a result of the update, node 0 informs its directly connected neighbors of this change in minimum cost by sending them a routing packet. recall that in the distancevector algorithm, only directly connected nodes will exchange routing packets. thus, nodes 1 and 2 will communicate with each other, but nodes 1 and 3 will not communicate with each other. similar routines are defined for nodes 1, 2, and 3. thus, you will write eight procedures in all rtinit0, rtinit1, rtinit2, rtinit3, rtupdate0, rtupdate1, rtupdate2, and rtupdate3. these routines will together implement a distributed, asynchronous computation of the distance tables for the topology and costs shown in the figure on the preceding page. you can find the full details of the programming assignment, as well as c code that you will need to create the simulated hardwaresoftware environment, at httpwww.pearsonglobaleditions.com. a java version of the assignment is also available. wireshark lab icmp in the web site for this textbook, www.pearsonglobaleditions.com, youll find a wireshark lab assignment that examines the use of the icmp protocol in the ping and traceroute commands. m05_kuro5469_08_ge_c05.indd 475 03052021 1643 476please describe one or two of the most exciting projects you have worked on during your career. what were the biggest challenges? when i was a researcher at att, a group of us designed a new way to manage rout ing in internet service provider backbone networks. traditionally, network operators configure each router individually, and these routers run distributed protocols to compute paths through the network. we believed that network management would be simpler and more flexible if network operators could exercise direct control over how
routers forward traffic based on a networkwide view of the topology and traffic. the routing control platform rcp we designed and built could compute the routes for all of atts jennifer rexford is a professor in the computer science department at princeton university. her research has the broad goal of making computer networks easier to design and manage, with particular emphasis on programmable neworks. from 19962004, she was a member of the network management and performance department at att labsresearch. while at att, she designed techniques and tools for network measurement, traffic engineering, and router configuration that were deployed in atts backbone network. jennifer is coauthor of the book web protocols and practice networking protocols, caching, and traffic measurement, published by addisonwesley in may 2001. she served as the chair of acm sigcomm from 2003 to 2007. she received her bse degree in electrical engineering from princeton university in 1991, and her phd degree in electrical engineering and computer science from the university of michigan in 1996. jennifer was the 2004 winner of acms grace murray hopper award for outstanding young computer professional, the acm athena lecturer award 2016, the ncwit harrold and notkin research and graduate mentoring award 2017, the acm sigcomm award for lifetime contributions 2018, and the ieee internet award 2019. she is an acm fellow 2008, an ieee fellow 2018, and the national academy of engineering 2014.jennifer rexfordan interview with courtesy of jennifer rexford m05_kuro5469_08_ge_c05.indd 476 03052021 1643 477 backbone on a single commodity computer, and could control legacy routers without modification. to me, this project was exciting because we had a provocative idea, a working system, and ultimately a real deployment in an operational network. fast forward a few years, and softwaredefined networking sdn has become a mainstream technology, and standard protocols like standard protocols like openflow and languages like p4 have made it much easier to tell the underlying switches what to do. how do you think softwaredefined networking should evolve in the future? in a major break from the past, the software controlling network devices can be created by many different programmers, not just at companies selling network equipment. yet, unlike the applications running on a server or a smart phone, sdn applications must work together to handle the same traffic. network operators do not want to perform load balancing on some traffic and routing on other traffic; instead, they want to perform load balancing and routing, together, on the same traffic. future sdn platforms should offer good programming abstractions for composing independently written multiple applications together. more broadly, good programming abstractions can make it easier to create applications, without having to worry about lowlevel details like flow table entries, traffic counters, bit patterns in packet headers, and so on. also, while an sdn controller is logically centralized, the network still consists of a distributed collection of devices. future programmable networks should offer good abstractions for updating a distributed set of devices, so network admin istrators can reason about what happens to packets
in flight while the devices are updated. programming abstractions for programmable network is an exciting area for interdisciplinary research between computer networking, distributed systems, and programming languages, with a real chance for practical impact in the years ahead. where do you see the future of networking and the internet? networking is an exciting field because the applications and the underlying technologies change all the time. we are always reinventing ourselves! who would have predicted even ten years ago the dominance of smart phones, allowing mobile users to access existing applications as well as new locationbased services? the emergence of cloud computing is fundamentally changing the relationship between users and the applications they run, and networked sensors and actuators the internet of things are enabling a wealth of new applications and security vulnerabilities!. the pace of innovation is truly inspiring. the underlying network is a crucial component in all of these innovations. yet, the network is notoriously in the waylimiting performance, compromising reliability, constraining applications, and complicating the deployment and management of services. we should strive to make the network of the future as invisible as the air we breathe, so it never stands in the way of new ideas and valuable services. to do this, we need to raise the level of abstraction above individual network devices and protocols and their attendant acro nyms!, so we can reason about the network and the users highlevel goals as a whole. m05_kuro5469_08_ge_c05.indd 477 03052021 1643 478 what people inspired you professionally? ive long been inspired by sally floyd who worked for many years at the international computer science institute. her research was always purposeful, focusing on the important challenges facing the internet. she dug deeply into hard questions until she understood the problem and the space of solutions completely, and she devoted serious energy into mak ing things happen, such as pushing her ideas into protocol standards and network equipment. also, she gave back to the community, through professional service in numerous standards and research organizations and by creating tools such as the widely used ns2 and ns3 simulators that enable other researchers to succeed. she retired in 2009, and passed away in 2019, but her influence on the field will be felt for years to come. what are your recommendations for students who want careers in computer science and networking? networking is an inherently interdisciplinary field. applying techniques from other disci plines breakthroughs in networking come from such diverse areas as queuing theory, game theory, control theory, distributed systems, network optimization, programming languages, machine learning, algorithms, data structures, and so on. i think that becoming conversant in a related field, or collaborating closely with experts in those fields, is a wonderful way to put networking on a stronger foundation, so we can learn how to build networks that are worthy of societys trust. beyond the theoretical disciplines, networking is exciting because we create real artifacts that real people use. mastering how to design and build systemsby gaining experience in operating systems,
computer architecture, and so onis another fantastic way to amplify your knowledge of networking to help make the world a better place. m05_kuro5469_08_ge_c05.indd 478 03052021 1643 in the previous two chapters, we learned that the network layer provides a commu nication service between any two network hosts. between the two hosts, datagrams travel over a series of communication links, some wired and some wireless, starting at the source host, passing through a series of packet switches switches and routers and ending at the destination host. as we continue down the protocol stack, from the network layer to the link layer, we naturally wonder how packets are sent across the individual links that make up the endtoend communication path. how are the networklayer datagrams encapsulated in the linklayer frames for transmission over a single link? are different linklayer protocols used in the different links along the communication path? how are transmission conflicts in broadcast links resolved? is there addressing at the link layer and, if so, how does the linklayer addressing operate with the networklayer addressing we learned about in chapter 4? and what exactly is the difference between a switch and a router? well answer these and other important questions in this chapter. in discussing the link layer, well see that there are two fundamentally different types of linklayer channels. the first type are broadcast channels, which connect multiple hosts in wireless lans, in satellite networks, and in hybrid fibercoaxial cable hfc access networks. since many hosts are connected to the same broadcast communication channel, a socalled medium access protocol is needed to coordinate frame transmission. in some cases, a central controller may be used to coordinate the link layer and lans6chapter 479 m06_kuro5469_08_ge_c06.indd 479 29042021 1946 480 chapter 6 the link layer and lans transmissions; in other cases, the hosts themselves coordinate transmissions. the second type of linklayer channel is the pointtopoint communication link, such as that often found between two routers connected by a longdistance link, or between a users office computer and the nearby ethernet switch to which it is connected. coordinating access to a pointtopoint link is simpler; the reference material on this books web site has a detailed discussion of the pointtopoint protocol ppp, which is used in settings ranging from dialup service over a telephone line to highspeed pointtopoint frame transport over fiberoptic links. well explore several important linklayer concepts and technologies in this chapter. well dive deeper into error detection and correction, a topic we touched on briefly in chapter 3. well consider multiple access networks and switched lans, including ethernetby far the most prevalent wired lan technology. well also look at virtual lans, and data center networks. although wifi, and more generally wireless lans, are linklayer topics, well postpone our study of these important topics until chapter 7. 6.1 introduction to the link layer lets begin with some important terminology. well find it convenient in this chapter to refer to any device that runs a linklayer i.e., layer 2 protocol as a
node. nodes include hosts, routers, switches, and wifi access points discussed in chapter 7. we will also refer to the communication channels that connect adjacent nodes along the communication path as links. in order for a datagram to be transferred from source host to destination host, it must be moved over each of the individual links in the endtoend path. as an example, in the company network shown at the bottom of figure 6.1, consider sending a datagram from one of the wireless hosts to one of the servers. this datagram will actually pass through six links a wifi link between sending host and wifi access point, an ethernet link between the access point and a linklayer switch; a link between the linklayer switch and the router, a link between the two routers; an ethernet link between the router and a linklayer switch; and finally an ethernet link between the switch and the server. over a given link, a transmitting node encapsulates the datagram in a linklayer frame and transmits the frame into the link. in order to gain further insight into the link layer and how it relates to the network layer, lets consider a transportation analogy. consider a travel agent who is planning a trip for a tourist traveling from princeton, new jersey, to lausanne, switzerland. the travel agent decides that it is most convenient for the tourist to take a limousine from princeton to jfk airport, then a plane from jfk airport to genevas airport, and finally a train from genevas airport to lausannes train station. once m06_kuro5469_08_ge_c06.indd 480 29042021 1946 6.1 introduction t o the link layer 481 figure 6.1 six linklayer hops between wireless host and server the travel agent makes the three reservations, it is the responsibility of the princeton limousine company to get the tourist from princeton to jfk; it is the responsibility of the airline company to get the tourist from jfk to geneva; and it is the responsibility of the swiss train service to get the tourist from geneva to lausanne. each of the three segments of the trip is direct between two adjacent locations. note that the three transportation segments are managed by different companies and use entirely m06_kuro5469_08_ge_c06.indd 481 29042021 1946 482 chapter 6 the link layer and lans different transportation modes limousine, plane, and train. although the transporta tion modes are different, they each provide the basic service of moving passengers from one location to an adjacent location. in this transportation analogy, the tourist is a datagram, each transportation segment is a link, the transportation mode is a linklayer protocol, and the travel agent is a routing protocol. 6.1.1 the services provided by the link layer although the basic service of any link layer is to move a datagram from one node to an adjacent node over a single communication link, the details of the provided service can vary from one linklayer protocol to the next. possible services that can be offered by a linklayer protocol include framing.
almost all linklayer protocols encapsulate each networklayer data gram within a linklayer frame before transmission over the link. a frame consists of a data field, in which the networklayer datagram is inserted, and a number of header fields. the structure of the frame is specified by the linklayer protocol. well see several different frame formats when we examine specific linklayer protocols in the second half of this chapter. link access. a medium access control mac protocol specifies the rules by which a frame is transmitted onto the link. for pointtopoint links that have a single sender at one end of the link and a single receiver at the other end of the link, the mac protocol is simple or nonexistentthe sender can send a frame whenever the link is idle. the more interesting case is when multiple nodes share a single broadcast linkthe socalled multiple access problem. here, the mac protocol serves to coordinate the frame transmissions of the many nodes. reliable delivery. when a linklayer protocol provides reliable delivery service, it guarantees to move each networklayer datagram across the link without error. recall that certain transportlayer protocols such as tcp also provide a reliable delivery service. similar to a transportlayer reliable delivery service, a linklayer reliable delivery service can be achieved with acknowledgments and retransmissions see section 3.4. a linklayer reliable delivery service is often used for links that are prone to high error rates, such as a wireless link, with the goal of correcting an error locallyon the link where the error occursrather than forcing an endtoend retransmission of the data by a transport or applicationlayer protocol. however, linklayer reliable delivery can be considered an unnecessary overhead for low biterror links, including fiber, coax, and many twistedpair copper links. for this reason, many wired linklayer protocols do not provide a reliable delivery service. error detection and correction. the linklayer hardware in a receiving node can incorrectly decide that a bit in a frame is zero when it was transmitted as m06_kuro5469_08_ge_c06.indd 482 29042021 1946 6.1 introduction t o the link layer 483 a one, and vice versa. such bit errors are introduced by signal attenuation and electromagnetic noise. because there is no need to forward a datagram that has an error, many linklayer protocols provide a mechanism to detect such bit errors. this is done by having the transmitting node include errordetection bits in the frame, and having the receiving node perform an error check. recall from chapters 3 and 4 that the internets transport layer and network layer also provide a limited form of error detectionthe internet checksum. error detection in the link layer is usually more sophisticated and is implemented in hardware. error correction is similar to error detection, except that a receiver not only detects when bit errors have occurred in the frame but also determines exactly where in the frame the errors have occurred and then corrects these errors. 6.1.2 where is the link layer implemented? before diving into our detailed study of the
link layer, lets conclude this introduction by considering the question of where the link layer is implemented. is a hosts link layer implemented in hardware or software? is it implemented on a separate card or chip, and how does it interface with the rest of a hosts hardware and operating system components? figure 6.2 shows a typical host architecture. the ethernet capabilities are either integrated into the motherboard chipset or implemented via a lowcost dedicated ethernet chip. for the most part, the link layer is implemented on a chip called the network adapter, also sometimes known as a network interface controller nic. the network adapter implements many link layer services including framing, link access, error detection, and so on. thus, much of a linklayer controllers functionality is implemented in hardware. for example, intels 700 series adapters intel 2020 implements the ethernet protocols well study in section 6.5; the atheros ar5006 atheros 2020 controller implements the 802.11 wifi protocols well study in chapter 7. on the sending side, the controller takes a datagram that has been created and stored in host memory by the higher layers of the protocol stack, encapsulates the datagram in a linklayer frame filling in the frames various fields, and then transmits the frame into the communication link, following the linkaccess protocol. on the receiving side, a controller receives the entire frame, and extracts the networklayer datagram. if the link layer performs error detection, then it is the sending controller that sets the errordetection bits in the frame header and it is the receiving controller that performs error detection. figure 6.2 shows that while most of the link layer is implemented in hardware, part of the link layer is implemented in software that runs on the hosts cpu. the software components of the link layer implement higherlevel linklayer functionality such as assembling linklayer addressing information and activating the m06_kuro5469_08_ge_c06.indd 483 29042021 1946 484 chapter 6 the link layer and lans controller hardware. on the receiving side, linklayer software responds to con troller interrupts for example, due to the receipt of one or more frames, handling error conditions and passing a datagram up to the network layer. thus, the link layer is a combination of hardware and softwarethe place in the protocol stack where software meets hardware. intel 2020 provides a readable overview as well as a detailed description of the xl710 controller from a softwareprogramming point of view. 6.2 errordetection and correction techniques in the previous section, we noted that bitlevel error detection and correctiondetecting and correcting the corruption of bits in a linklayer frame sent from one node to another physically connected neighboring nodeare two services often provided by the link layer. we saw in chapter 3 that errordetection and correction services are also often offered at the transport layer as well. in this section, well examine a few of the simplest techniques that can be used to detect and, in some figure 6.2 network adapter its relationship to other host components and to protocol stack
functionalityhost memory motherboard buscpu controller physical transmissionnetwork adapterlink physicaltransport network linkapplication m06_kuro5469_08_ge_c06.indd 484 29042021 1946 6.2 errordetection and correction techniques 485 cases, correct such bit errors. a full treatment of the theory and implementation of this topic is itself the topic of many textbooks e.g., schwartz 1980 or bertsekas 1991, and our treatment here is necessarily brief. our goal here is to develop an intuitive feel for the capabilities that errordetection and correction techniques provide and to see how a few simple techniques work and are used in practice in the link layer. figure 6.3 illustrates the setting for our study. at the sending node, data, d, to be protected against bit errors is augmented with errordetection and correction bits edc. typically, the data to be protected includes not only the datagram passed down from the network layer for transmission across the link, but also linklevel addressing information, sequence numbers, and other fields in the link frame header. both d and edc are sent to the receiving node in a linklevel frame. at the receiv ing node, a sequence of bits, duni2032 and edcuni2032 is received. note that duni2032 and edcuni2032 may differ from the original d and edc as a result of intransit bit flips. the receivers challenge is to determine whether or not duni2032 is the same as the original d, given that it has only received duni2032 and edcuni2032. the exact wording of the receivers decision in figure 6.3 we ask whether an error is detected, not whether an error has occurred! is important. errordetection and correction techniques allow the receiver to sometimes, but not always, detect that bit errors have occurred. even with the use of errordetection bits there still may be undetected bit errors; that is, the receiver may be unaware that the received information contains bit errors. as a figure 6.3 errordetection and correction scenarioedc ddetected errordatagram edc dd data bits bit error prone linkall bits in d ok ?nydatagram hi m06_kuro5469_08_ge_c06.indd 485 29042021 1946 486 chapter 6 the link layer and lans consequence, the receiver might deliver a corrupted datagram to the network layer, or be unaware that the contents of a field in the frames header has been corrupted. we thus want to choose an errordetection scheme that keeps the probability of such occurrences small. generally, more sophisticated errordetection and correction techniques that is, those that have a smaller probability of allowing undetected bit errors incur a larger overheadmore computation is needed to compute and transmit a larger number of errordetection and correction bits. lets now examine three techniques for detecting errors in the transmitted data parity checks to illustrate the basic ideas behind error detection and correction, checksumming methods which are more typically used in the transport layer, and cyclic redundancy checks which are more typically used in the link layer in an adapter. 6.2.1 parity checks perhaps the simplest form of error detection is the use of a single parity bit. suppose that the information to be sent, d in
figure 6.4, has d bits. in an even parity scheme, the sender simply includes one additional bit and chooses its value such that the total number of 1s in the d 1 bits the original information plus a parity bit is even. for odd parity schemes, the parity bit value is chosen such that there is an odd number of 1s. figure 6.4 illustrates an even parity scheme, with the single parity bit being stored in a separate field. receiver operation is also simple with a single parity bit. the receiver need only count the number of 1s in the received d 1 bits. if an odd number of 1valued bits are found with an even parity scheme, the receiver knows that at least one bit error has occurred. more precisely, it knows that some odd number of bit errors have occurred. but what happens if an even number of bit errors occur? you should convince yourself that this would result in an undetected error. if the probability of bit errors is small and errors can be assumed to occur independently from one bit to the next, the probability of multiple bit errors in a packet would be extremely small. in this case, a single parity bit might suffice. however, measurements have shown that, rather than occurring independently, errors are often clustered together in bursts. under burst error conditions, the probability of undetected errors in a frame protected by singlebit parity can approach 50 percent spragins 1991. clearly, a more robust errordetection scheme is needed and, fortunately, is used in practice!. but before examining errordetection schemes that are used in practice, lets consider a simple figure 6.4 onebit even parity0111000110101011 1d data bitsparity bit m06_kuro5469_08_ge_c06.indd 486 29042021 1946 6.2 errordetection and correction techniques 487 generalization of onebit parity that will provide us with insight into errorcorrection techniques. figure 6.5 shows a twodimensional generalization of the singlebit parity scheme. here, the d bits in d are divided into i rows and j columns. a parity value is computed for each row and for each column. the resulting i j 1 parity bits comprise the linklayer frames errordetection bits. suppose now that a single bit error occurs in the original d bits of information. with this twodimensional parity scheme, the parity of both the column and the row containing the flipped bit will be in error. the receiver can thus not only detect the fact that a single bit error has occurred, but can use the column and row indices of the column and row with parity errors to actually identify the bit that was corrupted and correct that error! figure 6.5 shows an example in which the 1valued bit in position 2,2 is corrupted and switched to a 0an error that is both detectable and correctable at the receiver. although our discussion has focused on the original d bits of information, a single error in the parity bits themselves is also detectable and correctable. twodimensional parity can also detect but not
correct! any combination of two errors in a packet. other properties of the twodimensional parity scheme are explored in the problems at the end of the chapter. figure 6.5 twodimensional even parity1 0 1 0 1 1 1 1 1 1 0 00 1 1 1 0 1 0 0 1 0 1 01 0 1 0 1 1 1 0 1 1 0 00 1 1 1 0 1 0 0 1 0 1 0row parity parity error parity errorno err ors correctable singlebit err ord1,1 d2,1 . . . di,1 di1,1. . . . . .. . . . . . . . .d 1,j d2,j . . . di,j di1,jd1,j1 d2,j1 . . .d i,j1 di1,j1column parity m06_kuro5469_08_ge_c06.indd 487 29042021 1946 488 chapter 6 the link layer and lans the ability of the receiver to both detect and correct errors is known as forward error correction fec. these techniques are commonly used in audio storage and playback devices such as audio cds. in a network setting, fec techniques can be used by themselves, or in conjunction with linklayer arq techniques similar to those we examined in chapter 3. fec techniques are valuable because they can decrease the number of sender retransmissions required. perhaps more important, they allow for immediate correction of errors at the receiver. this avoids having to wait for the roundtrip propagation delay needed for the sender to receive a nak packet and for the retransmitted packet to propagate back to the receivera potentially important advantage for realtime network applications rubenstein 1998 or links such as deepspace links with long propagation delays. research examining the use of fec in errorcontrol protocols includes biersack 1992; nonnenmacher 1998; byers 1998; shacham 1990. 6.2.2 checksumming methods in checksumming techniques, the d bits of data in figure 6.4 are treated as a sequence of kbit integers. one simple checksumming method is to simply sum these kbit inte gers and use the resulting sum as the errordetection bits. the internet checksum is based on this approachbytes of data are treated as 16bit integers and summed. the 1s complement of this sum then forms the internet checksum that is carried in the segment header. as discussed in section 3.3, the receiver checks the checksum by taking the 1s complement of the sum of the received data including the checksum and checking whether the result is all 0 bits. if any of the bits are 1, an error is indicated. rfc 1071 discusses the internet checksum algorithm and its implementation in detail. in the tcp and udp protocols, the internet checksum is computed over all fields header and data fields included. in ip, the checksum is computed over the ip header since the udp or tcp segment has its own checksum. in other protocols, for example, xtp strayer 1992, one checksum is computed over the header and another checksum is computed over the entire packet. checksumming methods require relatively little packet overhead. for example, the checksums in tcp and udp use only
16 bits. however, they provide relatively weak protection against errors as compared with cyclic redundancy check, which is discussed below and which is often used in the link layer. a natural question at this point is, why is checksumming used at the transport layer and cyclic redundancy check used at the link layer? recall that the transport layer is typically implemented in software in a host as part of the hosts operating system. because transportlayer error detection is implemented in software, it is important to have a simple and fast errordetection scheme such as checksumming. on the other hand, error detection at the link layer is implemented in dedicated hardware in adapters, which can rapidly perform the more complex crc operations. feldmeier feldmeier 1995 presents fast software implementation techniques for not only weighted checksum codes, but crc see below and other codes as well. m06_kuro5469_08_ge_c06.indd 488 29042021 1946 6.2 errordetection and correction techniques 489 6.2.3 cyclic redundancy check crc an errordetection technique used widely in todays computer networks is based on cyclic redundancy check crc codes. crc codes are also known as polynomial codes, since it is possible to view the bit string to be sent as a polynomial whose coefficients are the 0 and 1 values in the bit string, with operations on the bit string interpreted as polynomial arithmetic. crc codes operate as follows. consider the dbit piece of data, d, that the send ing node wants to send to the receiving node. the sender and receiver must first agree on an r 1 bit pattern, known as a generator, which we will denote as g. we will require that the most significant leftmost bit of g be a 1. the key idea behind crc codes is shown in figure 6.6. for a given piece of data, d, the sender will choose r additional bits, r, and append them to d such that the resulting d r bit pattern interpreted as a binary number is exactly divisible by g i.e., has no remainder using modulo2 arithmetic. the process of error checking with crcs is thus simple the receiver divides the d r received bits by g. if the remainder is nonzero, the receiver knows that an error has occurred; otherwise the data is accepted as being correct. all crc calculations are done in modulo2 arithmetic without carries in addi tion or borrows in subtraction. this means that addition and subtraction are identical, and both are equivalent to the bitwise exclusiveor xor of the operands. thus, for example, 1011 xor 0101 1110 1001 xor 1101 0100 also, we similarly have 1011 0101 11101001 1101 0100 multiplication and division are the same as in base2 arithmetic, except that any required addition or subtraction is done without carries or borrows. as in regular figure 6.6 crcd bits r bits d data bits to be sent d 2r xor rr crc bits bit pattern mathematical formula m06_kuro5469_08_ge_c06.indd 489 29042021 1946 490 chapter 6 the link layer and lans binary arithmetic, multiplication by
2k left shifts a bit pattern by k places. thus, given d and r, the quantity d 2r xor r yields the d r bit pattern shown in figure 6.6. well use this algebraic characterization of the d r bit pattern from figure 6.6 in our discussion below. let us now turn to the crucial question of how the sender computes r. recall that we want to find r such that there is an n such that d 2r xor rng that is, we want to choose r such that g divides into d 2r xor r without remainder. if we xor that is, add modulo2, without carry r to both sides of the above equation, we get d 2rng xor r this equation tells us that if we divide d 2r by g, the value of the remainder is precisely r. in other words, we can calculate r as rremainder d2r g figure 6.7 illustrates this calculation for the case of d101110, d6, g1001, and r3. the 9 bits transmitted in this case are 101 110 011. you should check these calculations for yourself and also check that indeed d 2r101011 g xor r. figure 6.7 a sample crc calculation1 0 0 11 0 1 1 1 0 0 0 01 0 1 0 1 1 1 0 0 1 1 0 1 0 0 0 1 0 1 0 1 0 0 1 1 1 0 0 0 0 1 1 0 0 1 0 0 1 1 0 1 0 1 0 0 1 0 1 1g d r m06_kuro5469_08_ge_c06.indd 490 29042021 1946 6.3 multiple a ccess links and pro tocols 491 international standards have been defined for 8, 12, 16, and 32bit generators, g. the crc32 32bit standard, which has been adopted in a number of linklevel ieee protocols, uses a generator of gcrc 32100000100110000010001110110110111 each of the crc standards can detect burst errors of fewer than r 1 bits. this means that all consecutive bit errors of r bits or fewer will be detected. furthermore, under appropriate assumptions, a burst of length greater than r 1 bits is detected with probability 10.5r. also, each of the crc standards can detect any odd num ber of bit errors. see williams 1993 for a discussion of implementing crc checks. the theory behind crc codes and even more powerful codes is beyond the scope of this text. the text schwartz 1980 provides an excellent introduction to this topic. 6.3 multiple access links and protocols in the introduction to this chapter, we noted that there are two types of network links pointtopoint links and broadcast links. a pointtopoint link consists of a single sender at one end of the link and a single receiver at the other end of the link. many linklayer protocols have been designed for pointtopoint links; the pointtopoint protocol ppp and highlevel data link control hdlc are two such protocols. the second type of link, a broadcast link, can have multiple sending and receiving nodes
all connected to the same, single, shared broadcast channel. the term broadcast is used here because when any one node transmits a frame, the channel broadcasts the frame and each of the other nodes receives a copy. ethernet and wireless lans are examples of broadcast linklayer technologies. in this section, well take a step back from specific linklayer protocols and first examine a problem of central importance to the link layer how to coordinate the access of multiple sending and receiving nodes to a shared broadcast channelthe multiple access problem. broadcast channels are often used in lans, networks that are geographically concentrated in a single building or on a corporate or university campus. thus, well look at how multiple access channels are used in lans at the end of this section. we are all familiar with the notion of broadcastingtelevision has been using it since its invention. but traditional television is a oneway broadcast that is, one fixed node transmitting to many receiving nodes, while nodes on a computer network broadcast channel can both send and receive. perhaps a more apt human analogy for a broadcast channel is a cocktail party, where many people gather in a large room the air providing the broadcast medium to talk and listen. a second good analogy is something many readers will be familiar witha classroomwhere teachers and students similarly share the same, single, broadcast medium. a central problem in m06_kuro5469_08_ge_c06.indd 491 29042021 1946 492 chapter 6 the link layer and lans both scenarios is that of determining who gets to talk that is, transmit into the chan nel and when. as humans, weve evolved an elaborate set of protocols for sharing the broadcast channel give everyone a chance to speak.dont speak until you are spoken to.dont monopolize the conversation.raise your hand if you have a question.dont interrupt when someone is speaking.dont fall asleep when someone is talking. computer networks similarly have protocolssocalled multiple access protocolsby which nodes regulate their transmission into the shared broadcast channel. as shown in figure 6.8, multiple access protocols are needed in a wide variety of network settings, including both wired and wireless access networks, and satellite networks. although technically each node accesses the broadcast channel through its adapter, in this section, we will refer to the node as the sending and figure 6.8 various multiple access channelsshar ed wir e e.g., cable access networkshar ed wir eless e.g., wifi satellite cocktail partyhead end m06_kuro5469_08_ge_c06.indd 492 29042021 1946 6.3 multiple a ccess links and pro tocols 493 receiving device. in practice, hundreds or even thousands of nodes can directly com municate over a broadcast channel. because all nodes are capable of transmitting frames, more than two nodes can transmit frames at the same time. when this happens, all of the nodes receive multiple frames at the same time; that is, the transmitted frames collide at all of the receivers. typically, when there is a collision, none of the receiving nodes can make any sense of any of the frames
that were transmitted; in a sense, the signals of the colliding frames become inextricably tangled together. thus, all the frames involved in the collision are lost, and the broadcast channel is wasted during the collision interval. clearly, if many nodes want to transmit frames frequently, many transmissions will result in collisions, and much of the bandwidth of the broadcast channel will be wasted. in order to ensure that the broadcast channel performs useful work when mul tiple nodes are active, it is necessary to somehow coordinate the transmissions of the active nodes. this coordination job is the responsibility of the multiple access protocol. over the past 40 years, thousands of papers and hundreds of phd dissertations have been written on multiple access protocols; a comprehensive survey of the first 20 years of this body of work is rom 1990. furthermore, active research in multiple access protocols continues due to the continued emergence of new types of links, particularly new wireless links. over the years, dozens of multiple access protocols have been implemented in a variety of linklayer technologies. nevertheless, we can classify just about any multiple access protocol as belonging to one of three categories channel partitioning protocols, random access protocols, and takingturns protocols. well cover these categories of multiple access protocols in the following three subsections. lets conclude this overview by noting that, ideally, a multiple access protocol for a broadcast channel of rate r bits per second should have the following desirable characteristics 1. when only one node has data to send, that node has a throughput of r bps. 2. when m nodes have data to send, each of these nodes has a throughput of rm bps. this need not necessarily imply that each of the m nodes always has an instantaneous rate of rm, but rather that each node should have an average transmission rate of rm over some suitably defined interval of time. 3. the protocol is decentralized; that is, there is no master node that represents a single point of failure for the network. 4. the protocol is simple, so that it is inexpensive to implement. 6.3.1 channel partitioning protocols recall from our early discussion back in section 1.3 that timedivision multiplexing tdm and frequencydivision multiplexing fdm are two techniques that can m06_kuro5469_08_ge_c06.indd 493 29042021 1946 494 chapter 6 the link layer and lans be used to partition a broadcast channels bandwidth among all nodes sharing that channel. as an example, suppose the channel supports n nodes and that the trans mission rate of the channel is r bps. tdm divides time into time frames and further divides each time frame into n time slots. the tdm time frame should not be confused with the linklayer unit of data exchanged between sending and receiving adapters, which is also called a frame. in order to reduce confusion, in this subsection well refer to the linklayer unit of data exchanged as a packet. each time slot is then assigned to one of the n nodes. whenever
a node has a packet to send, it transmits the packets bits during its assigned time slot in the revolving tdm frame. typically, slot sizes are chosen so that a single packet can be transmitted during a slot time. figure 6.9 shows a simple fournode tdm example. returning to our cocktail party analogy, a tdmregulated cocktail party would allow one partygoer to speak for a fixed period of time, then allow another partygoer to speak for the same amount of time, and so on. once everyone had had a chance to talk, the pattern would repeat. tdm is appealing because it eliminates collisions and is perfectly fair each node gets a dedicated transmission rate of rn bps during each frame time. however, it has two major drawbacks. first, a node is limited to an average rate of rn bps even when it is the only node with packets to send. a second drawback is that a node must always wait for its turn in the transmission sequenceagain, even when it is the only node with a frame to send. imagine the partygoer who is the only one with anything to say and imagine that this is the even rarer circumstance where everyone figure 6.9 a fournode tdm and fdm example4khzfdm tdmlink 4khz slot all slots labeled 2 ar e dedicated to a speci Ô¨Åc sender receiver pair .frame1 22341 234 12 34 12 34 key m06_kuro5469_08_ge_c06.indd 494 29042021 1946 6.3 multiple a ccess links and pro tocols 495 wants to hear what that one person has to say. clearly, tdm would be a poor choice for a multiple access protocol for this particular party. while tdm shares the broadcast channel in time, fdm divides the r bps chan nel into different frequencies each with a bandwidth of rn and assigns each frequency to one of the n nodes. fdm thus creates n smaller channels of rn bps out of the single, larger r bps channel. fdm shares both the advantages and drawbacks of tdm. it avoids collisions and divides the bandwidth fairly among the n nodes. however, fdm also shares a principal disadvantage with tdma node is limited to a bandwidth of rn, even when it is the only node with packets to send. a third channel partitioning protocol is code division multiple access cdma. while tdm and fdm assign time slots and frequencies, respectively, to the nodes, cdma assigns a different code to each node. each node then uses its unique code to encode the data bits it sends. if the codes are chosen carefully, cdma networks have the wonderful property that different nodes can transmit simultaneously and yet have their respective receivers correctly receive a senders encoded data bits assuming the receiver knows the senders code in spite of interfering transmissions by other nodes. cdma has been used in military systems for some time due to its antijamming properties and now has widespread civilian use, particularly in cellular telephony. because cdmas use is so tightly tied to wireless
channels, well save our discussion of the technical details of cdma until chapter 7. for now, it will suffice to know that cdma codes, like time slots in tdm and frequencies in fdm, can be allocated to the multiple access channel users. 6.3.2 random access protocols the second broad class of multiple access protocols are random access protocols. in a random access protocol, a transmitting node always transmits at the full rate of the channel, namely, r bps. when there is a collision, each node involved in the collision repeatedly retransmits its frame that is, packet until its frame gets through without a collision. but when a node experiences a collision, it doesnt necessarily retransmit the frame right away. instead it waits a random delay before retransmitting the frame. each node involved in a collision chooses independent random delays. because the random delays are independently chosen, it is possible that one of the nodes will pick a delay that is sufficiently less than the delays of the other colliding nodes and will therefore be able to sneak its frame into the channel without a collision. there are dozens if not hundreds of random access protocols described in the literature rom 1990; bertsekas 1991. in this section well describe a few of the most commonly used random access protocolsthe aloha protocols abramson 1970; abramson 1985; abramson 2009 and the carrier sense multiple access csma protocols kleinrock 1975b. ethernet metcalfe 1976 is a popular and widely deployed csma protocol. m06_kuro5469_08_ge_c06.indd 495 29042021 1946 496 chapter 6 the link layer and lans slotted aloha lets begin our study of random access protocols with one of the simplest random access protocols, the slotted aloha protocol. in our description of slotted aloha, we assume the following all frames consist of exactly l bits. time is divided into slots of size lr seconds that is, a slot equals the time to transmit one frame. nodes start to transmit frames only at the beginnings of slots. the nodes are synchronized so that each node knows when the slots begin. if two or more frames collide in a slot, then all the nodes detect the collision event before the slot ends. let p be a probability, that is, a number between 0 and 1. the operation of slotted aloha in each node is simple when the node has a fresh frame to send, it waits until the beginning of the next slot and transmits the entire frame in the slot. if there isnt a collision, the node has successfully transmitted its frame and thus need not consider retransmitting the frame. the node can prepare a new frame for transmission, if it has one. if there is a collision, the node detects the collision before the end of the slot. the node retransmits its frame in each subsequent slot with probability p until the frame is transmitted without a collision. by retransmitting with probability p, we mean that the node effectively tosses a biased coin; the event heads corresponds
to retransmit, which occurs with probability p. the event tails corresponds to skip the slot and toss the coin again in the next slot; this occurs with probability 1p. all nodes involved in the collision toss their coins independently. slotted aloha would appear to have many advantages. unlike channel par titioning, slotted aloha allows a node to transmit continuously at the full rate, r, when that node is the only active node. a node is said to be active if it has frames to send. slotted aloha is also highly decentralized, because each node detects collisions and independently decides when to retransmit. slotted aloha does, however, require the slots to be synchronized in the nodes; shortly well discuss an unslotted version of the aloha protocol, as well as csma protocols, none of which require such synchronization. slotted aloha is also an extremely simple protocol. slotted aloha works well when there is only one active node, but how efficient is it when there are multiple active nodes? there are two possible efficiency m06_kuro5469_08_ge_c06.indd 496 29042021 1946 6.3 multiple a ccess links and pro tocols 497 concerns here. first, as shown in figure 6.10, when there are multiple active nodes, a certain fraction of the slots will have collisions and will therefore be wasted. the second concern is that another fraction of the slots will be empty because all active nodes refrain from transmitting as a result of the probabilistic transmission policy. the only unwasted slots will be those in which exactly one node transmits. a slot in which exactly one node transmits is said to be a successful slot. the efficiency of a slotted multiple access protocol is defined to be the longrun fraction of successful slots in the case when there are a large number of active nodes, each always having a large number of frames to send. note that if no form of access control were used, and each node were to immediately retransmit after each collision, the efficiency would be zero. slotted aloha clearly increases the efficiency beyond zero, but by how much? we now proceed to outline the derivation of the maximum efficiency of slotted aloha. to keep this derivation simple, lets modify the protocol a little and assume that each node attempts to transmit a frame in each slot with probability p. that is, we assume that each node always has a frame to send and that the node transmits with probability p for a fresh frame as well as for a frame that has already suffered a collision. suppose there are n nodes. then the probability that a given slot is a successful slot is the probability that one of the nodes transmits and that the remaining n1 nodes do not transmit. the probability that a given node transmits is p; the probability that the remaining nodes do not transmit is 1pn1. therefore, the probability a given node has a success is p1pn1. because there are n nodes, the probability that any one of the
n nodes has a success is np1pn1.figure 6.10 nodes 1, 2, and 3 collide in the first slot. node 2 finally succeeds in the fourth slot, node 1 in the eighth slot, and node 3 in the ninth slotnode 3 key c collision slot e empty slots successful slotnode 2node 1 2 2 21 1 1 1 3 3 3 time ce cs ec es s m06_kuro5469_08_ge_c06.indd 497 29042021 1946 498 chapter 6 the link layer and lans thus, when there are n active nodes, the efficiency of slotted aloha is np1pn1. to obtain the maximum efficiency for n active nodes, we have to find the p that maximizes this expression. see the homework problems for a general outline of this derivation. and to obtain the maximum efficiency for a large number of active nodes, we take the limit of np1pn1 as n approaches infinity. again, see the homework problems. after performing these calculations, well find that the maximum efficiency of the protocol is given by 1e 0.37. that is, when a large number of nodes have many frames to transmit, then at best only 37 percent of the slots do useful work. thus, the effective transmission rate of the channel is not r bps but only 0.37 r bps! a similar analysis also shows that 37 percent of the slots go empty and 26 percent of slots have collisions. imagine the poor network administrator who has purchased a 100mbps slotted aloha system, expecting to be able to use the network to transmit data among a large number of users at an aggregate rate of, say, 80 mbps! although the channel is capable of transmitting a given frame at the full channel rate of 100 mbps, in the long run, the successful throughput of this channel will be less than 37 mbps. aloha the slotted aloha protocol required that all nodes synchronize their transmissions to start at the beginning of a slot. the first aloha protocol abramson 1970 was actually an unslotted, fully decentralized protocol. in pure aloha, when a frame first arrives that is, a networklayer datagram is passed down from the network layer at the sending node, the node immediately transmits the frame in its entirety into the broadcast channel. if a transmitted frame experiences a collision with one or more other transmissions, the node will then immediately after completely transmitting its collided frame retransmit the frame with probability p. otherwise, the node waits for a frame transmission time. after this wait, it then transmits the frame with probability p, or waits remaining idle for another frame time with probability 1 p. to determine the maximum efficiency of pure aloha, we focus on an individual node. well make the same assumptions as in our slotted aloha analysis and take the frame transmission time to be the unit of time. at any given time, the probability that a node is transmitting a frame is p . suppose this frame begins transmission at time t0. as shown in figure 6.11,
in order for this frame to be successfully transmitted, no other nodes can begin their transmission in the interval of time t01, t0. such a transmis sion would overlap with the beginning of the transmission of node i s frame. the prob ability that all other nodes do not begin a transmission in this interval is 1pn1. similarly, no other node can begin a transmission while node i is transmitting, as such a transmission would overlap with the latter part of node i s transmission. the probabil ity that all other nodes do not begin a transmission in this interval is also 1pn1. thus, the probability that a given node has a successful transmission is p1p2n1. by taking limits as in the slotted aloha case, we find that the maximum efficiency of the pure aloha protocol is only 12e exactly half that of slotted aloha. this then is the price to be paid for a fully decentralized aloha protocol. m06_kuro5469_08_ge_c06.indd 498 29042021 1946 6.3 multiple a ccess links and pro tocols 499 carrier sense multiple access csma in both slotted and pure aloha, a nodes decision to transmit is made indepen dently of the activity of the other nodes attached to the broadcast channel. in particular, a node neither pays attention to whether another node happens to be transmitting when it begins to transmit, nor stops transmitting if another node begins to interfere with its transmission. in our cocktail party analogy, aloha protocols are quite like a boorish partygoer who continues to chatter away regardless of whether other people are talking. as humans, we have human protocols that allow us not only to behave with more civility, but also to decrease the amount of time spent colliding with each other in conversation and, consequently, to increase the amount of data we exchange in our conversations. specifically, there are two important rules for polite human conversation listen before speaking. if someone else is speaking, wait until they are finished. in the networking world, this is called carrier sensinga node listens to the channel before transmitting. if a frame from another node is currently being transmitted into the channel, a node then waits until it detects no transmissions for a short amount of time and then begins transmission. if someone else begins talking at the same time, stop talking. in the networking world, this is called collision detectiona transmitting node listens to the channel while it is transmitting. if it detects that another node is transmitting an interfering frame, it stops transmitting and waits a random amount of time before repeating the senseandtransmitwhenidle cycle. these two rules are embodied in the family of carrier sense multiple access csma and csma with collision detection csmacd protocols kleinrock 1975b; metcalfe 1976; lam 1980; rom 1990. many variations on csma and figure 6.11 interfering transmissions in pure alohatimewill overlap with start of is frame t0 1 t0 t0 1will overlap with end of is frame node i frame m06_kuro5469_08_ge_c06.indd 499 29042021 1946 500 chapter 6
the link layer and lans csmacd have been proposed. here, well consider a few of the most important, and fundamental, characteristics of csma and csmacd. the first question that you might ask about csma is why, if all nodes perform carrier sensing, do collisions occur in the first place? after all, a node will refrain from transmitting whenever it senses that another node is transmitting. the answer to the question can best be illustrated using spacetime diagrams molle 1987. figure 6.12 shows a spacetime diagram of four nodes a, b, c, d attached to a linear broadcast bus. the horizontal axis shows the position of each node in space; the vertical axis represents time. at time t0, node b senses the channel is idle, as no other nodes are currently trans mitting. node b thus begins transmitting, with its bits propagating in both directions along the broadcast medium. the downward propagation of bs bits in figure 6.12 with increasing time indicates that a nonzero amount of time is needed for bs bits actually to propagate albeit at near the speed of light along the broadcast medium. at time t1 t17t0, node d has a frame to send. although node b is currently transmit ting at time t1, the bits being transmitted by b have yet to reach d, and thus d senses norm abramson and alohanet norm abramson, a phd engineer, had a passion for surfing and an interest in packet switching. this combination of interests brought him to the university of hawaii in 1969. hawaii consists of many mountainous islands, making it difficult to install and operate landbased networks. when not surfing, abramson thought about how to design a network that does packet switching over radio. the network he designed had one central host and several secondary nodes scattered over the hawaiian islands. the network had two channels, each using a different frequency band. the downlink channel broadcasted packets from the central host to the sec ondary hosts; and the upstream channel sent packets from the secondary hosts to the central host. in addition to sending informational packets, the central host also sent on the downstream channel an acknowledgment for each packet successfully received from the secondary hosts. because the secondary hosts transmitted packets in a decentralized fashion, col lisions on the upstream channel inevitably occurred. this observation led abramson to devise the pure aloha protocol, as described in this chapter. in 1970, with continued funding from arpa, abramson connected his alohanet to the arpanet. abramsons work is important not only because it was the first example of a radio packet network, but also because it inspired bob metcalfe. a few years later, metcalfe modified the aloha protocol to create the csmacd protocol and the ethernet lan.case history m06_kuro5469_08_ge_c06.indd 500 29042021 1946 6.3 multiple a ccess links and pro tocols 501 the channel idle at t1. in accordance with the csma protocol, d thus begins transmit ting its frame. a short time later, bs transmission begins to interfere with
ds trans mission at d. from figure 6.12, it is evident that the endtoend channel propagation delay of a broadcast channelthe time it takes for a signal to propagate from one of the nodes to anotherwill play a crucial role in determining its performance. the longer this propagation delay, the larger the chance that a carriersensing node is not yet able to sense a transmission that has already begun at another node in the network. carrier sense multiple access with collision detection csmacd in figure 6.12, nodes do not perform collision detection; both b and d continue to transmit their frames in their entirety even though a collision has occurred. when a node performs collision detection, it ceases transmission as soon as it detects a collision. figure 6.13 shows the same scenario as in figure 6.12, except that the two figure 6.12 spacetime diagram of two csma nodes with colliding transmissionsa time timespace t0 t1bc d m06_kuro5469_08_ge_c06.indd 501 29042021 1946 502 chapter 6 the link layer and lans nodes each abort their transmission a short time after detecting a collision. clearly, adding collision detection to a multiple access protocol will help protocol performance by not transmitting a useless, damaged by interference with a frame from another node frame in its entirety. before analyzing the csmacd protocol, let us now summarize its operation from the perspective of an adapter in a node attached to a broadcast channel 1. the adapter obtains a datagram from the network layer, prepares a linklayer frame, and puts the frame adapter buffer. 2. if the adapter senses that the channel is idle that is, there is no signal energy entering the adapter from the channel, it starts to transmit the frame. if, on the other hand, the adapter senses that the channel is busy, it waits until it senses no signal energy and then starts to transmit the frame. 3. while transmitting, the adapter monitors for the presence of signal energy coming from other adapters using the broadcast channel.figure 6.13 csma with collision detectiona time timecollision detectabort timespace t0 t1bc d m06_kuro5469_08_ge_c06.indd 502 29042021 1946 6.3 multiple a ccess links and pro tocols 503 4. if the adapter transmits the entire frame without detecting signal energy from other adapters, the adapter is finished with the frame. if, on the other hand, the adapter detects signal energy from other adapters while transmitting, it aborts the transmission that is, it stops transmitting its frame. 5. after aborting, the adapter waits a random amount of time and then returns to step 2. the need to wait a random rather than fixed amount of time is hopefully clearif two nodes transmitted frames at the same time and then both waited the same fixed amount of time, theyd continue colliding forever. but what is a good interval of time from which to choose the random backoff time? if the interval is large and the number of colliding nodes is small, nodes are likely to wait a large amount of time with
the channel remaining idle before repeating the senseandtransmitwhenidle step. on the other hand, if the interval is small and the number of colliding nodes is large, its likely that the chosen random values will be nearly the same, and transmitting nodes will again collide. what wed like is an interval that is short when the number of colliding nodes is small, and long when the number of colliding nodes is large. the binary exponential backoff algorithm, used in ethernet as well as in doc sis cable network multiple access protocols docsis 3.1 2014, elegantly solves this problem. specifically, when transmitting a frame that has already experienced n collisions, a node chooses the value of k at random from 0,1,2, . . . . 2n1. thus, the more collisions experienced by a frame, the larger the interval from which k is chosen. for ethernet, the actual amount of time a node waits is k512 bit times i.e., k times the amount of time needed to send 512 bits into the ethernet and the maximum value that n can take is capped at 10. lets look at an example. suppose that a node attempts to transmit a frame for the first time and while transmitting it detects a collision. the node then chooses k 0 with probability 0.5 or chooses k1 with probability 0.5. if the node chooses k 0, then it immediately begins sensing the channel. if the node chooses k 1, it waits 512 bit times e.g., 5.12 microseconds for a 100 mbps ethernet before beginning the senseandtransmitwhenidle cycle. after a second collision, k is chosen with equal probability from 0,1,2,3. after three collisions, k is chosen with equal probability from 0,1,2,3,4,5,6,7. after 10 or more collisions, k is chosen with equal probability from 0,1,2, . . . , 1023. thus, the size of the sets from which k is chosen grows exponentially with the number of collisions; for this reason this algorithm is referred to as binary exponential backoff. we also note here that each time a node prepares a new frame for transmission, it runs the csmacd algorithm, not taking into account any collisions that may have occurred in the recent past. so it is possible that a node with a new frame will immediately be able to sneak in a successful transmission while several other nodes are in the exponential backoff state. m06_kuro5469_08_ge_c06.indd 503 29042021 1946 504 chapter 6 the link layer and lans csmacd efficiency when only one node has a frame to send, the node can transmit at the full channel rate e.g., for ethernet typical rates are 10 mbps, 100 mbps, or 1 gbps. however, if many nodes have frames to transmit, the effective transmission rate of the channel can be much less. we define the efficiency of csmacd to be the longrun fraction of time during which frames are being transmitted on the channel without collisions when there is a large number of active nodes, with each node having a large number of
frames to send. in order to present a closedform approximation of the efficiency of ethernet, let dprop denote the maximum time it takes signal energy to propagate between any two adapters. let dtrans be the time to transmit a maximumsize frame approximately 1.2 msecs for a 10 mbps ethernet. a derivation of the efficiency of csmacd is beyond the scope of this book see lam 1980 and bertsekas 1991. here we simply state the following approximation efficiency1 15dpropdtrans we see from this formula that as dprop approaches 0, the efficiency approaches 1. this matches our intuition that if the propagation delay is zero, colliding nodes will abort immediately without wasting the channel. also, as dtrans becomes very large, efficiency approaches 1. this is also intuitive because when a frame grabs the channel, it will hold on to the channel for a very long time; thus, the channel will be doing productive work most of the time. 6.3.3 takingturns protocols recall that two desirable properties of a multiple access protocol are 1 when only one node is active, the active node has a throughput of r bps, and 2 when m nodes are active, then each active node has a throughput of nearly rm bps. the aloha and csma protocols have this first property but not the second. this has motivated researchers to create another class of protocolsthe takingturns protocols. as with random access protocols, there are dozens of takingturns protocols, and each one of these protocols has many variations. well discuss two of the more important protocols here. the first one is the polling protocol. the polling protocol requires one of the nodes to be designated as a master node. the master node polls each of the nodes in a roundrobin fashion. in particular, the master node first sends a message to node 1, saying that it node 1 can transmit up to some maximum number of frames. after node 1 transmits some frames, the master node tells node 2 it node 2 can transmit up to the maximum number of frames. the master node can determine when a node has finished sending its frames by observing the lack of a signal on the channel. the procedure continues in this manner, with the master node polling each of the nodes in a cyclic manner. the polling protocol eliminates the collisions and empty slots that plague ran dom access protocols. this allows polling to achieve a much higher efficiency. but m06_kuro5469_08_ge_c06.indd 504 29042021 1946 6.3 multiple a ccess links and pro tocols 505 it also has a few drawbacks. the first drawback is that the protocol introduces a polling delaythe amount of time required to notify a node that it can transmit. if, for example, only one node is active, then the node will transmit at a rate less than r bps, as the master node must poll each of the inactive nodes in turn each time the active node has sent its maximum number of frames. the second drawback, which
is potentially more serious, is that if the master node fails, the entire channel becomes inoperative. the bluetooth protocol, which we will study in section 6.3, is an exam ple of a polling protocol. the second takingturns protocol is the tokenpassing protocol. in this pro tocol there is no master node. a small, specialpurpose frame known as a token is exchanged among the nodes in some fixed order. for example, node 1 might always send the token to node 2, node 2 might always send the token to node 3, and node n might always send the token to node 1. when a node receives a token, it holds onto the token only if it has some frames to transmit; otherwise, it immediately forwards the token to the next node. if a node does have frames to transmit when it receives the token, it sends up to a maximum number of frames and then forwards the token to the next node. token passing is decentralized and highly efficient. but it has its problems as well. for example, the failure of one node can crash the entire channel. or if a node accidentally neglects to release the token, then some recovery procedure must be invoked to get the token back in circulation. over the years many tokenpassing protocols have been developed, including the fiber distributed data interface fddi protocol jain 1994 and the ieee 802.5 token ring protocol ieee 802.5 2012, and each one had to address these as well as other sticky issues. 6.3.4 docsis the linklayer protocol for cable internet access in the previous three subsections, weve learned about three broad classes of mul tiple access protocols channel partitioning protocols, random access protocols, and taking turns protocols. a cable access network will make for an excellent case study here, as well find aspects of each of these three classes of multiple access protocols with the cable access network! recall from section 1.2.1 that a cable access network typically connects several thousand residential cable modems to a cable modem termination system cmts at the cable network headend. the dataovercable service interface specifications docsis docsis 3.1 2014; hamzeh 2015 specifies the cable data network architecture and its protocols. docsis uses fdm to divide the downstream cmts to modem and upstream modem to cmts network segments into multiple frequency channels. each downstream channel is between 24 mhz and 192 mhz wide, with a maximum throughput of approximately 1.6 gbps per channel; each upstream channel has channel widths ranging from 6.4 mhz to 96 mhz, with a maximum upstream throughput of approximately 1 gbps. each upstream and downstream m06_kuro5469_08_ge_c06.indd 505 29042021 1946 506 chapter 6 the link layer and lans channel is a broadcast channel. frames transmitted on the downstream channel by the cmts are received by all cable modems receiving that channel; since there is just a single cmts transmitting into the downstream channel, however, there is no multiple access problem. the upstream direction, however, is more interesting and technically challenging, since
multiple cable modems share the same upstream channel frequency to the cmts, and thus collisions can potentially occur. as illustrated in figure 6.14, each upstream channel is divided into intervals of time tdmlike, each containing a sequence of minislots during which cable modems can transmit to the cmts. the cmts explicitly grants permission to individual cable modems to transmit during specific minislots. the cmts accomplishes this by sending a control message known as a map message on a downstream channel to specify which cable modem with data to send can transmit during which minislot for the interval of time specified in the control message. since minislots are explicitly allocated to cable modems, the cmts can ensure there are no colliding transmissions during a minislot. but how does the cmts know which cable modems have data to send in the first place? this is accomplished by having cable modems send minislotrequest frames to the cmts during a special set of interval minislots that are dedicated for this purpose, as shown in figure 6.14. these minislotrequest frames are transmitted in a random access manner and so may collide with each other. a cable modem can neither sense whether the upstream channel is busy nor detect collisions. instead, the cable modem infers that its minislotrequest frame experienced a collision if it does not receive a response to the requested allocation in the next downstream control message. when a collision is inferred, a cable modem uses binary exponential figure 6.14 upstream and downstream channels between cmts and cable modemsresidences with cable modems minislots containingminislot request framesassigned minislotscontaining cablemodem upstream data framescable head endmap frame for interval t1,t2 cmtsdownstream channel i upstream channel j t1 t2 m06_kuro5469_08_ge_c06.indd 506 29042021 1946 6.4 switched local area networks 507 backoff to defer the retransmission of its minislotrequest frame to a future time slot. when there is little traffic on the upstream channel, a cable modem may actually transmit data frames during slots nominally assigned for minislotrequest frames and thus avoid having to wait for a minislot assignment. a cable access network thus serves as a terrific example of multiple access pro tocols in actionfdm, tdm, random access, and centrally allocated time slots all within one network! 6.4 switched local area networks having covered broadcast networks and multiple access protocols in the previous section, lets turn our attention next to switched local networks. figure 6.15 shows a switched local network connecting three departments, two servers and a router with four switches. because these switches operate at the link layer, they switch linklayer frames rather than networklayer datagrams, dont recognize networklayer addresses, and dont use routing algorithms like ospf to determine figure 6.15 an institutional network connected together by four switchesmail serverto external internet 1 gbps 1 2 34561 gbps 1 gbps electrical engineering computer science100 mbps Ô¨Åber100 mbps Ô¨Åber100 mbps Ô¨Åber mixture of 10 mbps, 100 mbps, 1 gbps,cat 5 cableweb server computer engineering m06_kuro5469_08_ge_c06.indd 507 29042021 1946 508 chapter 6 the link layer and lans paths through the
network of layer2 switches. instead of using ip addresses, we will soon see that they use linklayer addresses to forward linklayer frames through the network of switches. well begin our study of switched lans by first covering linklayer addressing section 6.4.1. we then examine the celebrated ethernet protocol section 6.4.2. after examining linklayer addressing and ethernet, well look at how linklayer switches operate section 6.4.3, and then see section 6.4.4 how these switches are often used to build largescale lans. 6.4.1 linklayer addressing and arp hosts and routers have linklayer addresses. now you might find this surprising, recalling from chapter 4 that hosts and routers have networklayer addresses as well. you might be asking, why in the world do we need to have addresses at both the network and link layers? in addition to describing the syntax and function of the linklayer addresses, in this section we hope to shed some light on why the two layers of addresses are useful and, in fact, indispensable. well also cover the address resolution protocol arp, which provides a mechanism to translate ip addresses to linklayer addresses. mac addresses in truth, it is not hosts and routers that have linklayer addresses but rather their adapters that is, network interfaces that have linklayer addresses. a host or router with multiple network interfaces will thus have multiple linklayer addresses associated with it, just as it would also have multiple ip addresses associated with it. its important to note, however, that linklayer switches do not have linklayer addresses associated with their interfaces that connect to hosts and routers. this is because the job of the linklayer switch is to carry datagrams between hosts and routers; a switch does this job transparently, that is, without the host or router having to explicitly address the frame to the intervening switch. this is illustrated in figure 6.16. a linklayer address is variously called a lan address, a physical address, or a mac address. because mac address seems to be the most popular term, well henceforth refer to linklayer addresses as mac addresses. for most lans including ethernet and 802.11 wireless lans, the mac address is 6 bytes long, giving 248 possi ble mac addresses. as shown in figure 6.16, these 6byte addresses are typically expressed in hexadecimal notation, with each byte of the address expressed as a pair of hexadecimal numbers. although mac addresses were designed to be permanent, it is now possible to change an adapters mac address via software. for the rest of this section, however, well assume that an adapters mac address is fixed. one interesting property of mac addresses is that no two adapters have the same address. this might seem surprising given that adapters are manufactured in many countries by many companies. how does a company manufacturing adapters in taiwan make sure that it is using different addresses from a company manufacturing m06_kuro5469_08_ge_c06.indd 508 29042021 1946 6.4 switched local area networks 509 adapters in belgium? the answer is that the ieee manages the mac
address space. in particular, when a company wants to manufacture adapters, it purchases a chunk of the address space consisting of 224 addresses for a nominal fee. ieee allocates the chunk of 224 addresses by fixing the first 24 bits of a mac address and letting the company create unique combinations of the last 24 bits for each adapter. an adapters mac address has a flat structure as opposed to a hierarchical structure and doesnt change no matter where the adapter goes. a laptop with an ethernet interface always has the same mac address, no matter where the computer goes. a smartphone with an 802.11 interface always has the same mac address, no matter where the smartphone goes. recall that, in contrast, ip addresses have a hierarchical structure that is, a network part and a host part, and a hosts ip addresses needs to be changed when the host moves, i.e., changes the network to which it is attached. an adapters mac address is analogous to a persons social security number, which also has a flat addressing structure and which doesnt change no matter where the person goes. an ip address is analogous to a persons postal address, which is hierarchical and which must be changed whenever a person moves. just as a person may find it useful to have both a postal address and a social security number, it is useful for a host and router interfaces to have both a networklayer address and a mac address. when an adapter wants to send a frame to some destination adapter, the sending adapter inserts the destination adapters mac address into the frame and then sends the frame into the lan. as we will soon see, a switch occasionally broadcasts an incoming frame onto all of its interfaces. well see in chapter 7 that 802.11 also broadcasts frames. thus, an adapter may receive a frame that isnt addressed to it. thus, when an adapter receives a frame, it will check to see whether the destination mac address figure 6.16 each interface connected to a lan has a unique mac address88b22f541a0f 5c66ab9075b11a23f9cd069b 49bdd2c7562a m06_kuro5469_08_ge_c06.indd 509 29042021 1946 510 chapter 6 the link layer and lans in the frame matches its own mac address. if there is a match, the adapter extracts the enclosed datagram and passes the datagram up the protocol stack. if there isnt a match, the adapter discards the frame, without passing the networklayer datagram up. thus, the destination only will be interrupted when the frame is received. however, sometimes a sending adapter does want all the other adapters on the lan to receive and process the frame it is about to send. in this case, the sending adapter inserts a special mac broadcast address into the destination address field of the frame. for lans that use 6byte addresses such as ethernet and 802.11, the broadcast address is a string of 48 consecutive 1s that is, ffffffffffff in hexadecimal notation. address resolution protocol arp because there are both networklayer addresses
for example, internet ip addresses and linklayer addresses that is, mac addresses, there is a need to translate between them. for the internet, this is the job of the address resolution protocol arp rfc 826. to understand the need for a protocol such as arp, consider the network shown in figure 6.17. in this simple example, each host and router has a single ip address and single mac address. as usual, ip addresses are shown in dotteddecimal keeping the layers independent there are several reasons why hosts and router interfaces have mac addresses in addition to networklayer addresses. first, lans are designed for arbitrary networklayer protocols, not just for ip and the internet. if adapters were assigned ip addresses rather than neutral mac addresses, then adapters would not easily be able to support other networklayer protocols for example, ipx or decnet. second, if adapters were to use networklayer addresses instead of mac addresses, the networklayer address would have to be stored in the adapter ram and reconfigured every time the adapter was moved or powered up. another option is to not use any addresses in the adapters and have each adapter pass the data typically, an ip datagram of each frame it receives up the protocol stack. the network layer could then check for a matching networklayer address. one problem with this option is that the host would be interrupted by every frame sent on the lan, including by frames that were destined for other hosts on the same broadcast lan. in summary, in order for the layers to be largely independent building blocks in a network architecture, different layers need to have their own addressing scheme. we have now seen three types of addresses host names for the application layer, ip addresses for the network layer, and mac addresses for the link layer.principles in practice m06_kuro5469_08_ge_c06.indd 510 29042021 1946 6.4 switched local area networks 511 notation and mac addresses are shown in hexadecimal notation. for the purposes of this discussion, we will assume in this section that the switch broadcasts all frames; that is, whenever a switch receives a frame on one interface, it forwards the frame on all of its other interfaces. in the next section, we will provide a more accurate explanation of how switches operate. now suppose that the host with ip address 222.222.222.220 wants to send an ip datagram to host 222.222.222.222. in this example, both the source and destination are in the same subnet, in the addressing sense of section 4.3.3. to send a datagram, the source must give its adapter not only the ip datagram but also the mac address for destination 222.222.222.222. the sending adapter will then construct a linklayer frame containing the destinations mac address and send the frame into the lan. the important question addressed in this section is, how does the sending host determine the mac address for the destination host with ip address 222.222.222.222? as you might have guessed, it uses arp. an arp module in the sending
host takes any ip address on the same lan as input, and returns the corresponding mac address. in the example at hand, sending host 222.222.222.220 provides its arp module the ip address 222.222.222.222, and the arp module returns the corresponding mac address 49bdd2c7562a. so we see that arp resolves an ip address to a mac address. in many ways it is analogous to dns studied in section 2.5, which resolves host names to ip addresses. however, one important difference between the two resolvers is that dns resolves host names for hosts anywhere in the internet, whereas arp resolves ip addresses only for hosts and router interfaces on the same subnet. if a node in california were to try to use arp to resolve the ip address for a node in mississippi, arp would return with an error.figure 6.17 each interface on a lan has an ip address and a mac addressip222.222.222.221ip222.222.222.220 ip222.222.222.223 ip222.222.222.2225c66ab9075b11a23f9cd069b 49bdd2c7562a88b22f541a0f abc m06_kuro5469_08_ge_c06.indd 511 29042021 1946 512 chapter 6 the link layer and lans now that we have explained what arp does, lets look at how it works. each host and router has an arp table in its memory, which contains mappings of ip addresses to mac addresses. figure 6.18 shows what an arp table in host 222.222.222.220 might look like. the arp table also contains a timetolive ttl value, which indicates when each mapping will be deleted from the table. note that a table does not necessarily contain an entry for every host and router on the subnet; some may have never been entered into the table, and others may have expired. a typical expiration time for an entry is 20 minutes from when an entry is placed in an arp table. now suppose that host 222.222.222.220 wants to send a datagram that is ip addressed to another host or router on that subnet. the sending host needs to obtain the mac address of the destination given the ip address. this task is easy if the senders arp table has an entry for the destination node. but what if the arp table doesnt currently have an entry for the destination? in particular, suppose 222.222.222.220 wants to send a datagram to 222.222.222.222. in this case, the sender uses the arp protocol to resolve the address. first, the sender constructs a special packet called an arp packet. an arp packet has several fields, including the sending and receiving ip and mac addresses. both arp query and response packets have the same format. the purpose of the arp query packet is to query all the other hosts and routers on the subnet to determine the mac address corresponding to the ip address that is being resolved. returning to our example, 222.222.222.220 passes an arp query packet to the adapter along with an indication that the adapter should send the packet to the mac broadcast address, namely, ffffffffffff. the adapter encapsulates the arp packet in a linklayer frame, uses the broadcast address for the frames destination address, and transmits the
frame into the subnet. recalling our social security numberpostal address analogy, an arp query is equivalent to a person shouting out in a crowded room of cubicles in some company say, anycorp what is the social security number of the person whose postal address is cubicle 13, room 112, anycorp, palo alto, california? the frame containing the arp query is received by all the other adapters on the subnet, and because of the broadcast address each adapter passes the arp packet within the frame up to its arp module. each of these arp modules checks to see if its ip address matches the destination ip address in the arp packet. the one with a match sends back to the querying host a response arp packet with the desired mapping. the querying host 222.222.222.220 can then update its arp table and send its ip datagram, encapsulated in a linklayer frame whose destination mac is that of the host or router responding to the earlier arp query.figure 6.18 a possible arp table in 222.222.222.220ip address mac addresst tl 222.222.222.221 88b22f541a0f 134500 222.222.222.223 5c66ab9075b11 35200 m06_kuro5469_08_ge_c06.indd 512 29042021 1946 6.4 switched local area networks 513 there are a couple of interesting things to note about the arp protocol. first, the query arp message is sent within a broadcast frame, whereas the response arp message is sent within a standard frame. before reading on you should think about why this is so. second, arp is plugandplay; that is, an arp table gets built automaticallyit doesnt have to be configured by a system administrator. and if a host becomes disconnected from the subnet, its entry is eventually deleted from the other arp tables in the subnet. students often wonder if arp is a linklayer protocol or a networklayer proto col. as weve seen, an arp packet is encapsulated within a linklayer frame and thus lies architecturally above the link layer. however, an arp packet has fields containing linklayer addresses and thus is arguably a linklayer protocol, but it also contains networklayer addresses and thus is also arguably a networklayer protocol. in the end, arp is probably best considered a protocol that straddles the boundary between the link and network layersnot fitting neatly into the simple layered protocol stack we studied in chapter 1. such are the complexities of realworld protocols! sending a datagram off the subnet it should now be clear how arp operates when a host wants to send a datagram to another host on the same subnet. but now lets look at the more complicated situation when a host on a subnet wants to send a networklayer datagram to a host off the subnet that is, across a router onto another subnet. lets discuss this issue in the context of figure 6.19, which shows a simple network consisting of two subnets interconnected by a router. there are several interesting things to note about figure 6.19. each host has exactly one ip address and one adapter. but, as discussed in chapter 4, a router
has an ip address for each of its interfaces. for each router interface there is also an arp module in the router and an adapter. because the router in figure 6.19 has two interfaces, it has two ip addresses, two arp modules, and two adapters. of course, each adapter in the network has its own mac address. figure 6.19 two subnets interconnected by a routerip111.111.111.110 ip111.111.111.111 ip111.111.111.112ip222.222.222.221 ip222.222.222.22274299ce8ff55 cc49ded0ab7de6e90017bb4b 1a23f9cd069b ip222.222.222.22088b22f541a0f 49bdd2c7562a m06_kuro5469_08_ge_c06.indd 513 29042021 1946 514 chapter 6 the link layer and lans also note that subnet 1 has the network address 111.111.11124 and that subnet 2 has the network address 222.222.22224. thus, all of the interfaces connected to sub net 1 have addresses of the form 111.111.111.xxx and all of the interfaces connected to subnet 2 have addresses of the form 222.222.222.xxx. now lets examine how a host on subnet 1 would send a datagram to a host on subnet 2. specifically, suppose that host 111.111.111.111 wants to send an ip datagram to a host 222.222.222.222. the sending host passes the datagram to its adapter, as usual. but the sending host must also indicate to its adapter an appropriate destination mac address. what mac address should the adapter use? one might be tempted to guess that the appropriate mac address is that of the adapter for host 222.222.222.222, namely, 49bdd2c7562a. this guess, however, would be wrong! if the sending adapter were to use that mac address, then none of the adapters on subnet 1 would bother to pass the ip datagram up to its network layer, since the frames destination address would not match the mac address of any adapter on subnet 1. the datagram would just die and go to datagram heaven. if we look carefully at figure 6.19, we see that in order for a datagram to go from 111.111.111.111 to a host on subnet 2, the datagram must first be sent to the router interface 111.111.111.110, which is the ip address of the firsthop router on the path to the final destination. thus, the appropriate mac address for the frame is the address of the adapter for router interface 111.111.111.110, namely, e6e90017bb4b. how does the sending host acquire the mac address for 111.111.111.110? by using arp, of course! once the sending adapter has this mac address, it creates a frame containing the datagram addressed to 222.222.222.222 and sends the frame into subnet 1. the router adapter on subnet 1 sees that the linklayer frame is addressed to it, and therefore passes the frame to the network layer of the router. hooraythe ip datagram has successfully been moved from source host to the router! but we are not finished. we still have to move the datagram from the router to the destination. the router now has to determine the correct interface on which the datagram is to be forwarded. as discussed in chapter 4, this is done by consulting a forwarding table in the router. the forwarding table tells the router that the datagram is to
be forwarded via router interface 222.222.222.220. this interface then passes the datagram to its adapter, which encapsulates the datagram in a new frame and sends the frame into subnet 2. this time, the destination mac address of the frame is indeed the mac address of the ultimate destination. and how does the router obtain this destination mac address? from arp, of course! arp for ethernet is defined in rfc 826. a nice introduction to arp is given in the tcpip tutorial, rfc 1180. well explore arp in more detail in the homework problems. 6.4.2 ethernet ethernet has pretty much taken over the wired lan market. in the 1980s and the early 1990s, ethernet faced many challenges from other lan technologies, including m06_kuro5469_08_ge_c06.indd 514 29042021 1946 6.4 switched local area networks 515 token ring, fddi, and atm. some of these other technologies succeeded in captur ing a part of the lan market for a few years. but since its invention in the mid1970s, ethernet has continued to evolve and grow and has held on to its dominant position. today, ethernet is by far the most prevalent wired lan technology, and it is likely to remain so for the foreseeable future. one might say that ethernet has been to local area networking what the internet has been to global networking. there are many reasons for ethernets success. first, ethernet was the first widely deployed highspeed lan. because it was deployed early, network administrators became intimately familiar with ethernetits wonders and its quirksand were reluctant to switch over to other lan technologies when they came on the scene. second, token ring, fddi, and atm were more complex and expensive than ethernet, which further discouraged network administrators from switching over. third, the most compelling reason to switch to another lan technology such as fddi or atm was usually the higher data rate of the new technology; however, ethernet always fought back, producing versions that operated at equal data rates or higher. switched ethernet was also introduced in the early 1990s, which further increased its effective data rates. finally, because ethernet has been so popular, ethernet hardware in particular, adapters and switches has become a commodity and is remarkably cheap. the original ethernet lan was invented in the mid1970s by bob metcalfe and david boggs. the original ethernet lan used a coaxial bus to interconnect the nodes. bus topologies for ethernet actually persisted throughout the 1980s and into the mid1990s. ethernet with a bus topology is a broadcast lanall transmitted frames travel to and are processed by all adapters connected to the bus. recall that we covered ethernets csmacd multiple access protocol with binary exponential backoff in section 6.3.2. by the late 1990s, most companies and universities had replaced their lans with ethernet installations using a hubbased star topology. in such an installation the hosts and routers are directly connected to a hub with twistedpair copper wire. a hub is a physicallayer device that acts on individual bits rather than frames. when a bit, representing
a zero or a one, arrives from one interface, the hub simply recreates the bit, boosts its energy strength, and transmits the bit onto all the other interfaces. thus, ethernet with a hubbased star topology is also a broadcast lanwhenever a hub receives a bit from one of its interfaces, it sends a copy out on all of its other interfaces. in particular, if a hub receives frames from two different interfaces at the same time, a collision occurs and the nodes that created the frames must retransmit. in the early 2000s, ethernet experienced yet another major evolutionary change. ethernet installations continued to use a star topology, but the hub at the center was replaced with a switch. well be examining switched ethernet in depth later in this chapter. for now, we only mention that a switch is not only collisionless but is also a bonafide storeandforward packet switch; but unlike routers, which operate up through layer 3, a switch operates only up through layer 2. m06_kuro5469_08_ge_c06.indd 515 29042021 1946 516 chapter 6 the link layer and lans ethernet frame structure we can learn a lot about ethernet by examining the ethernet frame, which is shown in figure 6.20. to give this discussion about ethernet frames a tangible context, lets consider sending an ip datagram from one host to another host, with both hosts on the same ethernet lan for example, the ethernet lan in figure 6.17. although the payload of our ethernet frame is an ip datagram, we note that an ethernet frame can carry other networklayer packets as well. let the sending adapter, adapter a, have the mac address aaaaaaaaaaaa and the receiving adapter, adapter b, have the mac address bbbbbbbbbbbb. the sending adapter encapsulates the ip datagram within an ethernet frame and passes the frame to the physical layer. the receiving adapter receives the frame from the physical layer, extracts the ip datagram, and passes the ip datagram to the network layer. in this context, lets now examine the six fields of the ethernet frame, as shown in figure 6.20. data field 46 to 1,500 bytes. this field carries the ip datagram. the maxi mum transmission unit mtu of ethernet is 1,500 bytes. this means that if the ip datagram exceeds 1,500 bytes, then the host has to fragment the datagram, as discussed in section 4.3.2. the minimum size of the data field is 46 bytes. this means that if the ip datagram is less than 46 bytes, the data field has to be stuffed to fill it out to 46 bytes. when stuffing is used, the data passed to the network layer contains the stuffing as well as an ip datagram. the network layer uses the length field in the ip datagram header to remove the stuffing. destination address 6 bytes. this field contains the mac address of the destination adapter, bbbbbbbbbbbb. when adapter b receives an ethernet frame whose destination address is either bbbbbbbbbbbb or the mac broadcast address, it passes the contents of the
frames data field to the network layer; if it receives a frame with any other mac address, it discards the frame. source address 6 bytes. this field contains the mac address of the adapter that transmits the frame onto the lan, in this example, aaaaaaaaaaaa. type field 2 bytes. the type field permits ethernet to multiplex networklayer protocols. to understand this, we need to keep in mind that hosts can use other networklayer protocols besides ip. in fact, a given host may support multiple networklayer protocols using different protocols for different applications. figure 6.20 ethernet frame structurepreamble crcdest. addresssource address typedata m06_kuro5469_08_ge_c06.indd 516 29042021 1946 6.4 switched local area networks 517 for this reason, when the ethernet frame arrives at adapter b, adapter b needs to know to which networklayer protocol it should pass that is, demultiplex the contents of the data field. ip and other networklayer protocols for exam ple, novell ipx or appletalk each have their own, standardized type number. furthermore, the arp protocol discussed in the previous section has its own type number, and if the arriving frame contains an arp packet i.e., has a type field of 0806 hexadecimal, the arp packet will be demultiplexed up to the arp protocol. note that the type field is analogous to the protocol field in the networklayer datagram and the portnumber fields in the transportlayer segment; all of these fields serve to glue a protocol at one layer to a protocol at the layer above. cyclic redundancy check crc 4 bytes. as discussed in section 6.2.3, the purpose of the crc field is to allow the receiving adapter, adapter b, to detect bit errors in the frame. preamble 8 bytes. the ethernet frame begins with an 8byte preamble field. each of the first 7 bytes of the preamble has a value of 10101010; the last byte is 10101011. the first 7 bytes of the preamble serve to wake up the receiving adapters and to synchronize their clocks to that of the senders clock. why should the clocks be out of synchronization? keep in mind that adapter a aims to transmit the frame at 10 mbps, 100 mbps, or 1 gbps, depending on the type of ethernet lan. however, because nothing is absolutely perfect, adapter a will not transmit the frame at exactly the target rate; there will always be some drift from the target rate, a drift which is not known a priori by the other adapters on the lan. a receiving adapter can lock onto adapter as clock simply by locking onto the bits in the first 7 bytes of the preamble. the last 2 bits of the eighth byte of the preamble the first two consecutive 1s alert adapter b that the important stuff is about to come. all of the ethernet technologies provide connectionless service to the network layer. that is, when adapter a wants to send a datagram to adapter b, adapter a encapsulates the datagram in an ethernet frame and sends the frame into
the lan, without first handshaking with adapter b. this layer2 connectionless service is analogous to ips layer3 datagram service and udps layer4 connectionless service. ethernet technologies provide an unreliable service to the network layer. spe cifically, when adapter b receives a frame from adapter a, it runs the frame through a crc check, but neither sends an acknowledgment when a frame passes the crc check nor sends a negative acknowledgment when a frame fails the crc check. when a frame fails the crc check, adapter b simply discards the frame. thus, adapter a has no idea whether its transmitted frame reached adapter b and passed the crc check. this lack of reliable transport at the link layer helps to make ethernet simple and cheap. but it also means that the stream of datagrams passed to the network layer can have gaps. m06_kuro5469_08_ge_c06.indd 517 29042021 1946 518 chapter 6 the link layer and lans if there are gaps due to discarded ethernet frames, does the application at host b see gaps as well? as we learned in chapter 3, this depends on whether the application is using udp or tcp. if the application is using udp, then the application in host b will indeed see gaps in the data. on the other hand, if the application is using tcp, then tcp in host b will not acknowledge the data contained in discarded frames, causing tcp in host a to retransmit. note that when tcp retransmits data, the data will eventually return to the ethernet adapter at which it was discarded. thus, in this sense, ethernet does retransmit data, although ethernet is unaware of whether it is transmitting a brandnew datagram with brandnew data, or a datagram that contains data that has already been transmitted at least once. ethernet technologies in our discussion above, weve referred to ethernet as if it were a single protocol standard. but in fact, ethernet comes in many different flavors, with somewhat bewildering acronyms such as 10baset, 10base2, 100baset, 1000baselx, bob metcalfe and ethernet as a phd student at harvard university in the early 1970s, bob metcalfe worked on the arpanet at mit. during his studies, he also became exposed to abramsons work on aloha and random access protocols. after completing his phd and just before beginning a job at xerox palo alto research center xerox parc, he vis ited abramson and his university of hawaii colleagues for three months, getting a firsthand look at alohanet. at xerox parc, metcalfe became exposed to alto computers, which in many ways were the forerunners of the personal computers of the 1980s. metcalfe saw the need to network these computers in an inexpensive man ner. so armed with his knowledge about arpanet, alohanet, and random access protocols, metcalfealong with colleague david boggsinvented ethernet. metcalfe and boggss original ethernet ran at 2.94 mbps and linked up to 256 hosts separated by up to one mile. metcalfe and boggs succeeded at getting most of the researchers at xerox parc to communicate through
their alto computers. metcalfe then forged an alliance between xerox, digital, and intel to establish ethernet as a 10 mbps ethernet standard, ratified by the ieee. xerox did not show much interest in commercializing ethernet. in 1979, metcalfe formed his own company, 3com, which developed and commercialized networking technology, including ethernet technol ogy. in particular, 3com developed and marketed ethernet cards in the early 1980s for the immensely popular ibm pcs.case history m06_kuro5469_08_ge_c06.indd 518 29042021 1946 6.4 switched local area networks 519 10gbaset and 40gbaset. these and many other ethernet technologies have been standardized over the years by the ieee 802.3 csmacd ethernet working group ieee 802.3 2020. while these acronyms may appear bewildering, there is actually considerable order here. the first part of the acronym refers to the speed of the standard 10, 100, 1000, or 10g, for 10 megabit per second, 100 megabit, gigabit, 10 gigabit and 40 gigibit ethernet, respectively. base refers to baseband ethernet, meaning that the physical media only carries ethernet traffic; almost all of the 802.3 standards are for baseband ethernet. the final part of the acronym refers to the physical media itself; ethernet is both a linklayer and a physicallayer specification and is carried over a variety of physical media including coaxial cable, copper wire, and fiber. generally, a t refers to twistedpair copper wires. historically, an ethernet was initially conceived of as a segment of coaxial cable. the early 10base2 and 10base5 standards specify 10 mbps ethernet over two types of coaxial cable, each limited in length to 500 meters. longer runs could be obtained by using a repeatera physicallayer device that receives a signal on the input side, and regenerates the signal on the output side. a coaxial cable corresponds nicely to our view of ethernet as a broadcast mediumall frames transmitted by one interface are received at other interfaces, and ethernets cdmacd protocol nicely solves the multiple access problem. nodes simply attach to the cable, and voila, we have a local area network! ethernet has passed through a series of evolutionary steps over the years, and todays ethernet is very different from the original bustopology designs using coaxial cable. in most installations today, nodes are connected to a switch via pointtopoint segments made of twistedpair copper wires or fiberoptic cables, as shown in figures 6.156.17. in the mid1990s, ethernet was standardized at 100 mbps, 10 times faster than 10 mbps ethernet. the original ethernet mac protocol and frame format were preserved, but higherspeed physical layers were defined for copper wire 100baset and fiber 100basefx, 100basesx, 100basebx. figure 6.21 shows these different standards and the common ethernet mac protocol and frame format. 100 mbps ethernet is limited to a 100meter distance over twisted pair, and to physicaltransport network linkapplication 100basetx 100baset4100baset2mac protocol and frame format 100basesx100basefx 100basebx figure 6.21 100 mbps ethernet standards a common link layer, different physical layers m06_kuro5469_08_ge_c06.indd 519 29042021 1946 520 chapter 6 the link layer and lans several kilometers over fiber, allowing ethernet switches in different
buildings to be connected. gigabit ethernet is an extension to the highly successful 10 mbps and 100 mbps ethernet standards. offering a raw data rate of 40,000 mbps, 40 gigabit ethernet maintains full compatibility with the huge installed base of ethernet equipment. the standard for gigabit ethernet, referred to as ieee 802.3z, does the following uses the standard ethernet frame format figure 6.20 and is backward com patible with 10baset and 100baset technologies. this allows for easy integration of gigabit ethernet with the existing installed base of ethernet equipment. allows for pointtopoint links as well as shared broadcast channels. pointtopoint links use switches while broadcast channels use hubs, as described earlier. in gigabit ethernet jargon, hubs are called buffered distributors. uses csmacd for shared broadcast channels. in order to have acceptable efficiency, the maximum distance between nodes must be severely restricted. allows for fullduplex operation at 40 gbps in both directions for pointtopoint channels. initially operating over optical fiber, gigabit ethernet is now able to run over category 5 utp cabling for 1000baset and 10gbaset. lets conclude our discussion of ethernet technology by posing a question that may have begun troubling you. in the days of bus topologies and hubbased star topologies, ethernet was clearly a broadcast link as defined in section 6.3 in which frame collisions occurred when nodes transmitted at the same time. to deal with these collisions, the ethernet standard included the csmacd protocol, which is particularly effective for a wired broadcast lan spanning a small geographical region. but if the prevalent use of ethernet today is a switchbased star topology, using storeandforward packet switching, is there really a need anymore for an ethernet mac protocol? as well see shortly, a switch coordinates its transmissions and never forwards more than one frame onto the same interface at any time. furthermore, modern switches are fullduplex, so that a switch and a node can each send frames to each other at the same time without interference. in other words, in a switchbased ethernet lan there are no collisions and, therefore, there is no need for a mac protocol! as weve seen, todays ethernets are very different from the original ethernet conceived by metcalfe and boggs more than 40 years agospeeds have increased by three orders of magnitude, ethernet frames are carried over a variety of media, switchedethernets have become dominant, and now even the mac protocol is often unnecessary! is all of this really still ethernet? the answer, of course, is yes, by definition. it is interesting to note, however, that through all of these changes, there m06_kuro5469_08_ge_c06.indd 520 29042021 1946 6.4 switched local area networks 521 has indeed been one enduring constant that has remained unchanged over 30 years ethernets frame format. perhaps this then is the one true and timeless centerpiece of the ethernet standard. 6.4.3 linklayer switches up until this point, we have been purposefully vague about what a switch actually does and how it works. the role of the switch is to receive incoming linklayer
frames and forward them onto outgoing links; well study this forwarding function in detail in this subsection. well see that the switch itself is transparent to the hosts and routers in the subnet; that is, a hostrouter addresses a frame to another hostrouter rather than addressing the frame to the switch and happily sends the frame into the lan, unaware that a switch will be receiving the frame and forwarding it. the rate at which frames arrive to any one of the switchs output interfaces may temporarily exceed the link capacity of that interface. to accommodate this problem, switch output interfaces have buffers, in much the same way that router output interfaces have buffers for datagrams. lets now take a closer look at how switches operate. forwarding and filtering filtering is the switch function that determines whether a frame should be forwarded to some interface or should just be dropped. forwarding is the switch function that determines the interfaces to which a frame should be directed, and then moves the frame to those interfaces. switch filtering and forwarding are done with a switch table. the switch table contains entries for some, but not necessarily all, of the hosts and routers on a lan. an entry in the switch table contains 1 a mac address, 2 the switch interface that leads toward that mac address, and 3 the time at which the entry was placed in the table. an example switch table for the uppermost switch in figure 6.15 is shown in figure 6.22. this description of frame forwarding may sound similar to our discussion of datagram forwarding figure 6.22 portion of a switch table for the uppermost switch in figure 6.15time interface address 62fef71189a3 1 932 7cbab2b4911 03 936 .... .... .... m06_kuro5469_08_ge_c06.indd 521 29042021 1946 522 chapter 6 the link layer and lans in chapter 4. indeed, in our discussion of generalized forwarding in section 4.4, we learned that many modern packet switches can be configured to forward on the basis of layer2 destination mac addresses i.e., function as a layer2 switch or layer3 ip destination addresses i.e., function as a layer3 router. nonetheless, well make the important distinction that switches forward packets based on mac addresses rather than on ip addresses. we will also see that a traditional i.e., in a nonsdn context switch table is constructed in a very different manner from a routers forwarding table. to understand how switch filtering and forwarding work, suppose a frame with destination address dddddddddddd arrives at the switch on interface x. the switch indexes its table with the mac address dddddddddddd. there are three possible cases there is no entry in the table for dddddddddddd. in this case, the switch forwards copies of the frame to the output buffers preceding all interfaces except for interface x. in other words, if there is no entry for the destination address, the switch broadcasts the frame. there is an entry in the table, associating dddddddddddd with interface x. in this case, the frame
is coming from a lan segment that contains adapter dddddddddddd. there being no need to forward the frame to any of the other interfaces, the switch performs the filtering function by discarding the frame. there is an entry in the table, associating dddddddddddd with interface ynotequal.alt1x. in this case, the frame needs to be forwarded to the lan segment attached to interface y. the switch performs its forwarding function by putting the frame in an output buffer that precedes interface y. lets walk through these rules for the uppermost switch in figure 6.15 and its switch table in figure 6.22. suppose that a frame with destination address 62fef71189a3 arrives at the switch from interface 1. the switch examines its table and sees that the destination is on the lan segment connected to interface 1 that is, electrical engineering. this means that the frame has already been broadcast on the lan segment that contains the destination. the switch therefore filters that is, discards the frame. now suppose a frame with the same destination address arrives from interface 2. the switch again examines its table and sees that the destination is in the direction of interface 1; it therefore forwards the frame to the output buffer preceding interface 1. it should be clear from this example that as long as the switch table is complete and accurate, the switch forwards frames toward destinations without any broadcasting. in this sense, a switch is smarter than a hub. but how does this switch table get configured in the first place? are there linklayer equivalents to networklayer routing protocols? or must an overworked manager manually configure the switch table? m06_kuro5469_08_ge_c06.indd 522 29042021 1946 6.4 switched local area networks 523 selflearning a switch has the wonderful property particularly for the alreadyoverworked network administrator that its table is built automatically, dynamically, and autonomouslywithout any intervention from a network administrator or from a configuration protocol. in other words, switches are selflearning. this capability is accomplished as follows 1. the switch table is initially empty. 2. for each incoming frame received on an interface, the switch stores in its table 1 the mac address in the frames source address field, 2 the interface from which the frame arrived, and 3 the current time. in this manner, the switch records in its table the lan segment on which the sender resides. if every host in the lan eventually sends a frame, then every host will eventually get recorded in the table. 3. the switch deletes an address in the table if no frames are received with that address as the source address after some period of time the aging time. in this manner, if a pc is replaced by another pc with a different adapter, the mac address of the original pc will eventually be purged from the switch table. lets walk through the selflearning property for the uppermost switch in fig ure 6.15 and its corresponding switch table in figure 6.22. suppose at time 939 a frame with source
address 011223344556 arrives from interface 2. suppose that this address is not in the switch table. then the switch adds a new entry to the table, as shown in figure 6.23. continuing with this same example, suppose that the aging time for this switch is 60 minutes, and no frames with source address 62fef71189a3 arrive to the switch between 932 and 1032. then at time 1032, the switch removes this address from its table. figure 6.23 switch learns about the location of an adapter with address 011223344556address interface time 011223344556 2 939 62fef71189a3 1 932 7cbab2b49110 3 936 .... .... .... m06_kuro5469_08_ge_c06.indd 523 29042021 1946 524 chapter 6 the link layer and lans switches are plugandplay devices because they require no intervention from a network administrator or user. a network administrator wanting to install a switch need do nothing more than connect the lan segments to the switch interfaces. the administrator need not configure the switch tables at the time of installation or when a host is removed from one of the lan segments. switches are also fullduplex, meaning any switch interface can send and receive at the same time. properties of linklayer switching having described the basic operation of a linklayer switch, lets now consider their features and properties. we can identify several advantages of using switches, rather than broadcast links such as buses or hubbased star topologies elimination of collisions. in a lan built from switches and without hubs, there is no wasted bandwidth due to collisions! the switches buffer frames and never transmit more than one frame on a segment at any one time. as with a router, the maximum aggregate throughput of a switch is the sum of all the switch interface rates. thus, switches provide a significant performance improvement over lans with broadcast links. heterogeneous links. because a switch isolates one link from another, the different links in the lan can operate at different speeds and can run over different media. for example, the uppermost switch in figure 6.15 might have three1 gbps 1000baset copper links, two 100 mbps 100basefx fiber links, and one 100baset copper link. thus, a switch is ideal for mixing legacy equipment with new equipment. management. in addition to providing enhanced security see sidebar on focus on security, a switch also eases network management. for example, if an adapter malfunctions and continually sends ethernet frames called a jabbering adapter, a switch can detect the problem and internally disconnect the malfunctioning adapter. with this feature, the network administrator need not get out of bed and drive back to work in order to correct the problem. similarly, a cable cut disconnects only that host that was using the cut cable to connect to the switch. in the days of coaxial cable, many a network manager spent hours walking the line or more accurately, crawling the floor to find the cable break that brought down the entire network. switches also gather statistics on bandwidth usage, collision rates, and traffic types, and make this information
available to the network manager. this information can be used to debug and correct problems, and to plan how the lan should evolve in the future. researchers are exploring adding yet more management functionality into ethernet lans in prototype deployments casado 2007; koponen 2011. m06_kuro5469_08_ge_c06.indd 524 29042021 1946 6.4 switched local area networks 525 switches versus routers as we learned in chapter 4, routers are storeandforward packet switches that for ward packets using networklayer addresses. although a switch is also a storeandforward packet switch, it is fundamentally different from a router in that it forwards packets using mac addresses. whereas a router is a layer3 packet switch, a switch is a layer2 packet switch. recall, however, that we learned in section 4.4 that modern switches using the match plus action operation can be used to forward a layer2 frame based on the frames destination mac address, as well as a layer3 datagram using the datagrams destination ip address. indeed, we saw that switches using the openflow standard can perform generalized packet forwarding based on any of eleven different frame, datagram, and transportlayer header fields. even though switches and routers are fundamentally different, network admin istrators must often choose between them when installing an interconnection device. for example, for the network in figure 6.15, the network administrator could just as easily have used a router instead of a switch to connect the department lans, servers, and internet gateway router. indeed, a router would permit interdepartmental communication without creating collisions. given that both switches and routers are candidates for interconnection devices, what are the pros and cons of the two approaches?sniffing a switched lan switch poisoning when a host is connected to a switch, it typically only receives frames that are intended for it. for example, consider a switched lan in figure 6.17. when host a sends a frame to host b, and there is an entry for host b in the switch table, then the switch will forward the frame only to host b. if host c happens to be running a sniffer, host c will not be able to sniff this atob frame. thus, in a switchedlan environment in contrast to a broadcast link environment such as 802.11 lans or hubbased ethernet lans, it is more difficult for an attacker to sniff frames. however, because the switch broadcasts frames that have destination addresses that are not in the switch table, the sniffer at c can still sniff some frames that are not intended for c. furthermore, a sniffer will be able sniff all ethernet broadcast frames with broad cast destination address ffffffffffff. a wellknown attack against a switch, called switch poisoning, is to send tons of packets to the switch with many different bogus source mac addresses, thereby filling the switch table with bogus entries and leaving no room for the mac addresses of the legitimate hosts. this causes the switch to broadcast most frames, which can then be picked up by the sniffer skoudis 2006. as this attack is
rather involved even for a sophisticated attacker, switches are significantly less vulnerable to sniffing than are hubs and wireless lans.focus on security m06_kuro5469_08_ge_c06.indd 525 29042021 1946 526 chapter 6 the link layer and lans first consider the pros and cons of switches. as mentioned above, switches are plugandplay, a property that is cherished by all the overworked network adminis trators of the world. switches can also have relatively high filtering and forwarding ratesas shown in figure 6.24, switches have to process frames only up through layer 2, whereas routers have to process datagrams up through layer 3. on the other hand, to prevent the cycling of broadcast frames, the active topology of a switched network is restricted to a spanning tree. also, a large switched network would require large arp tables in the hosts and routers and would generate substantial arp traffic and processing. furthermore, switches are susceptible to broadcast stormsif one host goes haywire and transmits an endless stream of ethernet broadcast frames, the switches will forward all of these frames, causing the entire network to collapse. now consider the pros and cons of routers. because network addressing is often hierarchical and not flat, as is mac addressing, packets do not normally cycle through routers even when the network has redundant paths. however, packets can cycle when router tables are misconfigured; but as we learned in chapter 4, ip uses a special datagram header field to limit the cycling. thus, packets are not restricted to a spanning tree and can use the best path between source and destination. because routers do not have the spanning tree restriction, they have allowed the internet to be built with a rich topology that includes, for example, multiple active links between europe and north america. another feature of routers is that they provide firewall protection against layer2 broadcast storms. perhaps the most significant drawback of routers, though, is that they are not plugandplaythey and the hosts that connect to them need their ip addresses to be configured. also, routers often have a larger perpacket processing time than switches, because they have to process up through the layer3 fields. finally, there are two different ways to pronounce the word router, either as rootor or as rowter, and people waste a lot of time arguing over the proper pronunciation perlman 1999. given that both switches and routers have their pros and cons as summarized in table 6.1, when should an institutional network for example, a university campus figure 6.24 packet processing in switches, routers, and hostshost applicationhost transport network link physicallink physicalnetworkswitch router link physicalapplication transport network link physical m06_kuro5469_08_ge_c06.indd 526 29042021 1946 6.4 switched local area networks 527 network or a corporate campus network use switches, and when should it use rout ers? typically, small networks consisting of a few hundred hosts have a few lan segments. switches suffice for these small networks, as they localize traffic and increase aggregate throughput without requiring any configuration of ip addresses. but larger networks consisting of thousands
of hosts typically include routers within the network in addition to switches. the routers provide a more robust isolation of traffic, control broadcast storms, and use more intelligent routes among the hosts in the network. for more discussion of the pros and cons of switched versus routed networks, as well as a discussion of how switched lan technology can be extended to accommodate two orders of magnitude more hosts than todays ethernets, see meyers 2004; kim 2008. 6.4.4 virtual local area networks vlans in our earlier discussion of figure 6.15, we noted that modern institutional lans are often configured hierarchically, with each workgroup department having its own switched lan connected to the switched lans of other groups via a switch hierarchy. while such a configuration works well in an ideal world, the real world is often far from ideal. three drawbacks can be identified in the configuration in figure 6.15 lack of traffic isolation. although the hierarchy localizes group traffic to within a single switch, broadcast traffic e.g., frames carrying arp and dhcp messages or frames whose destination has not yet been learned by a selflearning switch must still traverse the entire institutional network. limiting the scope of such broadcast traffic would improve lan performance. perhaps more importantly, it also may be desirable to limit lan broadcast traffic for securityprivacy reasons. for example, if one group contains the companys executive management team and another group contains disgruntled employees running wireshark packet sniffers, the network manager may well prefer that the executives traffic never even reaches employee hosts. this type of isolation could be provided by table 6.1 comparison of the typical features of popular interconnection deviceshubs routers switches traffic isolation no yes yes plug and play yes no yes optimal routing no yes no m06_kuro5469_08_ge_c06.indd 527 29042021 1946 528 chapter 6 the link layer and lans replacing the center switch in figure 6.15 with a router. well see shortly that this isolation also can be achieved via a switched layer 2 solution. inefficient use of switches. if instead of three groups, the institution had 10 groups, then 10 firstlevel switches would be required. if each group were small, say less than 10 people, then a single 96port switch would likely be large enough to accommodate everyone, but this single switch would not provide traffic isolation. managing users. if an employee moves between groups, the physical cabling must be changed to connect the employee to a different switch in figure 6.15. employees belonging to two groups make the problem even harder. fortunately, each of these difficulties can be handled by a switch that supports virtual local area networks vlans. as the name suggests, a switch that sup ports vlans allows multiple virtual local area networks to be defined over a sin gle physical local area network infrastructure. hosts within a vlan communicate with each other as if they and no other hosts were connected to the switch. in a portbased vlan, the switchs ports interfaces are divided into groups by the
network manager. each group constitutes a vlan, with the ports in each vlan forming a broadcast domain i.e., broadcast traffic from one port can only reach other ports in the group. figure 6.25 shows a single switch with 16 ports. ports 2 to 8 belong to the ee vlan, while ports 9 to 15 belong to the cs vlan ports 1 and 16 are unassigned. this vlan solves all of the difficulties noted aboveee and cs vlan frames are isolated from each other, the two switches in figure 6.15 have been replaced by a single switch, and if the user at switch port 8 joins the cs department, the network operator simply reconfigures the vlan software so that port 8 is now associated with the cs vlan. one can easily imagine how the vlan switch is configured and operatesthe network manager declares a port to belong figure 6.25 a single switch with two configured vlans1 electrical engineering vlan ports 2 8computer science vlan ports 9 1591 5 24 81 01 6 m06_kuro5469_08_ge_c06.indd 528 29042021 1946 6.4 switched local area networks 529 to a given vlan with undeclared ports belonging to a default vlan using switch management software, a table of porttovlan mappings is maintained within the switch; and switch hardware only delivers frames between ports belonging to the same vlan. but by completely isolating the two vlans, we have introduced a new dif ficulty! how can traffic from the ee department be sent to the cs department? one way to handle this would be to connect a vlan switch port e.g., port 1 in figure 6.25 to an external router and configure that port to belong both the ee and cs vlans. in this case, even though the ee and cs departments share the same physical switch, the logical configuration would look as if the ee and cs departments had separate switches connected via a router. an ip datagram going from the ee to the cs department would first cross the ee vlan to reach the router and then be forwarded by the router back over the cs vlan to the cs host. fortunately, switch vendors make such configurations easy for the network manager by building a single device that contains both a vlan switch and a router, so a separate external router is not needed. a homework problem at the end of the chapter explores this scenario in more detail. returning again to figure 6.15, lets now suppose that rather than having a sepa rate computer engineering department, some ee and cs faculty are housed in a separate building, where of course! they need network access, and of course! theyd like to be part of their departments vlan. figure 6.26 shows a second 8port switch, where the switch ports have been defined as belonging to the ee or the cs vlan, as needed. but how should these two switches be interconnected? one easy solution would be to define a port belonging to the cs vlan on each switch similarly
for the ee vlan and to connect these ports to each other, as shown in figure 6.26a. this solution doesnt scale, however, since n vlans would require n ports on each switch simply to interconnect the two switches. a more scalable approach to interconnecting vlan switches is known as vlan trunking. in the vlan trunking approach shown in figure 6.26b, a special port on each switch port 16 on the left switch and port 1 on the right switch is configured as a trunk port to interconnect the two vlan switches. the trunk port belongs to all vlans, and frames sent to any vlan are forwarded over the trunk link to the other switch. but this raises yet another question how does a switch know that a frame arriving on a trunk port belongs to a particular vlan? the ieee has defined an extended ethernet frame format, 802.1q, for frames crossing a vlan trunk. as shown in figure 6.27, the 802.1q frame consists of the standard ethernet frame with a fourbyte vlan tag added into the header that carries the identity of the vlan to which the frame belongs. the vlan tag is added into a frame by the switch at the sending side of a vlan trunk, parsed, and removed by the switch at the receiving side of the trunk. the vlan tag itself consists of a 2byte tag protocol identifier tpid field with a fixed hexadecimal value of 8100, a 2byte tag control information field that contains a 12bit vlan identifier field, and a 3bit priority field that is similar in intent to the ip datagram tos field. m06_kuro5469_08_ge_c06.indd 529 29042021 1946 530 chapter 6 the link layer and lans figure 6.26 connecting two vlan switches with two vlans a two cables b trunked1 161 8 1 electrical engineering vlan ports 2 8 b.a. electrical engineering vlan ports 2, 3, 6trunk link computer science vlan ports 9 1591 5 24 81 01 61 23 45 687 computer science vlan ports 4, 5, 7 figure 6.27 original ethernet frame top, 802.1qtagged ethernet vlan frame belowpreamble crcdest. addresssource addresstype data preamble crcdest. addresssource addresstype tag control information tag protocol identi Ô¨Åerrecomputed crtdata m06_kuro5469_08_ge_c06.indd 530 29042021 1946 6.5 link virtu alization a network as a link layer 531 in this discussion, weve only briefly touched on vlans and have focused on port based vlans. we should also mention that vlans can be defined in several other ways. in macbased vlans, the network manager specifies the set of mac addresses that belong to each vlan; whenever a device attaches to a port, the port is connected into the appropriate vlan based on the mac address of the device. vlans can also be defined based on networklayer protocols e.g., ipv4, ipv6, or appletalk and other criteria. it is also possible for vlans to be extended across ip routers, allowing islands of lans to be connected together to form a single vlan that could span the globe yu 2011. see the 802.1q standard ieee
802.1q 2005 for more details. 6.5 link virtualization a network as a link layer because this chapter concerns linklayer protocols, and given that were now nearing the chapters end, lets reflect on how our understanding of the term link has evolved. we began this chapter by viewing the link as a physical wire connecting two communicating hosts. in studying multiple access protocols, we saw that multiple hosts could be connected by a shared wire and that the wire connecting the hosts could be radio spectra or other media. this led us to consider the link a bit more abstractly as a channel, rather than as a wire. in our study of ethernet lans figure 6.15, we saw that the interconnecting media could actually be a rather complex switched infrastructure. throughout this evolution, however, the hosts themselves maintained the view that the interconnecting medium was simply a linklayer channel connecting two or more hosts. we saw, for example, that an ethernet host can be blissfully unaware of whether it is connected to other lan hosts by a single short lan segment figure 6.17 or by a geographically dispersed switched lan figure 6.15 or by a vlan figure 6.26. in the case of a dialup modem connection between two hosts, the link connect ing the two hosts is actually the telephone networka logically separate, global telecommunications network with its own switches, links, and protocol stacks for data transfer and signaling. from the internet linklayer point of view, however, the dialup connection through the telephone network is viewed as a simple wire. in this sense, the internet virtualizes the telephone network, viewing the telephone network as a linklayer technology providing linklayer connectivity between two internet hosts. you may recall from our discussion of overlay networks in chapter 2 that an overlay network similarly views the internet as a means for providing connectivity between overlay nodes, seeking to overlay the internet in the same way that the internet overlays the telephone network. in this section, well consider multiprotocol label switching mpls net works. unlike the circuitswitched telephone network, mpls is a packetswitched, m06_kuro5469_08_ge_c06.indd 531 29042021 1946 532 chapter 6 the link layer and lans virtualcircuit network in its own right. it has its own packet formats and forwarding behaviors. thus, from a pedagogical viewpoint, a discussion of mpls fits well into a study of either the network layer or the link layer. from an internet viewpoint, however, we can consider mpls, like the telephone network and switched ethernets, as a linklayer technology that serves to interconnect ip devices. thus, well consider mpls in our discussion of the link layer. framerelay and atm networks can also be used to interconnect ip devices, though they represent a slightly older but still deployed technology and will not be covered here; see the very readable book goralski 1999 for details. our treatment of mpls will be necessarily brief, as entire books could be and have been written on these networks. we recommend davie 2000 for details on mpls.
well focus here primarily on how mpls servers interconnect to ip devices, although well dive a bit deeper into the underlying technologies as well. 6.5.1 multiprotocol label switching mpls multiprotocol label switching mpls evolved from a number of industry efforts in the midtolate 1990s to improve the forwarding speed of ip routers by adopting a key concept from the world of virtualcircuit networks a fixedlength label. the goal was not to abandon the destinationbased ip datagramforwarding infrastructure for one based on fixedlength labels and virtual circuits, but to augment it by selectively labeling datagrams and allowing routers to forward datagrams based on fixedlength labels rather than destination ip addresses when possible. importantly, these techniques work handinhand with ip, using ip addressing and routing. the ietf unified these efforts in the mpls protocol rfc 3031, rfc 3032, effectively blending vc techniques into a routed datagram network. lets begin our study of mpls by considering the format of a linklayer frame that is handled by an mplscapable router. figure 6.28 shows that a linklayer frame transmitted between mplscapable devices has a small mpls header added between the layer2 e.g., ethernet header and layer3 i.e., ip header. rfc 3032 defines the format of the mpls header for such links; headers are defined for atm and framerelayed networks as well in other rfcs. among the fields in the mpls ppp or ethernet headermpls header ip header remainder of linklayer frame label exp sttl figure 6.28 mpls header located between link and networklayer headers m06_kuro5469_08_ge_c06.indd 532 29042021 1946 6.5 link virtu alization a network as a link layer 533 header are the label, 3 bits reserved for experimental use, a single s bit, which is used to indicate the end of a series of stacked mpls headers an advanced topic that well not cover here, and a timetolive field. its immediately evident from figure 6.28 that an mplsenhanced frame can only be sent between routers that are both mpls capable since a nonmplscapable router would be quite confused when it found an mpls header where it had expected to find the ip header!. an mplscapable router is often referred to as a label switched router, since it forwards an mpls frame by looking up the mpls label in its forwarding table and then immediately passing the datagram to the appropriate output interface. thus, the mplscapable router need not extract the destination ip address and perform a lookup of the longest prefix match in the forwarding table. but how does a router know if its neighbor is indeed mpls capable, and how does a router know what label to associate with the given ip destination? to answer these questions, well need to take a look at the interaction among a group of mplscapable routers. in the example in figure 6.29, routers r1 through r4 are mpls capable. r5 and r6 are standard ip routers. r1 has advertised to r2 and r3 that it r1 can route to destination a, and that a received frame with mpls
label 6 will be forwarded to destination a. router r3 has advertised to router r4 that it can route to destinations a and d, and that incoming frames with mpls labels 10 and 12, respectively, will be switched toward those destinations. router r2 has also advertised to router r4 that it r2 can reach destination a, and that a received frame with mpls label 8 will be switched toward a. note that router r4 is now in the interesting position of having two mpls figure 6.29 mplsenhanced forwardingr4in labelout label 10 12 8ad a0 0 1destout interface r6 r5r3 r2d a0 00110 r1in labelout label 6 9ad101012destout interface in labelout label a 0 6destout interfacein labelout label 6a 0 8destout interface m06_kuro5469_08_ge_c06.indd 533 29042021 1946 534 chapter 6 the link layer and lans paths to reach a via interface 0 with outbound mpls label 10, and via interface 1 with an mpls label of 8. the broad picture painted in figure 6.29 is that ip devices r5, r6, a, and d are connected together via an mpls infrastructure mplscapable routers r1, r2, r3, and r4 in much the same way that a switched lan or an atm network can connect together ip devices. and like a switched lan or atm network, the mplscapable routers r1 through r4 do so without ever touching the ip header of a packet. in our discussion above, weve not specified the specific protocol used to distribute labels among the mplscapable routers, as the details of this signaling are well beyond the scope of this book. we note, however, that the ietf working group on mpls has specified in rfc 3468 that an extension of the rsvp protocol, known as rsvpte rfc 3209, will be the focus of its efforts for mpls signaling. weve also not discussed how mpls actually computes the paths for packets among mpls capable routers, nor how it gathers linkstate information e.g., amount of link bandwidth unreserved by mpls to use in these path computations. existing linkstate routing algorithms e.g., ospf have been extended to flood this information to mplscapable routers. interestingly, the actual path computation algorithms are not standardized, and are currently vendorspecific. thus far, the emphasis of our discussion of mpls has been on the fact that mpls performs switching based on labels, without needing to consider the ip address of a packet. the true advantages of mpls and the reason for current interest in mpls, however, lie not in the potential increases in switching speeds, but rather in the new traffic management capabilities that mpls enables. as noted above, r4 has two mpls paths to a. if forwarding were performed up at the ip layer on the basis of ip address, the ip routing protocols we studied in chapter 5 would specify only a single, leastcost path to a. thus, mpls provides the ability to forward packets along routes that would not be possible using standard ip routing protocols. this is one simple form of traffic engineering using mpls
rfc 3346; rfc 3272; rfc 2702; xiao 2000, in which a network operator can override normal ip routing and force some of the traffic headed toward a given destination along one path, and other traffic destined toward the same destination along another path whether for policy, performance, or some other reason. it is also possible to use mpls for many other purposes as well. it can be used to perform fast restoration of mpls forwarding paths, e.g., to reroute traffic over a precomputed failover path in response to link failure kar 2000; huang 2002; rfc 3469. finally, we note that mpls can, and has, been used to implement socalled virtual private networks vpns. in implementing a vpn for a customer, an isp uses its mplsenabled network to connect together the customers various networks. mpls can be used to isolate both the resources and addressing used by the customers vpn from that of other users crossing the isps network; see declercq 2002 for details. our discussion of mpls has been brief, and we encourage you to consult the ref erences weve mentioned. we note that mpls rose to prominence before the development of softwaredefined networking, which we studied in chapter 5, and that many of mpls traffic engineering capabilities can also be achieved via sdn and the generalized forwarding paradigm we studied in chapter 4. only the future will tell whether mpls and sdn will continue to coexist, or whether newer technologies such as sdn will eventually replace mpls. m06_kuro5469_08_ge_c06.indd 534 29042021 1946 6.6 data center networking 535 6.6 data center networking internet companies such as google, microsoft, amazon, and alibaba have built mas sive data centers, each housing tens to hundreds of thousands of hosts. as briefly discussed in the sidebar in section 1.2, data centers are not only connected to the internet, but also internally include complex computer networks, called data center networks, which interconnect their internal hosts. in this section, we provide a brief introduction to data center networking for cloud applications. broadly speaking, data centers serve three purposes. first, they provide content such as web pages, search results, email, or streaming video to users. second, they serve as massivelyparallel computing infrastructures for specific data processing tasks, such as distributed index computations for search engines. third, they provide cloud computing to other companies. indeed, today a major trend in computing is for companies to use a cloud provider such as amazon web services, microsoft azure, and alibaba cloud to handle essentially all of their it needs. 6.6.1 data center architectures data center designs are carefully kept company secrets, as they often provide critical competitive advantages to leading cloud computing companies. the cost of a large data center is huge, exceeding 12 million per month for a 100,000 host data center in 2009 greenberg 2009a. of these costs, about 45 percent can be attributed to the hosts themselves which need to be replaced every 34 years; 25 percent to infrastructure, including transformers, uninterruptable power supplies ups systems, generators for
longterm outages, and cooling systems; 15 percent for electric utility costs for the power draw; and 15 percent for networking, including network gear switches, routers, and load balancers, external links, and transit traffic costs. in these percentages, costs for equipment are amortized so that a common cost metric is applied for onetime purchases and ongoing expenses such as power. while networking is not the largest cost, networking innovation is the key to reducing overall cost and maximizing performance greenberg 2009a. the worker bees in a data center are the hosts. the hosts in data centers, called blades and resembling pizza boxes, are generally commodity hosts that include cpu, memory, and disk storage. the hosts are stacked in racks, with each rack typically having 20 to 40 blades. at the top of each rack, there is a switch, aptly named the top of rack tor switch, that interconnects the hosts in the rack with each other and with other switches in the data center. specifically, each host in the rack has a network interface that connects to its tor switch, and each tor switch has additional ports that can be connected to other switches. today, hosts typically have 40 gbps or 100 gbps ethernet connections to their tor switches fb 2019; greenberg 2015; roy 2015; singh 2015. each host is also assigned its own datacenterinternal ip address. m06_kuro5469_08_ge_c06.indd 535 29042021 1946 536 chapter 6 the link layer and lans the data center network supports two types of traffic traffic flowing between external clients and internal hosts and traffic flowing between internal hosts. to handle flows between external clients and internal hosts, the data center network includes one or more border routers, connecting the data center network to the public internet. the data center network therefore interconnects the racks with each other and connects the racks to the border routers. figure 6.30 shows an example of a data center network. data center network design, the art of designing the interconnection network and protocols that connect the racks with each other and with the border routers, has become an important branch of computer networking research in recent years. see references in this section. load balancing a cloud data center, such as one operated by google, microsoft, amazon, and alibaba, provides many applications concurrently, such as search, email, and video applications. to support requests from external clients, each application is associated with a publicly visible ip address to which clients send their requests and from which they receive responses. inside the data center, the external requests are first figure 6.30 a data center network with a hierarchical topologyinternet a 12345 67 8cb server rackstor switchestier2 switchestier1 switchesaccess routerborder router load balancer m06_kuro5469_08_ge_c06.indd 536 29042021 1946 6.6 data center networking 537 directed to a load balancer whose job it is to distribute requests to the hosts, balanc ing the load across the hosts as a function of their current load patel 2013; eisenbud 2016. a large data center will often have several load balancers, each
one devoted to a set of specific cloud applications. such a load balancer is sometimes referred to as a layer4 switch since it makes decisions based on the destination port number layer 4 as well as destination ip address in the packet. upon receiving a request for a particular application, the load balancer forwards it to one of the hosts that handles the application. a host may then invoke the services of other hosts to help process the request. the load balancer not only balances the work load across hosts, but also provides a natlike function, translating the public external ip address to the internal ip address of the appropriate host, and then translating back for packets traveling in the reverse direction back to the clients. this prevents clients from contacting hosts directly, which has the security benefit of hiding the internal network structure and preventing clients from directly interacting with the hosts. hierarchical architecture for a small data center housing only a few thousand hosts, a simple network consisting of a border router, a load balancer, and a few tens of racks all interconnected by a single ethernet switch could possibly suffice. but to scale to tens to hundreds of thousands of hosts, a data center often employs a hierarchy of routers and switches, such as the topology shown in figure 6.30. at the top of the hierarchy, the border router connects to access routers only two are shown in figure 6.30, but there can be many more. below each access router, there are three tiers of switches. each access router connects to a toptier switch, and each toptier switch connects to multiple secondtier switches and a load balancer. each secondtier switch in turn connects to multiple racks via the racks tor switches thirdtier switches. all links typically use ethernet for their linklayer and physicallayer protocols, with a mix of copper and fiber cabling. with such a hierarchical design, it is possible to scale a data center to hundreds of thousands of hosts. because it is critical for a cloud application provider to continually provide appli cations with high availability, data centers also include redundant network equipment and redundant links in their designs not shown in figure 6.30. for example, each tor switch can connect to two tier2 switches, and each access router, tier1 switch, and tier2 switch can be duplicated and integrated into the design cisco 2012; greenberg 2009b. in the hierarchical design in figure 6.30, observe that the hosts below each access router form a single subnet. in order to localize arp broadcast traffic, each of these subnets is further partitioned into smaller vlan subnets, each comprising a few hundred hosts greenberg 2009a. although the conventional hierarchical architecture just described solves the problem of scale, it suffers from limited hosttohost capacity greenberg 2009b. to understand this limitation, consider again figure 6.30, and suppose each host connects to its tor switch with a 10 gbps link, whereas the links between switches m06_kuro5469_08_ge_c06.indd 537 29042021 1946 538 chapter 6
the link layer and lans are 100 gbps ethernet links. two hosts in the same rack can always communicate at a full 10 gbps, limited only by the rate of the hosts network interface controllers. however, if there are many simultaneous flows in the data center network, the maximum rate between two hosts in different racks can be much less. to gain insight into this issue, consider a traffic pattern consisting of 40 simultaneous flows between 40 pairs of hosts in different racks. specifically, suppose each of 10 hosts in rack 1 in figure 6.30 sends a flow to a corresponding host in rack 5. similarly, there are ten simultaneous flows between pairs of hosts in racks 2 and 6, ten simultaneous flows between racks 3 and 7, and ten simultaneous flows between racks 4 and 8. if each flow evenly shares a links capacity with other flows traversing that link, then the 40 flows crossing the 100 gbps atob link as well as the 100 gbps btoc link will each only receive 100 gbps 40 2.5 gbps, which is significantly less than the 10 gbps network interface rate. the problem becomes even more acute for flows between hosts that need to travel higher up the hierarchy. there are several possible solutions to this problem one possible solution to this limitation is to deploy higherrate switches and routers. but this would significantly increase the cost of the data center, because switches and routers with high port speeds are very expensive. a second solution to this problem, which can be adopted whenever possible, is to colocate related services and data as close to one another as possible e.g., in the same rack or in a nearby rack roy 2015; singh 2015 in order to minimize interrack communication via tier2 or tier1 switches. but this can only go so far, as a key requirement in data centers is flexibility in placement of computation and services greenberg 2009b; farrington 2010. for example, a largescale internet search engine may run on thousands of hosts spread across multiple racks with significant bandwidth requirements between all pairs of hosts. similarly, a cloud computing service such amazon web services or microsoft azure may wish to place the multiple virtual machines comprising a customers service on the physical hosts with the most capacity irrespective of their location in the data center. if these physical hosts are spread across multiple racks, network bottlenecks as described above may result in poor performance. a final piece of the solution is to provide increased connectivity between the tor switches and tier2 switches, and between tier2 switches and tier1 switches. for example, as shown in figure 6.31, each tor switch could be connected to two tier2 switches, which then provide for multiple link and switchdisjoint paths between racks. in figure 6.31, there are four distinct paths between the first tier2 switch and the second tier2 switch, together providing an aggregate capacity of 400 gbps between the first two tier2 switches. increasing the degree
of connectivity between tiers has two significant benefits there is both increased capacity and increased reliability because of path diversity between switches. in facebooks data center fb 2014; fb 2019, each tor is connected to four different tier2 switches, and each tier2 switch is connected to four different tier1 switches. m06_kuro5469_08_ge_c06.indd 538 29042021 1946 6.6 data center networking 539 a direct consequence of the increased connectivity between tiers in data center networks is that multipath routing can become a firstclass citizen in these networks. flows are by default multipath flows. a very simple scheme to achieve multipath routing is equal cost multi path ecmp rfc 2992, which performs a randomized nexthop selection along the switches between source and destination. advanced schemes using finergrained load balancing have also been proposed alizadeh 2014; noormohammadpour 2018. while these schemes perform multipath routing at the flow level, there are also designs that route individual packets within a flow among multiple paths he 2015; raiciu 2010. 6.6.2 trends in data center networking data center networking is evolving rapidly, with the trends being driven by cost reduction, virtualization, physical constraints, modularity, and customization. cost reduction in order to reduce the cost of data centers, and at the same time improve their delay and throughput performance, as well as ease of expansion and deployment, internet cloud giants are continually deploying new data center network designs. although some of these designs are proprietary, others e.g., fb 2019 are explicitly open or described in the open literature e.g., greenberg 2009b; singh 2015. many important trends can thus be identified. figure 6.31 illustrates one of the most important trends in data center network ingthe emergence of a hierarchical, tiered network interconnecting the data center hosts. this hierarchy conceptually serves the same purpose as a single very, very!, large crossbar switch that we studied in section 4.2.2, allowing any host in the data center to communicate with any other host. but as we have seen, this tiered figure 6.31 highly interconnected data network topology12345 67 89 10 11 12 13 14 15 16server rackstor switchestier2 switchestier1 switches m06_kuro5469_08_ge_c06.indd 539 29042021 1946 540 chapter 6 the link layer and lans interconnection network has many advantages over a conceptual crossbar switch, including multiple paths from source to destination and the increased capacity due to multipath routing and reliability due to multiple switch and linkdisjoint paths between any two hosts. the data center interconnection network is comprised of a large number of small sized switches. for example, in googles jupiter datacenter fabric, one configuration has 48 links between the tor switch and its servers below, and connections up to 8 tier2 switches; a tier2 switch has links to 256 tor switches and links up to 16 tier1 switches singh 2015. in facebooks data center architecture, each tor switch connects up to four different tier2 switches each in a different spline plane, and each tier2 switch connects up to 4 of the 48 tier1 switches in its spline plane; there are four spline planes. tier1
and tier2 switches connect down to a larger, scalable number of tier2 or tor switches, respectively, below fb 2019. for some of the largest data center operators, these switches are being built inhouse from commodity, offtheshelf, merchant silicon greenberg 2009b; roy 2015; singh 2015 rather than being purchased from switch vendors. a multiswitch layered tiered, multistage interconnection network such as that in figure 6.31 and as implemented in the data center architectures discussed above is known as clos networks, named after charles clos, who studied such networks clos 1953 in the context of telephony switching. since then, a rich theory of clos networks has been developed, finding additional use in data center networking and in multiprocessor interconnection networks. centralized sdn control and management because a data center is managed by a single organization, it is perhaps natural that a number of the largest data center operators, including google, microsoft, and facebook, are embracing the notion of sdnlike logically centralized control. their architectures also reflect a clear separation of a data plane comprised of relatively simple, commodity switches and a softwarebased control plane, as we saw in section 5.5. due to the immensescale of their data centers, automated configuration and operational state management, as we encountered in section 5.7, are also crucial. virtualization virtualization has been a driving force for much of the growth of cloud computing and data center networks more generally. virtual machines vms decouple software running applications from the physical hardware. this decoupling also allows seamless migration of vms between physical servers, which might be located on different racks. standard ethernet and ip protocols have limitations in enabling the movement of vms while maintaining active network connections across servers. since all data center networks are managed by a single administrative authority, an elegant solution to the problem is to treat the entire data center network as a single, flat, layer2 network. recall that in a typical ethernet network, the arp protocol maintains the binding between the ip address and hardware mac address on an m06_kuro5469_08_ge_c06.indd 540 29042021 1946 6.6 data center networking 541 interface. to emulate the effect of having all hosts connect to a single switch, the arp mechanism is modified to use a dns style query system instead of a broadcast, and the directory maintains a mapping of the ip address assigned to a vm and which physical switch the vm is currently connected to in the data center network. scalable schemes that implement this basic design have been proposed in mysore 2009; greenberg 2009b and have been successfully deployed in modern data centers. physical constraints unlike the wide area internet, data center networks operate in environments that not only have very high capacity 40 gbps and 100 gbps links are now commonplace but also have extremely low delays microseconds. consequently, buffer sizes are small and congestion control protocols such as tcp and its variants do not scale well in data centers. in data centers, congestion control protocols have to react fast and operate in extremely
low loss regimes, as loss recovery and timeouts can lead to extreme inefficiency. several approaches to tackle this issue have been proposed and deployed, ranging from data centerspecific tcp variants alizadeh 2010 to implementing remote direct memory access rdma technologies on standard ethernet zhu 2015; moshref 2016; guo 2016. scheduling theory has also been applied to develop mechanisms that decouple flow scheduling from rate control, enabling very simple congestion control protocols while maintaining high utilization of the links alizadeh 2013; hong 2012. hardware modularity and customization another major trend is to employ shipping containerbased modular data centers mdcs youtube 2009; waldrop 2007. in an mdc, a factory builds, within a standard 12meter shipping container, a mini data center and ships the container to the data center location. each container has up to a few thousand hosts, stacked in tens of racks, which are packed closely together. at the data center location, multiple containers are interconnected with each other and also with the internet. once a prefabricated container is deployed at a data center, it is often difficult to service. thus, each container is designed for graceful performance degradation as components servers and switches fail over time, the container continues to operate but with degraded performance. when many components have failed and performance has dropped below a threshold, the entire container is removed and replaced with a fresh one. building a data center out of containers creates new networking challenges. with an mdc, there are two types of networks the containerinternal networks within each of the containers and the core network connecting each container guo 2009; farrington 2010. within each container, at the scale of up to a few thousand hosts, it is possible to build a fully connected network using inexpensive commodity gigabit ethernet switches. however, the design of the core network, interconnecting hundreds to thousands of containers while providing high hosttohost bandwidth across containers for typical workloads, remains a challenging problem. a hybrid m06_kuro5469_08_ge_c06.indd 541 29042021 1946 542 chapter 6 the link layer and lans electricaloptical switch architecture for interconnecting the containers is described in farrington 2010. another important trend is that large cloud providers are increasingly building or customizing just about everything that is in their data centers, including network adapters, switches routers, tors, software, and networking protocols greenberg 2015; singh 2015. another trend, pioneered by amazon, is to improve reliability with availability zones, which essentially replicate distinct data centers in different nearby buildings. by having the buildings nearby a few kilometers apart, transactional data can be synchronized across the data centers in the same availability zone while providing fault tolerance amazon 2014. many more innovations in data center design are likely to continue to come. 6.7 retrospective a day in the life of a web page request now that weve covered the link layer in this chapter, and the network, transport and application layers in earlier chapters, our journey down the protocol stack is complete! in the very beginning of this book section 1.1, we wrote much
of this book is concerned with computer network protocols, and in the first five chapters, weve certainly seen that this is indeed the case! before heading into the topical chapters in second part of this book, wed like to wrap up our journey down the protocol stack by taking an integrated, holistic view of the protocols weve learned about so far. one way then to take this big picture view is to identify the many many! protocols that are involved in satisfying even the simplest request downloading a web page. figure 6.32 illustrates our setting a student, bob, connects a laptop to his schools ethernet switch and downloads a web page say the home page of www.google.com. as we now know, theres a lot going on under the hood to satisfy this seemingly simple request. a wireshark lab at the end of this chapter examines trace files containing a number of the packets involved in similar scenarios in more detail. 6.7.1 getting started dhcp, udp, ip, and ethernet lets suppose that bob boots up his laptop and then connects it to an ethernet cable connected to the schools ethernet switch, which in turn is connected to the schools router, as shown in figure 6.32. the schools router is connected to an isp, in this example, comcast.net. in this example, comcast.net is providing the dns service for the school; thus, the dns server resides in the comcast network rather than the school network. well assume that the dhcp server is running within the router, as is often the case. when bob first connects his laptop to the network, he cant do anything e.g., download a web page without an ip address. thus, the first networkrelated m06_kuro5469_08_ge_c06.indd 542 29042021 1946 6.7 retrospective a d ay in the life of a web p age request 543 action taken by bobs laptop is to run the dhcp protocol to obtain an ip address, as well as other information, from the local dhcp server 1. the operating system on bobs laptop creates a dhcp request message section 4.3.3 and puts this message within a udp segment section 3.3 with destination port 67 dhcp server and source port 68 dhcp client. the udp segment is then placed within an ip datagram section 4.3.1 with a broadcast ip destination address 255.255.255.255 and a source ip address of 0.0.0.0, since bobs laptop doesnt yet have an ip address. 2. the ip datagram containing the dhcp request message is then placed within an ethernet frame section 6.4.2. the ethernet frame has a destina tion mac addresses of ffffffffffff so that the frame will be broadcast to all devices connected to the switch hopefully including a dhcp server; the frames source mac address is that of bobs laptop, 0016d323688a. 3. the broadcast ethernet frame containing the dhcp request is the first frame sent by bobs laptop to the ethernet switch. the switch broadcasts the incoming frame on all outgoing ports, including the port connected to the router.00226b451f1b 68.85.2.10016d323688a68.85.2.101comcast.netdns server68.87.71.226 www.google.comweb
server 64.233.169.105school network 68.80.2.024 comcast s network 68.80.0.013 google s network 64.233.160.01917 81318241417 figure 6.32 a day in the life of a web page request network setting and actions m06_kuro5469_08_ge_c06.indd 543 29042021 1946 544 chapter 6 the link layer and lans 4. the router receives the broadcast ethernet frame containing the dhcp request on its interface with mac address 00226b451f1b and the ip datagram is extracted from the ethernet frame. the datagrams broadcast ip destination address indicates that this ip datagram should be processed by upper layer protocols at this node, so the datagrams payload a udp segment is thus demultiplexed section 3.2 up to udp, and the dhcp request message is extracted from the udp segment. the dhcp server now has the dhcp request message. 5. lets suppose that the dhcp server running within the router can allocate ip addresses in the cidr section 4.3.3 block 68.85.2.024. in this example, all ip addresses used within the school are thus within comcasts address block. lets suppose the dhcp server allocates address 68.85.2.101 to bobs laptop. the dhcp server creates a dhcp ack message section 4.3.3 containing this ip address, as well as the ip address of the dns server 68.87.71.226, the ip address for the default gateway router 68.85.2.1, and the subnet block 68.85.2.024 equivalently, the network mask. the dhcp message is put inside a udp segment, which is put inside an ip datagram, which is put inside an ethernet frame. the ethernet frame has a source mac address of the routers interface to the home network 00226b451f1b and a destination mac address of bobs laptop 0016d323688a. 6. the ethernet frame containing the dhcp ack is sent unicast by the router to the switch. because the switch is selflearning section 6.4.3 and previously received an ethernet frame containing the dhcp request from bobs laptop, the switch knows to forward a frame addressed to 0016d323688a only to the output port leading to bobs laptop. 7. bobs laptop receives the ethernet frame containing the dhcp ack, extracts the ip datagram from the ethernet frame, extracts the udp segment from the ip datagram, and extracts the dhcp ack message from the udp segment. bobs dhcp client then records its ip address and the ip address of its dns server. it also installs the address of the default gateway into its ip forwarding table section 4.1. bobs laptop will send all datagrams with destination address outside of its subnet 68.85.2.024 to the default gateway. at this point, bobs laptop has initialized its networking components and is ready to begin processing the web page fetch. note that only the last two dhcp steps of the four presented in chapter 4 are actually necessary. 6.7.2 still getting started dns and arp when bob types the url for www.google.com into his web browser, he begins the long chain of events that will eventually result in googles home page being displayed by his web browser. bobs web browser begins the process by creating a tcp socket section 2.7
that will be used to send the http request section 2.2 to www.google.com. in order to create the socket, bobs laptop will need to know m06_kuro5469_08_ge_c06.indd 544 29042021 1946 6.7 retrospective a d ay in the life of a web p age request 545 the ip address of www.google.com. we learned in section 2.5, that the dns protocol is used to provide this nametoipaddress translation service. 8. the operating system on bobs laptop thus creates a dns query message section 2.5.3, putting the string www.google.com in the question section of the dns message. this dns message is then placed within a udp segment with a destination port of 53 dns server. the udp segment is then placed within an ip datagram with an ip destination address of 68.87.71.226 the address of the dns server returned in the dhcp ack in step 5 and a source ip address of 68.85.2.101. 9. bobs laptop then places the datagram containing the dns query message in an ethernet frame. this frame will be sent addressed, at the link layer to the gateway router in bobs schools network. however, even though bobs laptop knows the ip address of the schools gateway router 68.85.2.1 via the dhcp ack message in step 5 above, it doesnt know the gateway routers mac address. in order to obtain the mac address of the gateway router, bobs laptop will need to use the arp protocol section 6.4.1. 10. bobs laptop creates an arp query message with a target ip address of 68.85.2.1 the default gateway, places the arp message within an ethernet frame with a broadcast destination address ffffffffffff and sends the ethernet frame to the switch, which delivers the frame to all connected devices, including the gateway router. 11. the gateway router receives the frame containing the arp query message on the interface to the school network, and finds that the target ip address of 68.85.2.1 in the arp message matches the ip address of its interface. the gateway router thus prepares an arp reply, indicating that its mac address of 00226b451f1b corresponds to ip address 68.85.2.1. it places the arp reply message in an ethernet frame, with a destination address of 0016d323688a bobs laptop and sends the frame to the switch, which delivers the frame to bobs laptop. 12. bobs laptop receives the frame containing the arp reply message and extracts the mac address of the gateway router 00226b451f1b from the arp reply message. 13. bobs laptop can now finally! address the ethernet frame containing the dns query to the gateway routers mac address. note that the ip datagram in this frame has an ip destination address of 68.87.71.226 the dns server, while the frame has a destination address of 00226b451f1b the gateway router. bobs laptop sends this frame to the switch, which delivers the frame to the gateway router. 6.7.3 still getting started intradomain routing to the dns server 14. the gateway router receives the frame and extracts the ip datagram containing the dns query. the router
looks up the destination address of this datagram m06_kuro5469_08_ge_c06.indd 545 29042021 1946 546 chapter 6 the link layer and lans 68.87.71.226 and determines from its forwarding table that the datagram should be sent to the leftmost router in the comcast network in figure 6.32. the ip datagram is placed inside a linklayer frame appropriate for the link connecting the schools router to the leftmost comcast router and the frame is sent over this link. 15. the leftmost router in the comcast network receives the frame, extracts the ip datagram, examines the datagrams destination address 68.87.71.226 and determines the outgoing interface on which to forward the datagram toward the dns server from its forwarding table, which has been filled in by comcasts intradomain protocol such as rip, ospf or isis, section 5.3 as well as the internets interdomain protocol, bgp section 5.4. 16. eventually the ip datagram containing the dns query arrives at the dns server. the dns server extracts the dns query message, looks up the name www.google.com in its dns database section 2.5 , and finds the dns resource record that contains the ip address 64.233.169.105 for www.google.com. assuming that it is currently cached in the dns server. recall that this cached data originated in the authoritative dns server section 2.5.2 for google.com. the dns server forms a dns reply message containing this hostnametoipaddress mapping, and places the dns reply message in a udp segment, and the segment within an ip datagram addressed to bobs laptop 68.85.2.101. this datagram will be forwarded back through the comcast network to the schools router and from there, via the ethernet switch to bobs laptop. 17. bobs laptop extracts the ip address of the server www.google.com from the dns message. finally, after a lot of work, bobs laptop is now ready to con tact the www.google.com server! 6.7.4 web clientserver interaction tcp and http 18. now that bobs laptop has the ip address of www.google.com, it can create the tcp socket section 2.7 that will be used to send the http get message section 2.2.3 to www.google.com. when bob creates the tcp socket, the tcp in bobs laptop must first perform a threeway handshake section 3.5.6 with the tcp in www.google.com. bobs laptop thus first creates a tcp syn segment with destination port 80 for http, places the tcp segment inside an ip datagram with a destination ip address of 64.233.169.105 www.google.com, places the datagram inside a frame with a destination mac address of 00226b451f1b the gateway router and sends the frame to the switch. 19. the routers in the school network, comcasts network, and googles network forward the datagram containing the tcp syn toward www.google.com, using the forwarding table in each router, as in steps 1416 above. recall that the router forwarding table entries governing forwarding of packets over the interdomain link between the comcast and google networks are determined by the bgp protocol chapter 5. m06_kuro5469_08_ge_c06.indd 546 29042021 1946 6.7 retrospective a d ay in the life of a web p
age request 547 20. eventually, the datagram containing the tcp syn arrives at www.google.com. the tcp syn message is extracted from the datagram and demultiplexed to the welcome socket associated with port 80. a connection socket section 2.7 is created for the tcp connection between the google http server and bobs laptop. a tcp synack section 3.5.6 segment is generated, placed inside a datagram addressed to bobs laptop, and finally placed inside a linklayer frame appropriate for the link connecting www.google.com to its firsthop router. 21. the datagram containing the tcp synack segment is forwarded through the google, comcast, and school networks, eventually arriving at the ethernet controller in bobs laptop. the datagram is demultiplexed within the operating system to the tcp socket created in step 18, which enters the connected state. 22. with the socket on bobs laptop now finally! ready to send bytes to www.google.com, bobs browser creates the http get message section 2.2.3 containing the url to be fetched. the http get message is then written into the socket, with the get message becoming the payload of a tcp segment. the tcp segment is placed in a datagram and sent and delivered to www.google.com as in steps 1820 above. 23. the http server at www.google.com reads the http get message from the tcp socket, creates an http response message section 2.2, places the requested web page content in the body of the http response message, and sends the message into the tcp socket. 24. the datagram containing the http reply message is forwarded through the google, comcast, and school networks, and arrives at bobs laptop. bobs web browser program reads the http response from the socket, extracts the html for the web page from the body of the http response, and finally finally! displays the web page! our scenario above has covered a lot of networking ground! if youve understood most or all of the above example, then youve also covered a lot of ground since you first read section 1.1, where we wrote much of this book is concerned with computer network protocols and you may have wondered what a protocol actually was! as detailed as the above example might seem, weve omitted a number of possible additional protocols e.g., nat running in the schools gateway router, wireless access to the schools network, security protocols for accessing the school network or encrypting segments or datagrams, network management protocols, and considerations web caching, the dns hierarchy that one would encounter in the public internet. well cover a number of these topics and more in the second part of this book. lastly, we note that our example above was an integrated and holistic, but also very nuts and bolts, view of many of the protocols that weve studied in the first part of this book. the example focused more on the how than the why. for a broader, more reflective view on the design of network protocols in general, you might want to reread the architectural principles of
the internet in section 4.5, and the references therein. m06_kuro5469_08_ge_c06.indd 547 29042021 1946 548 chapter 6 the link layer and lans 6.8 summary in this chapter, weve examined the link layerits services, the principles underly ing its operation, and a number of important specific protocols that use these principles in implementing linklayer services. we saw that the basic service of the link layer is to move a networklayer data gram from one node host, switch, router, wifi access point to an adjacent node. we saw that all linklayer protocols operate by encapsulating a networklayer datagram within a linklayer frame before transmitting the frame over the link to the adjacent node. beyond this common framing function, however, we learned that different linklayer protocols provide very different link access, delivery, and transmission services. these differences are due in part to the wide variety of link types over which linklayer protocols must operate. a simple pointtopoint link has a single sender and receiver communicating over a single wire. a multiple access link is shared among many senders and receivers; consequently, the linklayer protocol for a multiple access channel has a protocol its multiple access protocol for coordinating link access. in the case of mpls, the link connecting two adjacent nodes for example, two ip routers that are adjacent in an ip sensethat they are nexthop ip routers toward some destination may actually be a network in and of itself. in one sense, the idea of a network being considered as a link should not seem odd. a telephone link connecting a home modemcomputer to a remote modemrouter, for example, is actually a path through a sophisticated and complex telephone network. among the principles underlying linklayer communication, we examined error detection and correction techniques, multiple access protocols, linklayer addressing, virtualization vlans, and the construction of extended switched lans and data center networks. much of the focus today at the link layer is on these switched networks. in the case of error detectioncorrection, we examined how it is possible to add additional bits to a frames header in order to detect, and in some cases correct, bitflip errors that might occur when the frame is transmitted over the link. we covered simple parity and checksumming schemes, as well as the more robust cyclic redundancy check. we then moved on to the topic of multiple access protocols. we identified and studied three broad approaches for coordinating access to a broadcast channel channel partitioning approaches tdm, fdm, random access approaches the aloha protocols and csma protocols, and takingturns approaches polling and token passing. we studied the cable access network and found that it uses many of these multiple access methods. we saw that a consequence of having multiple nodes share a single broadcast channel was the need to provide node addresses at the link layer. we learned that linklayer addresses were quite different from networklayer addresses and that, in the case of the internet, a special proto col arpthe address resolution protocol is used to translate between
these two forms of addressing and studied the hugely successful ethernet protocol in detail. we then examined how nodes sharing a broadcast channel form a lan and how multiple lans can be connected together to form larger lansall without the intervention m06_kuro5469_08_ge_c06.indd 548 29042021 1946 homework problems and questions 549 of networklayer routing to interconnect these local nodes. we also learned how multiple virtual lans can be created on a single physical lan infrastructure. we ended our study of the link layer by focusing on how mpls networks pro vide linklayer services when they interconnect ip routers and an overview of the network designs for todays massive data centers. we wrapped up this chapter and indeed the first five chapters by identifying the many protocols that are needed to fetch a simple web page. having covered the link layer, our journey down the pro tocol stack is now over! certainly, the physical layer lies below the link layer, but the details of the physical layer are probably best left for another course e.g., in communication theory, rather than computer networking. we have, however, touched upon several aspects of the physical layer in this chapter and in chapter 1 our discussion of physical media in section 1.2. well consider the physical layer again when we study wireless link characteristics in the next chapter. although our journey down the protocol stack is over, our study of computer networking is not yet at an end. in the following three chapters, we cover wireless networking, network security, and multimedia networking. these four topics do not fit conveniently into any one layer; indeed, each topic crosscuts many layers. understanding these topics billed as advanced topics in some networking texts thus requires a firm foundation in all layers of the protocol stacka foundation that our study of the link layer has now completed! homework problems and questions chapter 6 review questions sections 6.16.2 r1. what is framing in link layer? r2. if all the links in the internet were to provide reliable delivery service, would the tcp reliable delivery service be redundant? why or why not? r3. name three errordetection strategies employed by link layer. section 6.3 r4. suppose two nodes start to transmit at the same time a packet of length l over a broadcast channel of rate r. denote the propagation delay between the two nodes as dprop. will there be a collision if dprop6lr? why or why not? r5. in section 6.3, we listed four desirable characteristics of a broadcast channel. which of these characteristics does slotted aloha have? which of these characteristics does token passing have? m06_kuro5469_08_ge_c06.indd 549 29042021 1946 550 chapter 6 the link layer and lans r6. in csmacd, after the fifth collision, what is the probability that a node chooses k4? the result k4 corresponds to a delay of how many seconds on a 10 mbps ethernet? r7. while tdm and fdm assign time slots and frequencies, cdma assigns a different code to each node. explain the basic principle
in which cdma works. r8. why does collision occur in csma, if all nodes perform carrier sensing before transmission? section 6.4 r9. how big is the mac address space? the ipv4 address space? the ipv6 address space? r10. suppose nodes a, b, and c each attach to the same broadcast lan through their adapters. if a sends thousands of ip datagrams to b with each encapsulating frame addressed to the mac address of b, will cs adapter process these frames? if so, will cs adapter pass the ip datagrams in these frames to the network layer c? how would your answers change if a sends frames with the mac broadcast address? r11. ieee manages the mac address space, allocating chunks of it to companies manufacturing network adapters. the first half of the bits of the addresses in these chunks are fixed, ensuring that the address space is unique. how long will a chunk last for a company manufacturing 1,000,000 network adapters per year? r12. for the network in figure 6.19, the router has two arp modules, each with its own arp table. is it possible that the same mac address appears in both tables? r13. what is a hub used for? r14. consider figure 6.15. how many subnetworks are there, in the addressing sense of section 4.3? r15. each host and router has an arp table in its memory. what are the contents of this table? r16. the ethernet frame begins with an 8byte preamble field. the purpose of the first 7 bytes is to wake up the receiving adapters and to synchronize their clocks to that of the senders clock. what are the contents of the 8 bytes? what is the purpose of the last byte? problems p1. suppose the information content of a packet is the bit pattern 1010 0111 0101 1001 and an even parity scheme is being used. what would the value of the field containing the parity bits be for the case of a twodimensional parity scheme? your answer should be such that a minimumlength checksum field is used. m06_kuro5469_08_ge_c06.indd 550 29042021 1946 problems 551 p2. for the twodimensional parity check matrix below, show that a. a singlebit error that can be corrected. b. a doublebit error that can be detected, but not corrected. 0101 1010 0101 1010 p3. suppose the information portion of a packet contains six bytes consisting of the 8bit unsigned binary ascii representation of string chksum; compute the internet checksum for this data. p4. compute the internet checksum for each of the following a. the binary representation of the numbers 1 through 6. b. the ascii representation of the letters c through h uppercase. c. the ascii representation of the letters c through h lowercase. p5. consider the generator, g1001, and suppose that d has the value 11000111010. what is the value of r? p6. rework the previous problem, but suppose that d has the valuea. 01101010101.b. 11111010101.c. 10001100001. p7. in this problem, we explore some of the properties of the
crc. for the generator g 1001 given in section 6.2.3, answer the following questions. a. why can it detect any single bit error in data d? b. can the above g detect any odd number of bit errors? why? p8. in section 6.3, we provided an outline of the derivation of the efficiency of slotted aloha. in this problem well complete the derivation. a. recall that when there are n active nodes, the efficiency of slotted aloha is np1pn1. find the value of p that maximizes this expression. b. using the value of p found in a, find the efficiency of slotted aloha by letting n approach infinity. hint 11nn approaches 1e as n approaches infinity. p9. show that the maximum efficiency of pure aloha is 12e. note this problem is easy if you have completed the problem above! p 10. consider two nodes, a and b, that use the slotted aloha protocol to contend for a channel. suppose node a has more data to transmit than node b, m06_kuro5469_08_ge_c06.indd 551 29042021 1946 552 chapter 6 the link layer and lans and node as retransmission probability pa is greater than node bs retrans mission probability, pb. a. provide a formula for node as average throughput. what is the total efficiency of the protocol with these two nodes? b. if pa2pb, is node as average throughput twice as large as that of node b? why or why not? if not, how can you choose pa and pb to make that happen? c. in general, suppose there are n nodes, among which node a has retransmission probability 2p and all other nodes have retransmission probability p. provide expressions to compute the average throughputs of node a and of any other node. p11. suppose four active nodesnodes a, b, c and dare competing for access to a channel using slotted aloha. assume each node has an infinite number of packets to send. each node attempts to transmit in each slot with probability p. the first slot is numbered slot 1, the second slot is numbered slot 2, and so on. a. what is the probability that node a succeeds for the first time in slot 4? b. what is the probability that some node either a, b, c or d succeeds in slot 5? c. what is the probability that the first success occurs in slot 4? d. what is the efficiency of this fournode system? p12. graph the efficiency of slotted aloha and pure aloha as a function of p for the following values of n a. n10. b. n30. c. n50. p13. consider a broadcast channel with n nodes and a transmission rate of r bps. suppose the broadcast channel uses polling with an additional polling node for multiple access. suppose the amount of time from when a node completes transmission until the subsequent node is permitted to transmit that is, the polling delay is dpoll. suppose that within a polling round, a given node is allowed to transmit at most
q bits. what is the maximum throughput of the broadcast channel? p14. consider three lans interconnected by two routers, as shown in figure 6.33. a. assign ip addresses to all of the interfaces. for subnet 1 use addresses of the form 192.168.1.xxx; for subnet 2 uses addresses of the form 192.168.2.xxx; and for subnet 3 use addresses of the form 192.168.3.xxx. b. assign mac addresses to all of the adapters. m06_kuro5469_08_ge_c06.indd 552 29042021 1946 problems 553 c. consider sending an ip datagram from host e to host b. suppose all of the arp tables are up to date. enumerate all the steps, as done for the singlerouter example in section 6.4.1. d. repeat c, now assuming that the arp table in the sending host is empty and the other tables are up to date. p15. consider figure 6.33. now we replace the router between subnets 1 and 2 with a switch s1, and label the router between subnets 2 and 3 as r1. a. consider sending an ip datagram from host e to host f. will host e ask router r1 to help forward the datagram? why? in the ethernet frame containing the ip datagram, what are the source and destination ip and mac addresses? b. suppose e would like to send an ip datagram to b, and assume that es arp cache does not contain bs mac address. will e perform an arp query to find bs mac address? why? in the ethernet frame containing the ip datagram destined to b that is delivered to router r1, what are the source and destination ip and mac addresses? c. suppose host a would like to send an ip datagram to host b, and neither as arp cache contains bs mac address nor does bs arp cache contain as mac address. further suppose that the switch s1s forwarding table contains entries for host b and router r1 only. thus, a will broadcast an arp request message. what actions will switch s1 perform once it receives the arp request message? will router r1 also receive this arp request message? if figure 6.33 three subnets, interconnected by routerssubnet 3e fc subnet 2da b subnet 1 m06_kuro5469_08_ge_c06.indd 553 29042021 1946 554 chapter 6 the link layer and lans so, will r1 forward the message to subnet 3? once host b receives this arp request message, it will send back to host a an arp response message. but will it send an arp query message to ask for as mac address? why? what will switch s1 do once it receives an arp response message from host b? p16. consider the previous problem, but suppose now that the router between sub nets 2 and 3 is replaced by a switch. answer questions ac in the previous problem in this new context. p17. recall that with the csmacd protocol, the network adapter waits k 512 bit times after a collision, where k is drawn randomly. for k115, how long does the adapter wait until returning to step
2 for a. a 10 mbps broadcast channel? b. a 100 mbps broadcast channel? p18. suppose nodes a and b are on the same 12 mbps broadcast channel, and the propagation delay between the two nodes is 316 bit times. suppose csmacd and ethernet packets are used for this broadcast channel. suppose node a begins transmitting a frame and, before it finishes, node b begins transmitting a frame. can a finish transmitting before it detects that b has transmitted? why or why not? if the answer is yes, then a incorrectly believes that its frame was successful transmitted without a collision. hint suppose at time t0 bits, a begins transmitting a frame. in the worst case, atransmits a minimumsized frame of 51264 bit times. so a would finish transmitting the frame at t51264 bit times. thus, the answer is no, if bs signal reaches a before bit time t51264 bits. in the worst case, when does bs signal reach a? p19. suppose nodes a and b are on the same 10 mbps broadcast channel, and the propagation delay between the two nodes is 245 bit times. suppose a and b send ethernet frames at the same time, the frames collide, and then a and b choose different values of k in the csmacd algorithm. assuming no other nodes are active, can the retransmissions from a and b collide? for our purposes, it suffices to work out the following example. suppose a and b begin transmission at t0 bit times. they both detect collisions at t245 t bit times. suppose ka0 and kb1. at what time does b schedule its retransmission? at what time does a begin transmission? note the nodes must wait for an idle channel after returning to step 2see protocol. at what time does as signal reach b? does b refrain from transmitting at its scheduled time? p20. in this problem, you will derive the efficiency of a csmacdlike multiple access protocol. in this protocol, time is slotted and all adapters are synchronized to the slots. unlike slotted aloha, however, the length of a slot in seconds is much less than a frame time the time to transmit a frame. let s be the length of a slot. suppose all frames are of constant length lkrs, where r is the transmission rate of the channel and k is a large integer. m06_kuro5469_08_ge_c06.indd 554 29042021 1946 suppose there are n nodes, each with an infinite number of frames to send. we also assume that dprop6s, so that all nodes can detect a collision before the end of a slot time. the protocol is as follows if, for a given slot, no node has possession of the channel, all nodes contend for the channel; in particular, each node transmits in the slot with probability p. if exactly one node transmits in the slot, that node takes possession of the channel for the subsequent k1 slots and transmits its entire frame. if some node has possession of the channel, all other
nodes refrain from transmitting until the node that possesses the channel has finished transmitting its frame. once this node has transmitted its frame, all nodes contend for the channel. note that the channel alternates between two states the productive state, which lasts exactly k slots, and the nonproductive state, which lasts for a random number of slots. clearly, the channel efficiency is the ratio of kkx, where x is the expected number of consecutive unproductive slots. a. for fixed n and p, determine the efficiency of this protocol. b. for fixed n, determine the p that maximizes the efficiency. c. using the p which is a function of n found in b, determine the effi ciency as n approaches infinity. d. show that this efficiency approaches 1 as the frame length becomes large. p21. consider figure 6.33 in problem p14. provide mac addresses and ip addresses for the interfaces at host a, both routers, and host f. suppose host a sends a datagram to host f. give the source and destination mac addresses in the frame encapsulating this ip datagram as the frame is transmitted i from a to the left router, ii from the left router to the right router, iii from the right router to f. also give the source and destination ip addresses in the ip datagram encapsulated within the frame at each of these points in time. p22. suppose now that the leftmost router in figure 6.33 is replaced by a switch. hosts a, b, c, and d and the right router are all starconnected into this switch. give the source and destination mac addresses in the frame encapsulating this ip datagram as the frame is transmitted i from a to the switch, ii from the switch to the right router, iii from the right router to f. also give the source and destination ip addresses in the ip datagram encapsulated within the frame at each of these points in time. p23. consider figure 5.15. suppose that all links are 120 mbps. what is the maximum total aggregate throughput that can be achieved among 12 hosts 4 in each department and 2 servers in this network? you can assume that any host or server can send to any other host or server. why? p24. suppose the three departmental switches in figure 5.15 are replaced by hubs. all links are 120 mbps. now answer the questions posed in problem p23.problems 555 m06_kuro5469_08_ge_c06.indd 555 29042021 1946 556 chapter 6 the link layer and lans p25. suppose that all the switches in figure 5.15 are replaced by hubs. all links are 120 mbps. now answer the questions posed in problem p23. p26. lets consider the operation of a learning switch in the context of a network in which 6 nodes labeled a through f are star connected into an ethernet switch. suppose that i b sends a frame to e, ii e replies with a frame to b, iii a sends a frame to b, iv b replies with
a frame to a. the switch table is initially empty. show the state of the switch table before and after each of these events. for each of these events, identify the links on which the transmitted frame will be forwarded, and briefly justify your answers. p27. in this problem, we explore the use of small packets for voiceoverip appli cations. one of the drawbacks of a small packet size is that a large fraction of link bandwidth is consumed by overhead bytes. to this end, suppose that the packet consists of p bytes and 5 bytes of header. a. consider sending a digitally encoded voice source directly. suppose the source is encoded at a constant rate of 128 kbps. assume each packet is entirely filled before the source sends the packet into the network. the time required to fill a packet is the packetization delay. in terms of l, determine the packetization delay in milliseconds. b. packetization delays greater than 20 msec can cause a noticeable and unpleasant echo. determine the packetization delay for l1,500 bytes roughly corresponding to a maximumsized ethernet packet and for l50 corresponding to an atm packet. c. calculate the storeandforward delay at a single switch for a link rate of r622 mbps for l1,500 bytes, and for l50 bytes. d. comment on the advantages of using a small packet size. p28. consider the single switch vlan in figure 6.25, and assume an external router is connected to switch port 1. assign ip addresses to the ee and cs hosts and router interface. trace the steps taken at both the network layer and the link layer to transfer an ip datagram from an ee host to a cs host hint reread the discussion of figure 6.19 in the text. p29. consider the mpls network shown in figure 6.29, and suppose that rout ers r5 and r6 are now mpls enabled. suppose that we want to perform traffic engineering so that packets from r6 destined for a are switched to a via r6r4r3r1, and packets from r5 destined for a are switched via r5r4r2r1. show the mpls tables in r5 and r6, as well as the modified table in r4, that would make this possible. p30. consider again the same scenario as in the previous problem, but suppose that packets from r6 destined for d are switched via r6r4r3, while packets from r5 destined to d are switched via r4r2r1r3. show the mpls tables in all routers that would make this possible. p31. in this problem, you will put together much of what you have learned about internet protocols. suppose you walk into a room, connect to ethernet, and m06_kuro5469_08_ge_c06.indd 556 29042021 1946 wireshark labs 802.11 ethernet 557 want to download a web page. what are all the protocol steps that take place, starting from powering on your pc to getting the web page? assume there is nothing in our dns or browser caches when you power on your pc. hint the steps include the use of
ethernet, dhcp, arp, dns, tcp, and http protocols. explicitly indicate in your steps how you obtain the ip and mac addresses of a gateway router. p32. consider the data center network with hierarchical topology in figure 6.30. suppose now there are 80 pairs of flows, with ten flows between the first and ninth rack, ten flows between the second and tenth rack, and so on. further suppose that all links in the network are 10 gbps, except for the links between hosts and tor switches, which are 1 gbps. a. each flow has the same data rate; determine the maximum rate of a flow. b. for the same traffic pattern, determine the maximum rate of a flow for the highly interconnected topology in figure 6.31. c. now suppose there is a similar traffic pattern, but involving 20 hosts on each rack and 160 pairs of flows. determine the maximum flow rates for the two topologies. p33. consider the hierarchical network in figure 6.30 and suppose that the data center needs to support email and video distribution among other applications. suppose four racks of servers are reserved for email and four racks are reserved for video. for each of the applications, all four racks must lie below a single tier2 switch since the tier2 to tier1 links do not have sufficient bandwidth to support the intraapplication traffic. for the email application, suppose that for 99.9 percent of the time only three racks are used, and that the video application has identical usage patterns. a. for what fraction of time does the email application need to use a fourth rack? how about for the video application? b. assuming email usage and video usage are independent, for what fraction of time do equivalently, what is the probability that both applications need their fourth rack? c. suppose that it is acceptable for an application to have a shortage of servers for 0.001 percent of time or less causing rare periods of performance degradation for users. discuss how the topology in figure 6.31 can be used so that only seven racks are collectively assigned to the two applications assuming that the topology can support all the traffic. wireshark labs 802.11 ethernet at the companion website for this textbook, httpwww.pearsonglobaleditions.com, youll find a wireshark lab that examines the operation of the ieee 802.3 protocol and the wireshark frame format. a second wireshark lab examines packet traces taken in a home network scenario. m06_kuro5469_08_ge_c06.indd 557 29042021 1946 558albert greenbergan interview with albert greenberg is microsoft corporate vice president for azure networking. he leads development for the azure networking team, which is responsible for networking rd at microsoft within and across data centers and edge sites; global terrestrial and subsea networks; optical networking; fpga and smartnic offloads; access and hybrid cloud networking; host networking and network virtualization; application load balancers and network virtual appliances; network services and analytics; security services; container networking; content distribution networks; edge networking including application acceleration and 5g, and first party networks. to meet
the challenges of agility and quality that comes with cloud scale, his team has developed and embraced custom hardware, machine learning, and open source. albert moved to microsoft in 2007 to innovate on cloud and bring networking to the host network virtualization, ideas that appeared, among many, in his vl2 paper, and which underly cloud networking today. prior to joining microsoft, albert worked at bell labs and att labs as an att fellow. he helped build the systems and tools that run atts networks, and pioneered the architecture and systems at the foundations of softwaredefined networking. he holds an ab in mathematics from dartmouth college and a phd in computer science from the university of washington. albert is a member of the national academy of engineering, and an acm fellow. he has received the ieee koji kobayashi computer and communication award, acm sigcomm award, and acm sigcomm and sigmetrics test of time paper awards. albert and wife kathryn are proud parents of four daughters. he grew up in new orleans. while the seattle seahawks are his team, he cannot shake his fondness for the saints. m06_kuro5469_08_ge_c06.indd 558 29042021 1946 559 what brought you to specialize in networking? ive always liked solving realworld problems, and also liked mathematics. ive found that the field of networking has lots of room and scope to do both. that mix was very appealing to me. while working on a phd at the university of washington, i benefited from the influence of ed lazowska on the systems side, and richard ladner and martin tompa on the mathematical and theoretical side. one of my ms course projects was to get two machines from the same vendor to talk to each other. now it seems you cant stop machines from communicating! do you have any advice for students entering the networkinginternet field? the face of networking is changing. its becoming a very diverse, inclusive and open environment. i mean that in two ways. first, we will see far much more diversity among our network developers and researchers, including women and other underrepresented groups in technology. im proud of the diversity and inclusivity of the team at microsoft, and my earlier teams at att. diversity makes us more resilient, better able to adapt to change, and makes our decisions better. second, one can bring a diversity of technical skills and interests to networking. those interests might be in architecture, programming languages, optics, formal methods, data science, ai, or in fault tolerant and reliable system design. open source systems are having enormous impact. sonic, a linuxbased an open source initiative for networking operating systems, is a great example. read this book, and bring your whole set of skills, experience and knowledge set to creating the networks of the future. sdn and disaggregation brings diversity and openness. so exciting. can you describe one or two of the most exciting projects you have worked on during your career? what were the biggest challenges? the cloud is by far the biggest thing to
come along in a long time. the challenges there are head and shoulders above other system challenges ive worked on, in part because the cloud incorporate so many aspects of systems. cloud scenarios stretch tremendously the challenge of networking. traditional networking technology is only part of it; in practice today theres operating systems and distributed systems, architecture, performance, security, reliability, machine learning, data science, and managementthe whole stack. if we used to think of these individual areas as gardens, we can think of the cloud as a farm made up of all of these wonderful gardens. and the operational concerns of designing, monitoring and managing an ultrareliable globalscale system are crucial, as the cloud provides critically important infrastructure for government, industry, education and more. all of that has to be rock solid; it needs to be secure; it needs to be trustworthy. software is, of course, key to effectively monitoring and managing such a massive cloud. here, sdn plays the central role in managing and provisioning at scale, creating, in essence, a softwaredefined data center. software allows us to also innovate rapidly. m06_kuro5469_08_ge_c06.indd 559 29042021 1946 560 how do you envision the future of networking and the internet? what major challenges obstacles do you think lie ahead in their development, particularly in the areas of data center networking, and edge networks? ive already talked about cloud, and we are just say 10 into its evolution. yet, its clear that the division of work in the endtoend system will be an increasingly important issue. how much computation and storage will happen in the application and at the endhost? how much will happen in cloud components at the networks edge, at or near the end host or container? and how much will happen in the data centers themselves. how will all of this be orchestrated? well see cloud computing being pushed closer to the edge and well see horizontal growtha richer endtoend computingdatanetworking ecosystem not just growth, say within a data center. this will be an area of great innovation. 5g wireless will be an important part of this mix. who has inspired you professionally? ive learned a tremendous amount, at both microsoft and att, from customers and from the live site. interacting with engineers inspires me, for their passion for dev and devops of the entire lifecycle invention to development to deployment to ultimate decommission of operational services and systems. these are the people who know architecture and systems from end to end, inside out. theyre great to work with and have so much insight, experience and knowledge to share, whether that be microsofts azure cloud or earlier in my career atts networks. ive also loved working with the researchers who have established some of the principles underlying the design and management of these atscale systems. m06_kuro5469_08_ge_c06.indd 560 29042021 1946 in the telephony world, the past 25 years have been the golden years of cellular telephony. the number of worldwide mobile cellular subscribers increased from 34 million in 1993 to 8.3
billion subscribers in 2019. there are now a larger number of mobile phone subscriptions than there are people on our planet. the many advantages of cell phones are evident to allanywhere, anytime, untethered access to the global telephone network via a highly portable lightweight device. more recently, smartphones, tablets, and laptops have become wirelessly connected to the internet via a cellular or wifi network. and increasingly, devices such as gaming consoles, thermostats, home security systems, home appliances, watches, eye glasses, cars, traffic control systems and more are being wirelessly connected to the internet. from a networking standpoint, the challenges posed by networking these wire less and mobile devices, particularly at the link layer and the network layer, are so different from traditional wired computer networks that an individual chapter devoted to the study of wireless and mobile networks i.e., this chapter is appropriate. well begin this chapter with a discussion of mobile users, wireless links, and networks, and their relationship to the larger typically wired networks to which they connect. well draw a distinction between the challenges posed by the wireless nature of the communication links in such networks, and by the mobility that these wireless links enable. making this important distinctionbetween wireless and mobilitywill allow us to better isolate, identify, and master the key concepts in each area. we will begin with an overview of wireless access infrastructure and associ ated terminology. well then consider the characteristics of this wireless link in 7chapter wireless and mobile networks 561 m07_kuro5469_08_ge_c07.indd 561 29042021 1519 562 chapter 7 wireless and mobile networks section 7.2. we include a brief introduction to code division multiple access cdma, a sharedmedium access protocol that is often used in wireless networks, in section 7.2. in section 7.3, well examine the linklevel aspects of the ieee 802.11 wifi wireless lan standard in some depth; well also say a few words about bluetooth wireless personal area networks. in section 7.4, well provide an overview of cellular internet access, including 4g and emerging 5g cellular technologies that provide both voice and highspeed internet access. in section 7.5, well turn our attention to mobility, focusing on the problems of locating a mobile user, routing to the mobile user, and handing over the mobile user who dynamically moves from one point of attachment to the network to another. well examine how these mobility services are implemented in the 4g5g cellular networks, and the in the mobile ip standard in section 7.6. finally, well consider the impact of wireless links and mobility on transportlayer protocols and networked applications in section 7.7. 7.1 introduction figure 7.1 shows the setting in which well consider the topics of wireless data com munication and mobility. well begin by keeping our discussion general enough to cover a wide range of networks, including both wireless lans such as wifi and 4g and 5g cellular networks; well drill down into a more detailed discussion of specific wireless architectures in later sections. we can identify the following elements in a wireless
network wireless hosts. as in the case of wired networks, hosts are the endsystem devices that run applications. a wireless host might be a smartphone, tablet, or laptop, or it could be an internet of things iot device such as a sensor, appliance, automobile, or any other of the myriad devices being connected to the internet. the hosts themselves may or may not be mobile. wireless links. a host connects to a base station defined below or to another wireless host through a wireless communication link. different wireless link technologies have different transmission rates and can transmit over different distances. figure 7.2 shows two key characteristics, link transmission rates and coverage ranges, of the more popular wireless network standards. the figure is only meant to provide a rough idea of these characteristics. for example, some of these types of networks are only now being deployed, and some link rates can increase or decrease beyond the values shown depending on distance, channel conditions, and the number of users in the wireless network. well cover these standards later in the first half of this chapter; well also consider other wireless link characteristics such as their bit error rates and the causes of bit errors in section 7.2. m07_kuro5469_08_ge_c07.indd 562 29042021 1519 7.1 introduction 563 in figure 7.1, wireless links connect wireless hosts located at the edge of the network into the larger network infrastructure. we hasten to add that wireless links are also sometimes used within a network to connect routers, switches, and other network equipment. however, our focus in this chapter will be on the use of wireless communication at the network edge, as it is here that many of the most exciting technical challenges, and most of the growth, are occurring. base station. the base station is a key part of the wireless network infrastructure. unlike the wireless host and wireless link, a base station has no obvious counterpart in a wired network. a base station is responsible for sending and receiving data e.g., packets to and from a wireless host that is associated with that base station. a base station will often be responsible for coordinating the transmission of multiple wireless hosts with which it is associated. when we say a wireless host is associated with a base station, we mean that 1 the host is within the wireless communication distance of the base station, and 2 the host uses that base station to relay data between it the host and the larger network. cell towers in cellular networks and access points in 802.11 wireless lans are examples of base stations.figure 7.1 elements of a wireless networknetwork infrastructure key wireless access point coverage ar eawireless host wireless host in motion m07_kuro5469_08_ge_c07.indd 563 29042021 1519 564 chapter 7 wireless and mobile networks in figure 7.1, the base station is connected to the larger network e.g., the internet, corporate or home network, thus functioning as a linklayer relay between the wireless host and the rest of the world with which the
host communicates. hosts associated with a base station are often referred to as operating in infrastructure mode, since all traditional network services e.g., address assign ment and routing are provided by the network to which a host is connected via the base station. in ad hoc networks, wireless hosts have no such infrastructure with which to connect. in the absence of such infrastructure, the hosts themselves must provide for services such as routing, address assignment, dnslike name translation, and more. when a mobile host moves beyond the range of one base station and into the range of another, it will change its point of attachment into the larger network i.e., change the base station with which it is associateda process referred to as handoff or handover. such mobility raises many challenging questions. if a host can move, how does one find the mobile hosts current location in the network so that data can be forwarded to that mobile host? how is addressing performed, given that a host can be in one of many possible locations? if the host moves during a tcp connection or phone call, how is data routed so that the connection figure 7.2 wireless transmission rates and range for wifi, cellular 4g5g and bluetooth standards note axes are not linear802.11ax 802.11ac 802.11n802.11 af,ah5g 4g lt e 802.11g 802.11b bluetooth indoor outdoor mid range outdoorlong range outdoor 1030m 50200m 200m 4km 4km 15km14 gbps 10 gbps 3.5 gbps 600 mbps 54 mbps 2 mbps11 mbps m07_kuro5469_08_ge_c07.indd 564 29042021 1519 7.1 introduction 565 continues uninterrupted? these and many many! other questions make wireless and mobile networking an area of exciting networking research. network infrastructure. this is the larger network with which a wireless host may wish to communicate. having discussed the pieces of a wireless network, we note that these pieces can be combined in many different ways to form different types of wireless networks. you may find a taxonomy of these types of wireless networks useful as you read on in this chapter, or readlearn more about wireless networks beyond this book. at the highest level we can classify wireless networks according to two criteria i whether a packet in the wireless network crosses exactly one wireless hop or multiple wireless hops, and ii whether there is infrastructure such as a base station in the network singlehop, infrastructurebased. these networks have a base station that is con nected to a larger wired network e.g., the internet. furthermore, all communication is between this base station and a wireless host over a single wireless hop. the 802.11 networks you use in the classroom, caf√©, or library; and the 4g lte data networks that we will learn about shortly all fall in this category. the vast majority of our daily interactions are with singlehop, infrastructurebased wireless networks. singlehop, infrastructureless. in these networks, there is no base station that is connected to a wireless network. however, as we will see, one of the nodes in this singlehop network may coordinate the transmissions
of the other nodes. bluetooth networks that connect small wireless devices such as keyboards, speakers, and headsets, and which we will study in section 7.3.6 are singlehop, infrastructureless networks. multihop, infrastructurebased. in these networks, a base station is present that is wired to the larger network. however, some wireless nodes may have to relay their communication through other wireless nodes in order to communicate via the base station. some wireless sensor networks and socalled wireless mesh networks deployed in homes fall in this category. multihop, infrastructureless. there is no base station in these networks, and nodes may have to relay messages among several other nodes in order to reach a destination. nodes may also be mobile, with connectivity changing among nodesa class of networks known as mobile ad hoc networks manets. if the mobile nodes are vehicles, the network is a vehicular ad hoc network vanet. as you might imagine, the development of protocols for such networks is challenging and is the subject of much ongoing research. in this chapter, well mostly confine ourselves to singlehop networks, and then mostly to infrastructurebased networks. m07_kuro5469_08_ge_c07.indd 565 29042021 1519 566 chapter 7 wireless and mobile networks lets now dig deeper into the technical challenges that arise in wireless and mobile networks. well begin by first considering the individual wireless link, defer ring our discussion of mobility until later in this chapter. 7.2 wireless links and network characteristics wireless links differ from their wired counterparts in a number important ways decreasing signal strength. electromagnetic radiation attenuates as it passes through matter e.g., a radio signal passing through a wall. even in free space, the signal will disperse, resulting in decreased signal strength sometimes referred to as path loss as the distance between sender and receiver increases. interference from other sources. radio sources transmitting in the same frequency band will interfere with each other. for example, 2.4 ghz wireless phones and 802.11b wireless lans transmit in the same frequency band. thus, the 802.11b wireless lan user talking on a 2.4 ghz wireless phone can expect that neither the network nor the phone will perform particularly well. in addition to interference from transmitting sources, electromagnetic noise within the environment e.g., a nearby motor, a microwave can result in interference. for this reason, a number of more recent 802.11 standards operate in the 5ghz frequency band. multipath propagation. multipath propagation occurs when portions of the electromagnetic wave reflect off objects and the ground, taking paths of different lengths between a sender and receiver. this results in the blurring of the received signal at the receiver. moving objects between the sender and receiver can cause multipath propagation to change over time. for a detailed discussion of wireless channel characteristics, models, and measurements, see anderson 1995; almers 2007. the discussion above suggests that bit errors will be more common in wireless links than in wired links. for this reason, it is perhaps not surprising that wireless link protocols such as the 802.11 protocol well examine in the following
section employ not only powerful crc error detection codes, but also linklevel reliabledatatransfer protocols that retransmit corrupted frames. having considered the impairments that can occur on a wireless channel, lets next turn our attention to the host receiving the wireless signal. this host receives an electromagnetic signal that is a combination of a degraded form of the original signal transmitted by the sender degraded due to the attenuation and multipath propagation effects that we discussed above, among others and background noise in the environment. the signaltonoise ratio snr is a relative measure of the strength of the received signal i.e., the information being transmitted and this noise. the snr is typically measured in units of decibels db, a unit of measure that some think is used by m07_kuro5469_08_ge_c07.indd 566 29042021 1519 7.2 wireless links and network characteristics 567 electrical engineers primarily to confuse computer scientists. the snr, measured in db, is 20 times the ratio of the base10 logarithm of the amplitude of the received signal to the amplitude of the noise. for our purposes here, we need only know that a larger snr makes it easier for the receiver to extract the transmitted signal from the background noise. figure 7.3 adapted from holland 2001 shows the bit error rate ber roughly speaking, the probability that a transmitted bit is received in error at the receiverversus the snr for three different modulation techniques for encoding information for transmission on an idealized wireless channel. the theory of modulation and coding, as well as signal extraction and ber, is well beyond the scope of this text see schwartz 1980; goldsmith 2005 for a discussion of these topics. nonetheless, figure 7.3 illustrates several physicallayer characteristics that are important in understanding higherlayer wireless communication protocols for a given modulation scheme, the higher the snr, the lower the ber. since a sender can increase the snr by increasing its transmission power, a sender can decrease the probability that a frame is received in error by increasing its transmission power. note, however, that there is arguably little practical gain in increasing the power beyond a certain threshold, say to decrease the ber from 1012 to 1013. there are also disadvantages associated with increas ing the transmission power more energy must be expended by the sender figure 7.3 bit error rate, transmission rate, and snr107106105104103102101 10 20 30 40 0 snr dbberqam16 4 mbpsqam2568 mbps bpsk1 mbps m07_kuro5469_08_ge_c07.indd 567 29042021 1519 568 chapter 7 wireless and mobile networks an important concern for batterypowered mobile users, and the senders transmissions are more likely to interfere with the transmissions of another sender see figure 7.4b. for a given snr, a modulation technique with a higher bit transmission rate whether in error or not will have a higher ber. for example, in figure 7.3, with an snr of 10 db, bpsk modulation with a transmission rate of 1 mbps has a ber of less than 107, while with qam16 modulation with a transmission rate of 4 mbps, the ber is
101, far too high to be practically useful. however, with an snr of 20 db, qam16 modulation has a transmission rate of 4 mbps and a ber of 107, while bpsk modulation has a transmission rate of only 1 mbps and a ber that is so low as to be literally off the charts. if one can tolerate a ber of 107, the higher transmission rate offered by qam16 would make it the preferred modulation technique in this situation. these considerations give rise to the final characteristic, described next. dynamic selection of the physicallayer modulation technique can be used to adapt the modulation technique to channel conditions. the snr and hence the ber may change as a result of mobility or due to changes in the environment. adaptive modulation and coding are used in the 802.11 wifi and in 4g and 5g cellular data networks that well study in sections 7.3 and 7.4. this allows, for example, the selection of a modulation technique that provides the highest transmission rate possible subject to a constraint on the ber, for given channel characteristics. a higher and timevarying bit error rate is not the only difference between a wired and wireless link. recall that in the case of wired broadcast links, all nodes figure 7.4 hidden terminal problem caused by obstacle a and fading baa cbc location b. a.0signal strength b m07_kuro5469_08_ge_c07.indd 568 29042021 1519 7.2 wireless links and network characteristics 569 receive the transmissions from all other nodes. in the case of wireless links, the situ ation is not as simple, as shown in figure 7.4. suppose that station a is transmitting to station b. suppose also that station c is transmitting to station b. with the socalled hidden terminal problem, physical obstructions in the environment for example, a mountain or a building may prevent a and c from hearing each others transmissions, even though as and cs transmissions are indeed interfering at the destination, b. this is shown in figure 7.4a. a second scenario that results in undetectable collisions at the receiver results from the fading of a signals strength as it propagates through the wireless medium. figure 7.4b illustrates the case where a and c are placed such that their signals are not strong enough to detect each others transmissions, yet their signals are strong enough to interfere with each other at station b. as well see in section 7.3, the hidden terminal problem and fading make multiple access in a wireless network considerably more complex than in a wired network. 7.2.1 cdma recall from chapter 6 that when hosts communicate over a shared medium, a protocol is needed so that the signals sent by multiple senders do not interfere at the receivers. in chapter 6, we described three classes of medium access protocols channel partitioning, random access, and taking turns. code division multiple access cdma belongs to the family of channel partitioning protocols. it is prevalent in wireless lan and cellular technologies. because cdma is so important in the
wireless world, well take a quick look at cdma now, before getting into specific wireless access technologies in the subsequent sections. in a cdma protocol, each bit being sent is encoded by multiplying the bit by a signal the code that changes at a much faster rate known as the chipping rate than the original sequence of data bits. figure 7.5 shows a simple, idealized cdma encodingdecoding scenario. suppose that the rate at which original data bits reach the cdma encoder defines the unit of time; that is, each original data bit to be transmitted requires a onebit slot time. let di be the value of the data bit for the ith bit slot. for mathematical convenience, we represent a data bit with a 0 value as 1. each bit slot is further subdivided into m minislots; in figure 7.5, m8, although in practice m is much larger. the cdma code used by the sender consists of a sequence of m values, cm, m1, . . . , m , each taking a 1 or 1 value. in the example in figure 7.5, the mbit cdma code being used by the sender is 1, 1, 1, 1, 1, 1, 1, 1. to illustrate how cdma works, let us focus on the ith data bit, di. for the mth minislot of the bittransmission time of di, the output of the cdma encoder, zi,m, is the value of di multiplied by the mth bit in the assigned cdma code, cm zi,mdicm 7.1 m07_kuro5469_08_ge_c07.indd 569 29042021 1519 570 chapter 7 wireless and mobile networks in a simple world, with no interfering senders, the receiver would receive the encoded bits, zi,m, and recover the original data bit, di, by computing di1 m am m1zi,mcm 7.2 the reader might want to work through the details of the example in figure 7.5 to see that the original data bits are indeed correctly recovered at the receiver using equation 7.2.figure 7.5 a simple cdma example sender encoding, receiver decoding1 111 1 1111 111 1 1111 1 1 1111 1 1 111111 time slot 1 received inputtime slot 0 received input code1 1 1 11111 1 1 111111 data bits code 1 111 1 1111 111 1 111d1 1d0 1 time slot 1sender channel output zi,m receiverzi,m di cm zi,m cm d mim1m 5stime slot 1 channel outputtime slot 0 channel output time slot 0 d1 1d0 11 m07_kuro5469_08_ge_c07.indd 570 29042021 1519 7.2 wireless links and network characteristics 571 the world is far from ideal, however, and as noted above, cdma must work in the presence of interfering senders that are encoding and transmitting their data using a different assigned code. but how can a cdma receiver recover a senders original data bits when those data bits are being tangled with bits being transmitted by other senders? cdma works under the assumption that the interfering transmitted bit signals are additive. this means, for example, that if three senders send a 1 value, and a fourth sender sends a
1 value during the same minislot, then the received signal at all receivers during that minislot is a 2 since 11112. in the presence of multiple senders, sender s computes its encoded transmissions, zs i,m, in exactly the same manner as in equation 7.1. the value received at a receiver during the mth minislot of the ith bit slot, however, is now the sum of the transmitted bits from all n senders during that minislot z i, man s1zs i,m amazingly, if the senders codes are chosen carefully, each receiver can recover the data sent by a given sender out of the aggregate signal simply by using the senders code in exactly the same manner as in equation 7.2 d i1 mam m1zi,mcm 7.3 as shown in figure 7.6, for a twosender cdma example. the mbit cdma code being used by the upper sender is 1, 1, 1, 1, 1, 1, 1, 1, while the cdma code being used by the lower sender is 1, 1, 1, 1, 1, 1, 1, 1. figure 7.6 illustrates a receiver recovering the original data bits from the upper sender. note that the receiver is able to extract the data from sender 1 in spite of the interfering transmission from sender 2. recall our cocktail analogy from chapter 6. a cdma protocol is similar to having partygoers speaking in multiple languages; in such circumstances humans are actually quite good at locking into the conversation in the language they understand, while filtering out the remaining conversations. we see here that cdma is a partitioning protocol in that it partitions the codespace as opposed to time or frequency and assigns each node a dedicated piece of the codespace. our discussion here of cdma is necessarily brief; in practice a number of dif ficult issues must be addressed. first, in order for the cdma receivers to be able to extract a particular senders signal, the cdma codes must be carefully chosen. second, our discussion has assumed that the received signal strengths from various senders are the same; in reality, this can be difficult to achieve. there is a considerable body of literature addressing these and other issues related to cdma; see pickholtz 1982; viterbi 1995 for details. m07_kuro5469_08_ge_c07.indd 571 29042021 1519 572 chapter 7 wireless and mobile networks 7.3 wifi 802.11 wireless lans pervasive in the workplace, the home, educational institutions, caf√©s, airports, and street corners, wireless lans are now one of the most important access network technologies in the internet today. although many technologies and standards for figure 7.6 a twosender cdma examplereceiver 1 1 111 1 1111 111 1111time slot 1 received inputtime slot 0 received inputdata bits data bits1 111 11111 111 1111codesenders 111 1111 11 1 1111 11 code code 22 222 2 22 22 222 2 22channel, zi,m zi,m di cm zi,m cm d mim1m 5sd1 1d0 1 d1 12 11 2 22zi,m di cm 11 1 d0 1211 d1 1d0 1 11 m07_kuro5469_08_ge_c07.indd 572 29042021 1519 7.3 wifi 802.11 wireless lans
573 wireless lans were developed in the 1990s, one particular class of standards has clearly emerged as the winner the ieee 802.11 wireless lan, also known as wifi. in this section, well take a close look at 802.11 wireless lans, examining its frame structure, its medium access protocol, and its internetworking of 802.11 lans with wired ethernet lans. as summarized in table 7.1, there are several 802.11 standards ieee 802.11 2020. the 802.11 b, g, n, ac, ax are successive generations of 802.11 technology aimed for wireless local area networks wlans, typically less than 70 m range in a home office, workplace, or business setting. the 802.11 n, ac, and ax standards have recently been branded as wifi 4, 5 and 6, respectivelyno doubt competing with 4g and 5g cellular network branding. the 802.11 af, ah standards operate over longer distances and are aimed at internet of things, sensor networks, and metering applications. the different 802.11 b, g, n, ac, ax standards all share some common character istics, including the 802.11 frame format that we will study shortly, and are backward compatible, meaning, for example, that a mobile capable only of 802.11 g may still interact with a newer 802.11 ac or 802.11 ax base station. they also all use the same medium access protocol, csmaca, which well also discuss shortly, while also 802.11 ax also supports centralized scheduling by the base station of transmissions from associated wireless devices. however, as shown in table 7.1, the standards have some major differences at the physical layer. 802.11 devices operate in two different frequency ranges 2.42.485 ghz referred to as the 2.4 ghz range and 5.15.8 ghz referred to as the 5 ghz range. the 2.4 ghz range is an unlicensed frequency band, where 802.11 devices may compete for frequency spectrum with 2.4 ghz phones and appliances such as microwave ovens. at 5 ghz, 802.11 lans have a shorter transmission distance for a given power level and suffer more from multipath propagation. the 802.11n, 802.11ac, and 802.11ax standards use multiple input multipleoutput mimo antennas; that is, two or more antennas on the sending side and two or more antennas on the receiving side that are transmittingreceiving different signals ieee 802.11 standard year max data rate range frequency 802.11 b 1999 11 mbps 30 m 2.4 ghz 802.11 g 2003 54 mbps 30 m 2.4 ghz 802.11 n wifi 4 2009 600 70 m 2.4, 5 ghz 802.11 ac wifi 5 2013 3.47 gpbs 70 m 5 ghz 802.11 ax wifi 6 2020 expected 14 gbps 70 m 2.4, 5 ghz 802.11 af 2014 35560 mbps 1 km unused tv bands 54790 mhz 802.11 ah 2017 347 mbps 1 km 900 mhz table 7.1 summary of ieee 802.11 standards m07_kuro5469_08_ge_c07.indd 573 29042021 1519 574 chapter 7 wireless and mobile networks diggavi 2004. 802.11ac and 802.11 ax base stations may transmit to multiple sta tions simultaneously, and use smart antennas to adaptively beamform to target transmissions in the direction of a receiver. this decreases
interference and increases the distance reached at a given data rate. the data rates shown in table 7.1 are for an idealized environment, for example, a receiver close to the base station, with no interferencea scenario that were unlikely to experience in practice! so as the say ing goes, ymmv your mileage or in this case your wireless data rate may vary. 7.3.1 the 802.11 wireless lan architecture figure 7.7 illustrates the principal components of the 802.11 wireless lan architec ture. the fundamental building block of the 802.11 architecture is the basic service set bss. a bss contains one or more wireless stations and a central base station, known as an access point ap in 802.11 parlance. figure 7.7 shows the ap in each of two bsss connecting to an interconnection device such as a switch or router, which in turn leads to the internet. in a typical home network, there is one ap and one router typically integrated together as one unit that connects the bss to the internet. as with ethernet devices, each 802.11 wireless station has a 6byte mac address that is stored in the firmware of the stations adapter that is, 802.11 network interface card. each ap also has a mac address for its wireless interface. as with ethernet, these mac addresses are administered by ieee and are in theory globally unique. as noted in section 7.1, wireless lans that deploy aps are often referred to as infrastructure wireless lans, with the infrastructure being the aps along with the figure 7.7 ieee 802.11 lan architectureinternet switch or router ap bss 1 bss 2ap m07_kuro5469_08_ge_c07.indd 574 29042021 1519 7.3 wifi 802.11 wireless lans 575 wired ethernet infrastructure that interconnects the aps and a router. figure 7.8 shows that ieee 802.11 stations can also group themselves together to form an ad hoc networka network with no central control and with no connections to the outside world. here, the network is formed on the fly, by mobile devices that have found themselves in proximity to each other, that have a need to communicate, and that find no preexisting network infrastructure in their location. an ad hoc network might be formed when people with laptops get together e.g., in a conference room, a train, or a car and want to exchange data in the absence of a centralized ap. there has been tremendous interest in ad hoc networking, as communicating portable devices continue to proliferate. in this section, though, well focus our attention on infrastructure wireless lans. channels and association in 802.11, each wireless station needs to associate with an ap before it can send or receive networklayer data. although all of the 802.11 standards use association, well discuss this topic specifically in the context of ieee 802.11b, g, n, ac, ax. when a network administrator installs an ap, the administrator assigns a one or twoword service set identifier ssid to the access point. when you choose wifi under setting on your iphone, for example, a list is displayed showing
the ssid of each ap in range. the administrator must also assign a channel number to the ap. to understand channel numbers, recall that 802.11 operates in the frequency range of 2.4 ghz to 2.4835 ghz. within this 85 mhz band, 802.11 defines 11 partially overlapping channels. any two channels are nonoverlapping if and only if they are separated by four or more channels. in particular, the set of channels 1, 6, and 11 is the only set of three nonoverlapping channels. this means that an administrator could create a wireless lan with an aggregate maximum transmission rate of three times the maximum transmission rate shown in table 7.1 by installing three 802.11 aps at the same physical location, assigning channels 1, 6, and 11 to the aps, and interconnecting each of the aps with a switch.figure 7.8 an ieee 802.11 ad hoc networkbss m07_kuro5469_08_ge_c07.indd 575 29042021 1519 576 chapter 7 wireless and mobile networks now that we have a basic understanding of 802.11 channels, lets describe an interesting and not completely uncommon situationthat of a wifi jungle. a wifi jungle is any physical location where a wireless station receives a sufficiently strong signal from two or more aps. for example, in many caf√©s in new york city, a wireless station can pick up a signal from numerous nearby aps. one of the aps might be managed by the caf√©, while the other aps might be in residential apartments near the caf√©. each of these aps would likely be located in a different ip subnet and would have been independently assigned a channel. now suppose you enter such a wifi jungle with your smartphone, tablet, or laptop, seeking wireless internet access and a blueberry muffin. suppose there are five aps in the wifi jungle. to gain internet access, your wireless device needs to join exactly one of the subnets and hence needs to associate with exactly one of the aps. associating means the wireless device creates a virtual wire between itself and the ap. specifically, only the associated ap will send data frames that is, frames containing data, such as a datagram to your wireless device, and your wireless device will send data frames into the internet only through the associated ap. but how does your wireless device associate with a particular ap? and more fundamentally, how does your wireless device know which aps, if any, are out there in the jungle? the 802.11 standard requires that an ap periodically send beacon frames, each of which includes the aps ssid and mac address. your wireless device, knowing that aps are sending out beacon frames, scans the 11 channels, seeking beacon frames from any aps that may be out there some of which may be transmitting on the same channelits a jungle out there!. having learned about available aps from the beacon frames, you or your wireless device select one of the aps for association. the 802.11 standard does not specify an algorithm for selecting which of the available aps to
associate with; that algorithm is left up to the designers of the 802.11 firmware and software in your wireless device. typically, the device chooses the ap whose beacon frame is received with the highest signal strength. while a high signal strength is good see, e.g., figure 7.3, signal strength is not the only ap characteristic that will determine the performance a device receives. in particular, its possible that the selected ap may have a strong signal, but may be overloaded with other affiliated devices that will need to share the wireless bandwidth at that ap, while an unloaded ap is not selected due to a slightly weaker signal. a number of alternative ways of choosing aps have thus recently been proposed vasudevan 2005; nicholson 2006; sundaresan 2006. for an interesting and downtoearth discussion of how signal strength is measured, see bardwell 2004. the process of scanning channels and listening for beacon frames is known as passive scanning see figure 7.9a. a wireless device can also perform active scanning, by broadcasting a probe frame that will be received by all aps within the wireless devices range, as shown in figure 7.9b. aps respond to the probe request frame with a probe response frame. the wireless device can then choose the ap with which to associate from among the responding aps. m07_kuro5469_08_ge_c07.indd 576 29042021 1519 7.3 wifi 802.11 wireless lans 577 figure 7.9 active and passive scanning for access points11 32 h1ap 2 ap 1bbs 1 a. passive scanning 1. beacon frames sent from aps 2. association request frame sent h1 to selected ap 3. association response frame sent selected ap to h1a. active scanning 1. probe request frame broadcast from h1 2. probes response frame sent from aps 3. association request frame sent h1 to selected ap 4. association response frame sent selected ap to h1 bbs 2 22 43 h1ap 2 ap 1bbs 1 bbs 2 1 after selecting the ap with which to associate, the wireless device sends an asso ciation request frame to the ap, and the ap responds with an association response frame. note that this second requestresponse handshake is needed with active scanning, since an ap responding to the initial probe request frame doesnt know which of the possibly many responding aps the device will choose to associate with, in much the same way that a dhcp client can choose from among multiple dhcp servers see figure 4.21. once associated with an ap, the device will want to join the subnet in the ip addressing sense of section 4.3.3 to which the ap belongs. thus, the device will typically send a dhcp discovery message see figure 4.21 into the subnet via the ap in order to obtain an ip address on the subnet. once the address is obtained, the rest of the world then views that device simply as another host with an ip address in that subnet. in order to create an association with a particular ap, the wireless device may be required to authenticate
itself to the ap. 802.11 wireless lans provide a number of alternatives for authentication and access. one approach, used by many companies, is to permit access to a wireless network based on a devices mac address. a second approach, used by many internet caf√©s, employs usernames and passwords. in both cases, the ap typically communicates with an authentication server, relaying information between the wireless device and the authentication server using a protocol such as radius rfc 2865 or diameter rfc 6733. separating the authentication server from the ap allows one authentication server to serve many aps, centralizing the often sensitive decisions of authentication and access within the single server, and keeping m07_kuro5469_08_ge_c07.indd 577 29042021 1519 578 chapter 7 wireless and mobile networks ap costs and complexity low. well see in chapter 8 that the new ieee 802.11i protocol defining security aspects of the 802.11 protocol family takes precisely this approach. 7.3.2 the 802.11 mac protocol once a wireless device is associated with an ap, it can start sending and receiving data frames to and from the access point. but because multiple wireless devices, or the ap itself may want to transmit data frames at the same time over the same channel, a multiple access protocol is needed to coordinate the transmissions. in the following, well refer to the devices or the ap as wireless stations that share the multiple access channel. as discussed in chapter 6 and section 7.2.1, broadly speaking there are three classes of multiple access protocols channel partitioning including cdma, random access, and taking turns. inspired by the huge success of ethernet and its random access protocol, the designers of 802.11 chose a random access protocol for 802.11 wireless lans. this random access protocol is referred to as csma with collision avoidance, or more succinctly as csmaca. as with ethernets csmacd, the csma in csmaca stands for carrier sense multiple access, meaning that each station senses the channel before transmitting, and refrains from transmitting when the channel is sensed busy. although both ethernet and 802.11 use carriersensing ran dom access, the two mac protocols have important differences. first, instead of using collision detection, 802.11 uses collisionavoidance techniques. second, because of the relatively high bit error rates of wireless channels, 802.11 unlike ethernet uses a linklayer acknowledgmentretransmission arq scheme. well describe 802.11s collisionavoidance and linklayer acknowledgment schemes below. recall from sections 6.3.2 and 6.4.2 that with ethernets collisiondetection algorithm, an ethernet station listens to the channel as it transmits. if, while transmitting, it detects that another station is also transmitting, it aborts its transmission and tries to transmit again after waiting a small, random amount of time. unlike the 802.3 ethernet protocol, the 802.11 mac protocol does not implement collision detection. there are two important reasons for this the ability to detect collisions requires the ability to send the stations own signal and receive to determine whether another station is also transmitting at the same time. because the strength of the received signal is typically very small compared
to the strength of the transmitted signal at the 802.11 adapter, it is costly to build hardware that can detect a collision. more importantly, even if the adapter could transmit and listen at the same time and presumably abort transmission when it senses a busy channel, the adapter would still not be able to detect all collisions, due to the hidden terminal problem and fading, as discussed in section 7.2. because 802.11wireless lans do not use collision detection, once a station begins to transmit a frame, it transmits the frame in its entirety; that is, once a station m07_kuro5469_08_ge_c07.indd 578 29042021 1519 7.3 wifi 802.11 wireless lans 579 figure 7.10 802.11 uses linklayer acknowledgmentsdestination difs sifsdata acksour ce gets started, there is no turning back. as one might expect, transmitting entire frames particularly long frames when collisions are prevalent can significantly degrade a multiple access protocols performance. in order to reduce the likelihood of collisions, 802.11 employs several collisionavoidance techniques, which well shortly discuss. before considering collision avoidance, however, well first need to examine 802.11s linklayer acknowledgment scheme. recall from section 7.2 that when a station in a wireless lan sends a frame, the frame may not reach the destination station intact for a variety of reasons. to deal with this nonnegligible chance of failure, the 802.11 mac protocol uses linklayer acknowledgments. as shown in figure 7.10, when the destination station receives a frame that passes the crc, it waits a short period of time known as the short interframe spacing sifs and then sends back an acknowledgment frame. if the transmitting station does not receive an acknowledgment within a given amount of time, it assumes that an error has occurred and retransmits the frame, using the csmaca protocol to access the channel. if an acknowledgment is not received after some fixed number of retransmissions, the transmitting station gives up and discards the frame. m07_kuro5469_08_ge_c07.indd 579 29042021 1519 580 chapter 7 wireless and mobile networks having discussed how 802.11 uses linklayer acknowledgments, were now in a position to describe the 802.11 csmaca protocol. suppose that a station wireless device or an ap has a frame to transmit. 1. if initially the station senses the channel idle, it transmits its frame after a short period of time known as the distributed interframe space difs; see figure 7.10. 2. otherwise, the station chooses a random backoff value using binary exponential backoff as we encountered in section 6.3.2 and counts down this value after difs when the channel is sensed idle. while the channel is sensed busy, the counter value remains frozen. 3. when the counter reaches zero note that this can only occur while the channel is sensed idle, the station transmits the entire frame and then waits for an acknowledgment. 4. if an acknowledgment is received, the transmitting station knows that its frame has been correctly received at the destination station. if the station has another frame to send, it begins the csmaca protocol at step 2. if the acknowledgment isnt
received, the transmitting station reenters the backoff phase in step 2, with the random value chosen from a larger interval. recall that under ethernets csmacd, multiple access protocol section 6.3.2, a station begins transmitting as soon as the channel is sensed idle. with csmaca, however, the station refrains from transmitting while counting down, even when it senses the channel to be idle. why do csmacd and cdmaca take such different approaches here? to answer this question, lets consider a scenario in which two stations each have a data frame to transmit, but neither station transmits immediately because each senses that a third station is already transmitting. with ethernets csmacd, the two stations would each transmit as soon as they detect that the third station has finished transmitting. this would cause a collision, which isnt a serious issue in csmacd, since both stations would abort their transmissions and thus avoid the useless transmissions of the remainders of their frames. in 802.11, however, the situation is quite different. because 802.11 does not detect a collision and abort transmission, a frame suffering a collision will be transmitted in its entirety. the goal in 802.11 is thus to avoid collisions whenever possible. in 802.11, if the two stations sense the channel busy, they both immediately enter random backoff, hopefully choosing different backoff values. if these values are indeed different, once the channel becomes idle, one of the two stations will begin transmitting before the other, and if the two stations are not hidden from each other the losing station will hear the winning stations signal, freeze its counter, and refrain from transmitting until the winning station has completed its transmission. in this manner, a costly collision is avoided. of course, collisions can still occur with 802.11 in this scenario the two stations could be hidden from each other, or the two stations could choose random m07_kuro5469_08_ge_c07.indd 580 29042021 1519 7.3 wifi 802.11 wireless lans 581 backoff values that are close enough that the transmission from the station starting first have yet to reach the second station. recall that we encountered this problem earlier in our discussion of random access algorithms in the context of figure 6.12. dealing with hidden terminals rts and cts the 802.11 mac protocol also includes a nifty but optional reservation scheme that helps avoid collisions even in the presence of hidden terminals. lets investigate this scheme in the context of figure 7.11, which shows two wireless stations and one access point. both of the wireless stations are within range of the ap whose coverage is shown as a shaded circle and both have associated with the ap. however, due to fading, the signal ranges of wireless stations are limited to the inte riors of the shaded circles shown in figure 7.11. thus, each of the wireless stations is hidden from the other, although neither is hidden from the ap. lets now consider why hidden terminals can be problematic. suppose station h1 is transmitting a frame and halfway through h1s transmission,
station h2 wants to send a frame to the ap. h2, not hearing the transmission from h1, will first wait a difs interval and then transmit the frame, resulting in a collision. the channel will therefore be wasted during the entire period of h1s transmission as well as during h2s transmission. in order to avoid this problem, the ieee 802.11 protocol allows a station to use a short request to send rts control frame and a short clear to send cts control frame to reserve access to the channel. when a sender wants to send a data frame, it can first send an rts frame to the ap, indicating the total time required to transmit the data frame and the acknowledgment ack frame. when the ap receives the rts frame, it responds by broadcasting a cts frame. this cts frame figure 7.11 hidden terminal example h1 is hidden from h2, and vice versaaph1 h2 m07_kuro5469_08_ge_c07.indd 581 29042021 1519 582 chapter 7 wireless and mobile networks serves two purposes it gives the sender explicit permission to send and also instructs the other stations not to send for the reserved duration. thus, in figure 7.12, before transmitting a data frame, h1 first broadcasts an rts frame, which is heard by all stations in its circle, including the ap. the ap then responds with a cts frame, which is heard by all stations within its range, including h1 and h2. station h2, having heard the cts, refrains from transmitting for the time specified in the cts frame. the rts, cts, data, and ack frames are shown in figure 7.12. figure 7.12 collision avoidance using the rts and cts framesdestination all other nodes defer accesssour ce difs acksifssifs sifsdatactscts ackrts m07_kuro5469_08_ge_c07.indd 582 29042021 1519 7.3 wifi 802.11 wireless lans 583 the use of the rts and cts frames can improve performance in two important ways the hidden station problem is mitigated, since a long data frame is transmitted only after the channel has been reserved. because the rts and cts frames are short, a collision involving an rts or cts frame will last only for the duration of the short rts or cts frame. once the rts and cts frames are correctly transmitted, the following data and ack frames should be transmitted without collisions. you are encouraged to check out the 802.11 animation in the textbooks web site. this interactive animation illustrates the csmaca protocol, including the rtscts exchange sequence. although the rtscts exchange can help reduce collisions, it also introduces delay and consumes channel resources. for this reason, the rtscts exchange is only used if at all to reserve the channel for the transmission of a long data frame. in practice, each wireless station can set an rts threshold such that the rtscts sequence is used only when the frame is longer than the threshold. for many wireless stations, the default rts threshold value is larger than the maximum frame length, so the rtscts sequence is skipped for all data frames sent. using
802.11 as a pointtopoint link our discussion so far has focused on the use of 802.11 in a multiple access setting. we should mention that if two nodes each have a directional antenna, they can point their directional antennas at each other and run the 802.11 protocol over what is essentially a pointtopoint link. given the low cost of commodity 802.11 hardware, the use of directional antennas and an increased transmission power allow 802.11 to be used as an inexpensive means of providing wireless pointtopoint connections over tens of kilometers distance. raman 2007 describes one of the first such multihop wireless networks, operating in the rural ganges plains in india using pointtopoint 802.11 links. 7.3.3 the ieee 802.11 frame although the 802.11 frame shares many similarities with an ethernet frame, it also contains a number of fields that are specific to its use for wireless links. the 802.11 frame is shown in figure 7.13. the numbers above each of the fields in the frame represent the lengths of the fields in bytes; the numbers above each of the subfields in the frame control field represent the lengths of the subfields in bits. lets now examine the fields in the frame as well as some of the more important subfields in the frames control field. payload and crc fields at the heart of the frame is the payload, which typically consists of an ip datagram or an arp packet. although the field is permitted to be as long as 2,312 bytes, it is m07_kuro5469_08_ge_c07.indd 583 29042021 1519 584 chapter 7 wireless and mobile networks typically fewer than 1,500 bytes, holding an ip datagram or an arp packet. as with an ethernet frame, an 802.11 frame includes a 32bit cyclic redundancy check crc so that the receiver can detect bit errors in the received frame. as weve seen, bit errors are much more common in wireless lans than in wired lans, so the crc is even more useful here. address fields perhaps the most striking difference in the 802.11 frame is that it has four address fields, each of which can hold a 6byte mac address. but why four address fields? doesnt a source mac field and destination mac field suffice, as they do for ethernet? it turns out that three address fields are needed for internetworking purposesspecifically, for moving the networklayer datagram from a wireless sta tion through an ap to a router interface. the fourth address field is used when aps forward frames to each other in ad hoc mode. since we are only considering infra structure networks here, lets focus our attention on the first three address fields. the 802.11 standard defines these fields as follows address 2 is the mac address of the station that transmits the frame. thus, if a wireless station transmits the frame, that stations mac address is inserted in the address 2 field. similarly, if an ap transmits the frame, the aps mac address is inserted in the address 2 field. address 1 is
the mac address of the wireless station that is to receive the frame. thus if a mobile wireless station transmits the frame, address 1 contains the mac address of the destination ap. similarly, if an ap transmits the frame, address 1 contains the mac address of the destination wireless station. to understand address 3, recall that the bss consisting of the ap and wireless stations is part of a subnet, and that this subnet connects to other subnets via some router interface. address 3 contains the mac address of this router interface.figure 7.13 the 802.11 frameframe control2 22 4 111 1111 126 66 26 02312 4frame numbers indicate Ô¨Åeld length in bytes address 1duration payload crc protocol versionto apfrom apmore fragpower mgtmore dataaddress 2address 3address 4seq control type subtype retry wep rsvdframe contr ol Ô¨Åeld expanded numbers indicate Ô¨Åeld length in bits m07_kuro5469_08_ge_c07.indd 584 29042021 1519 7.3 wifi 802.11 wireless lans 585 to gain further insight into the purpose of address 3, lets walk through an inter networking example in the context of figure 7.14. in this figure, there are two aps, each of which is responsible for a number of wireless stations. each of the aps has a direct connection to a router, which in turn connects to the global internet. we should keep in mind that an ap is a linklayer device, and thus neither speaks ip nor understands ip addresses. consider now moving a datagram from the router interface r1 to the wireless station h1. the router is not aware that there is an ap between it and h1; from the routers perspective, h1 is just a host in one of the subnets to which it the router is connected. the router, which knows the ip address of h1 from the destination address of the datagram, uses arp to determine the mac address of h1, just as in an ordinary ethernet lan. after obtaining h1s mac address, router interface r1 encapsulates the datagram within an ethernet frame. the source address field of this frame contains r1s mac address, and the destination address field contains h1s mac address. when the ethernet frame arrives at the ap, the ap converts the 802.3 ethernet frame to an 802.11 frame before transmitting the frame into the wireless channel. the ap fills in address 1 and address 2 with h1s mac address and its own mac address, respectively, as described above. for address 3, the ap inserts the mac address of r1. in this manner, h1 can determine from address 3 the mac address of the router interface that sent the datagram into the subnet.figure 7.14 the use of address fields in 802.11 frames sending frames between h1 and r1internet router aph1r1 bss 1 bss 2ap m07_kuro5469_08_ge_c07.indd 585 29042021 1519 586 chapter 7 wireless and mobile networks now consider what happens when the wireless station h1 responds by moving a datagram from h1 to r1. h1 creates an 802.11 frame, filling the fields for address 1 and address 2 with the aps
mac address and h1s mac address, respectively, as described above. for address 3, h1 inserts r1s mac address. when the ap receives the 802.11 frame, it converts the frame to an ethernet frame. the source address field for this frame is h1s mac address, and the destination address field is r1s mac address. thus, address 3 allows the ap to determine the appropriate destination mac address when constructing the ethernet frame. in summary, address 3 plays a crucial role for internetworking the bss with a wired lan. sequence number, duration, and frame control fields recall that in 802.11, whenever a station correctly receives a frame from another station, it sends back an acknowledgment. because acknowledgments can get lost, the sending station may send multiple copies of a given frame. as we saw in our discussion of the rdt2.1 protocol section 3.4.1, the use of sequence numbers allows the receiver to distinguish between a newly transmitted frame and the retransmission of a previous frame. the sequence number field in the 802.11 frame thus serves exactly the same purpose here at the link layer as it did in the transport layer in chapter 3. recall that the 802.11 protocol allows a transmitting station to reserve the chan nel for a period of time that includes the time to transmit its data frame and the time to transmit an acknowledgment. this duration value is included in the frames duration field both for data frames and for the rts and cts frames. as shown in figure 7.13, the frame control field includes many subfields. well say just a few words about some of the more important subfields; for a more complete discussion, you are encouraged to consult the 802.11 specification held 2001; crow 1997; ieee 802.11 1999. the type and subtype fields are used to distinguish the association, rts, cts, ack, and data frames. the to and from fields are used to define the meanings of the different address fields. these meanings change depending on whether ad hoc or infrastructure modes are used and, in the case of infrastructure mode, whether a wireless station or an ap is sending the frame. finally the wep field indicates whether encryption is being used or not wep is discussed in chapter 8 . 7.3.4 mobility in the same ip subnet in order to increase the physical range of a wireless lan, companies and universities will often deploy multiple bsss within the same ip subnet. this naturally raises the issue of mobility among the bssshow do wireless stations seamlessly move from one bss to another while maintaining ongoing tcp sessions? as well see in this subsection, mobility can be handled in a relatively straightforward manner when the bsss are part m07_kuro5469_08_ge_c07.indd 586 29042021 1519 7.3 wifi 802.11 wireless lans 587 of the subnet. when stations move between subnets, more sophisticated mobility man agement protocols will be needed, such as those well study in sections 7.5 and 7.6. lets now look at a specific example of mobility between bsss
in the same sub net. figure 7.15 shows two interconnected bsss with a host, h1, moving from bss1 to bss2. because in this example the interconnection device that connects the two bsss is not a router, all of the stations in the two bsss, including the aps, belong to the same ip subnet. thus, when h1 moves from bss1 to bss2, it may keep its ip address and all of its ongoing tcp connections. if the interconnection device were a router, then h1 would have to obtain a new ip address in the subnet in which it was moving. this address change would disrupt and eventually terminate any ongoing tcp connections at h1. in section 7.6, well see how a networklayer mobility protocol, such as mobile ip, can be used to avoid this problem. but what specifically happens when h1 moves from bss1 to bss2? as h1 wanders away from ap1, h1 detects a weakening signal from ap1 and starts to scan for a stronger signal. h1 receives beacon frames from ap2 which in many corporate and university settings will have the same ssid as ap1. h1 then disassociates with ap1 and associates with ap2, while keeping its ip address and maintaining its ongoing tcp sessions. this addresses the handover problem from the host and ap viewpoint. but what about the switch in figure 7.15? how does it know that the host has moved from one ap to another? as you may recall from chapter 6, switches are selflearning and automatically build their forwarding tables. this selflearning feature nicely handles occasional moves for example, when an employee gets transferred from one department to another; however, switches were not designed to support highly mobile users who want to maintain tcp connections while moving between bsss. to appreciate the problem here, recall that before the move, the switch has an entry in its forwarding table that pairs h1s mac address with the outgoing switch interface through which h1 can be reached. if h1 is initially in bss1, then a datagram destined to h1 will be directed to h1 via ap1. once h1 associates with bss2, however, its frames should be directed to ap2. one solution a bit of a hack, really is for ap2 to send a broadcast ethernet frame with h1s source address to the switch just after figure 7.15 mobility in the same subnetbss 1 bss 2 h1switch ap 1 ap 2 m07_kuro5469_08_ge_c07.indd 587 29042021 1519 588 chapter 7 wireless and mobile networks the new association. when the switch receives the frame, it updates its forwarding table, allowing h1 to be reached via ap2. the 802.11f standards group is developing an interap protocol to handle these and related issues. our discussion above has focused on mobility with the same lan subnet. recall that vlans, which we studied in section 6.4.4, can be used to connect together islands of lans into a large virtual lan that can span a large geographical region. mobility among base stations within such a vlan can
be handled in exactly the same manner as above yu 2011. location discovery gps and wifi positioning many of the most useful and important smartphone apps today are locationbased mobile apps, including foursquare, yelp, uber, pok√©mon go, and waze. these software apps all make use of an api that allows them to extract their current geographi cal position directly from the smartphone. have you ever wondered how your smart phone obtains its geographical position? today, it is done by combining two systems, the global positioning system gps and the wifi positioning system wps. the gps, with a constellation of 30 satellites, broadcasts satellite location and timing information, which in turn is used by each gps receiver to estimate its geolocation. the united states government created the system, maintains it, and makes it freely accessible to anyone with a gps receiver. the satellites have very stable atomic clocks that are synchronized with one another and with ground clocks. the satellites also know their locations with great precision. each gps satellite continuously broadcasts a radio signal containing its current time and position. if a gps receiver obtains this information from at least four satellites, it can solve triangulation equations to estimate its position. gps, however, cannot always provide accurate geolocations if it does not have lineofsight with at least four gps satellites or when there is interference from other highfrequency communication systems. this is particularly true in urban environments, where tall buildings frequently block gps signals. this is where wifi positioning systems come to the rescue. wifi positioning systems make use of databases of wifi access points, which are independently maintained by various internet companies, including google, apple, and microsoft. each database contains information about millions of wifi access points, including each access points ssid and an estimate of its geographic location. to understand how a wifi positioning system makes use of such a database, consider an android smartphone along with the google location ser vice. from each nearby access point, the smartphone receives and measures the signal strength of beacon signals see section 7.3.1, which contain the access points ssid. the smartphone can therefore continually send messages to the google location service in the cloud that include the ssids of nearby access points and the corresponding signal strengths. it will also send its gps position obtained via the satellite broadcast case history m07_kuro5469_08_ge_c07.indd 588 29042021 1519 7.3 wifi 802.11 wireless lans 589 signals, as described above when available. using the signalstrength information, google will estimate the distance between the smartphone and each of the wifi access points. leveraging these estimated distances, it can then solve triangulation equations to estimate the smartphones geolocation. finally, this wifibased estimate is combined with the gps satellitebased estimate to form an aggregate estimate, which is then sent back to the smartphone and used by the locationbased mobile apps. but you may still be wondering how google and apple, microsoft, and so on obtain and maintain the database of access points, and in particular, the access points
geographic location? recall that for a given access point, every nearby android smartphone will send to the google location service the strength of the signal received from the access point as well as the smartphones estimated location. given that thousands of smartphones may be passing by the access point during any single day, googles location service will have lots of data at its disposition to use in estimating the access points position, again by solving triangulation equations. thus, the access points help the smartphones determine their locations, and in turn the smartphones help the access points determine their locations! 7.3.5 advanced features in 802.11 well wrap up our coverage of 802.11 with a short discussion of two advanced capabili ties found in 802.11 networks. as well see, these capabilities are not completely specified in the 802.11 standard, but rather are made possible by mechanisms specified in the standard. this allows different vendors to implement these capabilities using their own proprietary approaches, presumably giving them an edge over the competition. 802.11 rate adaptation we saw earlier in figure 7.3 that different modulation techniques with the different transmission rates that they provide are appropriate for different snr scenarios. consider, for example, a mobile 802.11 user who is initially 20 meters away from the base station, with a high signaltonoise ratio. given the high snr, the user can communicate with the base station using a physicallayer modulation technique that provides high transmission rates while maintaining a low ber. this is one happy user! suppose now that the user becomes mobile, walking away from the base station, with the snr falling as the distance from the base station increases. in this case, if the modulation technique used in the 802.11 protocol operating between the base station and the user does not change, the ber will become unacceptably high as the snr decreases, and eventually no transmitted frames will be received correctly. for this reason, some 802.11 implementations have a rate adaptation capability that adaptively selects the underlying physicallayer modulation technique to use based on current or recent channel characteristics. if a node sends two frames in a row without receiving an acknowledgment an implicit indication of bit errors on m07_kuro5469_08_ge_c07.indd 589 29042021 1519 590 chapter 7 wireless and mobile networks the channel, the transmission rate falls back to the next lower rate. if 10 frames in a row are acknowledged, or if a timer that tracks the time since the last fallback expires, the transmission rate increases to the next higher rate. this rate adaptation mechanism shares the same probing philosophy as tcps congestioncontrol mechanismwhen conditions are good reflected by ack receipts, the transmission rate is increased until something bad happens the lack of ack receipts; when something bad happens, the transmission rate is reduced. 802.11 rate adaptation and tcp congestion control are thus similar to the young child who is constantly pushing hisher parents for more and more say candy for a young child, later curfew hours for the teenager until the parents
finally say enough! and the child backs off only to try again later after conditions have hopefully improved!. a number of other schemes have also been proposed to improve on this basic automatic rateadjustment scheme kamerman 1997; holland 2001; lacage 2004. power management power is a precious resource in mobile devices, and thus the 802.11 standard provides powermanagement capabilities that allow 802.11 nodes to minimize the amount of time that their sense, transmit, and receive functions and other circuitry need to be on. 802.11 power management operates as follows. a node is able to explicitly alternate between sleep and wake states not unlike a sleepy student in a classroom!. a node indicates to the access point that it will be going to sleep by setting the powermanagement bit in the header of an 802.11 frame to 1. a timer in the node is then set to wake up the node just before the ap is scheduled to send its beacon frame recall that an ap typically sends a beacon frame every 100 msec. since the ap knows from the set powertransmission bit that the node is going to sleep, it the ap knows that it should not send any frames to that node, and will buffer any frames destined for the sleeping host for later transmission. a node will wake up just before the ap sends a beacon frame, and quickly enter the fully active state unlike the sleepy student, this wakeup requires only 250 microseconds kamerman 1997!. the beacon frames sent out by the ap contain a list of nodes whose frames have been buffered at the ap. if there are no buffered frames for the node, it can go back to sleep. otherwise, the node can explicitly request that the buffered frames be sent by sending a polling message to the ap. with an interbeacon time of 100 msec, a wakeup time of 250 microseconds, and a similarly small time to receive a beacon frame and check to ensure that there are no buffered frames, a node that has no frames to send or receive can be asleep 99 of the time, resulting in a significant energy savings. 7.3.6 personal area networks bluetooth bluetooth networks seem to have quickly become part of everyday life. perhaps youve used a bluetooth network as a cable replacement technology to interconnect the terms used below may differ from the terms found in the official bluetooth specification. the terms used in the official specifica tion do not align with pearsons commitment to promoting diversity, equality, and inclusion, and protecting against bias and stereotyping in the global population of the learners we serve. m07_kuro5469_08_ge_c07.indd 590 29042021 1519 7.3 wifi 802.11 wireless lans 591 your computer with a wireless keyboard, mouse, or other peripheral device. or per haps youve used a bluetooth network to connect your wireless earbuds, speaker, watch, or health monitoring band to your smartphone or to connect your smartphone to a cars audio system. in all of these cases, bluetooth operates over
short ranges tens of meters or less, at low power, and at low cost. for this reason, bluetooth networks are sometimes referred to as wireless personal area networks wpans or piconets. although bluetooth networks are small and relatively simple by design, theyre packed with many of the linklevel networking techniques that weve studied earlier including time division multiplexing tdm and frequency division section 6.3.1, randomized backoff section 6.3.2, polling section 6.3.3, error detection and correction section 6.2, reliable data transfer via acks and naks section 3.4.1. and thats just considering bluetooths link layer! bluetooth networks operate in the unlicensed 2.4 ghz industrial, scientific and medical ism radio band along with other home appliances such as microwaves, garage door openers, and cordless phones. as a result, bluetooth networks are designed explicitly with noise and interference in mind. the bluetooth wireless channel is operated in a tdm manner, with time slots of 625 microseconds. during each time slot, a sender transmits on one of 79 channels, with the channel frequency changing in a known but pseudorandom manner from slot to slot. this form of channel hopping, known as frequencyhopping spread spectrum fhss, is used so that interference from another device or appliance operating in the ism band will only interfere with bluetooth communications in at most a subset of the slots. bluetooth data rates can reach up to 3 mbps. bluetooth networks are ad hoc networksno network infrastructure e.g., an access point is needed. instead, bluetooth devices must organize themselves into a piconet of up to eight active devices, as shown in figure 7.16. one of these devices figure 7.16 a bluetooth piconetradius of coverage centralized contr oller client device parked devicekeycc ccc cccp pp p p m07_kuro5469_08_ge_c07.indd 591 29042021 1519 592 chapter 7 wireless and mobile networks is designated as the centralized controller, with the remaining devices acting as clients. the centralized controller node truly rules the piconetits clock determines time in the piconet e.g., determines tdm slot boundaries, it determine the slottoslot frequency hopping sequence, it controls entry of client devices into the piconet, it controls the power 100 mw, 2.5mw, or 1 mw at which client devices transmit; and uses polling to grant clients permission to transmit once admitted to the network. in addition to the active devices, there can also be up to 255 parked devices in the piconet. these parked devices are often in some form of sleep mode to conserve energy as we saw with 802.11 power management and will awaken periodically, according to the centralized controllers schedule, to receive beacon messages from the centralized controller. a parked device cannot communicate until its status has been changed from parked to active by the centralized controller node. because bluetooth ad hoc networks must be selforganizing, its worth looking into how they bootstrap their network structure. when a centralized controller node wants to form a bluetooth network, it must first determine which other bluetooth devices are within range; this is the neighbor discovery problem. the centralized controller does
this by broadcasting a series of 32 inquiry messages, each on a different frequency channel, and repeats the transmission sequence for up to 128 times. a client device listens on its chosen frequency, hoping to hear one of the centralized controllers inquiry messages on this frequency. when it hears an inquiry message, it backs off a random amount of time between 0 and 0.3 seconds to avoid collisions with other responding nodes, reminiscent of ethernets binary backoff and then responds to the centralized controller with a message containing its device id. once the bluetooth centralized controller has discovered all of the potential clients within range, it then invites those clients that it wishes to join the piconet. this second phase is known as bluetooth paging, and is reminiscent of 802.11 clients associating with a base station. through the paging process, the centralized controller will inform the client of the frequencyhopping pattern to be used, and the senders clock. the centralized controller begins the paging process by again sending 32 identical paging invitation messages, each now addressed to a specific client, but again using different frequencies, since that client has yet to learn the frequencyhopping pattern. once the client replies with an ack message to the paging invitation message, the centralized controller sends frequencyhopping information, clock synchronization information and an active member address to the client, and then finally polls the client, now using the frequencyhopping pattern, to ensure that the client is connected into the network. in our discussion above, we have only touched on bluetooths wireless net working. higher level protocols provide for reliable data packet transfer, circuitlike streaming of audio and video, changing transmission power levels, changing activeparked state and other states, and more. more recent versions of bluetooth have addressed low energy and security considerations. for more information about bluetooth, the interested reader should consult bisdikian 2001, colbach 2017, and bluetooth 2020. m07_kuro5469_08_ge_c07.indd 592 29042021 1519 7.4 cellular networks 4g and 5g 593 7.4 cellular networks 4g and 5g in the previous section, we examined how a host can access the internet when within the vicinity of an 802.11 wifi access point ap. but as weve seen, aps have small coverage areas, and a host certainly will not be able to associate with every ap it encounters. as a result, wifi access is hardly ubiquitous for a user on the move. by contrast, 4g cellular network access has rapidly become pervasive. a recent measurement study of more than one million us mobile cellular network subscribers found that they can find 4g signals more than 90 of the time, with download speeds of 20 mbps and higher. users of koreas three major cellular carriers are able to find a 4g signal between 95 and 99.5 of the time open signal 2019. as a result, it is now commonplace to stream hd videos or participate in videoconferences while on the move in a car, bus, or highspeed train. the ubiquity of 4g internet access has also enabled myriad new
iot applications such as internetconnected shared bike and scooter systems, and smartphone applications such as mobile payments commonplace in china since 2018 and internetbased messaging wechat, whatsapp, and more. the term cellular refers to the fact that the region covered by a cellular network is partitioned into a number of geographic coverage areas, known as cells. each cell contains a base station that transmits signals to, and receives signals from, the mobile devices currently in its cell. the coverage area of a cell depends on many factors, including the transmitting power of the base station, the transmitting power of the devices, obstructing buildings in the cell, and the height and type of the base station antennas. in this section, we provide an overview of the current 4g and emerging 5g cellular networks. well consider the wireless first hop between the mobile device and the base station, as well as the cellular carriers allip core network that connects the wireless first hop into the carriers network, other carrier networks, and the larger internet. perhaps surprisingly given the origins of mobile cellular networks in the telephony world, which had a very different network architecture from the internet, well encounter many of the architectural principles in 4g networks that we encountered in our internetfocused studies in chapters 16, including protocol layering, an edgecore distinction, the interconnection of multiple provider networks to form a global network of networks, and the clear separation of data and control planes with logically centralized control. well now see these principles through the lens of mobile cellular networks rather than through an internet lens and thus see these principles instantiated in different ways. and of course, with a carriers network having an allip core, well also encounter many of the internet protocols that we now know well. well cover additional 4g topicsmobility management in section 7.6, and 4g security in section 8.8later, after developing the basic principles needed for these topics. our discussion here of 4g and 5g networks will be relatively brief. mobile cellular networking is an area with great breadth and depth, with many universities offering several courses on the topic. readers seeking a deeper understanding are encouraged to see goodman 1997; kaaranen 2001; lin 2001; korhonen 2003; m07_kuro5469_08_ge_c07.indd 593 29042021 1519 594 chapter 7 wireless and mobile networks schiller 2003; palat 2009; scourias 2012; turner 2012; akyildiz 2010, as well as the particularly excellent and exhaustive books mouly 1992; sauter 2014. just as internet rfcs define internetstandard architecture and protocols, 4g and 5g networks are also defined by standards documents known as technical specifications. these documents are freely available online at 3gpp 2020. just like rfcs, technical specifications can make for rather dense and detailed reading. but when you have a question, they are the definitive source for answers! 7.4.1 4g lte cellular networks architecture and elements the 4g networks that are pervasive as of this writing in 2020 implement the 4g longterm evolution standard, or more succinctly 4g lte. in this section, well describe 4g
lte networks. figure 7.17 shows the major elements of the 4g lte network architecture. the network broadly divides into the radio network at the cellular networks edge and the core network. all network elements communicate with each other using the ip protocol we studied in chapter 4. as with earlier 2g and 3g networks, 4g lte is full of rather obtuse acronyms and element names. well try to cut through that jumble by first focusing on element functions and how the various elements of a 4g lte network interact with each other in both the data and the control planes mobile device. this is a smartphone, tablet, laptop, or iot device that connects into a cellular carriers network. this is where applications such as web browsers, map apps, voice and videoconference apps, mobile payment apps, and so much more are run. the mobile device typically implements the full 5layer internet protocol stack, including the transport and application layers, as we saw with hosts at the internets network edge. the mobile device is a network endpoint, with an ip address obtained through nat, as well see. the mobile device also has a globally unique 64bit identifier called the international mobile subscriber iden tity imsi, which is stored on its sim subscriber identity module card. the imsi identifies the subscriber in the worldwide cellular carrier network system, including the country and home cellular carrier network to which the subscriber belongs. in some ways, the imsi is analogous to a mac address. the sim card also stores information about the services that the subscriber is able to access and encryption key information for that subscriber. in the official 4g lte jargon, the mobile device is referred to as user equipment ue. however, in this textbook, well use the more readerfriendly term mobile device throughout. we also note here that a mobile device is not always mobile; for example, the device might be a fixed temperature sensor or a surveillance camera. base station. the base station sits at the edge of the carriers network and is responsible for managing the wireless radio resources and the mobile devices with its coverage area shown as a hexagonal cell in figure 7.17. as well see, a mobile device will interact with a base station to attach to the carriers network. the base station coordinates device authentication and allocation of resources m07_kuro5469_08_ge_c07.indd 594 29042021 1519 7.4 cellular networks 4g and 5g 595 channel access in the radio access network. in this sense, cellular base station functions are comparable but by no means identical to those of aps in wireless lans. but cellular base stations have several other important roles not found in wireless lans. in particular, base stations create devicespecific ip tunnels from the mobile device to gateways and interact among themselves to handle device mobility among cells. nearby base stations also coordinate among themselves to manage the radio spectrum to minimize interference between cells. in the official 4g lte terminology, the base station is referred to as
an enodeb, which is rather opaque and nondescriptive. in this textbook, we will instead use the readerfriendlier term base station throughout. as an aside, if you find lte terminology a bit opaque, you arent alone! the etymology of enodeb is rooted in earlier 3g terminology, where network function points were referred to as nodes, with b harkening back to earlier base station bs 1g terminology or base transceiver station bts in 2g terminology. 4g lte is an evolution over 3g, and hence, an e now precedes nodeb in 4g lte terminology. this name opaqueness shows no signs in stopping! in 5g systems, enodeb functions are now referred to as ngenb; perhaps you can guess what that acronym stands for! home subscriber server hss. as shown in figure 7.18, the hss is a controlplane element. the hss is a database, storing information about the mobile devices for which the hsss network is their home network. it is used in conjunction with the mme discussed below for device authentication. serving gateway sgw, packet data network gateway pgw, and other network routers. as shown in figure 7.18, the serving gateway and the packet data network gateway are two routers often collocated in practice that mobility management entity mme serving gatewa y sgwhome subscriber service hss pdn gateway pgw allip enhanced packet core epc radio access networ kto internet mobile device base station figure 7.17 elements of the 4g lte architecture m07_kuro5469_08_ge_c07.indd 595 29042021 1519 596 chapter 7 wireless and mobile networks lie on the data path between the mobile device and the internet. the pdn gateway also provides nat ip addresses to mobile devices and performs nat functions see section 4.3.4. the pdn gateway is the last lte element that a datagram originating at a mobile device encounters before entering the larger internet. to the outside world, the pgw looks like any other gateway router; the mobility of the mobile nodes within the cellular carriers lte network is hidden from the outside world behind the pgw. in addition to these gateway routers, a cellular carriers allip core will have additional routers whose role is similar to that of traditional ip routersto forward ip datagrams among themselves along paths that will typically terminate at elements of the lte core network. mobility management entity mme. the mme is also a controlplane element, as shown in figure 7.18. along with the hss, it plays an important role in authenticating a device wanting to connect into its network. it also sets up the tunnels on the data path fromto the device and the pdn internet gateway router, and maintains information about an active mobile devices cell location within the carriers cellular network. but, as shown in figure 7.18, it is not in the forwarding path for the mobile devices datagrams being sent to and from the internet. authentication. it is important for the network and the mobile device attaching to the network to mutually authenticate each otherfor the network to know that the attaching device is indeed
the device associated with a given imsi, and for the mobile device to know that the network to which it is attaching is also a legitimate cellular carrier network. we will cover authentication in chapter 8 and cover 4g authentication in section 8.8. here, we simply note that the mme plays a middleman role between the mobile and home subscriber service hss in the mobiles home network. specifically, after receiving an attach request from mobile device, the local mme contacts the hss in the mobiles home network. the mobiles home hss then returns enough encrypted information to the local mme to prove to the mobile device that the home hss is performing authentication through this mme, and for the mobile device to prove to the mme that it is indeed the mobile associated with that imsi. when a mobile device is attached to its home network, the hss to be contacted during authentication is located within that same home network. however, when a mobile device is roaming on a visited network operated by a different cellular network carrier, the mme in that roaming network will need to contact the hss in the mobile devices home network. path setup. as shown in the bottom half of figure 7.18, the data path from the mobile device to the carriers gateway router consists of a wireless first hop between the mobile device and the base station, and concatenated ip tunnels between the base station and the serving gateway, and the serving gateway and the pdn gateway. tunnels are setup under the control of the mme and used for data forwarding rather than direct forwarding among network routers to facilitate device mobilitywhen a device moves, only the tunnel endpoint m07_kuro5469_08_ge_c07.indd 596 29042021 1519 7.4 cellular networks 4g and 5g 597 control plane user data planemmehss base stationbase station pgw sgwsgwpgw figure 7.18 lte dataplane and controlplane elements terminating at the base station needs to be changed, while other tunnel end points, and the quality of service associated with a tunnel, remain unchanged. cell location tracking. as the device moves between cells, the base stations will update the mme on the devices location. if the mobile device is in a sleep mode but nonetheless moving between cells, the base stations can no longer track the devices location. in this case, it will be the responsibility of the mme to locate the device for wakeup, through a process known as paging. table 7.2 summarizes the key lte architectural elements that we have dis cussed above and compares these functions with those we encountered in our study of wifi wireless lans wlans. lte element description similar wlan functions mobile device ue user equipment end users ipcapable wirelessmobile device e.g., smartphone, tablet, laptophost, endsystem base station enodeb network side of wireless access link into lte networkaccess point ap, although the lte base station performs many functions not found in wlans the mobility management entity mmecoordinator for mobile device services authentication, mobility managementaccess point ap, although the mme performs
many functions not found in wlans home subscriber server hss located in a mobile devices home network, providing authentication, access privileges in home and visited networksno wlan equivalent serving gateway sgw, pdngateway pgwrouters in a cellular carriers network, coordinating forwarding to outside of the carriers networkibgp and ebgp routers in access isp network radio access network wireless link between mobile device and a base station802.11 wireless link between mobile and ap table 7.2 lte elements, and similar wlan wifi functions m07_kuro5469_08_ge_c07.indd 597 29042021 1519 598 chapter 7 wireless and mobile networks the architectural evolution from 2g to 3g to 4g in a relatively short span of 20 years, cellular carrier networks have undergone an astonishing transition from being almost exclusively circuitswitched telephone net works to being allip packetswitched data networks which include voice as just one of many applications. how did this transition happen from an architectural stand point? was there a flag day, when the previous telephonyoriented networks were turned off and the allip cellular network was turned on? or did elements in the previous telephonyoriented networks begin taking on dual circuit legacy and packet new functionality, as we saw with the ipv4toipv6 transition in section 4.3.5? figure 7.19 is taken from the earlier 7th edition of this textbook, which covered both 2g and 3g cellular networks. we have retired this historical material, which is still available on this books website, in favor of a deeper coverage of 4g lte in this 8th edition. although the 2g network is a circuitswitched mobile telephone network, a comparison of figures 7.17 and 7.19 illustrates a similar conceptual structure, albeit for voice rather than for data servicesa wireless edge controlled by a base station, a gateway from the carriers network to the outside world, and aggregation points between the base stations and the gateway.case history base station controller base station controllermobile switching centergateway mobile switching centerbase station system bss base station system bsspublic t elephone networkg figure 7.19 elements of the 2g cellular architecture, supporting circuitswitched voice service with the carriers core network m07_kuro5469_08_ge_c07.indd 598 29042021 1519 7.4 cellular networks 4g and 5g 599 gateway mobile switching centerg radio network controller rncgateway gprs support nodeserving gprs support nodegmobile switching centerpublic t elephone network public internet figure 7.20 3g system architecture supporting separate circuitswitched voice service and packetswitched data service with the carriers core networkfigure 7.20 also taken from the 7th edition of this textbook shows the main archi tectural components of the 3g cellular architecture, which supports both circuitswitched voice service and packetswitched data services. here, the transition from a voiceonly network to a combined voice and data network is clear the existing core 2g cellular voice network elements remained untouched. however, additional cellular data func tionality was added in parallel to, and functioned independently from, the existing core voice network at that time. as shown in figure 7.20, the splitting point into these two separate core voice and data networks happened at the network edge, at the base station in the
radio access network. the alternativeintegrating new data services directly into the core elements of the existing cellular voice networkwould have raised the same challenges encountered in integrating new ipv6 and legacy ipv4 technolo gies in the internet. the carriers also wanted to leverage and exploit their considerable investment of existing infrastructure and profitable services! in their existing cellular voice network. m07_kuro5469_08_ge_c07.indd 599 29042021 1519 600 chapter 7 wireless and mobile networks 7.4.2 lte protocols stacks since the 4g lte architecture is an allip architecture, were already very famil iar with the higherlayer protocols in the lte protocol stack, in particular ip, tcp, udp, and various application layer protocols, from our studies in chapters 2 through 5. consequently, the new lte protocols that well focus on here are primarily at the link and physical layers, and in mobility management. figure 7.21 shows the userplane protocol stacks at the lte mobile node, the base station, and the serving gateway. well touch on several of ltes controlplane protocols later when we study lte mobility management section 7.6 and security section 8.8. as we can see from figure 7.21, most of the new and interesting user plane protocol activity is happening at the wireless radio link between the mobile device and the base station. lte divides the mobile devices link layer into three sublayers packet data convergence. this uppermost sublayer of the link layer sits just below ip. the packet data convergence protocol pdcp 3gpp pdcp 2019 performs ip headercompression in order to decrease the number of bits sent over the wireless link, and encryptiondecryption of the ip datagram using keys that were established via signaling messages between the lte mobile device and the mobility management entity mme when the mobile device first attached to the network; well cover aspects of lte security in section 8.8.2. radio link control. the radio link control rlc protocol 3gpp rlcp 2018 performs two important functions i fragmenting on the sending side and reassembly on the receiving of ip datagrams that are too large to fit into base station pdn gateway pgwserving gateway sgwto from internetip packet data convergence radio link medium accesslinkgtpu ip link physicaludpgtpu ip link physicaludpgtp u ip link physicaludpapplicatio n physicaltranspor t ip packet data convergence radio link medium access physical figure 7.21 lte dataplane protocol stacks m07_kuro5469_08_ge_c07.indd 600 29042021 1519 7.4 cellular networks 4g and 5g 601 the underlying linklayer frames, and ii linklayer reliable data transfer at the through the use of an acknakbased arq protocol. recall the weve studied the basic elements of arq protocols in section 3.4.1. medium access control mac. the mac layer performs transmission scheduling, that is, the requesting and use of the radio transmission slots described in section 7.4.4. the mac sublayer also performs additional error detection correction functions, including the use of redundant bit transmission as a forward errorcorrection technique. the amount of redundancy can be adapted to channel conditions. figure 7.21 also shows the use of tunnels in the user data path. as discussed above,
these tunnels are established, under mme control, when the mobile device first attaches to the network. each tunnel between two endpoints has a unique tunnel endpoint identifier teid. when the base station receives datagrams from the mobile device, it encapsulates them using the gprs tunneling protocol 3gpp gtpv1u 2019, including the teid, and sends them in udp segments to the serving gateway at the other end of the tunnel. on the receiving side, the base station decapsulates tunneled udp datagrams, extracts the encapsulated ip datagram destined for the mobile device, and forwards that ip datagram over the wireless hop to the mobile device. 7.4.3 lte radio access network lte uses a combination of frequency division multiplexing and time division multiplexing on the downstream channel, known as orthogonal frequency division multiplexing ofdm hwang 2009. the term orthogonal comes from the fact the signals being sent on different frequency channels are created so that they interfere very little with each other, even when channel frequencies are tightly spaced. in lte, each active mobile device is allocated one or more 0.5 ms time slots in one or more of the channel frequencies. figure 7.22 shows an allocation of eight time slots over four frequencies. by being allocated increasingly more time slots whether on the same frequency or on different frequencies, a mobile device is able to achieve increasingly higher transmission rates. slot reallocation among mobile devices can be performed as often as once every millisecond. different modulation schemes can also be used to change the transmission rate; see our earlier discussion of figure 7.3 and dynamic selection of modulation schemes in wifi networks. the particular allocation of time slots to mobile devices is not mandated by the lte standard. instead, the decision of which mobile devices will be allowed to transmit in a given time slot on a given frequency is determined by the scheduling algorithms provided by the lte equipment vendor andor the network operator. with opportunistic scheduling bender 2000; kolding 2003; kulkarni 2005, matching the physicallayer protocol to the channel conditions between the sender and receiver and choosing the receivers to which packets will be sent based on channel conditions allow the base station to make best use of the wireless medium. in addition, user m07_kuro5469_08_ge_c07.indd 601 29042021 1519 602 chapter 7 wireless and mobile networks priorities and contracted levels of service e.g., silver, gold, or platinum can be used in scheduling downstream packet transmissions. in addition to the lte capabilities described above, lteadvanced allows for downstream bandwidths of hundreds of mbps by allocating aggregated channels to a mobile device akyildiz 2010. 7.4.4 additional lte functions network attachment and power management lets conclude or study of 4g lte here by considering two additional important lte functions i the process with which a mobile device first attaches to the network and ii the techniques used by the mobile device, in conjunction with core network elements, to manage its power use. network attachment the process by which a mobile device attaches to the
cellular carriers network divides broadly into three phases attachment to a base station. this first phase of device attachment is similar in purpose to, but quite different in practice from, the 802.11 association protocol that we studied in section 7.31. a mobile device wishing to attach to a cellular carrier network will begin a bootstrap process to learn about, and then associate with, a nearby base station. the mobile device initially searches all channels in all frequency bands for a primary synchronization signal that is periodically broadcast figure 7.22 twenty 0.5ms slots organized into 10 ms frames at each frequency. an eightslot allocation is shown shaded.f1f2f3f4f5f6 0 0.5 1.0 1.5 2.0 2.5 9.0 9.5 10.0 m07_kuro5469_08_ge_c07.indd 602 29042021 1519 7.4 cellular networks 4g and 5g 603 every 5 ms by a base station. once this signal is found, the mobile device remains on this frequency and locates the secondary synchronization signal. with information found in this second signal, the device can locate following several further steps additional information such as channel bandwidth, channel configurations, and the cellular carrier information of that base station. armed with this information, the mobile device can select a base station to associate with preferentially attaching to its home network, if available and establish a controlplane signaling connection across the wireless hop with that base station. this mobiletobasestation channel will be used through the remainder of the network attachment process. mutual authentication. in our earlier description of the mobility management entity mme in section 7.4.1, we noted that the base station contacts the local mme to perform mutual authenticationa process that well study in further detail in section 8.8.2. this is the second phase of network attachment, allowing the network to know that the attaching device is indeed the device associated with a given imsi, and the mobile device to know that the network to which it is attaching is also a legitimate cellular carrier network. once this second phase of network attachment is complete, the mme and mobile device have mutually authenticated each other, and the mme also knows the identity of the base station to which the mobile is attached. armed with this information, the mme is now ready to configure the mobiledevicetopdngateway data path. mobiledevicetopdngateway data path configuration. the mme contacts the pdn gateway which also provides a nat address for the mobile device, the serving gateway, and the base station to establish the two tunnels shown in figure 7.21. once this phase is complete, the mobile device is able to sendreceive ip datagrams via the base station through these tunnels to and from the internet! power management sleep modes recall in our earlier discussion of advanced features in 802.11 section 7.3.5 and bluetooth section 7.3.6 that a radio in a wireless device may enter a sleep state to save power when it is not transmitting or receiving in order to minimize the amount of time that the mobile devices circuitry needs to be on for sendingreceiving data, and for channel sensing. in
4g lte, a sleeping mobile device can be in one of two different sleep states. in the discontinuous reception state, which is typically entered after several hundred milliseconds of inactivity sauter 2014, the mobile device and the base station will schedule periodic times in advance typically several hundred milliseconds apart at which the mobile device will wake up and actively monitor the channel for downstream base station to mobile device transmissions; apart from these scheduled times, however, the mobile devices radio will be sleeping. if the discontinuous reception state might be considered a light sleep, the second sleep statethe idle statewhich follows even longer periods of 5 to 10 seconds of inactivity, might be thought of as a deep sleep. while in this deep sleep, the mobile devices radio wakes up and monitors the channel even less frequently. indeed, this sleep is so deep that if the mobile device moves into a new cell in the carriers network m07_kuro5469_08_ge_c07.indd 603 29042021 1519 604 chapter 7 wireless and mobile networks while sleeping, it need not inform the base station with which it was previous associ ated. thus, when waking up periodically from this deep sleep, the mobile device will need to reestablish an association with a potentially new base station in order to check for paging messages broadcast by the mme to base stations nearby the base station with which the mobile was last associated. these controlplane paging messages, which are broadcast by these base stations to all mobile devices in their cells, indicate which mobile devices should fully wake up and reestablish a new dataplane connection to a base station see figure 7.18 in order to receive incoming packets. 7.4.5 the global cellular network a network of networks having now studied the 4g cellular network architecture, lets take a step back at take a look at how the global cellular networkitself a network of networks like the internetis organized. figure 7.23 shows a users mobile smartphone connected via a 4g base station into its home network. the users home mobile network is operated by a cellular home cellular carrier network gatewayhome subscriber server visited mobile carrier network gatewaypublic internet and ipx figure 7.23 the global cellular data network a network of networks. m07_kuro5469_08_ge_c07.indd 604 29042021 1519 7.4 cellular networks 4g and 5g 605 carrier such as verizon, att, tmobile, or sprint in the united states; orange in france; or sk telecom in korea. the users home network, in turn, is connected to the networks of other cellular carriers and to the global internet, though one or more gateway routers in the home network, as shown in figure 7.23. the mobile networks themselves interconnect with each other either via the public internet or via an internet protocol packet exchange ipx network gsma 2018a. an ipx is a managed network specifically for interconnecting cellular carriers, similar to internet exchange points see figure 1.15 for peering among isps. from figure 7.23, we can see that the global cellular network is indeed a network
of networksjust like the internet recall figure 1.15 and section 5.4. 4g networks can also peer with 3g cellular voicedata networks and earlier voiceonly networks. well return shortly to additional 4g lte topicsmobility management in section 7.6, and 4g security in section 8.8.2later, after developing the basic principles needed for these topics. lets now take a quick look at the emerging 5g networks. 7.4.6 5g cellular networks the ultimate widearea data service would be one with ubiquitous gigabit connection speeds, extremely low latency, and unrestricted limitations on the number of users and devices that could be supported in any region. such a service would open the door to all kinds of new applications, including pervasive augmented reality and virtual reality, control of autonomous vehicles via wireless connections, control of robots in factories via wireless connections, and replacement of residential access technologies, such as dsl and cable, with fixed wireless internet services that is, residential wireless connections from base stations to modems in homes. it is expected that 5g, for which progressively improved versions are likely to be rolled out in the 2020 decade, will make a big step towards achieving the goals of the ultimate widearea data service. it is predicted that 5g will provide roughly a 10x increase in peak bitrate, a 10x decrease in latency, and a 100x increase in traffic capacity over 4g qualcomm 2019. principally, 5g refers to 5g nr new radio, which is the standard adopted by 3gpp. other 5g technologies besides nr do exist, however. for example, verizons proprietary 5g tf network operates on 28 and 39 ghz frequencies and is used only for fixed wireless internet service, not in smartphones. 5g standards divide frequencies into two groups fr1 450 mhz6 ghz and fr2 24 ghz52 ghz. most early deployments will be in the fr1 space, although there are early deployments as of 2020 in the fr2 space for fixed internet residential access as mentioned just above. importantly, the physical layer that is, wireless aspects of 5g are not backwardcompatible with 4g mobile communications systems such as lte in particular, it cant be delivered to existing smartphones by deploying base station upgrades or software updates. therefore, in the transition to 5g, wireless carriers will need to make substantial investments in physical infrastructure. m07_kuro5469_08_ge_c07.indd 605 29042021 1519 606 chapter 7 wireless and mobile networks fr2 frequencies are also known as millimeter wave frequencies. while millimeter wave frequencies allow for much faster data speeds, they come with two major drawbacks millimeter wave frequencies have much shorter range from base station to receiv ers. this makes millimeter wave technology unsuitable in rural areas and requires denser deployments of base stations in urban areas. millimeter wave communication is highly susceptible to atmospheric interference. nearby foliage and rain can cause problems for outdoor use. 5g is not one cohesive standard, but instead consists of three coexisting standards dahlman 2018 embb enhanced mobile broadband. initial deployments of 5g nr have focused on embb, which provides for increased bandwidth for higher
download and upload speeds, as well as a moderate reduction in latency when compared to 4g lte. embb enables rich media applications, such as mobile augmented reality and virtual reality, as well as mobile 4k resolution and 360 video streaming. urllc ultra reliable lowlatency communications. urllc is targeted towards applications that are highly latencysensitive, such as factory automation and autonomous driving. urllc is targeting latencies of 1msec. as of this writing, technologies that enable urllc are still being standardized. mmtc massive machine type communications. mmtc is a narrowband access type for sensing, metering, and monitoring applications. one priority for the design of 5g networks is to lower barriers for network connectivity for iot devices. in addition to lowering latency, emerging technologies for 5g networks are focusing on reducing power requirements, making the use of iot devices more pervasive than has been with 4g lte. 5g and millimeter wave frequencies many 5g innovations will be a direct result of working in the millimeter wave frequencies in the 24 ghz52 ghz band. for example, these frequencies offer the potential of achieving 100x increase in capacity over 4g. to get some insight into this, capacity can be defined as the product of three terms bj√∂rnson 2017 capacity cell density available spectrum spectral efficiency where cell density is in units of cellskm2, available spectrum is in units of hertz, and spectral efficiency is a measure of how efficiently each base station can communicate with users and is in units of bpshzcell. by multiplying these units out, it is easy to see that capacity is in units of bpskm 2. for each of these three terms, the values will be larger for 5g than for 4g m07_kuro5469_08_ge_c07.indd 606 29042021 1519 7.4 cellular networks 4g and 5g 607 because millimeter frequencies have much shorter range than 4g lte fre quencies, more base stations are required, which in turn increases the cell density. because 5g fr2 operates in a much larger frequency band 52 24 28 ghz than 4g lte up to about 2 ghz, it has more available spectrum. with regard to spectral efficiency, information theory says that if you want to double spectral efficiency, a 17fold increase in power is needed bj√∂rnson 2017. instead of increasing power, 5g uses mimotechnology the same technology we encountered in our study of 802.11 networks in section 7.3, which uses multiple antennas at each base station. rather than broadcasting signals in all directions, each mimo antenna employs beam forming and directs the signal at the user. mimo technology allows a base station to send to 1020 users at the same time in the same frequency band. by increasing all three terms in the capacity equation, 5g is expected to provide a 100x increase in capacity in urban areas. similarly, owing to the much wider frequency band, 5g is expected to provide peak download rates of 1 gbps or higher. millimeter wave signals are, however, easily blocked by buildings and trees. small cell stations are needed to fill in coverage
gaps between base stations and users. in a highly populous region, the distance between two small cells could vary from 10 to 100 meters dahlman 2018. 5g core network the 5g core network is the data network that manages all of the 5g mobile voice, data and internet connections. the 5g core network is being redesigned to better integrate with the internet and cloudbased services, and also includes distributed servers and caches across the network, thereby reducing latency. network function virtualization as discussed in chapters 4 and 5, and network slicing for different applications and services, will be managed in the core. the new 5g core specification introduces major changes in the way mobile networks support a wide variety of services with varied performance. as in the case of the 4g core network recall figures 7.17 and 7.18, the 5g core relays data traffic from end devices, authenticates devices, and manages device mobility. the 5g core also contains all of the network elements that we encountered in section 7.4.2the mobile devices, the cells, the base stations, and the mobility management entity now divided into two subelements, as discussed below, the hss, and the serving and pdn gateways. although the 4g and 5g core networks perform similar functions, there are some major differences in that the new 5g core architecture. the 5g core is designed for complete control and userplane separation see chapter 5. the 5g core consists purely of virtualized softwarebased network functions. this new architecture will give m07_kuro5469_08_ge_c07.indd 607 29042021 1519 608 chapter 7 wireless and mobile networks operators the flexibility to meet the diverse requirements of the different 5g applica tions. some of the new 5g core network functions include rommer 2019 userplane function upf. control and userplane separation see chapter 5 allows packet processing to be distributed and pushed to the network edge. access and mobility management function amf. the 5g core essentially decomposes the 4g mobility management entity mme into two functional elements amf and smf. the amf receives all the connection and session information from enduser equipment but only handles connection and mobility management tasks. session management function smf. session management is handled by the session management function smf. the smf is responsible for interacting with the decoupled data plane. the smf also performs ip address management and plays the role of dhcp. as of this writing 2020, 5g is in its early stages of deployment, and many 5g standards have yet to be finalized. only time will tell whether 5g will become a pervasive broadband wireless service, whether it will successfully compete with wifi for indoor wireless service, whether it will become a critical component of factory automation and the autonomous vehicle infrastructure, and whether it will take us a big step forward toward the ultimate widearea wireless service. 7.5 mobility management principles having covered the wireless nature of the communication links in a wireless network, its now time to turn our attention to the mobility that these wireless links enable. in the broadest
sense, a mobile device is one that changes its point of attachment into the network over time. because the term mobility has taken on many meanings in both the computer and telephony worlds, it will serve us well first to carefully consider forms of mobility. 7.5.1 device mobility a networklayer perspective from the network layers standpoint, a physically mobile device will present a very different set of challenges to the network layer, depending on how active the device is as it moves between points of attachment to the network. at the one end of the spectrum, scenario a in figure 7.24 is the mobile user who himselfherself physically moves between networks, but powers down the mobile device when moving. for example, a student might disconnect from a wireless classroom network and power down hisher device, head to the dining commons and connect to the wireless access m07_kuro5469_08_ge_c07.indd 608 29042021 1519 7.5 mobility management principles 609 network there while eating, and then disconnect and power down from the dining commons network, walk to the library, and connect to the librarys wireless network while studying. from a networking perspective, this device is not mobileit attaches to an access network and remains in that access network while on. in this case, the device serially associates with, and later disassociates from, each wireless access network encountered. this case of device nonmobility can be completely handled using the networking mechanisms weve already studied in sections 7.3 and 7.4. in scenario b in figure 7.24, the device is physically mobile but remains attached to the same access network. this device is also not mobile from a networklayer perspective. additionally, if the device remains associated with the same 802.11 ap or lte base station, the device is not even mobile from a linklayer perspective. from a network standpoint, our interest in device mobility really starts with case c, where a device changes its access network e.g., 802.11 wlan or lte cell while continuing to send and receiving ip datagrams, and while maintaining higherlevel e.g., tcp connections. here, the network will need to provide handovera transfer of responsibility for forwarding datagrams tofrom one ap or base station to the mobile deviceas the device moves among wlans or among lte cells. well cover handover in detail in section 7.6. if the handover occurs within access networks belonging to a single network provider, that provider can orchestrate handover on its own. when a mobile device roams between multiple provider networks, as in scenario d, the providers must orchestrate handover together, which considerably complicates the handover process. 7.5.2 home networks and roaming on visited networks as we learned in our discussions of cellular 4g lte networks in section 7.4.1, every subscriber has a home with some cellular provider. we learned that the home subscriber service hss stores information about each of its subscribers, including a globally unique device id embedded in a subscribers sim card, information about services that the subscriber may access, cryptographic keys to be used for a device
mobility between access networks, but powered down while moving between access networksb device mobility only within same wireless access network, in single provider networkc device mobility among access networks in single provider network, while maintaining ongoing connectionsd device mobility among multiple provider networks, while maintaining ongoing connections figure 7.24 various degrees of mobility, from a networklayer perspective m07_kuro5469_08_ge_c07.indd 609 29042021 1519 610 chapter 7 wireless and mobile networks communication, and billingcharging information. when a device is connected to a cellular network, other than its home network, that device is said to be roaming on a visited network. when a mobile device attaches to, and roams on, a visited network, coordination will be required between the home network and the visited network. the internet does not have a similarly strong notion of a home network or a vis ited network. in practice, a students home network might be the network operated by hisher school; for mobile professionals, their home network might be their company network. the visited network might be the network of a school or a company they are visiting. but there is no notion of a homevisited network deeply embedded in the internets architecture. the mobile ip protocol perkins 1998, rfc 5944, which we will cover briefly in section 7.6, was a proposal that strongly incorporated the notion of homevisited networks. but mobile ip has seen limited deploymentuse in practice. there are also activities underway that are built on top of the existing ip infrastructure to provide authenticated network access across visited ip networks. eduroam eduroam 2020 is one such activity. the notion of a mobile device having a home network provides two important advantages the home network provides a single location where information about that device can be found, and as we will see it can serve as a coordination point for communication tofrom a roaming mobile device. to appreciate the potential value of the central point of information and coordi nation, consider the human analogy of a 20something adult bob moving out of the family home. bob becomes mobile, living in a series of dormitories and apartments, and often changing addresses. if an old friend alice wants to get in touch, how can alice find the current address of bob? one common way is to contact the family, since a mobile 20something adult will often register his or her current address with the family if for no other reason than so that the parents can send money to help pay the rent!. the family home becomes that unique location that others can go to as a first step in communicating with bob. additionally, later postal communication from alice may be either indirect e.g., with mail being sent first to bobs family home and then forwarded to bob or direct e.g., with alice using the address obtained from bobs parents to send mail directly to bob. 7.5.3 direct and indirect routing tofrom a mobile device let us now consider the conundrum faced by the internetconnected host that we
will refer to as a correspondent in figure 7.25 wishing to communicate with a mobile device that might be located within that mobile devices cellular home network, or might be roaming in a visited network. in our development below, well adopt a 4g5g cellular network perspective, since these networks have such a long history of supporting device mobility. but as well see, the fundamental challenges and basic solution approaches for supporting device mobility are equally applicable in both cellular networks and in the internet. as shown in figure 7.25, well assume that the mobile device has a globally unique identifier associated with it. in 4g, lte cellular networks see section 7.4, m07_kuro5469_08_ge_c07.indd 610 29042021 1519 7.5 mobility management principles 611 this would be the international mobile subscriber identity imsi and an associated phone number, stored on a mobile devices sim card. for mobile internet users, this would be a permanent ip address in the ip address range of its home network, as in the case of the mobile ip architecture. what approaches might be used in a mobile network architecture that would allow a datagram sent by the correspondent to reach that mobile device? three basic approaches can be identified and are discussed below. as we will see, the latter two of these are adopted in practice. leveraging the existing ip address infrastructure perhaps the simplest approach to routing to a mobile device in a visited network is to simply use the existing ip addressing infrastructureto add nothing new to the architecture. what could be easier! recall from our discussion of figure 4.21 that an isp uses bgp to advertise routes to destination networks by enumerating the cidrized address ranges of reachable networks. a visited network could thus advertise to all other networks that a home network gateway visited network 79.12916home network 128.11916visited network gatewaymobility managerhome subscriber service correspondentpublic or private inter netmobilitymanagernat ip 10.0.0.99imsi 784f4398d927 permanent ip 128.119.40.186imsi 784f4398d927 figure 7.25 elements of a mobile network architecture m07_kuro5469_08_ge_c07.indd 611 29042021 1519 612 chapter 7 wireless and mobile networks particular mobile device is resident in its network simply by advertising a highly specific addressthe mobile devices full 32bit ip permanent addressessentially informing other networks that it has the path to be used to forward datagrams to that mobile device. these neighboring networks would then propagate this routing information throughout the network as part of the normal bgp procedure of updating routing information and forwarding tables. since datagrams will always be forwarded to the router advertising the most specific destination for that address see section 4.3, all datagrams addressed to that mobile device will be forwarded to the visited network. if the mobile device leaves one visited network and joins another, the new visited network can advertise a new, highly specific route to the mobile device, and the old visited network can withdraw its routing information regarding the mobile device. this solves two problems at once, and does so without making changes to the networklayer infrastructure! other networks know the location
of the mobile device, and it is easy to route datagrams to the mobile device, since the forwarding tables will direct datagrams to the visited network. the killer drawback, however, is that of scalabilitynetwork routers would have to maintain forwarding table entries for potentially billions of mobile devices, and update a devices entry each time it roams to a different network. clearly, this approach would not work in practice. some additional drawbacks are explored in the problems at the end of this chapter. an alternative, more practical, approach and one that has been adopted in prac tice is to push mobility functionality from the network core to the network edgea recurring theme in our study of internet architecture. a natural way to do this is via the mobile devices home network. in much the same way that parents of the mobile 20something adult track their childs location, a mobility management entity mme in the mobile devices home network could track the visited network in which the mobile device resides. this information might reside in a database, shown as the hss database in figure 7.25. a protocol operating between the visited network and the home network will be needed to update the network in which the mobile device resides. you might recall that we encountered the mme and hss elements in our study of 4g lte. well reuse their element names here, since they are so descriptive, and also because they are pervasively deployed in 4g networks. lets next consider the visited network elements shown in figure 7.25 in more detail. the mobile device will clearly need an ip address in the visited network. the possibilities here include using a permanent address associated with the mobile devices home network, allocating a new address in the address range of the visited network, or providing an ip address via nat see section 4.3.4. in the latter two cases, a mobile device has a transient identifier a newly allocated ip address in addition to its permanent identifiers stored in the hss in its home network. these cases are analogous to a writer addressing a letter to the address of the house in which our mobile 20something adult is currently living. in the case of a nat address, datagrams destined to the mobile device would eventually reach the nat gateway router in the visited network, which would then perform nat address translation and forward the datagram to the mobile device. m07_kuro5469_08_ge_c07.indd 612 29042021 1519 7.5 mobility management principles 613 we have now seen a number of elements of a solution to the correspondents dilemma in figure 7.24 home and visited networks, the mme and hss, and mobile device addressing. but how should datagrams be addressed and forwarded to the mobile device? since only the hss and not networkwide routers knows the location of the mobile device, the correspondent cannot simply address a datagram to the mobile devices permanent address and send it into the network. something more must be done. two approaches can be identified
indirect and direct routing. indirect routing to a mobile device lets again consider the correspondent that wants to send a datagram to a mobile device. in the indirect routing approach, the correspondent simply addresses the datagram to the mobile devices permanent address and sends the datagram into the network, blissfully unaware of whether the mobile device is resident in its home network or in a visited network; mobility is thus completely transparent to the correspondent. such datagrams are first routed, as usual, to the mobile devices home network. this is illustrated in step 1 in figure 7.26. home networkgateway visited network 79.12916home network 128.11916visited network gatewaymobilitymanager home subscriber service correspondentmobilitymanagernat ip 10.0.0.99imsi 784f4398d927 permanent ip 128.119.40.186imsi784f4398d927 3 4b12 4a figure 7.26 indirect routing to a mobile device m07_kuro5469_08_ge_c07.indd 613 29042021 1519 614 chapter 7 wireless and mobile networks lets now turn our attention to the hss, which is responsible for interacting with visited networks to track the mobile devices location, and the home networks gate way router. one job of this gateway router is to be on the lookout for an arriving datagram addressed to a device whose home is in that network, but that currently resides in a visited network. the home network gateway intercepts this datagram, consults with the hss to determine the visited network where the mobile device is resident, and forwards the datagram toward the visited network gateway routerstep 2 in figure 7.26. the visited network gateway router then forwards the datagram toward the mobile devicestep 3 in figure 7.26. if nat translation is used, as in figure 7.26, the visited network gateway router performs nat translation. it is instructive to consider the rerouting at the home network in bit more detail. clearly, the home network gateway will need to forward the arriving datagram to the gateway router in the visited network. on the other hand, it is desirable to leave the correspondents datagram intact, since the application receiving the datagram should be unaware that the datagram was forwarded via the home network. both goals can be satisfied by having the home gateway encapsulate the correspondents original complete datagram within a new larger datagram. this larger datagram is then addressed and delivered to the visited networks gateway router, which will decapsulate the datagramthat is, remove the correspondents original datagram from within the larger encapsulating datagramand forward step 3 in figure 7.26 the original datagram to the mobile device. the sharp reader will note that the encapsulationdecapsulation described here is precisely the notion of tunneling, discussed in section 4.3 in the context of ipv6; indeed, we also discussed the use of tunneling in the context of figure 7.18, when we introduced the 4g lte data plane. finally, lets consider how the mobile device sends datagrams to the corre spondent. in the context of figure 7.26, the mobile device will clearly need to forward the datagram through the visited gateway router, in order to perform nat translation. but how then should the visited gateway router forward the datagram
to the correspondent? as shown in figure 7.26, there are two options here 4a the datagram could be tunneled back to the home gateway router, and sent to the correspondent from there, or 4b the datagram could be transmitted from the visited network directly to the correspondentan approach known as local breakout gsma 2019a in lte. lets summarize our discussion of indirect routing by reviewing the new net worklayer functionality required to support mobility. a mobiledevicetovisitednetwork association protocol. the mobile device will need to associate with the visited network, and will similarly need to disassociate when leaving the visited network. a visitednetworktohomenetworkhss registration protocol. the visited network will need to register the mobile devices location with the hss in the home network, and perhaps use information obtained from the hss in performing device authentication. m07_kuro5469_08_ge_c07.indd 614 29042021 1519 7.5 mobility management principles 615 a datagram tunneling protocol between in the home network gateway and the visited network gateway router. the sending side performs encapsulation and forwarding of the correspondents original datagram; on the receiving side, the gateway router performs decapsulation, nat translation, and forwarding of the original datagram to the mobile device. the previous discussion provides all the needed elements for a mobile device to maintain an ongoing connection with a correspondent as the device moves among networks. when a device roams from one visited network to another, the new visited network information needs to be updated in the home network hss, and the homegatewayroutertovisitedgatewayrouter tunnel endpoint needs to be moved. but will the mobile device see an interrupted flow of datagrams as it moves between networks? as long as the time between the mobile device disconnection from one visited network and its attachment to the next visited network is small, few datagrams will be lost. recall from chapter 3 that endtoend connections can experience datagram loss due to network congestion. hence, occasional datagram loss within a connection when a device moves between networks is by no means a catastrophic problem. if lossfree communication is required, upperlayer mechanisms will recover from datagram loss, whether such loss results from network congestion or from device mobility. our discussion above has been purposefully somewhat generic. an indirect routing approach is used in the mobile ip standard rfc 5944, as well as in 4g lte networks sauter 2014. their details, in particular the tunneling procedures employed, differ just a bit from our generic discussion above. direct routing to a mobile device the indirect routing approach illustrated in figure 7.26 suffers from an inefficiency known as the triangle routing problemdatagrams addressed to the mobile device must be forwarded first to the home network and then to the visited network, even when a much more efficient route exists between the correspondent and the roaming mobile device. in the worst case, imagine a mobile user who is roaming on the same network that is the home network for an overseas colleague who our mobile user is visiting. the two are sitting sidebyside and exchanging data. datagrams between
the mobile user and his overseas colleague will be forwarded to the mobile users home network and then back again to the visited network! direct routing overcomes the inefficiency of triangle routing, but does so at the cost of additional complexity. in the direct routing approach, shown in figure 7.27, the correspondent first discovers the visited network in which the mobile is resident. this is done by querying the hss in the mobile devices home network, assuming as in the case of indirect routing that the mobile devices visited network is registered in the hss. this is shown as steps 1 and 2 in figure 7.27. the correspondent then tunnels datagrams from its network directly to the gateway router in the mobile devices visited network. m07_kuro5469_08_ge_c07.indd 615 29042021 1519 616 chapter 7 wireless and mobile networks while direct routing overcomes the triangle routing problem, it introduces two important additional challenges a mobileuser location protocol is needed for the correspondent to query the hss to obtain the mobile devices visited network steps 1 and 2 in figure 7.27. this is in addition to the protocol needed for the mobile device to register its location with its hss. when the mobile device moves from one visited network to another, how will the correspondent know to now forward datagrams to the new visited network? in the case of indirect routing, this problem was easily solved by updating the hss in the home network, and changing the tunnel endpoint to terminate at the gateway router of the new visited network. however, with direct routing, this change in visited networks is not so easily handled, as the hss is queried by the correspondent only at the beginning of the session. thus, additional protocol mechanisms would be required to proactively update the correspondent each time the mobile device moves. two problems at the end of this chapter explore solutions to this problem.home networkgateway visited network 79.12916home network 128.11916visited network gatewayhome subscriber service correspondentmobilitymanagernat ip 10.0.0.99imsi 784f4398d927 permanent ip 128.119.40.186imsi 784f4398d927 32mobility manager 4 1 figure 7.27 direct routing to a mobile device m07_kuro5469_08_ge_c07.indd 616 29042021 1519 7.6 mobility management in practice 617 7.6 mobility management in practice in the previous section, we identified key fundamental challenges and potential solu tions in developing a network architecture to support device mobility the notions of home and visited networks; the home networks role as a central point of information and control for mobile devices subscribed to that home network; controlplane functions needed by a home networks mobility management entity to track a mobile device roaming among visited networks; and dataplane approaches of direct and indirect routing to enable a correspondent and a mobile device to exchange datagrams. lets now look at how these principles are put into practice! in section 7.2.1, well study mobility management in 4g5g networks; in section 7.2.1, well look at mobile ip, which has been proposed for the internet. 7.6.1 mobility management in 4g5g networks our earlier study of 4g and emerging 5g architectures in
section 7.4 acquainted us with all of the network elements that play a central role in 4g5g mobility management. lets now illustrate how those elements interoperate with each other to provide mobility services in todays 4g5g networks sauter 2014; gsma 2019b, which have their roots in earlier 3g cellular voice and data networks sauter 2014, and even earlier 2g voiceonly networks mouly 1992. this will help us synthesize what weve learned so far, allow us to introduce a few more advanced topics as well, and provide a lens into what might be in store for 5g mobility management. lets consider a simple scenario in which a mobile user e.g., a passenger in a car, with a smartphone attaches to a visited 4g5g network, begins streaming a hd video from a remote server, and then moves from the cell coverage of one 4g5g base station to another. the four major steps in this scenario are shown in figure 7.28 1. mobile device and base station association. the mobile device associates with a base station in the visited network. 2. controlplane configuration of network elements for the mobile device. the visited and home networks establish controlplane state indicating that the mobile device is resident in the visited network. 3. dataplane configuration of forwarding tunnels for the mobile device. the visited network and the home network establish tunnels through which the mobile device and streaming server can sendreceive ip datagrams, using indirect routing through the home networks packet data network gateway pgw. 4. mobile device handover from one base station to another. the mobile device changes its point of attachment to the visited network, via handover from one base station to another. lets now consider each of these four steps in more detail. m07_kuro5469_08_ge_c07.indd 617 29042021 1519 618 chapter 7 wireless and mobile networks 1. base station association. recall that in section 7.4.2, we studied the procedures by which a mobile device associates with a base station. we learned that the mobile device listens on all frequencies for primary signals being transmitted by base stations in its area. the mobile device acquires progressively more information about these base stations, ultimately selecting the base station with which to associate, and bootstrapping a control signaling channel with that base station. as part of this association, the mobile device provides the base station with its international mobile subscriber identity imsi, which uniquely identifies the mobile device as well as its home network and other additional subscriber information. 2. controlplane configuration of lte network elements for the mobile device. once the mobiledevicetobasestation signaling channel has been established, the base station can contact the mme in the visited network. the mme will consult and configure a number of 4g5g elements in both the home and visited networks to establish state on behalf of the mobile node the mme will use to the imsi and other information provided by the mobile device to retrieve authentication, encryption, and available network service information for that subscriber. that information might be in
the mmes local cache, retrieved from another mme that the mobile device had recently contacted, or retrieved from the hss in the mobile devices home network. the mutual authentication process which we will cover in more detail in section 8.8 ensures that visited networ kpdn gateway pgw streamingserverhome networkinter net pdn gateway pgwserving gateway sgwbase stationhss mme base station2 31 4 figure 7.28 an example 4g5g mobility scenario m07_kuro5469_08_ge_c07.indd 618 29042021 1519 7.6 mobility management in practice 619 the visited network is sure about the identity of the mobile device and that the device can authenticate the network to which it is attaching. the mme informs the hss in the mobile devices home network that the mobile device is now resident in the visited network, and the hss updates its database. the base station and the mobile device select parameters for the dataplane channel to be established between the mobile device and the base station recall that a control plane signaling channel is already in operation. 3. dataplane configuration of forwarding tunnels for the mobile device. the mme next configures the data plane for the mobile device, as shown in figure 7.29. two tunnels are established. one tunnel is between the base station and a serving gateway in the visited network. the second tunnel is between that serving gateway and the pdn gateway router in the mobile devices home network. 4g lte implements this form of symmetric indirect routingall traffic tofrom the mobile device will be tunneled through the devices home network. 4g5g tunnels use the gprs tunneling protocol gtp, specified in 3gpp gtpv1u 2019. the tunnel endpoint id teid in the gtp header indicates which tunnel a datagram belongs, allowing multiple flows to be multiplexed and demultiplexed by gtp between tunnel endpoints. it is instructive to compare the configuration of tunnels in figure 7.29 the case of mobile roaming in a visited network with that of figure 7.18 the case of mobility visited networkpdn gateway pgw streaming serverhome networkinter net pdn gateway pgwserving gateway sgwbase stationmme base station figure 7.29 tunneling in 4g5g networks between the serving gateway in the visited network and the pdn gateway in the home network m07_kuro5469_08_ge_c07.indd 619 29042021 1519 620 chapter 7 wireless and mobile networks only within the mobile devices home network. we see that in both cases, the serv ing gateway is coresident in the same network as the mobile device, but pdn gateway which is always the pdn gateway in the mobile devices home network may be in a different network than the mobile device. this is precisely indirect routing. an alternative to indirect routing, known as local breakout gsma 2019a has been specified in which the serving gateway establishes a tunnel to the pdn gateway in the local, visited network. in practice, however, local breakout is not widely used sauter 2014. once the tunnels have been configured and activated, the mobile device can now forward packets tofrom the internet via the pdn gateway in its home network! 4. handover management.
a handover occurs when a mobile device changes its association from one base station to another. the handover process described below is the same, regardless of whether the mobile device is resident in its home network, or is roaming in a visited network. as shown in figure 7.30, datagrams tofrom the device are initially before handover forwarded to the mobile through one base station which well refer to as the source base station, and after handover are routed to the mobile device through another base station which well refer to as the target base station. as we will see, a handover between base stations results not only in the mobile device transmittingreceiving tofrom a new base station but also in a change of the basestation side of the servinggatewaytobasestation tunnel in figure 7.29. in the simplest case of pdn gateway pgwserving gateway sgw mmesource base station target base station 5 573 1 24 6 figure 7.30 steps in handing over a mobile device from the source base station to the target base station m07_kuro5469_08_ge_c07.indd 620 29042021 1519 7.6 mobility management in practice 621 handover, when the two base stations are near each other and in the same network, all changes occurring as a result of handover are thus relatively local. in particular, the pdn gateway being used by the serving gateway remains blissfully unaware of device mobility. of course, more complicated handoff scenarios will require the use of more complex mechanisms sauter 2014; gsma 2019a. there may be several reasons for handover to occur. for example, the signal between the current base station and the mobile may have deteriorated to such an extent that communication is severely impaired. or a cell may have become overloaded, handling a large amount of traffic; handing over mobile devices to less congested nearby cells may alleviate this congestion. a mobile device periodically measures characteristics of a beacon signal from its current base station as well as signals from nearby base stations that it can hear. these measurements are reported once or twice a second to the mobile devices current source base station. based on these measurements, the current loads of mobiles in nearby cells, and other factors, the source base station may choose to initiate a handover. the 4g5g standards do not specify a specific algorithm to be used by a base station to determine whether or not to perform handover, or which target base station to choose; this is an active area of research zheng 2008; alexandris 2016. figure 7.30 illustrates the steps involved when a source base station decides to hand over a mobile device to the target base station. 1. the current source base station selects the target base station, and sends a handover request message to the target base station. 2. the target base station checks whether it has the resources to support the mobile device and its quality of service requirements. if so, it preallocates channel resources e.g., time slots on its radio access network and other resources for
that device. this preallocation of resources frees the mobile device from having to go through the timeconsuming basestation association protocol discussed earlier, allowing handover to be executed as fast as possible. the target base station replies to the source base station with a handover request acknowledge message, containing all the information at the target base station that the mobile device will need to associate with the new base station. 3. the source base station receives the handover request acknowledgement message and informs the mobile device of the target base stations identity and channel access information. at this point, the mobile device can begin sendingreceiving datagrams tofrom the new target base station. from the mobile devices point of view, handover is now complete! however, there is still a bit of work to be done within the network. 4. the source base station will also stop forwarding datagrams to the mobile device and instead forward any tunneled datagrams it receives to the target base station, which will later forward these datagrams to the mobile device. 5. the target base station informs the mme that it the target base station will be the new base station servicing the mobile device. the mme, in turn, signals m07_kuro5469_08_ge_c07.indd 621 29042021 1519 622 chapter 7 wireless and mobile networks to the serving gateway and the target base station to reconfigure the serving gatewaytobasestation tunnel to terminate at the target base station, rather than at the source base station. 6. the target base station confirms back to the source base station that the tunnel has been reconfigured, allowing the source base station to release resources associated with that mobile device. 7. at this point, the target base station can also begin delivering datagrams to the mobile device, including datagrams forwarded to the target base station by the source base station during handover, as well as datagrams newly arriving on the reconfigured tunnel from the serving gateway. it can also forward outgoing datagrams received from the mobile device into the tunnel to the serving gateway. the roaming configurations in todays 4g lte networks, such as that dis cussed above, will also be used in future emerging 5g networks gsma 2019c. recall, however, from our discussion in section 7.4.6 that the 5g networks will be denser, with significantly smaller cell sizes. this will make handover an even more critically important network function. in addition, low handover latency will be critical for many realtime 5g applications. the migration of the cellular network control plane to the sdn framework that we studied earlier in chapter 5 gsma 2018b; condoluci 2018 promises to enable implementations of a highercapacity, lowerlatency 5g cellular network control plane. the application of sdn in a 5g context is the subject of considerable research giust 2015; ordonezlucena 2017; nguyen 2016. 7.6.2 mobile ip todays internet does not have any widely deployed infrastructure that provides the type of services for on the go mobile users that we encountered for 4g5g cellular networks. but this is certainly not due to
the lack of technical solutions for providing such services in an internet setting! indeed, the mobile ip architecture and protocols rfc 5944 that we will briefly discuss below have been standardized by internet rfcs for more than 20 years, and research has continued on new, more secure and more generalized mobility solutions venkataramani 2014. instead, it has perhaps been the lack of motivating business and use cases arkko 2012 and the timely development and deployment of alternative mobility solutions in cellular networks that has blunted the deployment of mobile ip. recall that 20 years ago, 2g cellular networks had already provided a solution for mobile voice services the killer app for mobile users; additionally, next generation 3g networks supporting voice and data were on the horizon. perhaps the dual technology solutionmobile services via cellular networks when we are truly mobile and on the go i.e., the rightmost side of the mobility spectrum in figure 7.24 and internet services via 802.11 networks or wireline networks when we are stationary or moving m07_kuro5469_08_ge_c07.indd 622 29042021 1519 7.6 mobility management in practice 623 locally i.e., the leftmost side of the mobility spectrum in figure 7.24that we had 20 years ago and still have today will persist into the future. it will nonetheless be instructive to briefly overview the mobile ip standard here, as it provides many of the same services as cellular networks and implements many of the same basic mobility principles. earlier editions of this textbook have provided a more indepth study of mobile ip than we will provide here; the interested reader can find this retired material on this textbooks website. the internet architecture and protocols for supporting mobility, collectively known as mobile ip, are defined primarily in rfc 5944 for ipv4. mobile ip, like 4g5g, is a complex standard, and would require an entire book to describe in detail; indeed one such book is perkins 1998b. our modest goal here is to provide an overview of the most important aspects of mobile ip. the overall architecture and elements of mobile ip are strikingly similar to that of cellular provider networks. there is a strong notion of a home network, in which a mobile device has a permanent ip address, and visited networks known as foreign networks in mobile ip, where the mobile device will be allocated a careofaddress. the home agent in mobile ip has a similar function to the lte hss it tracks the location of a mobile device by receiving updates from foreign agents in foreign networks visited by that mobile device, just as the hss receives updates from mobility management entities mmes in visited networks in which a 4g mobile device resides. and both 4g5g and mobile ip use indirect routing to a mobile node, using tunnels to connect the gateway routers in the home and visitedforeign networks. table 7.3 summarizes the elements of the mobile ip architecture, along with a com parison with similar elements in 4g5g networks 4g5g element mobile ip element discussion home network
home network visited network foreign network imsi identifier permanent ip address globally unique routable address information home subscriber service hss home agent mobility management entity mme foreign agent data plane indirect forwarding via the home network, with tunneling between the home and visited network, and tunneling within the network in which the mobile device residesdata plane indirect forwarding via the home network, with tunneling between the home and visited network base station enodeb access point ap no specific ap technology is specified in mobile ip radio access network wlan no specific wlan technology is specified in mobile ip table 7.3 commonalities between 4g5g and mobile ip architectures m07_kuro5469_08_ge_c07.indd 623 29042021 1519 624 chapter 7 wireless and mobile networks the mobile ip standard consists of three main pieces agent discovery. mobile ip defines the protocols used by a foreign agent to adver tise its mobility services to a mobile device that wishes to attach to its network. those services will include providing a careofaddress to the mobile device for use in the foreign network, registration of the mobile device with the home agent in the mobile devices home network, and forwarding of datagrams tofrom the mobile device, among other services. registration with the home agent. mobile ip defines the protocols used by the mobile device andor foreign agent to register and deregister a careofaddress with a mobile devices home agent. indirect routing of datagrams. mobile ip also defines the manner in which datagrams are forwarded to mobile devices by a home agent, including rules for forwarding datagrams and handling error conditions, and several forms of tunneling rfc 2003, rfc 2004. again, our coverage here of mobile ip has been intentionally brief. the inter ested reader should consult the references in this section, or moredetailed discussions of mobile ip in earlier editions of this textbook. 7.7 wireless and mobility impact on higherlayer protocols in this chapter, weve seen that wireless networks differ significantly from their wired counterparts at both the link layer as a result of wireless channel characteristics such as fading, multipath, and hidden terminals and at the network layer as a result of mobile users who change their points of attachment to the network. but are there important differences at the transport and application layers? its tempting to think that these differences will be minor, since the network layer provides the same besteffort delivery service model to upper layers in both wired and wireless networks. similarly, if protocols such as tcp or udp are used to provide transportlayer services to applications in both wired and wireless networks, then the application layer should remain unchanged as well. in one sense, our intuition is righttcp and udp can and do operate in networks with wireless links. on the other hand, transport protocols in general, and tcp in particular, can sometimes have very different performance in wired and wireless networks, and it is here, in terms of performance, that differences are manifested. lets see why. recall that tcp retransmits a segment that is
either lost or corrupted on the path between sender and receiver. in the case of mobile users, loss can result from either network congestion router buffer overflow or from handover e.g., from delays in rerouting segments to a mobiles new point of attachment to the network. in all m07_kuro5469_08_ge_c07.indd 624 29042021 1519 7.7 wireless and mobility impact on higherla yer protocols 625 cases, tcps receivertosender ack indicates only that a segment was not received intact; the sender is unaware of whether the segment was lost due to congestion, during handover, or due to detected bit errors. in all cases, the senders response is the sameto retransmit the segment. tcps congestioncontrol response is also the same in all casestcp decreases its congestion window, as discussed in section 3.7. by unconditionally decreasing its congestion window, tcp implicitly assumes that segment loss results from congestion rather than corruption or handover. we saw in section 7.2 that bit errors are much more common in wireless networks than in wired networks. when such bit errors occur or when handover loss occurs, theres really no reason for the tcp sender to decrease its congestion window and thus decrease its sending rate. indeed, it may well be the case that router buffers are empty and packets are flowing along the endtoend path unimpeded by congestion. researchers realized in the early to mid 1990s that given high bit error rates on wireless links and the possibility of handover loss, tcps congestioncontrol response could be problematic in a wireless setting. three broad classes of approaches are possible for dealing with this problem local recovery. local recovery protocols recover from bit errors when and where e.g., at the wireless link they occur, for example, the 802.11 arq protocol we studied in section 7.3, or more sophisticated approaches that use both arq and fec ayanoglu 1995 that we saw in use in 4g5g networks in section 7.4.2. tcp sender awareness of wireless links. in the local recovery approaches, the tcp sender is blissfully unaware that its segments are traversing a wireless link. an alternative approach is for the tcp sender and receiver to be aware of the existence of a wireless link, to distinguish between congestive losses occurring in the wired network and corruptionloss occurring at the wireless link, and to invoke congestion control only in response to congestive wirednetwork losses. liu 2003 investigates techniques for distinguishing between losses on the wired and wireless segments of an endtoend path. huang 2013 provides insights on developing transport protocol mechanisms and applications that are more ltefriendly. splitconnection approaches. in a splitconnection approach bakre 1995, the endtoend connection between the mobile user and the other end point is broken into two transportlayer connections one from the mobile host to the wireless access point, and one from the wireless access point to the other communication end point which well assume here is a wired host. the endtoend connection is thus formed by the concatenation of a wireless part and a wired part. the transport layer
over the wireless segment can be a standard tcp connection bakre 1995, or a specially tailored error recovery protocol on top of udp. yavatkar 1994 investigates the use of a transportlayer selective repeat protocol over the wireless connection. measurements reported in wei 2006 indicate that split tcp connections have been widely used in cellular data networks, and that significant improvements can indeed be made through the use of split tcp connections. m07_kuro5469_08_ge_c07.indd 625 29042021 1519 626 chapter 7 wireless and mobile networks our treatment of tcp over wireless links has been necessarily brief here. indepth surveys of tcp challenges and solutions in wireless networks can be found in hanabali 2005; leung 2006. we encourage you to consult the references for details of this ongoing area of research. having considered transportlayer protocols, let us next consider the effect of wireless and mobility on applicationlayer protocols. because of the shared nature of the wireless spectrum, applications that operate over wireless links, particularly over cellular wireless links, must treat bandwidth as a scarce commodity. for example, a web server serving content to a web browser executing on a 4g smartphone will likely not be able to provide the same imagerich content that it gives to a browser operating over a wired connection. although wireless links do provide challenges at the application layer, the mobility they enable also makes possible a rich set of locationaware and contextaware applications baldauf 2007. more generally, wireless and mobile networks will continue to play a key role in realizing the ubiquitous computing environments of the future weiser 1991. its fair to say that weve only seen the tip of the iceberg when it comes to the impact of wireless and mobile networks on networked applications and their protocols! 7.8 summary wireless and mobile networks first revolutionized telephony and are now having an increasingly profound impact in the world of computer networks as well. with their anytime, anywhere, untethered access into the global network infrastructure, they are not only making network access more ubiquitous, they are also enabling an exciting new set of locationdependent services. given the growing importance of wireless and mobile networks, this chapter has focused on the principles, common link technologies, and network architectures for supporting wireless and mobile communication. we began this chapter with an introduction to wireless and mobile networks, drawing an important distinction between the challenges posed by the wireless nature of the communication links in such networks, and by the mobility that these wireless links enable. this allowed us to better isolate, identify, and master the key concepts in each area. we focused first on wireless communication, considering the characteristics of a wireless link in section 7.2. in sections 7.3 and 7.4, we examined the linklevel aspects of the ieee 802.11 wifi wireless lan standard, bluetooth, and 4g5g cellular neworks. we then turned our attention to the issue of mobility. in section 7.5, we identified several forms of mobility, with points along this spectrum posing different challenges and admitting different solutions. we
considered the problems of locating and routing to a mobile user, as well as approaches for handing over the mobile user who dynamically moves from one point of attachment to the network to another. we examined how these issues were addressed in 4g5g networks and in the m07_kuro5469_08_ge_c07.indd 626 29042021 1519 homework problems and questions 627 mobile ip standard. finally, we considered the impact of wireless links and mobility on transportlayer protocols and networked applications in section 7.7. although we have devoted an entire chapter to the study of wireless and mobile networks, an entire book or more would be required to fully explore this exciting and rapidly expanding field. we encourage you to delve more deeply into this field by consulting the many references provided in this chapter. homework problems and questions chapter 7 review questions section 7.1 r1. what does it mean for a wireless network to be operating in infrastructure mode? if the network is not in infrastructure mode, what mode of operation is it in, and what is the difference between that mode of operation and infrastructure mode? r2. both manet and vanet are multihop infrastructureless wireless networks. what is the difference between them? section 7.2 r3. what are the differences between the following types of wireless channel impairments path loss, multipath propagation, interference from other sources? r4. as a mobile node gets farther and farther away from a base station, what are two actions that a base station could take to ensure that the loss probability of a transmitted frame does not increase? section 7.3 r5. describe the role of the beacon frames in 802.11. r6. an access point periodically sends beacon frames. what are the contents of the beacon frames? r7. why are acknowledgments used in 802.11 but not in wired ethernet? r8. what is the difference between passive scanning and active scanning? r9. what are the two main purposes of a cts frame? r10. suppose the ieee 802.11 rts and cts frames were as long as the standard data and ack frames. would there be any advantage to using the cts and rts frames? why or why not? r11. section 7.3.4 discusses 802.11 mobility, in which a wireless station moves from one bss to another within the same subnet. when the aps are interconnected with a switch, an ap may need to send a frame with a spoofed mac address to get the switch to forward the frame properly. why? m07_kuro5469_08_ge_c07.indd 627 29042021 1519 628 chapter 7 wireless and mobile networks r12. what is the difference between bluetooth and zigbee in terms of data rate? r13. what is the role of the base station in 4g5g cellular architecture? with which other 4g5g network elements mobile device, mme, hss, serving gateway router, pdn gateway router does it directly communicate with in the control plane? in the data plane? r14. what is an international mobile subscriber identity imsi? r15. what is the role of the home subscriber service hss in 4g5g cellular architecture? with which
other 4g5g network elements mobile device, base station, mme, serving gateway router, pdn gateway router does it directly communicate with in the control plane? in the data plane? r16. what is the role of the mobility management entity mme in 4g5g cellular architecture? with which other 4g5g network elements mobile device, base station, hss, serving gateway router, pdn gateway router does it directly communicate with in the control plane? in the data plane? r17. describe the purpose of two tunnels in the data plane of the 4g5g cellular architecture. when a mobile device is attached to its own home network, at which 4g5g network element mobile device, base station, hss, mme, serving gateway router, pdn gateway router does each end of each of the two tunnels terminate? r18. what are the three sublayers in the link layer in the lte protocol stack? briefly describe their functions. r19. does the lte wireless access network use fdma, tdma, or both? explain your answer. r20. describe the two possible sleep modes of a 4g5g mobile device. in each of these sleep modes, will the mobile device remain associated with the same base station between the time it goes to sleep and the time it wakes up and first sendsreceives a new datagram? r21. what is meant by a visited network and a home network in 4g5g cel lular architecture? r22. list three important differences between 4g and 5g cellular networks. section 7.5 r23. what does it mean that a mobile device is said to be roaming? r24. what is meant by hand over of a network device? r25. what is the difference between direct and indirect routing of datagrams to from a roaming mobile host? r26. what does triangle routing mean? the terms used above may differ from the terms found in the official bluetooth specification. the terms used in the official specifica tion do not align with pearsons commitment to promoting diversity, equality, and inclusion, and protecting against bias and stereotyping in the global population of the learners we serve. m07_kuro5469_08_ge_c07.indd 628 29042021 1519 problems 629 section 7.6 r27. describe the similarity and differences in tunnel configuration when a mobile device is resident in its home network, versus when it is roaming in a visited network. r 28. when a mobile device is handed over from one base station to another in a 4g5g network, which network element makes the decision to initiate that handover? which network element chooses the target base station to which the mobile device will be handed over? r 29. describe how and when the forwarding path of datagrams entering the visited network and destined to the mobile device changes before, during, and after hand over. r 30. consider the following elements of the mobile ip architecture the home network, foreign network permanent ip address, home agent, foreign agent, data plane forwarding, access point ap, and wlans at the network edge. what are the closest equivalent elements in the 4g5g cellular network architecture? section 7.7 r31. what are
three approaches that can be used to avoid having a single wireless link degrade the performance of an endtoend transportlayer tcp connection? problems p1. consider the singlesender cdma example in figure 7.5. what would be the senders output for the 2 data bits shown if the senders cdma code were 1, 1, 1, 1, 1, 1, 1, 1? p2. consider sender 2 in figure 7.6. what is the senders output to the channel before it is added to the signal from sender 1, z2 i,m? p3. after selecting the ap with which to associate, a wireless host sends an association request frame to the ap, and the ap responds with an association response frame. once associated with an ap, the host will want to join the subnet in the ip addressing sense of section 4.4.2 to which the ap belongs. what does the host do next? p4. if two cdma senders have codes 1, 1, 1, 1, 1, 1, 1, 1 and 1, 1, 1, 1, 1, 1, 1, 1, would the corresponding receivers be able to decode the data correctly? justify. p5. suppose there are two isps providing wifi access in a particular caf√©, with each isp operating its own ap and having its own ip address block. a. further suppose that by accident, each isp has configured its ap to oper ate over channel 11. will the 802.11 protocol completely break down in this situation? discuss what happens when two stations, each associated with a different isp, attempt to transmit at the same time. b. now suppose that one ap operates over channel 1 and the other over channel 11. how do your answers change? m07_kuro5469_08_ge_c07.indd 629 29042021 1519 630 chapter 7 wireless and mobile networks p6. in step 4 of the csmaca protocol, a station that successfully transmits a frame begins the csmaca protocol for a second frame at step 2, rather than at step 1. what rationale might the designers of csmaca have had in mind by having such a station not transmit the second frame immediately if the channel is sensed idle? p7. suppose an 802.11b station is configured to always reserve the channel with the rtscts sequence. suppose this station suddenly wants to transmit 1,000 bytes of data, and all other stations are idle at this time. assume a transmission rate of 10 mbps. calculate the time required to transmit the frame and receive the acknowledgment as a function of sifs and difs, ignoring propagation delay and assuming no bit errors. p8. consider the scenario shown in figure 7.31, in which there are four wireless nodes, a, b, c, and d. the radio coverage of the four nodes is shown via the shaded ovals; all nodes share the same frequency. when a transmits, it can only be heardreceived by b; when b transmits, both a and c can hearreceive from b; when c transmits, both b and d can hearreceive from c; when d transmits, only c can hearreceive from d. suppose now that
each node has an infinite supply of messages that it wants to send to each of the other nodes. if a messages destination is not an immediate neighbor, then the message must be relayed. for example, if a wants to send to d, a message from a must first be sent to b, which then sends the message to c, which then sends the message to d. time is slotted, with a message transmission time taking exactly one time slot, e.g., as in slotted aloha. during a slot, a node can do one of the following i send a message, ii receive a mes sage if exactly one message is being sent to it, iii remain silent. as always, if a node hears two or more simultaneous transmissions, a collision occurs and none of the transmitted messages are received successfully. you can assume here that there are no bitlevel errors, and thus if exactly one message is sent, it will be received correctly by those within the transmission radius of the sender. a. suppose now that an omniscient controller i.e., a controller that knows the state of every node in the network can command each node to do whatever it the omniscient controller wishes, that is, to send a message, to receive a figure 7.31 scenario for problem p8ab cd m07_kuro5469_08_ge_c07.indd 630 29042021 1519 problems 631 message, or to remain silent. given this omniscient controller, what is the maximum rate at which a data message can be transferred from c to a, given that there are no other messages between any other sourcedestination pairs? b. suppose now that a sends messages to b, and d sends messages to c. what is the combined maximum rate at which data messages can flow from a to b and from d to c? c. suppose now that a sends messages to b, and c sends messages to d. what is the combined maximum rate at which data messages can flow from a to b and from c to d? d. suppose now that the wireless links are replaced by wired links. repeat questions a through c again in this wired scenario. e. now suppose we are again in the wireless scenario, and that for every data message sent from source to destination, the destination will send an ack message back to the source e.g., as in tcp. also suppose that each ack message takes up one slot. repeat questions ac above for this scenario. p9. power is a precious resource in mobile devices, and thus the 802.11 standard provides powermanagement capabilities that allow 802.11 nodes to minimize the amount of time that their sense, transmit, and receive functions and other circuitry need to be on. in 802.11, a node is able to explicitly alternate between sleep and wake states. explain in brief how a node communicates with the ap to perform power management. p10. consider the following idealized lte scenario. the downstream channel see figure 7.22 is slotted in time, across f frequencies.
there are four nodes, a, b, c, and d, reachable from the base station at rates of 10 mbps, 5 mbps, 2.5 mbps, and 1 mbps, respectively, on the downstream channel. these rates assume that the base station utilizes all time slots available on all f frequencies to send to just one station. the base station has an infinite amount of data to send to each of the nodes, and can send to any one of these four nodes using any of the f frequencies during any time slot in the downstream subframe. a. what is the maximum rate at which the base station can send to the nodes, assuming it can send to any node it chooses during each time slot? is your solution fair? explain and define what you mean by fair. b. if there is a fairness requirement that each node must receive an equal amount of data during each one second interval, what is the average transmission rate by the base station to all nodes during the downstream subframe? explain how you arrived at your answer. c. suppose that the fairness criterion is that any node can receive at most twice as much data as any other node during the subframe. what is the average transmission rate by the base station to all nodes during the subframe? explain how you arrived at your answer. p11. in section 7.5, one proposed solution that allowed mobile users to maintain their ip addresses as they moved among foreign networks was to have a foreign network advertise a highly specific route to the mobile user and use the existing m07_kuro5469_08_ge_c07.indd 631 29042021 1519 632 chapter 7 wireless and mobile networks routing infrastructure to propagate this information throughout the network. we identified scalability as one concern. suppose that when a mobile user moves from one network to another, the new foreign network advertises a specific route to the mobile user, and the old foreign network withdraws its route. consider how routing information propagates in a distancevector algorithm particularly for the case of interdomain routing among networks that span the globe. a. will other routers be able to route datagrams immediately to the new for eign network as soon as the foreign network begins advertising its route? b. is it possible for different routers to believe that different foreign networks contain the mobile user? c. discuss the timescale over which other routers in the network will eventually learn the path to the mobile users. p12. in 4g5g networks, what effect will handoff have on endtoend delays of datagrams between the source and destination? p13. consider a mobile device that powers on and attaches to an lte visited network a, and assume that indirect routing to the mobile device from its home network h is being used. subsequently, while roaming, the device moves out of range of visited network a and moves into range of an lte visited network b. you will design a handover process from a base station bs.a in visited
network a to a base station bs.b in visited network b. sketch the series of steps that would need to be taken, taking care to identify the network elements involved and the networks to which they belong, to accomplish this handover. assume that following handover, the tunnel from the home network to the visited network will terminate in visiting network b. p14. consider again the scenario in problem p13. but now assume that the tunnel from home network h to visited network a will continue to be used. that is, visited network a will serve as an anchor point following handover. aside this is actually the process used for routing circuitswitched voice calls to a roaming mobile phone in 2g gsm networks. in this case, additional tunnels will need to be built to reach the mobile device in its resident visited network b. once again, sketch the series of steps that would need to be taken, taking care to identify the network elements involved and the networks to which they belong, to accomplish this handover. what are one advantage and one disadvantage of this approach over the approach taken in your solution to problem p13? wireshark lab wifi at the web site for this textbook, www.pearsonglobaleditions.com, also mirrored on the instructors website, httpgaia.cs.umass.edukurose_ross, youll find a wireshark lab for this chapter that captures and studies the 802.11 frames exchanged between a wireless laptop and an access point. m07_kuro5469_08_ge_c07.indd 632 29042021 1519 633please describe a few of the most exciting projects you have worked on during your career. what were the biggest challenges? in the mid90s at usc and isi, i had the great fortune to work with the likes of steve deering, mark handley, and van jacobson on the design of multicast routing protocols in particular, pim. i tried to carry many of the architectural design lessons from multicast into the design of ecological monitoring arrays, where for the first time i really began to take applications and multidisciplinary research seriously. the need for jointly innovating in the social and technological space is what interests me so much about my latest area of research, mobile health. the challenges in multicast routing, environmental sensing and an interview with deborah estrin courtesy of deborah estrindeborah estrin is a professor of computer science and associate dean for impact at cornell tech in new york city and a professor of public health at weill cornell medical college. she received her ph.d. 1985 in computer science from m.i.t. and her b.s. 1980 from uc berkeley. estrins early research focused on the design of network protocols, including multicast and interdomain routing. in 2002 estrin founded the nsffunded science and technology center at ucla, center for embedded networked sensing cens httpcens.ucla.edu.. cens launched new areas of multidisciplinary computer systems research from sensor networks for environmental monitoring, to participatory sensing and mobile health. as described in her 2013 tedmed talk, she explores how individuals can benefit from the pervasive data byproducts of digital and iot interactions for health
and life management. professor estrin is an elected member of the american academy of arts and sciences 2007, the national academy of engineering 2009, and the national academy of medicine 2019. she is a fellow of the ieee, acm, and aaas. she was selected as the first acmw athena lecturer 2006, awarded the anita borg institutes women of vision award for innovation 2007, inducted into the witi hall of fame 2008, received honorary doctorates from epfl 2008 and uppsala university 2011, and was selected as a macarthur fellow 2018. m07_kuro5469_08_ge_c07.indd 633 29042021 1519 634 mobile health are as diverse as the problem domains, but what they have in common is the need to keep our eyes open to whether we have the problem definition right as we iterate between design and deployment, prototype and pilot. none of these are problems that could be solved solely analytically, or with simulation or even in constructed laboratory experi ments. they challenged our ability to retain clean architectures in the presence of messy problems and contexts, and they required extensive collaboration. what changes and innovations do you see happening in wireless networks and mobility in the future? in a prior edition of this interview i said that i have never put much faith into predicting the future, but i did go on to speculate that we might see the end of feature phones i.e., those that are not programmable and are used only for voice and text messaging as smart phones become more and more powerful and the primary point of internet access for manyand now not so many years later that is clearly the case. i also predicted that we would see the continued proliferation of embedded sims by which all sorts of devices have the ability to communicate via the cellular network at low data rates. while that has occurred, we see many devices and internet of things that use embedded wifi and other lower power, shorter range, forms of connectivity to local hubs. i did not anticipate at that time the emergence of a large consumer wearables market or interactive voice agents like siri and alexa. by the time the next edition is published i expect broad proliferation of personal applications that leverage data from iot and other digital traces. where do you see the future of networking and the internet? again i think its useful to look both back and forward. previously i commented that the efforts in named data and softwaredefined networking would emerge to create a more manageable, evolvable, and richer infrastructure and more generally represent moving the role of architecture higher up in the stack. in the beginnings of the internet, architecture was layer 4 and below, with applications being more siloedmonolithic, sitting on top. now data and analytics dominate transport. the adoption of sdn which i was really happy to see introduced into the 7th edition of this book has been well beyond what i ever anticipated. that said, new challenges have emerged from higher up
in the stack. machine learning based systems and services favor scale, particularly when they rely on continuous consumer engagement clicks for financial viability. the resulting information ecosystem has become far more monolithic than in earlier decades. this is a challenge for networking, the internet, and frankly our society. m07_kuro5469_08_ge_c07.indd 634 29042021 1519 635 what people inspired you professionally? there are three people who come to mind. first, dave clark, the secret sauce and under sung hero of the internet community. i was lucky to be around in the early days to see him act as the organizing principle of the iab and internet governance; the priest of rough consensus and running code. second, scott shenker, for his intellectual brilliance, integrity, and persistence. i strive for, but rarely attain, his clarity in defining problems and solutions. he is always the first person i email for advice on matters large and small. third, my sister judy estrin, who had the creativity and commitment to spend the first half of her career bringing ideas and concepts to market; and now has the courage to study, write, and advise on how to rebuild it to support a healthier democracy. what are your recommendations for students who want careers in computer science and networking? first, build a strong foundation in your academic work, balanced with any and every real world work experience you can get. as you look for a working environment, seek opportunities in problem areas you really care about and with smart teams that you can learn from and work with to build things that matter. m07_kuro5469_08_ge_c07.indd 635 29042021 1519 m07_kuro5469_08_ge_c07.indd 636 29042021 1519 this page is intentionally left blank way back in section 1.6, we described some of the more prevalent and damaging classes of internet attacks, including malware attacks, denial of service, sniffing, source masquerading, and message modification and deletion. although we have since learned a tremendous amount about computer networks, we still havent examined how to secure networks from those attacks. equipped with our newly acquired expertise in computer networking and internet protocols, well now study indepth secure communication and, in particular, how computer networks can be defended from those nasty bad guys. let us introduce alice and bob, two people who want to communicate and wish to do so securely. this being a networking text, we should remark that alice and bob could be two routers that want to exchange routing tables securely, a client and server that want to establish a secure transport connection, or two email applications that want to exchange secure emailall case studies that we will consider later in this chapter. alice and bob are wellknown fixtures in the security community, perhaps because their names are more fun than a generic entity named a that wants to communicate securely with a generic entity named b. love affairs, wartime communication, and business transactions are the commonly cited human needs for secure communications; preferring the first to the latter two, were happy to use alice and bob
as our sender and receiver, and imagine them in this first scenario. we said that alice and bob want to communicate and wish to do so securely, but what precisely does this mean? as we will see, security like love is a manysplendored thing; that is, there are many facets to security. certainly, alice and bob would like for the contents of their communication to remain secret from an eavesdropper. they probably would also like to make sure that when they are security in computer networks8chapter 637 m08_kuro5469_08_ge_c08.indd 637 29042021 1520 638 chapter 8 security in computer networks communicating, they are indeed communicating with each other, and that if their communication is tampered with by an eavesdropper, that this tampering is detected. in the first part of this chapter, well cover the fundamental cryptography techniques that allow for encrypting communication, authenticating the party with whom one is communicating, and ensuring message integrity. in the second part of this chapter, well examine how the fundamental cryptography principles can be used to create secure networking protocols. once again taking a topdown approach, well examine secure protocols in each of the top four layers, beginning with the application layer. well examine how to secure email, how to secure a tcp connection, how to provide blanket security at the network layer, and how to secure a wireless lan. in the third part of this chapter well consider operational security, which is about protecting organizational networks from attacks. in particular, well take a careful look at how firewalls and intrusion detection systems can enhance the security of an organizational network. 8.1 what is network security? lets begin our study of network security by returning to our lovers, alice and bob, who want to communicate securely. what precisely does this mean? certainly, alice wants only bob to be able to understand a message that she has sent, even though they are communicating over an insecure medium where an intruder trudy, the intruder may intercept whatever is transmitted from alice to bob. bob also wants to be sure that the message he receives from alice was indeed sent by alice, and alice wants to make sure that the person with whom she is communicating is indeed bob. alice and bob also want to make sure that the contents of their messages have not been altered in transit. they also want to be assured that they can communicate in the first place i.e., that no one denies them access to the resources needed to communicate. given these considerations, we can identify the following desirable properties of secure communication. confidentiality. only the sender and intended receiver should be able to under stand the contents of the transmitted message. because eavesdroppers may intercept the message, this necessarily requires that the message be somehow encrypted so that an intercepted message cannot be understood by an interceptor. this aspect of confidentiality is probably the most commonly perceived meaning of the term secure communication. well study cryptographic techniques for encrypting and decrypting data
in section 8.2. message integrity. alice and bob want to ensure that the content of their communication is not altered, either maliciously or by accident, in transit. exten sions to the checksumming techniques that we encountered in reliable transport m08_kuro5469_08_ge_c08.indd 638 29042021 1520 8.1 what is network security? 639 and data link protocols can be used to provide such message integrity. we will study message integrity in section 8.3. endpoint authentication. both the sender and receiver should be able to confirm the identity of the other party involved in the communicationto confirm that the other party is indeed who or what they claim to be. facetoface human communication solves this problem easily by visual recognition. when communicating entities exchange messages over a medium where they cannot see the other party, authentication is not so simple. when a user wants to access an inbox, how does the mail server verify that the user is the person he or she claims to be? we study endpoint authentication in section 8.4. operational security. almost all organizations companies, universities, and so on today have networks that are attached to the public internet. these networks therefore can potentially be compromised. attackers can attempt to deposit worms into the hosts in the network, obtain corporate secrets, map the internal network configurations, and launch dos attacks. well see in section 8.9 that operational devices such as firewalls and intrusion detection systems are used to counter attacks against an organizations network. a firewall sits between the organizations network and the public network, controlling packet access to and from the network. an intrusion detection system performs deep packet inspection, alerting the network administrators about suspicious activity. having established what we mean by network security, lets next consider exactly what information an intruder may have access to, and what actions can be taken by the intruder. figure 8.1 illustrates the scenario. alice, the sender, wants to send data to bob, the receiver. in order to exchange data securely, while meeting the requirements of confidentiality, endpoint authentication, and message integrity, alice and bob will exchange control messages and data messages in much the same way that tcp senders and receivers exchange control segments and data segments. secure sender alice trudychannelcontrol, data messages secure receiver bobdata data figure 8.1 sender, receiver, and intruder alice, bob, and trudy m08_kuro5469_08_ge_c08.indd 639 29042021 1520 640 chapter 8 security in computer networks all or some of these messages will typically be encrypted. as discussed in section 1.6, an intruder can potentially perform eavesdroppingsniffing and recording control and data messages on the channel. modification, insertion, or deletion of messages or message content. as well see, unless appropriate countermeasures are taken, these capabilities allow an intruder to mount a wide variety of security attacks snooping on communi cation possibly stealing passwords and data, impersonating another entity, hijacking an ongoing session, denying service to legitimate network users by overloading system resources, and so on. a summary of reported attacks is maintained at the cert coordination center cert 2020. having
established that there are indeed real threats loose in the internet, what are the internet equivalents of alice and bob, our friends who need to communicate securely? certainly, bob and alice might be human users at two end systems, for example, a real alice and a real bob who really do want to exchange secure email. they might also be participants in an electronic commerce transaction. for example, a real bob might want to transfer his credit card number securely to a web server to purchase an item online. similarly, a real alice might want to interact with her bank online. the parties needing secure communication might themselves also be part of the network infrastructure. recall that the domain name system dns, see section 2.4 or routing daemons that exchange routing information see chapter 5 require secure communication between two parties. the same is true for network management applications, a topic we examined in chapter 5. an intruder that could actively interfere with dns lookups as discussed in section 2.4, routing computations sections 5.3 and 5.4, or network management functions sections 5.5 and 5.7 could wreak havoc in the internet. having now established the framework, a few of the most important definitions, and the need for network security, let us next delve into cryptography. while the use of cryptography in providing confidentiality is selfevident, well see shortly that it is also central to providing endpoint authentication and message integritymaking cryptography a cornerstone of network security. 8.2 principles of cryptography although cryptography has a long history dating back at least as far as julius caesar, modern cryptographic techniques, including many of those used in the internet, are based on advances made in the past 30 years. kahns book, the codebreakers kahn 1967, and singhs book, the code book the science of secrecy from ancient egypt to quantum cryptography singh 1999, provide a fascinating look at the m08_kuro5469_08_ge_c08.indd 640 29042021 1520 8.2 principles of cryptography 641 long history of cryptography. a complete discussion of cryptography itself requires a complete book bishop 2003; kaufman 2002; schneier 2015 and so we only touch on the essential aspects of cryptography, particularly as they are practiced on the internet. we also note that while our focus in this section will be on the use of cryptography for confidentiality, well see shortly that cryptographic techniques are inextricably woven into authentication, message integrity, nonrepudiation, and more. cryptographic techniques allow a sender to disguise data so that an intruder can gain no information from the intercepted data. the receiver, of course, must be able to recover the original data from the disguised data. figure 8.2 illustrates some of the important terminology. suppose now that alice wants to send a message to bob. alices message in its original form e.g., bob, i love you. alice is known as plaintext, or cleartext. alice encrypts her plaintext message using an encryption algorithm so that the encrypted message, known as ciphertext, looks unintelligible to any intruder. interestingly, in many modern cryptographic systems, including
those used in the internet, the encryption technique itself is knownpublished, standardized, and available to everyone e.g., rfc 1321; rfc 3447; rfc 2420; nist 2001, even a potential intruder! clearly, if everyone knows the method for encoding data, then there must be some secret information that prevents an intruder from decrypting the transmitted data. this is where keys come in. in figure 8.2, alice provides a key, ka, a string of numbers or characters, as input to the encryption algorithm. the encryption algorithm takes the key and the plaintext message, m, as input and produces ciphertext as output. the notation kam refers to the ciphertext form encrypted using the key ka of the plaintext message, m. the actual encryption algorithm that uses key ka will be evident from the context. similarly, bob will provide a key, kb, to the decryption algorithm figure 8.2 cryptographic componentsencryption algorithmciphertext channel trudyalice bobdecryption algorithmplaintext key keyplaintext ka kb m08_kuro5469_08_ge_c08.indd 641 29042021 1520 642 chapter 8 security in computer networks that takes the ciphertext and bobs key as input and produces the original plain text as output. that is, if bob receives an encrypted message kam, he decrypts it by computing kbkamm. in symmetric key systems, alices and bobs keys are identical and are secret. in public key systems, a pair of keys is used. one of the keys is known to both bob and alice indeed, it is known to the whole world. the other key is known only by either bob or alice but not both. in the following two subsections, we consider symmetric key and public key systems in more detail. 8.2.1 symmetric key cryptography all cryptographic algorithms involve substituting one thing for another, for example, taking a piece of plaintext and then computing and substituting the appropriate ciphertext to create the encrypted message. before studying a modern keybased cryptographic system, let us first get our feet wet by studying a very old, very simple symmetric key algorithm attributed to julius caesar, known as the caesar cipher a cipher is a method for encrypting data. for english text, the caesar cipher would work by taking each letter in the plain text message and substituting the letter that is k letters later allowing wraparound; that is, having the letter z followed by the letter a in the alphabet. for example, if k3, then the letter a in plaintext becomes d in ciphertext; b in plaintext becomes e in ciphertext, and so on. here, the value of k serves as the key. as an example, the plaintext message bob, i love you. alice becomes ere, l oryh brx. dolfh in ciphertext. while the ciphertext does indeed look like gibberish, it wouldnt take long to break the code if you knew that the caesar cipher was being used, as there are only 25 possible key values. an improvement on the caesar cipher is the monoalphabetic cipher, which also substitutes one letter of the alphabet with another letter of the alphabet. however, rather than substituting according
to a regular pattern e.g., substitution with an offset of k for all letters, any letter can be substituted for any other letter, as long as each letter has a unique substitute letter, and vice versa. the substitution rule in figure 8.3 shows one possible rule for encoding plaintext. the plaintext message bob, i love you. alice becomes nkn, s gktc wky. mgsbc. thus, as in the case of the caesar cipher, this looks like gibberish. a monoalphabetic cipher would also appear to be better than the caesar cipher in that there are 26! on the order of 1026 possible pairings of letters rather than 25 possible pairings. a bruteforce approach of trying all 1026 possible pairings figure 8.3 a monoalphabetic cipherplaintext letter a b c d e f g h i j k l m n o p q r s t u v w x y z ciphertext letter m n b v c x z a s d f g h j k l p o i u y t r e w q m08_kuro5469_08_ge_c08.indd 642 29042021 1520 8.2 principles of cryptography 643 would require far too much work to be a feasible way of breaking the encryption algorithm and decoding the message. however, by statistical analysis of the plaintext language, for example, knowing that the letters e and t are the most frequently occurring letters in typical english text accounting for 13 percent and 9 percent of letter occurrences, and knowing that particular twoand threeletter occurrences of letters appear quite often together for example, in, it, the, ion, ing, and so forth make it relatively easy to break this code. if the intruder has some knowledge about the possible contents of the message, then it is even easier to break the code. for example, if trudy the intruder is bobs wife and suspects bob of having an affair with alice, then she might suspect that the names bob and alice appear in the text. if trudy knew for certain that those two names appeared in the ciphertext and had a copy of the example ciphertext message above, then she could immediately determine seven of the 26 letter pairings, requiring 109 fewer possibilities to be checked by a bruteforce method. indeed, if trudy suspected bob of having an affair, she might well expect to find some other choice words in the message as well. when considering how easy it might be for trudy to break bob and alices encryption scheme, one can distinguish three different scenarios, depending on what information the intruder has. ciphertextonly attack. in some cases, the intruder may have access only to the intercepted ciphertext, with no certain information about the contents of the plaintext message. we have seen how statistical analysis can help in a ciphertextonly attack on an encryption scheme. knownplaintext attack. we saw above that if trudy somehow knew for sure that bob and alice appeared in the ciphertext message, then she could have determined the plaintext, ciphertext pairings for the
letters a, l, i, c, e, b, and o. trudy might also have been fortunate enough to have recorded all of the ciphertext transmissions and then found bobs own decrypted version of one of the transmissions scribbled on a piece of paper. when an intruder knows some of the plaintext, ciphertext pairings, we refer to this as a knownplaintext attack on the encryption scheme. chosenplaintext attack. in a chosenplaintext attack, the intruder is able to choose the plaintext message and obtain its corresponding ciphertext form. for the simple encryption algorithms weve seen so far, if trudy could get alice to send the message, the quick brown fox jumps over the lazy dog, she could completely break the encryption scheme. well see shortly that for more sophisticated encryption techniques, a chosenplaintext attack does not necessarily mean that the encryption technique can be broken. five hundred years ago, techniques improving on monoalphabetic encryp tion, known as polyalphabetic encryption, were invented. the idea behind polyalphabetic encryption is to use multiple monoalphabetic ciphers, with a specific m08_kuro5469_08_ge_c08.indd 643 29042021 1520 644 chapter 8 security in computer networks monoalphabetic cipher to encode a letter in a specific position in the plaintext mes sage. thus, the same letter, appearing in different positions in the plaintext message, might be encoded differently. an example of a polyalphabetic encryption scheme is shown in figure 8.4. it has two caesar ciphers with k5 and k19, shown as rows. we might choose to use these two caesar ciphers, c1 and c2, in the repeating pattern c1, c2, c2, c1, c2. that is, the first letter of plaintext is to be encoded using c1, the second and third using c2, the fourth using c1, and the fifth using c2. the pattern then repeats, with the sixth letter being encoded using c1, the seventh with c2, and so on. the plaintext message bob, i love you. is thus encrypted ghu, n etox dhz. note that the first b in the plaintext message is encrypted using c1, while the second b is encrypted using c2. in this example, the encryption and decryption key is the knowledge of the two caesar keys k5, k19 and the pattern c1, c2, c2, c1, c2. block ciphers let us now move forward to modern times and examine how symmetric key encryption is done today. we focus on block ciphers, which are used in many secure internet protocols, including pgp for secure email, tls for securing tcp connections, and ipsec for securing the networklayer transport. in a block cipher, the message to be encrypted is processed in blocks of k bits. for example, if k64, then the message is broken into 64bit blocks, and each block is encrypted independently. to encode a block, the cipher uses a onetoone mapping to map the kbit block of cleartext to a kbit block of ciphertext. lets look at an example. suppose that k3, so that the block cipher maps 3bit inputs cleartext to 3bit outputs ciphertext. one possible mapping is given in
table 8.1. notice that this is a onetoone mapping; that is, there is a different output for each input. this block cipher breaks the message up into 3bit blocks and encrypts each block according to the above mapping. you should verify that the message 010110001111 gets encrypted into 101000111001. continuing with this 3bit block example, note that the mapping in table 8.1 is just one mapping of many possible mappings. how many possible mappings are there? to answer this question, observe that a mapping is nothing more than a permutation of all the possible inputs. there are 23 8 possible inputs listed under the figure 8.4 a polyalphabetic cipher using two caesar ciphersplaintext letter a b c d e f g h i j k l m n o p q r s t u v w x y z c1k 5 c2k 19 f g h i j k l m n o p q r s t u v w x y z a b c d e t u v w x y z a b c d e f g h i j k l m n o p q r s m08_kuro5469_08_ge_c08.indd 644 29042021 1520 8.2 principles of cryptography 645 input columns. these eight inputs can be permuted in 8!40,320 different ways. since each of these permutations specifies a mapping, there are 40,320 possible map pings. we can view each of these mappings as a keyif alice and bob both know the mapping the key, they can encrypt and decrypt the messages sent between them. the bruteforce attack for this cipher is to try to decrypt ciphtertext by using all mappings. with only 40,320 mappings when k3, this can quickly be accom plished on a desktop pc. to thwart bruteforce attacks, block ciphers typically use much larger blocks, consisting of k64 bits or even larger. note that the number of possible mappings for a general kblock cipher is 2k!, which is astronomical for even moderate values of k such as k64. although fulltable block ciphers, as just described, with moderate values of k can produce robust symmetric key encryption schemes, they are unfortunately difficult to implement. for k64 and for a given mapping, alice and bob would need to maintain a table with 264 input values, which is an infeasible task. moreover, if alice and bob were to change keys, they would have to each regenerate the table. thus, a fulltable block cipher, providing predetermined mappings between all inputs and outputs as in the example above, is simply out of the question. instead, block ciphers typically use functions that simulate randomly permuted tables. an example adapted from kaufman 2002 of such a function for k64 bits is shown in figure 8.5. the function first breaks a 64bit block into 8 chunks, with each chunk consisting of 8 bits. each 8bit chunk is processed by an 8bit to 8bit table, which is of manageable size. for example, the first chunk is processed by the table denoted
by t1. next, the 8 output chunks are reassembled into a 64bit block. the positions of the 64 bits in the block are then scrambled permuted to produce a 64bit output. this output is fed back to the 64bit input, where another cycle begins. after n such cycles, the function provides a 64bit block of ciphertext. the purpose of the rounds is to make each input bit affect most if not all of the final output bits. if only one round were used, a given input bit would affect only 8 of the 64 output bits. the key for this block cipher algorithm would be the eight permutation tables assuming the scramble function is publicly known. today there are a number of popular block ciphers, including des standing for data encryption standard, 3des, and aes standing for advanced encryption table 8.1 a specific 3bit block cipherinput output input output 000 110 100 011 001 111 101 010 010 101 110 000 011 100 111 001 m08_kuro5469_08_ge_c08.indd 645 29042021 1520 646 chapter 8 security in computer networks standard. each of these standards uses functions, rather than predetermined tables, along the lines of figure 8.5 albeit more complicated and specific to each cipher. each of these algorithms also uses a string of bits for a key. for example, des uses 64bit blocks with a 56bit key. aes uses 128bit blocks and can operate with keys that are 128, 192, and 256 bits long. an algorithms key determines the specific minitable mappings and permutations within the algorithms internals. the bruteforce attack for each of these ciphers is to cycle through all the keys, applying the decryption algorithm with each key. observe that with a key length of n, there are 2n possible keys. nist nist 2001 estimates that a machine that could crack 56bit des in one second that is, try all 256 keys in one second would take approximately 149 trillion years to crack a 128bit aes key. cipherblock chaining in computer networking applications, we typically need to encrypt long messages or long streams of data. if we apply a block cipher as described by simply chopping up the message into kbit blocks and independently encrypting each block, a subtle but important problem occurs. to see this, observe that two or more of the cleartext blocks can be identical. for example, the cleartext in two or more blocks could be http1.1. for these identical blocks, a block cipher would, of course, produce the same ciphertext. an attacker could potentially guess the cleartext when it sees identical ciphertext blocks and may even be able to decrypt the entire message by identifying identical ciphtertext blocks and using knowledge about the underlying protocol structure kaufman 2002.figure 8.5 an example of a block cipher64bit outputloop for n rounds8 bits 8 bitst18 bits 8 bitst28 bits 8 bitst38 bits64bit input 8 bitst48 bits 8 bitst58 bits 8 bitst68 bits 8 bitst78 bits 8 bitst8 64bit scrambler m08_kuro5469_08_ge_c08.indd 646 29042021 1520 8.2 principles of cryptography 647 to address
this problem, we can mix some randomness into the ciphertext so that identical plaintext blocks produce different ciphertext blocks. to explain this idea, let m i denote the i th plaintext block, c i denote the i th ciphertext block, and acircleplus.altb denote the exclusiveor xor of two bit strings, a and b . recall that the 0circleplus.alt01circleplus.alt10 and 0 circleplus.alt11circleplus.alt01, and the xor of two bit strings is done on a bitbybit basis. so, for example, 10101010 circleplus.alt11110000 01011010. also, denote the blockcipher encryption algorithm with key s as ks. the basic idea is as follows. the sender creates a random k bit number r i for the i th block and calculates ciksmicircleplus.altri . note that a new k bit random number is chosen for each block. the sender then sends c 1, r1, c2, r2, c3, r3, and so on. since the receiver receives ci and ri, it can recover each block of the plaintext by computing mikscicircleplus.altri . it is important to note that, although r i is sent in the clear and thus can be sniffed by trudy, she cannot obtain the plaintext mi, since she does not know the key ks. also note that if two plaintext blocks m i and m j are the same, the corresponding ciphertext blocks c i and c j will be different as long as the random numbers ri and rj are different, which occurs with very high probability. as an example, consider the 3bit block cipher in table 8.1. suppose the plain text is 010010010. if alice encrypts this directly, without including the randomness, the resulting ciphertext becomes 101101101. if trudy sniffs this ciphertext, because each of the three cipher blocks is the same, she can correctly surmise that each of the three plaintext blocks are the same. now suppose instead alice generates the random blocks r1001, r2111, and r3100 and uses the above technique to generate the ciphertext c1100, c2010, and c3000. note that the three ciphertext blocks are different even though the plaintext blocks are the same. alice then sends c1, r1, c2, and r2. you should verify that bob can obtain the original plaintext using the shared key ks. the astute reader will note that introducing randomness solves one problem but creates another namely, alice must transmit twice as many bits as before. indeed, for each cipher bit, she must now also send a random bit, doubling the required bandwidth. in order to have our cake and eat it too, block ciphers typically use a technique called cipher block chaining cbc. the basic idea is to send only one random value along with the very first message, and then have the sender and receiver use the computed coded blocks in place of the subsequent random number. specifically, cbc operates as follows 1. before encrypting the message or the stream of data, the sender generates a random kbit string, called the initialization vector iv. denote this initialization vector by c0. the sender sends the iv
to the receiver in cleartext. 2. for the first block, the sender calculates m 1 circleplus.altc0, that is, calculates the exclu siveor of the first block of cleartext with the iv. it then runs the result through the blockcipher algorithm to get the corresponding ciphertext block; that is, c1ksm1circleplus.altc0. the sender sends the encrypted block c 1 to the receiver. 3. for the ith block, the sender generates the ith ciphertext block from ci ksmicircleplus.altci1. m08_kuro5469_08_ge_c08.indd 647 29042021 1520 648 chapter 8 security in computer networks lets now examine some of the consequences of this approach. first, the receiver will still be able to recover the original message. indeed, when the receiver receives ci, it decrypts it with ks to obtain simicircleplus.altci1; since the receiver also knows ci1, it then obtains the cleartext block from misicircleplus.altci1. second, even if two cleartext blocks are identical, the corresponding ciphtertexts almost always will be different. third, although the sender sends the iv in the clear, an intruder will still not be able to decrypt the ciphertext blocks, since the intruder does not know the secret key, s. finally, the sender only sends one overhead block the iv, thereby negligibly increasing the bandwidth usage for long messages consisting of hundreds of blocks. as an example, lets now determine the ciphertext for the 3bit block cipher in table 8.1 with plaintext 010010010 and iv c0 001. the sender first uses the iv to calculate c1ksm1circleplus.altc0100. the sender then calculates c2 ksm2circleplus.altc1ks010circleplus.alt100000, and c3ksm3circleplus.altc2ks010circleplus.alt 000101. the reader should verify that the receiver, knowing the iv and ks can recover the original plaintext. cbc has an important consequence when designing secure network proto cols well need to provide a mechanism within the protocol to distribute the iv from sender to receiver. well see how this is done for several protocols later in this chapter. 8.2.2 public key encryption for more than 2,000 years since the time of the caesar cipher and up to the 1970s, encrypted communication required that the two communicating parties share a common secretthe symmetric key used for encryption and decryption. one difficulty with this approach is that the two parties must somehow agree on the shared key; but to do so in itself requires secure communication. perhaps the parties could first meet and agree on the key in person for example, two of caesars centurions might meet at the roman baths and thereafter communicate with encryption. in a networked world, however, communicating parties may never meet and may never converse except over the network. is it possible for two parties to communicate with encryption without having a shared secret key that is known in advance? in 1976, diffie and hellman diffie 1976 demonstrated an algorithm known now as diffiehellman key exchange to do just thata radically different and marvelously elegant approach toward secure communication that has led to the development of todays public key cryptography systems. well see shortly that public key cryptography systems also have several wonderful properties that make them useful
not only for encryption, but for authentication and digital signatures as well. interestingly, it has come to light that ideas similar to those in diffie 1976 and rsa 1978 had been independently developed in the early 1970s in a series of secret reports by researchers at the communicationselectronics security group in the united kingdom ellis 1987. m08_kuro5469_08_ge_c08.indd 648 29042021 1520 8.2 principles of cryptography 649 as is often the case, great ideas can spring up independently in many places; for tunately, public key advances took place not only in private, but also in the public view, as well. the use of public key cryptography is conceptually quite simple. suppose alice wants to communicate with bob. as shown in figure 8.6, rather than bob and alice sharing a single secret key as in the case of symmetric key systems, bob the recipient of alices messages instead has two keysa public key that is available to everyone in the world including trudy the intruder and a private key that is known only to bob. we will use the notation k b and k b to refer to bobs public and pri vate keys, respectively. in order to communicate with bob, alice first fetches bobs public key. alice then encrypts her message, m, to bob using bobs public key and a known for example, standardized encryption algorithm; that is, alice computes k bm. bob receives alices encrypted message and uses his private key and a known for example, standardized decryption algorithm to decrypt alices encrypted message. that is, bob computes k bk bm. we will see below that there are encryption decryption algorithms and techniques for choosing public and private keys such that k bk bmm; that is, applying bobs public key, k b, to a message, m to get k bm, and then applying bobs private key, k b, to the encrypted version of m that is, computing k bk bm gives back m. this is a remarkable result! in this manner, alice can use bobs publicly available key to send a secret message to bob without either of them having to distribute any secret keys! we will see shortly that we can interchange the public key and private key encryption and get the same remarkable resultthat is, k b b mk b k bmm. although publickey cryptography is appealing, one concern immediately springs to mind. since bobs encryption key is public, anyone can send an encrypted figure 8.6 public key cryptographyencryption algorithmciphertext decryption algorithmplaintext message, mplaintext message, mprivate decryption key m kbkbmkb kbmpublic encryption keykb m08_kuro5469_08_ge_c08.indd 649 29042021 1520 650 chapter 8 security in computer networks message to bob, including alice or someone pretending to be alice. in the case of a single shared secret key, the fact that the sender knows the secret key implicitly identifies the sender to the receiver. in the case of public key cryptography, however, this is no longer the case since anyone can send an encrypted message to bob using bobs publicly available key. a
digital signature, a topic we will study in section 8.3, is needed to bind a sender to a message. rsa while there may be many algorithms that address these concerns, the rsa algorithm named after its founders, ron rivest, adi shamir, and leonard adleman has become almost synonymous with public key cryptography. lets first see how rsa works and then examine why it works. rsa makes extensive use of arithmetic operations using modulon arithmetic. so lets briefly review modular arithmetic. recall that x mod n simply means the remainder of x when divided by n ; so, for example, 19 mod 54. in modular arith metic, one performs the usual operations of addition, multiplication, and exponentiation. however, the result of each operation is replaced by the integer remainder that is left when the result is divided by n . adding and multiplying with modular arithmetic is facilitated with the following handy facts a mod n b mod n mod n a b mod n a mod n b mod n mod n a b mod n a mod n b mod n mod n a b mod n it follows from the third fact that a mod nd mod nad mod n, which is an identity that we will soon find very useful. now suppose that alice wants to send to bob an rsaencrypted message, as shown in figure 8.6. in our discussion of rsa, lets always keep in mind that a message is nothing but a bit pattern, and every bit pattern can be uniquely represented by an integer number along with the length of the bit pattern. for example, suppose a message is the bit pattern 1001; this message can be represented by the decimal integer 9. thus, when encrypting a message with rsa, it is equivalent to encrypting the unique integer number that represents the message. there are two interrelated components of rsa the choice of the public key and the private key the encryption and decryption algorithm to generate the public and private rsa keys, bob performs the following steps 1. choose two large prime numbers, p and q. how large should p and q be? the larger the values, the more difficult it is to break rsa, but the longer it takes m08_kuro5469_08_ge_c08.indd 650 29042021 1520 8.2 principles of cryptography 651 to perform the encoding and decoding. rsa laboratories recommends that the product of p and q be on the order of 1,024 bits. for a discussion of how to find large prime numbers, see caldwell 2020. 2. compute npq and z p 1q 1. 3. choose a number, e, less than n, that has no common factors other than 1 with z. in this case, e and z are said to be relatively prime. the letter e is used since this value will be used in encryption. 4. find a number, d , such that ed 1 is exactly divisible that is, with no remainder by z. the letter d is used because this
value will be used in decryption. put another way, given e , we choose d such that ed mod z 1 5. the public key that bob makes available to the world, k b, is the pair of numbers n, e; his private key, k b, is the pair of numbers n, d. the encryption by alice and the decryption by bob are done as follows suppose alice wants to send bob a bit pattern represented by the integer number m with m6n. to encode, alice performs the exponentiation me, and then computes the integer remainder when me is divided by n. in other words, the encrypted value, c, of alices plaintext message, m, is cme mod n the bit pattern corresponding to this ciphertext c is sent to bob. to decrypt the received ciphertext message, c, bob computes mcd mod n which requires the use of his private key n, d. as a simple example of rsa, suppose bob chooses p 5 and q 7. admittedly, these values are far too small to be secure. then n 35 and z 24. bob chooses e 5, since 5 and 24 have no common factors. finally, bob chooses d 29, since 5291 that is, ed 1 is exactly divisible by 24. bob makes the two values, n 35 and e 5, public and keeps the value d 29 secret. observing these two public values, suppose alice now wants to send the letters l, o, v, and e to bob. interpreting each letter as a number between 1 and 26 with a being 1, and z being 26, alice and bob perform the encryption and decryption shown in tables 8.2 and 8.3, respectively. note that in this example, we consider each of the four letters as a distinct message. a more realistic example would be to convert the four letters into their 8bit ascii representations and then encrypt the integer corresponding to the resulting 32bit bit pattern. such a realistic example generates numbers that are much too long to print in a textbook! m08_kuro5469_08_ge_c08.indd 651 29042021 1520 652 chapter 8 security in computer networks given that the toy example in tables 8.2 and 8.3 has already produced some extremely large numbers, and given that we saw earlier that p and q should each be several hundred bits long, several practical issues regarding rsa come to mind. how does one choose large prime numbers? how does one then choose e and d? how does one perform exponentiation with large numbers? a discussion of these important issues is beyond the scope of this book; see kaufman 2002 and the references therein for details. session keys we note here that the exponentiation required by rsa is a rather timeconsuming process. as a result, rsa is often used in practice in combination with symmetric key cryptography. for example, if alice wants to send bob a large amount of encrypted data, she could do the following. first alice chooses a key that will be used to encode
the data itself; this key is referred to as a session key, and is denoted by ks. alice must inform bob of the session key, since this is the shared symmetric key they will use with a symmetric key cipher e.g., with des or aes. alice encrypts the session key using bobs public key, that is, computes ckse mod n. bob receives the rsaencrypted session key, c , and decrypts it to obtain table 8.2 alices rsa encryption, e 5, n 35plaintext letter m numeric representation meciphertext c me mod n l 12 248832 17 o 15 759375 15 v 22 5153632 22 e 5 3125 10 table 8.3 bobs rsa decryption, d 29, n 35ciphertext c cdm cd mod n plaintext letter 17 4819685721067509150915091411825223071697 12 l 15 127834039403948858939111232757568359375 15 o 22 851643319086537701956194499721106030592 22 v 10 1000000000000000000000000000000 5 e m08_kuro5469_08_ge_c08.indd 652 29042021 1520 8.2 principles of cryptography 653 the session key, ks. bob now knows the session key that alice will use for her encrypted data transfer. why does rsa work? rsa encryptiondecryption appears rather magical. why should it be that by apply ing the encryption algorithm and then the decryption algorithm, one recovers the original message? in order to understand why rsa works, again denote n pq, where p and q are the large prime numbers used in the rsa algorithm. recall that, under rsa encryption, a message uniquely represented by an integer, m, is exponentiated to the power e using modulon arithmetic, that is, c me mod n decryption is performed by raising this value to the power d, again using modulon arithmetic. the result of an encryption step followed by a decryption step is thus me mod nd mod n. lets now see what we can say about this quantity. as mentioned earlier, one important property of modulo arithmetic is a mod nd mod n ad mod n for any values a, n, and d. thus, using a me in this property, we have me mod nd mod nmed mod n it therefore remains to show that med mod n m. although were trying to remove some of the magic about why rsa works, to establish this, well need to use a rather magical result from number theory here. specifically, well need the result that says if p and q are prime, n pq, and z p 1q 1, then xy mod n is the same as xy mod z mod n kaufman 2002. applying this result with x m and y ed we have med mod nmed mod z mod n but remember that we have chosen e and d such that ed mod z1. this gives us med mod nm1 mod nm which is exactly the result we are looking for! by first exponentiating to the power of e that is, encrypting and then exponentiating to the power of d that is, decrypting, we obtain the original value, m. even more wonderful is the fact that if we first exponentiate to the power of d
and then exponentiate to the power of ethat is, we reverse the order of encryption and decryption, performing the decryption operation first and then applying the encryption operationwe also obtain the original value, m. this wonderful result follows immediately from the modular arithmetic md mod ne mod nmde mod nmed mod nme mod nd mod n m08_kuro5469_08_ge_c08.indd 653 29042021 1520 654 chapter 8 security in computer networks the security of rsa relies on the fact that there are no known algorithms for quickly factoring a number, in this case the public value n , into the primes p and q . if one knew p and q , then given the public value e , one could easily compute the secret key, d. on the other hand, it is not known whether or not there exist fast algorithms for factoring a number, and in this sense, the security of rsa is not guaranteed. with recent advances in quantum computing, and published fast factoring algorithms for quantum computers, there are concerns that rsa may not be secure forever mit tr 2019. but the practical realization of these algorithms still appears to be far in the future. another popular publickey encryption algorithm is the diffiehellman algo rithm, which we will briefly explore in the homework problems. diffiehellman is not as versatile as rsa in that it cannot be used to encrypt messages of arbitrary length; it can be used, however, to establish a symmetric session key, which is in turn used to encrypt messages. 8.3 message integrity and digital signatures in the previous section, we saw how encryption can be used to provide confidentiality to two communicating entities. in this section, we turn to the equally important cryptography topic of providing message integrity also known as message authentication. along with message integrity, we will discuss two related topics in this section digital signatures and endpoint authentication. we define the message integrity problem using, once again, alice and bob. suppose bob receives a message which may be encrypted or may be in plaintext and he believes this message was sent by alice. to authenticate this message, bob needs to verify 1. the message indeed originated from alice. 2. the message was not tampered with on its way to bob. well see in sections 8.4 through 8.7 that this problem of message integrity is a criti cal concern in just about all secure networking protocols. as a specific example, consider a computer network using a linkstate routing algorithm such as ospf for determining routes between each pair of routers in the network see chapter 5. in a linkstate algorithm, each router needs to broadcast a linkstate message to all other routers in the network. a routers linkstate message includes a list of its directly connected neighbors and the direct costs to these neighbors. once a router receives linkstate messages from all of the other routers, it can create a complete map of the network, run its leastcost routing algorithm, and configure its forwarding table.
one relatively easy attack on the routing algorithm is for trudy to distribute bogus linkstate messages with incorrect linkstate information. thus, the need for message integritywhen router b receives a linkstate message from router a, router b should verify that router a actually created the message and, further, that no one tampered with the message in transit. m08_kuro5469_08_ge_c08.indd 654 29042021 1520 8.3 messa ge integrity and digital signatures 655 in this section, we describe a popular message integrity technique that is used by many secure networking protocols. but before doing so, we need to cover another important topic in cryptographycryptographic hash functions. 8.3.1 cryptographic hash functions as shown in figure 8.7, a hash function takes an input, m, and computes a fixedsize string hm known as a hash. the internet checksum chapter 3 and crcs chapter 6 meet this definition. a cryptographic hash function is required to have the following additional property it is computationally infeasible to find any two different messages x and y such that hx hy. informally, this property means that it is computationally infeasible for an intruder to substitute one message for another message that is protected by the hash function. that is, if m, hm are the message and the hash of the message created by the sender, then an intruder cannot forge the contents of another message, y, that has the same hash value as the original message. lets convince ourselves that a simple checksum, such as the internet checksum, would make a poor cryptographic hash function. rather than performing 1s complement arithmetic as in the internet checksum, let us compute a checksum by treating each character as a byte and adding the bytes together using 4byte chunks at a time. suppose bob owes alice 100.99 and sends an iou to alice consisting of the text string iou100.99bob. the ascii representation in hexadecimal notation for these letters is 49,4f,55,31,30,30,2e,39,39,42,4f,42. figure 8.8 top shows that the 4byte checksum for this message is b2 c1 d2 ac. a slightly different message and a much more costly one for bob figure 8.7 hash functionsmanytoone hash functionlong message m dear alice this is a ver y long letter since ther e is so much to say............... .......... bobfixedlength hash hm opgmdvboijrtnsd gghppdogm;lcvkb m08_kuro5469_08_ge_c08.indd 655 29042021 1520 656 chapter 8 security in computer networks is shown in the bottom half of figure 8.8. the messages iou100.99bob and iou900.19bob have the same checksum. thus, this simple checksum algorithm violates the requirement above. given the original data, it is simple to find another set of data with the same checksum. clearly, for security purposes, we are going to need a more powerful hash function than a checksum. the md5 hash algorithm of ron rivest rfc 1321 is in wide use today. it computes a 128bit hash in a fourstep process consisting of a padding step adding a one followed by enough zeros so that the length of the message satisfies certain conditions, an append step appending a 64bit representation of the
message length before padding, an initialization of an accumulator, and a final looping step in which the messages 16word blocks are processed mangled in four rounds. for a description of md5 including a c source code implementation see rfc 1321. the second major hash algorithm in use today is the secure hash algorithm sha1 fips 1995. this algorithm is based on principles similar to those used in the design of md4 rfc 1320, the predecessor to md5. sha1, a us federal standard, is required for use whenever a cryptographic hash algorithm is needed for federal applications. it produces a 160bit message digest. the longer output length makes sha1 more secure. 8.3.2 message authentication code lets now return to the problem of message integrity. now that we understand hash functions, lets take a first stab at how we might perform message integrityfigure 8.8 initial message and fraudulent message have the same checksum!message iou1 00.9 9bobascii representation 494f5531 30302e39 39424f42 b2c1d2ac checksum message iou9 00.19bobascii representation 494f5539 30302e31 39424f42 b2c1d2ac checksum m08_kuro5469_08_ge_c08.indd 656 29042021 1520 8.3 messa ge integrity and digital signatures 657 1. alice creates message m and calculates the hash h m for example, with sha1. 2. alice then appends hm to the message m, creating an extended message m, hm, and sends the extended message to bob. 3. bob receives an extended message m, h and calculates hm. if hm h, bob concludes that everything is fine. this approach is obviously flawed. trudy can create a bogus message m in which she says she is alice, calculate hm, and send bob m, hm. when bob receives the message, everything checks out in step 3, so bob doesnt suspect any funny business. to perform message integrity, in addition to using cryptographic hash functions, alice and bob will need a shared secret s. this shared secret, which is nothing more than a string of bits, is called the authentication key. using this shared secret, message integrity can be performed as follows 1. alice creates message m, concatenates s with m to create m s, and calculates the hash hm s for example, with sha1. hm s is called the message authentication code mac. 2. alice then appends the mac to the message m, creating an extended message m, hm s, and sends the extended message to bob. 3. bob receives an extended message m, h and knowing s, calculates the mac hm s. if hm s h, bob concludes that everything is fine. a summary of the procedure is shown in figure 8.9. readers should note that the mac here standing for message authentication code is not the same mac used in linklayer protocols standing for medium access control! one nice feature of a mac is that it does not require an encryption algorithm. indeed, in many applications, including the linkstate routing algorithm described earlier, communicating entities are only concerned with message integrity and are figure 8.9 message authentication code mach.h. mm m ms ss internet compare key message shar ed
secr ethmshms m08_kuro5469_08_ge_c08.indd 657 29042021 1520 658 chapter 8 security in computer networks not concerned with message confidentiality. using a mac, the entities can authen ticate the messages they send to each other without having to integrate complex encryption algorithms into the integrity process. as you might expect, a number of different standards for macs have been pro posed over the years. the most popular standard today is hmac, which can be used either with md5 or sha1. hmac actually runs data and the authentication key through the hash function twice kaufman 2002; rfc 2104. there still remains an important issue. how do we distribute the shared authen tication key to the communicating entities? for example, in the linkstate routing algorithm, we would somehow need to distribute the secret authentication key to each of the routers in the autonomous system. note that the routers can all use the same authentication key. a network administrator could actually accomplish this by physically visiting each of the routers. or, if the network administrator is a lazy guy, and if each router has its own public key, the network administrator could distribute the authentication key to any one of the routers by encrypting it with the routers public key and then sending the encrypted key over the network to the router. 8.3.3 digital signatures think of the number of the times youve signed your name to a piece of paper during the last week. you sign checks, credit card receipts, legal documents, and letters. your signature attests to the fact that you as opposed to someone else have acknowledged andor agreed with the documents contents. in a digital world, one often wants to indicate the owner or creator of a document, or to signify ones agreement with a documents content. a digital signature is a cryptographic technique for achieving these goals in a digital world. just as with handwritten signatures, digital signing should be done in a way that is verifiable and nonforgeable. that is, it must be possible to prove that a document signed by an individual was indeed signed by that individual the signature must be verifiable and that only that individual could have signed the document the signature cannot be forged. lets now consider how we might design a digital signature scheme. observe that when bob signs a message, bob must put something on the message that is unique to him. bob could consider attaching a mac for the signature, where the mac is created by appending his key unique to him to the message, and then taking the hash. but for alice to verify the signature, she must also have a copy of the key, in which case the key would not be unique to bob. thus, macs are not going to get the job done here. recall that with publickey cryptography, bob has both a public and private key, with both of these keys being unique to bob. thus, publickey cryptography is an excellent candidate for providing digital signatures.
let us now examine how it is done. suppose that bob wants to digitally sign a document, m . we can think of the document as a file or a message that bob is going to sign and send. as shown in figure 8 .10, to sign this document, bob simply uses his private key, k b, to compute m08_kuro5469_08_ge_c08.indd 658 29042021 1520 8.3 messa ge integrity and digital signatures 659 k bm. at first, it might seem odd that bob is using his private key which, as we saw in section 8.2, was used to decrypt a message that had been encrypted with his public key to sign a document. but recall that encryption and decryption are nothing more than mathematical operations exponentiation to the power of e or d in rsa; see sec tion 8.2 and recall that bobs goal is not to scramble or obscure the contents of the document, but rather to sign the document in a manner that is verifiable and nonforgeable. bobs digital signature of the document is k bm. does the digital signature k bm meet our requirements of being verifiable and nonforgeable? suppose alice has m and k bm. she wants to prove in court being litigious that bob had indeed signed the document and was the only person who could have possibly signed the document. alice takes bobs public key, k b, and applies it to the digital signature, k bm, associated with the document, m. that is, she computes k bk bm, and voil√†, with a dramatic flurry, she produces m, which exactly matches the original document! alice then argues that only bob could have signed the document, for the following reasons whoever signed the message must have used the private key, k b, in computing the signature k bm, such that k bk bmm. the only person who could have known the private key, k b, is bob. recall from our discussion of rsa in section 8.2 that knowing the public key, k b, is of no help in learning the private key, k b. therefore, the only person who could know k b is the person who generated the pair of keys, k b, k b, in the first place, bob. note that this assumes, though, that bob has not given k b to anyone, nor has anyone stolen k b from bob. it is also important to note that if the original document, m, is ever modified to some alternate form, m, the signature that bob created for m will not be valid for m, figure 8.10 creating a digital signature for a documentencryption algorithmmessage m bobs private key, kbdear alice sorry i have been unable to write for so long. since we..... .......... .......... bobsigned message kb m fadfg54986fgnzmcnv t98734ngldskg02jser09tugkjdÔ¨Çg.......... m08_kuro5469_08_ge_c08.indd 659 29042021 1520 660 chapter 8 security in computer networks since k bk bm does not equal m. thus, we see that digital signatures also provide message integrity, allowing the receiver to verify that the
message was unaltered as well as the source of the message. one concern with signing data by encryption is that encryption and decryption are computationally expensive. given the overheads of encryption and decryption, signing data via complete encryptiondecryption can be overkill. a more efficient approach is to introduce hash functions into the digital signature. recall from section 8.3.2 that a hash algorithm takes a message, m, of arbitrary length and com putes a fixedlength fingerprint of the message, denoted by hm. using a hash function, bob signs the hash of a message rather than the message itself, that is, bob calculates k bhm. since hm is generally much smaller than the original message m, the computational effort required to create the digital signature is sub stantially reduced. in the context of bob sending a message to alice, figure 8.11 provides a sum mary of the operational procedure of creating a digital signature. bob puts his original long message through a hash function. he then digitally signs the resulting hash with his private key. the original message in cleartext along with the digitally signed message digest henceforth referred to as the digital signature is then sent to alice. figure 8.12 provides a summary of the operational procedure of the signature. alice applies the senders public key to the message to obtain a hash result. alice also figure 8.11 sending a digitally signed messagebobs private key, kbmanytoone hash functionlong message dear alice this is a ver y long letter since ther e is so much to say..... .......... .......... bobfixedlength hash opgmdvboijrtnsd gghppdogm;lcvkb signed hash package to send to alice fgkopdgoo69cmxw54psdtermaasofmz encryption algorithm m08_kuro5469_08_ge_c08.indd 660 29042021 1520 8.3 messa ge integrity and digital signatures 661 applies the hash function to the cleartext message to obtain a second hash result. if the two hashes match, then alice can be sure about the integrity and author of the message. before moving on, lets briefly compare digital signatures with macs, since they have parallels, but also have important subtle differences. both digital signatures and macs start with a message or a document. to create a mac out of the message, we append an authentication key to the message, and then take the hash of the result. note that neither public key nor symmetric key encryption is involved in creating the mac. to create a digital signature, we first take the hash of the message and then encrypt the message with our private key using public key cryptography. thus, a digital signature is a heavier technique, since it requires an underlying public key infrastructure pki with certification authorities as described below. well see in section 8.4 that pgpa popular secure email systemuses digital signatures for message integrity. weve seen already that ospf uses macs for message integrity. well see in sections 8.5 and 8.6 that macs are also used for popular transportlayer and networklayer security protocols.bobs public key, kb long message dear alice this is a ver y long letter since ther e is so much
to say..... .......... .......... bob fixedlength hash opgmdvboijrtnsd gghppdogm;lcvkbsigned hash fgkopdgoo69cmxw 54psdtermaasofmz manytoone hash functioncomparefixedlength hash opgmdvboijrtnsdgghppdogm;lcvkbencryption algorithm figure 8.12 verifying a signed message m08_kuro5469_08_ge_c08.indd 661 29042021 1520 662 chapter 8 security in computer networks public key certification an important application of digital signatures is public key certification, that is, certifying that a public key belongs to a specific entity. public key certification is used in many popular secure networking protocols, including ipsec and tls. to gain insight into this problem, lets consider an internetcommerce version of the classic pizza prank. alice is in the pizza delivery business and accepts orders over the internet. bob, a pizza lover, sends alice a plaintext message that includes his home address and the type of pizza he wants. in this message, bob also includes a digital signature that is, a signed hash of the original plaintext message to prove to alice that he is the true source of the message. to verify the signature, alice obtains bobs public key perhaps from a public key server or from the email message and checks the digital signature. in this manner she makes sure that bob, rather than some adolescent prankster, placed the order. this all sounds fine until clever trudy comes along. as shown in figure 8.13, trudy is indulging in a prank. she sends a message to alice in which she says she is bob, gives bobs home address, and orders a pizza. in this message she also includes her trudys public key, although alice naturally assumes it is bobs public key. trudy also attaches a digital signature, which was created with her own trudys private key. after receiving the message, alice applies trudys public key thinking that it is bobs to the digital signature and concludes that the plaintext message was indeed created by bob. bob will be very surprised when the delivery person brings a pizza with pepperoni and anchovies to his home! we see from this example that for public key cryptography to be useful, you need to be able to verify that you have the actual public key of the entity person, router, browser, and so on with whom you want to communicate. for example, when alice wants to communicate with bob using public key cryptography, she needs to verify that the public key that is supposed to be bobs is indeed bobs. binding a public key to a particular entity is typically done by a certification authority ca, whose job is to validate identities and issue certificates. a ca has the following roles 1. a ca verifies that an entity a person, a router, and so on is who it says it is. there are no mandated procedures for how certification is done. when dealing with a ca, one must trust the ca to have performed a suitably rigorous identity verification. for example, if trudy were able to walk into the flybynight ca and simply announce i am alice and receive certificates associated with the identity of alice, then
one shouldnt put much faith in public keys certified by the flybynight ca. on the other hand, one might or might not! be more willing to trust a ca that is part of a federal or state program. you can trust the identity associated with a public key only to the extent to which you can trust a ca and its identity verification techniques. what a tangled web of trust we spin! 2. once the ca verifies the identity of the entity, the ca creates a certificate that binds the public key of the entity to the identity. the certificate contains m08_kuro5469_08_ge_c08.indd 662 29042021 1520 8.3 messa ge integrity and digital signatures 663 figure 8.13 trudy masquerades as bob using public key cryptographytrudy s private key, kt trudy s public key, ktsigned using trudys private key message digest fgkopdgoo69cmxw 54psdtermaasofmzmessage alice, deliver a pizza to me. bobmanytoone hash function alice uses t rudy s public key, thinking it is bob s, and concludes the message is from bobpizzaencryption algorithm the public key and globally unique identifying information about the owner of the public key for example, a human name or an ip address. the certificate is digitally signed by the ca. these steps are shown in figure 8.14. let us now see how certificates can be used to combat pizzaordering prank sters, like trudy, and other undesirables. when bob places his order he also sends his casigned certificate. alice uses the cas public key to check the validity of bobs certificate and extract bobs public key. both the international telecommunication union itu and the ietf have developed standards for cas. itu x.509 itu 2005a specifies an authentication service as well as a specific syntax for certificates. rfc 1422 describes cabased key management for use with secure internet email. it is compatible with x.509 but goes beyond x.509 by establishing procedures and conventions for a key management architecture. table 8.4 describes some of the important fields in a certificate. m08_kuro5469_08_ge_c08.indd 663 29042021 1520 664 chapter 8 security in computer networks table 8.4 selected fields in an x.509 and rfc 1422 public keyfield name description version version number of x.509 specification serial number caissued unique identifier for a certificate signature specifies the algorithm used by ca to sign this certificate issuer name identity of ca issuing this certificate, in distinguished name dn rfc 4514 format validity period start and end of period of validity for certificate subject name identity of entity whose public key is associated with this certificate, in dn format subject public key the subjects public key as well indication of the public key algorithm and algorithm parameters to be used with this key 8.4 endpoint authentication endpoint authentication is the process of one entity proving its identity to another entity over a computer network, for example, a user proving its identity to an email server. as humans, we authenticate each other in many ways we recognize each others faces when we meet, we recognize each others voices on the
telephone, we are authenticated by the customs official who checks us against the picture on our passport.figure 8.14 bob has his public key certified by the cabobs casigned certiÔ¨Åcate containing his public key, kbcertiÔ¨Åcation authority cakb, bcas private key, kca encryption algorithm m08_kuro5469_08_ge_c08.indd 664 29042021 1520 8.4 endpoint a uthentication 665 in this section, we consider how one party can authenticate another party when the two are communicating over a network. we focus here on authenticating a live party, at the point in time when communication is actually occurring. a concrete example is a user authenticating him or herself to an email server. this is a subtly different problem from proving that a message received at some point in the past did indeed come from that claimed sender, as studied in section 8.3. when performing authentication over the network, the communicating parties cannot rely on biometric information, such as a visual appearance or a voiceprint. indeed, we will see in our later case studies that it is often network elements such as routers and clientserver processes that must authenticate each other. here, authentication must be done solely on the basis of messages and data exchanged as part of an authentication protocol. typically, an authentication protocol would run before the two communicating parties run some other protocol for example, a reliable data transfer protocol, a routing information exchange protocol, or an email protocol. the authentication protocol first establishes the identities of the parties to each others satisfaction; only after authentication do the parties get down to the work at hand. as in the case of our development of a reliable data transfer rdt protocol in chapter 3, we will find it instructive here to develop various versions of an authentication protocol, which we will call ap authentication protocol, and poke holes in each version as we proceed. if you enjoy this stepwise evolution of a design, you might also enjoy bryant 1988, which recounts a fictitious narrative between designers of an open network authentication system, and their discovery of the many subtle issues involved. lets assume that alice needs to authenticate herself to bob.perhaps the simplest authentication protocol we can imagine is one where alice simply sends a message to bob saying she is alice. this protocol is shown in figure 8.15. the flaw here is obviousthere is no way for bob actually to know that the person sending the message i am alice is indeed alice. for example, trudy the intruder could just as well send such a message. figure 8.15 protocol ap1.0 and a failure scenarioalice i am alicebob trudytrudyalice i am alicebob m08_kuro5469_08_ge_c08.indd 665 29042021 1520 666 chapter 8 security in computer networks authentication protocol ap2.0 if alice has a wellknown network address e.g., an ip address from which she always communicates, bob could attempt to authenticate alice by verifying that the source address on the ip datagram carrying the authentication message matches alices wellknown address. in this case, alice would be authenticated. this might stop a very
networknaive intruder from impersonating alice, but it wouldnt stop the determined student studying this book, or many others! from our study of the network and data link layers, we know that it is not that hard for example, if one had access to the operating system code and could build ones own operating system kernel, as is the case with linux and several other freely available operating systems to create an ip datagram, put whatever ip source address we want for example, alices wellknown ip address into the ip datagram, and send the datagram over the linklayer protocol to the firsthop router. from then on, the incorrectly sourceaddressed datagram would be dutifully forwarded to bob. this approach, shown in figure 8.16, is a form of ip spoofing. ip spoofing can be avoided if trudys firsthop router is configured to forward only datagrams containing trudys ip source address rfc 2827. however, this capability is not universally deployed or enforced. bob would thus be foolish to assume that trudys network manager who might be trudy herself had configured trudys firsthop router to forward only appropriately addressed datagrams. authentication protocol ap3.0 one classic approach to authentication is to use a secret password. the password is a shared secret between the authenticator and the person being authenticated. gmail, facebook, telnet, ftp, and many other services use password authentication. in protocol ap3.0, alice thus sends her secret password to bob, as shown in figure 8.17. figure 8.16 protocol ap2.0 and a failure scenarioalice i am alice alices ip addr.bob trudyalice i am alice alices ip addr.bob trudy m08_kuro5469_08_ge_c08.indd 666 29042021 1520 8.4 endpoint a uthentication 667 since passwords are so widely used, we might suspect that protocol ap3.0 is fairly secure. if so, wed be wrong! the security flaw here is clear. if trudy eaves drops on alices communication, then she can learn alices password. lest you think this is unlikely, consider the fact that when you telnet to another machine and log in, the login password is sent unencrypted to the telnet server. someone connected to the telnet client or servers lan can possibly sniff read and store all packets transmitted on the lan and thus steal the login password. in fact, this is a wellknown approach for stealing passwords see, for example, jimenez 1997. such a threat is obviously very real, so ap3.0 clearly wont do. authentication protocol ap3.1 our next idea for fixing ap3.0 is naturally to encrypt the password. by encrypting the password, we can prevent trudy from learning alices password. if we assume that alice and bob share a symmetric secret key, kab, then alice can encrypt the password and send her identification message, i am alice, and her encrypted password to bob. bob then decrypts the password and, assuming the password is correct, authenticates alice. bob feels comfortable in authenticating alice since alice not only knows the password, but also knows the shared secret key value needed to encrypt the password. lets call this protocol ap3.1. while it is
true that ap3.1 prevents trudy from learning alices password, the use of cryptography here does not solve the authentication problem. bob is subject figure 8.17 protocol ap3.0 and a failure scenarioalice i am alice, password okbob trudyalice i am alice, passwordokbob trudy tape recorderkey m08_kuro5469_08_ge_c08.indd 667 29042021 1520 668 chapter 8 security in computer networks to a playback attack trudy need only eavesdrop on alices communication, record the encrypted version of the password, and play back the encrypted version of the password to bob to pretend that she is alice. the use of an encrypted password in ap3.1 doesnt make the situation manifestly different from that of protocol ap3.0 in figure 8.17. authentication protocol ap4.0 the failure scenario in figure 8.17 resulted from the fact that bob could not distinguish between the original authentication of alice and the later playback of alices original authentication. that is, bob could not tell if alice was live that is, was currently really on the other end of the connection or whether the messages he was receiving were a recorded playback of a previous authentication of alice. the very very observant reader will recall that the threeway tcp handshake protocol needed to address the same problemthe server side of a tcp connection did not want to accept a connection if the received syn segment was an old copy retransmission of a syn segment from an earlier connection. how did the tcp server side solve the problem of determining whether the client was really live? it chose an initial sequence number that had not been used in a very long time, sent that number to the client, and then waited for the client to respond with an ack segment containing that number. we can adopt the same idea here for authentication purposes. a nonce is a number that a protocol will use only once in a lifetime. that is, once a protocol uses a nonce, it will never use that number again. our ap4.0 protocol uses a nonce as follows 1. alice sends the message i am alice to bob. 2. bob chooses a nonce, r, and sends it to alice. 3. alice encrypts the nonce using alice and bobs symmetric secret key, kab, and sends the encrypted nonce, kab r, back to bob. as in protocol ap3.1, it is the fact that alice knows kab and uses it to encrypt a value that lets bob know that the message he receives was generated by alice. the nonce is used to ensure that alice is live. 4. bob decrypts the received message. if the decrypted nonce equals the nonce he sent alice, then alice is authenticated. protocol ap4.0 is illustrated in figure 8.18. by using the onceinalifetime value, r, and then checking the returned value, kab r, bob can be sure that alice is both who she says she is since she knows the secret key value needed to encrypt r and live since she has encrypted the nonce, r, that bob just created. the
use of a nonce and symmetric key cryptography forms the basis of ap4.0. a natural question is whether we can use a nonce and public key cryptography rather than symmetric key cryptography to solve the authentication problem. this issue is explored in the problems at the end of the chapter. m08_kuro5469_08_ge_c08.indd 668 29042021 1520 8.5 securing email 669 8.5 securing email in previous sections, we examined fundamental issues in network security, including symmetric key and public key cryptography, endpoint authentication, key distribution, message integrity, and digital signatures. we are now going to examine how these tools are being used to provide security in the internet. interestingly, it is possible to provide security services in any of the top four layers of the internet protocol stack. when security is provided for a specific applicationlayer protocol, the application using the protocol will enjoy one or more security services, such as confidentiality, authentication, or integrity. when security is provided for a transportlayer protocol, all applications that use that protocol enjoy the security services of the transport protocol. when security is provided at the network layer on a hosttohost basis, all transportlayer segments and hence all applicationlayer data enjoy the security services of the network layer. when security is provided on a link basis, then the data in all frames traveling over the link receive the security services of the link. in sections 8.5 through 8.8, we examine how security tools are being used in the application, transport, network, and link layers. being consistent with the general structure of this book, we begin at the top of the protocol stack and discuss security at the application layer. our approach is to use a specific application, email, as a case study for applicationlayer security. we then move down the protocol stack. well examine the tls protocol which provides security at the transport layer, ipsec which provides security at the network layer, and the security of the ieee 802.11 wireless lan protocol. you might be wondering why security functionality is being provided at more than one layer in the internet. wouldnt it suffice simply to provide the security functionality at the network layer and be done with it? there are two answers to this question. first, although security at the network layer can offer blanket coverage by encrypting all the data in the datagrams that is, all the transportlayer segments figure 8.18 protocol ap4.0 and a failure scenarioalice r kabri am alicebob m08_kuro5469_08_ge_c08.indd 669 29042021 1520 670 chapter 8 security in computer networks and by authenticating all the source ip addresses, it cant provide userlevel secu rity. for example, a commerce site cannot rely on iplayer security to authenticate a customer who is purchasing goods at the commerce site. thus, there is a need for security functionality at higher layers as well as blanket coverage at lower layers. second, it is generally easier to deploy new internet services, including security services, at the higher layers of the protocol stack. while waiting for security to be broadly
deployed at the network layer, which is probably still many years in the future, many application developers just do it and introduce security functionality into their favorite applications. a classic example is pretty good privacy pgp, which provides secure email discussed later in this section. requiring only client and server application code, pgp was one of the first security technologies to be broadly used in the internet. 8.5.1 secure email we now use the cryptographic principles of sections 8.2 through 8.3 to create a secure email system. we create this highlevel design in an incremental manner, at each step introducing new security services. when designing a secure email system, let us keep in mind the racy example introduced in section 8.1the love affair between alice and bob. imagine that alice wants to send an email message to bob, and trudy wants to intrude. before plowing ahead and designing a secure email system for alice and bob, we should consider which security features would be most desirable for them. first and foremost is confidentiality. as discussed in section 8.1, neither alice nor bob wants trudy to read alices email message. the second feature that alice and bob would most likely want to see in the secure email system is sender authentication. in particular, when bob receives the message i dont love you anymore. i never want to see you again. formerly yours, alice, he would naturally want to be sure that the message came from alice and not from trudy. another feature that the two lovers would appreciate is message integrity, that is, assurance that the message alice sends is not modified while en route to bob. finally, the email system should provide receiver authentication; that is, alice wants to make sure that she is indeed sending the letter to bob and not to someone else for example, trudy who is impersonating bob. so lets begin by addressing the foremost concern, confidentiality. the most straightforward way to provide confidentiality is for alice to encrypt the message with symmetric key technology such as des or aes and for bob to decrypt the message on receipt. as discussed in section 8.2, if the symmetric key is long enough, and if only alice and bob have the key, then it is extremely difficult for anyone else including trudy to read the message. although this approach is straightforward, it has the fundamental difficulty that we discussed in section 8.2distributing a symmetric key so that only alice and bob have copies of it. so we naturally consider an alternative approachpublic key cryptography using, for example, rsa. in the m08_kuro5469_08_ge_c08.indd 670 29042021 1520 8.5 securing email 671 public key approach, bob makes his public key publicly available e.g., in a public key server or on his personal web page, alice encrypts her message with bobs public key, and she sends the encrypted message to bobs email address. when bob receives the message, he simply decrypts it with his private key. assuming that alice knows for sure that
the public key is bobs public key, this approach is an excellent means to provide the desired confidentiality. one problem, however, is that public key encryption is relatively inefficient, particularly for long messages. to overcome the efficiency problem, lets make use of a session key discussed in section 8.2.2. in particular, alice 1 selects a random symmetric session key, ks, 2 encrypts her message, m, with the symmetric key, 3 encrypts the symmetric key with bobs public key, kb , 4 concatenates the encrypted message and the encrypted symmetric key to form a package, and 5 sends the package to bobs email address. the steps are illustrated in figure 8.19. in this and the subsequent figures, the circled represents concatenation and the circled represents deconcatenation. when bob receives the package, he 1 uses his private key, k b, to obtain the symmetric key, ks, and 2 uses the symmetric key ks to decrypt the mes sage m. having designed a secure email system that provides confidentiality, lets now design another system that provides both sender authentication and message integrity. well suppose, for the moment, that alice and bob are no longer concerned with confidentiality they want to share their feelings with everyone!, and are concerned only about sender authentication and message integrity. to accomplish this task, we use digital signatures and message digests, as described in section 8.3. specifically, alice 1 applies a hash function, h e.g., md5, to her message, m, to obtain a message digest, 2 signs the result of the hash function with her private key, k a, to create a digital signature, 3 concatenates the original unencrypted message with the signature to create a package, and 4 sends the package to bobs email address. when bob receives the package, he 1 applies alices public key, k a, to the signed figure 8.19 alice used a symmetric session key, ks, to send a secret email to bobks. ks.ksm ksm ksks kb. kbks kbksm m internet kb. alice sends email message m bob receives email message m m08_kuro5469_08_ge_c08.indd 671 29042021 1520 672 chapter 8 security in computer networks message digest and 2 compares the result of this operation with his own hash, h, of the message. the steps are illustrated in figure 8.20. as discussed in section 8.3, if the two results are the same, bob can be pretty confident that the message came from alice and is unaltered. now lets consider designing an email system that provides confidentiality, sender authentication, and message integrity. this can be done by combining the procedures in figures 8.19 and 8.20. alice first creates a preliminary package, exactly as in figure 8.20, that consists of her original message along with a digitally signed hash of the message. she then treats this preliminary package as a message in itself and sends this new message through the sender steps in figure 8.19, creating a new package that is sent to bob. the steps applied by alice are shown in figure 8.21. when bob receives
the package, he first applies his side of figure 8.19 and then his figure 8.20 using hash functions and digital signatures to provide sender authentication and message integrityh. ka. ka.kahm kahm m m m internet alice sends email message m bob receives email message mh.compare figure 8.21 alice uses symmetric key cyptography, public key cryptography, a hash function, and a digital signature to provide secrecy, sender authentication, and message integrityh. ka. ks. kskahm m m to internet kb. m08_kuro5469_08_ge_c08.indd 672 29042021 1520 8.5 securing email 673 side of figure 8.20. it should be clear that this design achieves the goal of provid ing confidentiality, sender authentication, and message integrity. note that, in this scheme, alice uses public key cryptography twice once with her own private key and once with bobs public key. similarly, bob also uses public key cryptography twiceonce with his private key and once with alices public key. the secure email design outlined in figure 8.21 probably provides satisfactory security for most email users for most occasions. however, there is still one important issue that remains to be addressed. the design in figure 8.21 requires alice to obtain bobs public key, and requires bob to obtain alices public key. the distribution of these public keys is a nontrivial problem. for example, trudy might masquerade as bob and give alice her own public key while saying that it is bobs public key, enabling her to receive the message meant for bob. as we learned in section 8.3, a popular approach for securely distributing public keys is to certify the public keys using a ca. 8.5.2 pgp written by phil zimmermann in 1991, pretty good privacy pgp is a nice exam ple of an email encryption scheme pgp 2020. the pgp design is, in essence, the same as the design shown in figure 8.21. depending on the version, the pgp software uses md5 or sha for calculating the message digest; cast, tripledes, or idea for symmetric key encryption; and rsa for the public key encryption. when pgp is installed, the software creates a public key pair for the user. the public key can be posted on the users web site or placed in a public key server. the private key is protected by the use of a password. the password has to be entered every time the user accesses the private key. pgp gives the user the option of digitally signing the message, encrypting the message, or both digitally signing and encrypting. figure 8.22 shows a pgp signed message. this message appears after the mime header. the encoded data in the message is k a hm, that is, the digi tally signed message digest. as we discussed above, in order for bob to verify the integrity of the message, he needs to have access to alices public key. figure 8.22 a pgp signed messagebegin pgp signed message hash sha1 bob can i see you tonight? passionately yours, alice begin pgp signature version pgp for personal privacy 5.0 charset noconv yhhjrhhgjghgg12epjlo8ge4vb3mqjhfevzp9t6n7g6m5gw2
end pgp signature m08_kuro5469_08_ge_c08.indd 673 29042021 1520 674 chapter 8 security in computer networks figure 8.23 shows a secret pgp message. this message also appears after the mime header. of course, the plaintext message is not included within the secret email message. when a sender such as alice wants both confidentiality and integrity, pgp contains a message like that of figure 8.23 within the message of figure 8.22. pgp also provides a mechanism for public key certification, but the mechanism is quite different from the more conventional ca. pgp public keys are certified by a web of trust. alice herself can certify any keyusername pair when she believes the pair really belong together. in addition, pgp permits alice to say that she trusts another user to vouch for the authenticity of more keys. some pgp users sign each others keys by holding keysigning parties. users physically gather, exchange public keys, and certify each others keys by signing them with their private keys. 8.6 securing tcp connections tls in the previous section, we saw how cryptographic techniques can provide confiden tiality, data integrity, and endpoint authentication to a specific application, namely, email. in this section, well drop down a layer in the protocol stack and examine how cryptography can enhance tcp with security services, including confidentiality, data integrity, and endpoint authentication. this enhanced version of tcp is commonly known as transport layer security tls, which has been standardized by the ietf rfc 4346. an earlier and similar version of this protocol is ssl version 3. the ssl protocol was originally designed by netscape, but the basic ideas behind securing tcp had predated netscapes work for example, see woo woo 1994. since its inception, ssl and its successor tls have enjoyed broad deployment. tls is supported by all popular web browsers and web servers, and it is used by gmail and essentially all internet commerce sites including amazon, ebay, and taobao. hundreds of billions of dollars are spent over tls every year. in fact, if you have ever purchased anything over the internet with your credit card, the communication between your browser and the server for this purchase almost certainly went over tls. you can identify that tls is being used by your browser when the url begins with https rather than http.figure 8.23 a secret pgp messagebegin pgp message version pgp for personal privacy 5.0 u2r4djkmn8bc5hgdsqaewsdfrgdszx68likm5f6gc4sdfcxyt rfds10juhgbcfdsswe7klkhnmiklo01bvcx4tujk9pbcd4thdf2awqfghbnmklok8iy6gthlpend pgp message m08_kuro5469_08_ge_c08.indd 674 29042021 1520 8.6 securing tcp c onnections tls 675 to understand the need for tls, lets walk through a typical internet commerce scenario. bob is surfing the web and arrives at the alice incorporated site, which is selling perfume. the alice incorporated site displays a form in which bob is supposed to enter the type of perfume and quantity desired, his address, and his payment card number. bob enters this information, clicks on submit, and expects to receive via ordinary postal mail the purchased perfumes; he also expects to receive a charge for his order in his next payment card
statement. this all sounds good, but if no security measures are taken, bob could be in for a few surprises. if no confidentiality encryption is used, an intruder could intercept bobs order and obtain his payment card information. the intruder could then make purchases at bobs expense. if no data integrity is used, an intruder could modify bobs order, having him purchase ten times more bottles of perfume than desired. finally, if no server authentication is used, a server could display alice incorporateds famous logo when in actuality the site maintained by trudy, who is masquerading as alice incorporated. after receiving bobs order, trudy could take bobs money and run. or trudy could carry out an identity theft by collecting bobs name, address, and credit card number. tls addresses these issues by enhancing tcp with confidentiality, data integrity, server authentication, and client authentication. tls is often used to provide security to transactions that take place over http. however, because tls secures tcp, it can be employed by any application that runs over tcp. tls provides a simple application programmer interface api with sockets, which is similar and analogous to tcps api. when an application wants to employ tls, the application includes ssl classeslibraries. as shown in figure 8.24, although tls technically resides in the application layer, from the developers perspective it is a transport protocol that provides tcps services enhanced with security services. figure 8.24 although tls technically resides in the application layer, from the developers perspective it is a transportlayer protocoltcptls sublayer ipapplication application layer tcp enhanced with tlstls socket tcp socket tcp ipapplication tcp apitcp socket m08_kuro5469_08_ge_c08.indd 675 29042021 1520 676 chapter 8 security in computer networks 8.6.1 the big picture we begin by describing a simplified version of tls, one that will allow us to get a bigpicture understanding of the why and how of tls. we will refer to this simplified version of tls as almosttls. after describing almosttls, in the next subsection well then describe the real tls, filling in the details. almosttls and tls has three phases handshake, key derivation, and data transfer. we now describe these three phases for a communication session between a client bob and a server alice, with alice having a privatepublic key pair and a certificate that binds her identity to her public key. handshake during the handshake phase, bob needs to a establish a tcp connection with alice, b verify that alice is really alice, and c send alice a master secret key, which will be used by both alice and bob to generate all the symmetric keys they need for the tls session. these three steps are shown in figure 8.25. note that once the tcp connection is established, bob sends alice a hello message. alice then responds with her certificate, which contains her public key. as discussed in section 8.3, because the certificate has been certified by a ca, bob knows for sure that the public key in the certificate belongs to alice. bob then generates
a master secret ms which will only be used for this tls session, encrypts the ms with alices public key to create figure 8.25 the almosttls handshake, beginning with a tcp connectiontcp syn tcpsynack decrypts ems with ka to get msems kamstcp ack tls hello certiÔ¨Åcate ba c create master secret ms m08_kuro5469_08_ge_c08.indd 676 29042021 1520 8.6 securing tcp c onnections tls 677 the encrypted master secret ems, and sends the ems to alice. alice decrypts the ems with her private key to get the ms. after this phase, both bob and alice and no one else know the master secret for this tls session. key derivation in principle, the ms, now shared by bob and alice, could be used as the symmetric session key for all subsequent encryption and data integrity checking. it is, however, generally considered safer for alice and bob to each use different cryptographic keys, and also to use different keys for encryption and integrity checking. thus, both alice and bob use the ms to generate four keys ebsession encryption key for data sent from bob to alice mbsession hmac key for data sent from bob to alice, where hmac rfc 2104 is a standardized hashed message authentication code mac that we encountered in section 8.3.2 easession encryption key for data sent from alice to bob masession hmac key for data sent from alice to bob alice and bob each generate the four keys from the ms. this could be done by simply slicing the ms into four keys. but in reality tls it is a little more complicated, as well see. at the end of the key derivation phase, both alice and bob have all four keys. the two encryption keys will be used to encrypt data; the two hmac keys will be used to verify the integrity of the data. data transfer now that alice and bob share the same four session keys eb, m b, ea, and ma, they can start to send secured data to each other over the tcp connection. since tcp is a bytestream protocol, a natural approach would be for tls to encrypt application data on the fly and then pass the encrypted data on the fly to tcp. but if we were to do this, where would we put the hmac for the integrity check? we certainly do not want to wait until the end of the tcp session to verify the integrity of all of bobs data that was sent over the entire session! to address this issue, tls breaks the data stream into records, appends an hmac to each record for integrity checking, and then encrypts the record hmac. to create the hmac, bob inputs the record data along with the key mb into a hash function, as discussed in section 8.3. to encrypt the package record hmac, bob uses his session encryption key eb. this encrypted package is then passed to tcp for transport over the internet. although this approach goes a long way, it
still isnt bulletproof when it comes to providing data integrity for the entire message stream. in particular, suppose trudy is a womaninthemiddle and has the ability to insert, delete, and replace segments in the stream of tcp segments sent between alice and bob. trudy, for m08_kuro5469_08_ge_c08.indd 677 29042021 1520 678 chapter 8 security in computer networks example, could capture two segments sent by bob, reverse the order of the seg ments, adjust the tcp sequence numbers which are not encrypted, and then send the two reverseordered segments to alice. assuming that each tcp segment encapsulates exactly one record, lets now take a look at how alice would process these segments. 1. tcp running in alice would think everything is fine and pass the two records to the tls sublayer. 2. tls in alice would decrypt the two records. 3. tls in alice would use the hmac in each record to verify the data integrity of the two records. 4. tls would then pass the decrypted byte streams of the two records to the application layer; but the complete byte stream received by alice would not be in the correct order due to reversal of the records! you are encouraged to walk through similar scenarios for when trudy removes segments or when trudy replays segments. the solution to this problem, as you probably guessed, is to use sequence num bers. tls does this as follows. bob maintains a sequence number counter, which begins at zero and is incremented for each tls record he sends. bob doesnt actually include a sequence number in the record itself, but when he calculates the hmac, he includes the sequence number in the hmac calculation. thus, the hmac is now a hash of the data plus the hmac key mb plus the current sequence number. alice tracks bobs sequence numbers, allowing her to verify the data integrity of a record by including the appropriate sequence number in the hmac calculation. this use of tls sequence numbers prevents trudy from carrying out a womaninthemiddle attack, such as reordering or replaying segments. why? tls record the tls record as well as the almosttls record is shown in figure 8.26. the record consists of a type field, version field, length field, data field, and hmac field. note that the first three fields are not encrypted. the type field indicates whether the record is a handshake message or a message that contains application data. it is also used to close the tls connection, as discussed below. tls at the receiving end uses the length field to extract the tls records out of the incoming tcp byte stream. the version field is selfexplanatory. figure 8.26 record format for tlsversion length type data hmac encrypted with eb m08_kuro5469_08_ge_c08.indd 678 29042021 1520 8.6 securing tcp c onnections tls 679 8.6.2 a more complete picture the previous subsection covered the almosttls protocol; it served to give us a basic understanding of the why and how of tls. now that we have a basic understanding,
we can dig a little deeper and examine the essentials of the actual tls protocol. in parallel to reading this description of the tls protocol, you are encouraged to complete the wireshark tls lab, available at the textbooks web site. tls handshake ssl does not mandate that alice and bob use a specific symmetric key algorithm or a specific publickey algorithm. instead, tls allows alice and bob to agree on the cryptographic algorithms at the beginning of the tls session, during the handshake phase. additionally, during the handshake phase, alice and bob send nonces to each other, which are used in the creation of the session keys eb, m b, ea, and ma. the steps of the real tls handshake are as follows 1. the client sends a list of cryptographic algorithms it supports, along with a client nonce. 2. from the list, the server chooses a symmetric algorithm for example, aes and a public key algorithm for example, rsa with a specific key length, and hmac algorithm md5 or sha1 along with the hmac keys. it sends back to the client its choices, as well as a certificate and a server nonce. 3. the client verifies the certificate, extracts the servers public key, generates a premaster secret pms, encrypts the pms with the servers public key, and sends the encrypted pms to the server. 4. using the same key derivation function as specified by the tls standard, the client and server independently compute the master secret ms from the pms and nonces. the ms is then sliced up to generate the two encryption and two hmac keys. furthermore, when the chosen symmetric cipher employs cbc such as 3des or aes, then two initialization vectors ivsone for each side of the connectionare also obtained from the ms. henceforth, all messages sent between client and server are encrypted and authenticated with the hmac. 5. the client sends the hmac of all the handshake messages. 6. the server sends the hmac of all the handshake messages. the last two steps protect the handshake from tampering. to see this, observe that in step 1, the client typically offers a list of algorithmssome strong, some weak. this list of algorithms is sent in cleartext, since the encryption algorithms and keys have not yet been agreed upon. trudy, as a womaninthemiddle, could delete the stronger algorithms from the list, forcing the client to select a weak algorithm. to m08_kuro5469_08_ge_c08.indd 679 29042021 1520 680 chapter 8 security in computer networks prevent such a tampering attack, in step 5, the client sends the hmac of the concat enation of all the handshake messages it sent and received. the server can compare this hmac with the hmac of the handshake messages it received and sent. if there is an inconsistency, the server can terminate the connection. similarly, the server sends the hmac of the handshake messages it has seen, allowing the client to check for inconsistencies. you may be wondering why there are nonces in steps 1 and
2. dont sequence numbers suffice for preventing the segment replay attack? the answer is yes, but they dont alone prevent the connection replay attack. consider the following connection replay attack. suppose trudy sniffs all messages between alice and bob. the next day, trudy masquerades as bob and sends to alice exactly the same sequence of messages that bob sent to alice on the previous day. if alice doesnt use nonces, she will respond with exactly the same sequence of messages she sent the previous day. alice will not suspect any funny business, as each message she receives will pass the integrity check. if alice is an ecommerce server, she will think that bob is placing a second order for exactly the same thing. on the other hand, by including a nonce in the protocol, alice will send different nonces for each tcp session, causing the encryption keys to be different on the two days. therefore, when alice receives playedback tls records from trudy, the records will fail the integrity checks, and the bogus ecommerce transaction will not succeed. in summary, in tls, nonces are used to defend against the connection replay attack and sequence numbers are used to defend against replaying individual packets during an ongoing session. connection closure at some point, either bob or alice will want to end the tls session. one approach would be to let bob end the tls session by simply terminating the underlying tcp connectionthat is, by having bob send a tcp fin segment to alice. but such a naive design sets the stage for the truncation attack whereby trudy once again gets in the middle of an ongoing tls session and ends the session early with a tcp fin. if trudy were to do this, alice would think she received all of bobs data when actuality she only received a portion of it. the solution to this problem is to indicate in the type field whether the record serves to terminate the tls session. although the tls type is sent in the clear, it is authenticated at the receiver using the records hmac. by including such a field, if alice were to receive a tcp fin before receiving a closure tls record, she would know that something funny was going on. this completes our introduction to tls. weve seen that it uses many of the cryptography principles discussed in sections 8.2 and 8.3. readers who want to explore tls on yet a deeper level can read rescorlas highly readable book on ssltls rescorla 2001. m08_kuro5469_08_ge_c08.indd 680 29042021 1520 8.7 network layer security ipsec and virtual private networks 681 8.7 networklayer security ipsec and virtual private networks the ip security protocol, more commonly known as ipsec, provides security at the network layer. ipsec secures ip datagrams between any two networklayer entities, including hosts and routers. as we will soon describe, many institutions corporations, government branches, nonprofit organizations, and so on use ipsec to create virtual private networks vpns that run over the public internet.
before getting into the specifics of ipsec, lets step back and consider what it means to provide confidentiality at the network layer. with networklayer confidentiality between a pair of network entities for example, between two routers, between two hosts, or between a router and a host, the sending entity encrypts the payloads of all the datagrams it sends to the receiving entity. the encrypted payload could be a tcp segment, a udp segment, an icmp message, and so on. if such a networklayer service were in place, all data sent from one entity to the otherincluding email, web pages, tcp handshake messages, and management messages such as icmp and snmpwould be hidden from any third party that might be sniffing the network. for this reason, networklayer security is said to provide blanket coverage. in addition to confidentiality, a networklayer security protocol could potentially provide other security services. for example, it could provide source authentication, so that the receiving entity can verify the source of the secured datagram. a networklayer security protocol could provide data integrity, so that the receiving entity can check for any tampering of the datagram that may have occurred while the datagram was in transit. a networklayer security service could also provide replayattack prevention, meaning that bob could detect any duplicate datagrams that an attacker might insert. we will soon see that ipsec indeed provides mechanisms for all these security services, that is, for confidentiality, source authentication, data integrity, and replayattack prevention. 8.7.1 ipsec and virtual private networks vpns an institution that extends over multiple geographical regions often desires its own ip network, so that its hosts and servers can send data to each other in a secure and confidential manner. to achieve this goal, the institution could actually deploy a standalone physical networkincluding routers, links, and a dns infrastructure that is completely separate from the public internet. such a disjoint network, dedicated to a particular institution, is called a private network. not surprisingly, a private network can be very costly, as the institution needs to purchase, install, and maintain its own physical network infrastructure. instead of deploying and maintaining a private network, many institutions today create vpns over the existing public internet. with a vpn, the institutions interoffice traffic is sent over the public internet rather than over a physically m08_kuro5469_08_ge_c08.indd 681 29042021 1520 682 chapter 8 security in computer networks independent network. but to provide confidentiality, the interoffice traffic is encrypted before it enters the public internet. a simple example of a vpn is shown in figure 8.27. here the institution consists of a headquarters, a branch office, and traveling salespersons that typically access the internet from their hotel rooms. there is only one salesperson shown in the figure. in this vpn, whenever two hosts within headquarters send ip datagrams to each other or whenever two hosts within the branch office want to communicate, they use goodold vanilla ipv4 that is, without ipsec services. however, when two of the institutions hosts communicate over a path
that traverses the public internet, the traffic is encrypted before it enters the internet. to get a feel for how a vpn works, lets walk through a simple example in the context of figure 8.27. when a host in headquarters sends an ip datagram to a salesperson in a hotel, the gateway router in headquarters converts the vanilla ipv4 datagram into an ipsec datagram and then forwards this ipsec datagram into the internet. this ipsec datagram actually has a traditional ipv4 header, so that the routers in the public internet process the datagram as if it were an ordinary ipv4 datagramto them, the datagram is a perfectly ordinary datagram. but, as shown figure 8.27, the payload of the ipsec datagram includes an ipsec header, which is used for ipsec processing; furthermore, the payload of the ipsec datagram is encrypted. when the figure 8.27 virtual private network vpnip headeripsec headersecure payload ip headeripsec headersecure payload ip headeripsec headersecure payloadip headerpayload ip headerpayloadlaptop wipsec router wipv4 and ipsec router wipv4 and ipsecbranch of Ô¨Åce headquarterssalesperson in hotel public internet m08_kuro5469_08_ge_c08.indd 682 29042021 1520 8.7 network layer security ipsec and virtual private networks 683 ipsec datagram arrives at the salespersons laptop, the os in the laptop decrypts the payload and provides other security services, such as verifying data integrity and passes the unencrypted payload to the upperlayer protocol for example, to tcp or udp. we have just given a highlevel overview of how an institution can employ ipsec to create a vpn. to see the forest through the trees, we have brushed aside many important details. lets now take a closer look. 8.7.2 the ah and esp protocols ipsec is a rather complex animalit is defined in more than a dozen rfcs. two important rfcs are rfc 4301, which describes the overall ip security architecture, and rfc 6071, which provides an overview of the ipsec protocol suite. our goal in this textbook, as usual, is not simply to rehash the dry and arcane rfcs, but instead take a more operational and pedagogic approach to describing the protocols. in the ipsec protocol suite, there are two principal protocols the authentication header ah protocol and the encapsulation security payload esp protocol. when a source ipsec entity typically a host or a router sends secure datagrams to a destination entity also a host or a router, it does so with either the ah protocol or the esp protocol. the ah protocol provides source authentication and data integrity but does not provide confidentiality. the esp protocol provides source authentica tion, data integrity, and confidentiality. because confidentiality is often critical for vpns and other ipsec applications, the esp protocol is much more widely used than the ah protocol. in order to demystify ipsec and avoid much of its complication, we will henceforth focus exclusively on the esp protocol. readers wanting to learn also about the ah protocol are encouraged to explore the rfcs and other online resources. 8.7.3 security associations ipsec datagrams are sent between pairs of network
entities, such as between two hosts, between two routers, or between a host and router. before sending ipsec datagrams from source entity to destination entity, the source and destination entities create a networklayer logical connection. this logical connection is called a security association sa. an sa is a simplex logical connection; that is, it is unidirectional from source to destination. if both entities want to send secure datagrams to each other, then two sas that is, two logical connections need to be established, one in each direction. for example, consider once again the institutional vpn in figure 8.27. this institution consists of a headquarters office, a branch office and, say, n traveling salespersons. for the sake of example, lets suppose that there is bidirectional ipsec traffic between headquarters and the branch office and bidirectional ipsec traffic between headquarters and the salespersons. in this vpn, how many sas are there? to answer this question, note that there are two sas between the headquarters gateway router and the branchoffice gateway router one in each direction; for each m08_kuro5469_08_ge_c08.indd 683 29042021 1520 684 chapter 8 security in computer networks salespersons laptop, there are two sas between the headquarters gateway router and the laptop again, one in each direction. so, in total, there are 2 2n sas. keep in mind, however, that not all traffic sent into the internet by the gateway routers or by the laptops will be ipsec secured. for example, a host in headquarters may want to access a web server such as amazon or google in the public internet. thus, the gateway router and the laptops will emit into the internet both vanilla ipv4 datagrams and secured ipsec datagrams. lets now take a look inside an sa. to make the discussion tangible and concrete, lets do this in the context of an sa from router r1 to router r2 in figure 8.28. you can think of router r1 as the headquarters gateway router and router r2 as the branch office gateway router from figure 8.27. router r1 will maintain state information about this sa, which will include a 32bit identifier for the sa, called the security parameter index spi the origin interface of the sa in this case 200.168.1.100 and the destination interface of the sa in this case 193.68.2.23 the type of encryption to be used for example, 3des with cbc the encryption key the type of integrity check for example, hmac with md5 the authentication key whenever router r1 needs to construct an ipsec datagram for forwarding over this sa, it accesses this state information to determine how it should authenticate and encrypt the datagram. similarly, router r2 will maintain the same state information for this sa and will use this information to authenticate and decrypt any ipsec datagram that arrives from the sa. an ipsec entity router or host often maintains state information for many sas. for example, in the vpn example in figure 8.27 with n salespersons, the headquar ters gateway router maintains state information for
2 2n sas. an ipsec entity stores the state information for all of its sas in its security association database sad, which is a data structure in the entitys os kernel.figure 8.28 security association sa from r1 to r2internet sar1 172.16.124headquarters branch of Ô¨Åce 200.168.1.100 193.68.2.23 172.16.224r2 m08_kuro5469_08_ge_c08.indd 684 29042021 1520 8.7 network layer security ipsec and virtual private networks 685 8.7.4 the ipsec datagram having now described sas, we can now describe the actual ipsec datagram. ipsec has two different packet forms, one for the socalled tunnel mode and the other for the socalled transport mode. the tunnel mode, being more appropriate for vpns, is more widely deployed than the transport mode. in order to further demystify ipsec and avoid much of its complication, we henceforth focus exclusively on the tunnel mode. once you have a solid grip on the tunnel mode, you should be able to easily learn about the transport mode on your own. the packet format of the ipsec datagram is shown in figure 8.29. you might think that packet formats are boring and insipid, but we will soon see that the ipsec datagram actually looks and tastes like a popular texmex delicacy! lets examine the ipsec fields in the context of figure 8.28. suppose router r1 receives an ordinary ipv4 datagram from host 172.16.1.17 in the headquarters network which is destined to host 172.16.2.48 in the branchoffice network. router r1 uses the following recipe to convert this original ipv4 datagram into an ipsec datagram appends to the back of the original ipv4 datagram which includes the original header fields! an esp trailer field encrypts the result using the algorithm and key specified by the sa appends to the front of this encrypted quantity a field called esp header; the resulting package is called the enchilada creates an authentication mac over the whole enchilada using the algorithm and key specified in the sa appends the mac to the back of the enchilada forming the payload finally, creates a brand new ip header with all the classic ipv4 header fields together normally 20 bytes long, which it appends before the payload note that the resulting ipsec datagram is a bona fide ipv4 datagram, with the traditional ipv4 header fields followed by a payload. but in this case, the payload figure 8.29 ipsec datagram formatnew ip headeresp headeresp traileresp macoriginal ip headeroriginal ip datagram payloadencryptedenchilada authenticated pad lengthpaddingnext headerspi seq m08_kuro5469_08_ge_c08.indd 685 29042021 1520 686 chapter 8 security in computer networks contains an esp header, the original ip datagram, an esp trailer, and an esp authen tication field with the original datagram and esp trailer encrypted. the original ip datagram has 172.16.1.17 for the source ip address and 172.16.2.48 for the destination ip address. because the ipsec datagram includes the original ip datagram, these addresses are included and encrypted as part of the payload of the ipsec packet. but what about the source and destination ip addresses that are in the new ip header, that is, in the
leftmost header of the ipsec datagram? as you might expect, they are set to the source and destination router interfaces at the two ends of the tunnels, namely, 200.168.1.100 and 193.68.2.23. also, the protocol number in this new ipv4 header field is not set to that of tcp, udp, or smtp, but instead to 50, designating that this is an ipsec datagram using the esp protocol. after r1 sends the ipsec datagram into the public internet, it will pass through many routers before reaching r2. each of these routers will process the datagram as if it were an ordinary datagramthey are completely oblivious to the fact that the datagram is carrying ipsecencrypted data. for these public internet routers, because the destination ip address in the outer header is r2, the ultimate destination of the datagram is r2. having walked through an example of how an ipsec datagram is constructed, lets now take a closer look at the ingredients in the enchilada. we see in figure 8.29 that the esp trailer consists of three fields padding; pad length; and next header. recall that block ciphers require the message to be encrypted to be an integer multiple of the block length. padding consisting of meaningless bytes is used so that when added to the original datagram along with the pad length and next header fields, the resulting message is an integer number of blocks. the padlength field indicates to the receiving entity how much padding was inserted and thus needs to be removed. the next header identifies the type e.g., udp of data contained in the payloaddata field. the payload data typically the original ip datagram and the esp trailer are concatenated and then encrypted. appended to the front of this encrypted unit is the esp header, which is sent in the clear and consists of two fields the spi and the sequence number field. the spi indicates to the receiving entity the sa to which the datagram belongs; the receiving entity can then index its sad with the spi to determine the appropriate authenticationdecryption algorithms and keys. the sequence number field is used to defend against replay attacks. the sending entity also appends an authentication mac. as stated earlier, the sending entity calculates a mac over the whole enchilada consisting of the esp header, the original ip datagram, and the esp trailerwith the datagram and trailer being encrypted. recall that to calculate a mac, the sender appends a secret mac key to the enchilada and then calculates a fixedlength hash of the result. when r2 receives the ipsec datagram, r2 observes that the destination ip address of the datagram is r2 itself. r2 therefore processes the datagram. because the protocol field in the leftmost ip header is 50, r2 sees that it should apply ipsec esp processing to the datagram. first, peering into the enchilada, r2 uses the spi to determine to which sa the datagram belongs. second, it calculates the mac of the enchilada and verifies that the mac is
consistent with the value in the esp m08_kuro5469_08_ge_c08.indd 686 29042021 1520 8.7 network layer security ipsec and virtual private networks 687 mac field. if it is, it knows that the enchilada comes from r1 and has not been tam pered with. third, it checks the sequencenumber field to verify that the datagram is fresh and not a replayed datagram. fourth, it decrypts the encrypted unit using the decryption algorithm and key associated with the sa. fifth, it removes padding and extracts the original, vanilla ip datagram. and finally, sixth, it forwards the original datagram into the branch office network toward its ultimate destination. whew, what a complicated recipe, huh? well no one ever said that preparing and unraveling an enchilada was easy! there is actually another important subtlety that needs to be addressed. it centers on the following question when r1 receives an unsecured datagram from a host in the headquarters network, and that datagram is destined to some destination ip address outside of headquarters, how does r1 know whether it should be converted to an ipsec datagram? and if it is to be processed by ipsec, how does r1 know which sa of many sas in its sad should be used to construct the ipsec datagram? the problem is solved as follows. along with a sad, the ipsec entity also maintains another data structure called the security policy database spd. the spd indicates what types of datagrams as a function of source ip address, destination ip address, and protocol type are to be ipsec processed; and for those that are to be ipsec processed, which sa should be used. in a sense, the information in a spd indicates what to do with an arriving datagram; the information in the sad indicates how to do it. summary of ipsec services so what services does ipsec provide, exactly? let us examine these services from the perspective of an attacker, say trudy, who is a womaninthemiddle, sitting somewhere on the path between r1 and r2 in figure 8.28. assume throughout this discussion that trudy does not know the authentication and encryption keys used by the sa. what can and cannot trudy do? first, trudy cannot see the original datagram. if fact, not only is the data in the original datagram hidden from trudy, but so is the protocol number, the source ip address, and the destination ip address. for datagrams sent over the sa, trudy only knows that the datagram originated from 200.168.1.100 and is destined to 193.68.2.23. she does not know if it is carrying tcp, udp, or icmp data; she does not know if it is carrying http, smtp, or some other type of application data. this confidentiality thus goes a lot farther than ssl. second, suppose trudy tries to tamper with a datagram in the sa by flipping some of its bits. when this tampered datagram arrives at r2, it will fail the integrity check using the mac, thwarting trudys vicious attempts once again. third, suppose trudy tries to
masquerade as r1, creating a ipsec datagram with source 200.168.1.100 and destination 193.68.2.23. trudys attack will be futile, as this datagram will again fail the integrity check at r2. finally, because ipsec includes sequence numbers, trudy will not be able create a successful replay attack. in summary, as claimed at the beginning of this section, ipsec providesbetween any pair of devices that process packets through the network layerconfidentiality, source authentication, data integrity, and replayattack prevention. m08_kuro5469_08_ge_c08.indd 687 29042021 1520 688 chapter 8 security in computer networks 8.7.5 ike key management in ipsec when a vpn has a small number of end points for example, just two routers as in figure 8.28, the network administrator can manually enter the sa information encryptionauthentication algorithms and keys, and the spis into the sads of the endpoints. such manual keying is clearly impractical for a large vpn, which may consist of hundreds or even thousands of ipsec routers and hosts. large, geographically distributed deployments require an automated mechanism for creating the sas. ipsec does this with the internet key exchange ike protocol, specified in rfc 5996. ike has some similarities with the handshake in ssl see section 8.6. each ipsec entity has a certificate, which includes the entitys public key. as with ssl, the ike protocol has the two entities exchange certificates, negotiate authentication and encryption algorithms, and securely exchange key material for creating session keys in the ipsec sas. unlike ssl, ike employs two phases to carry out these tasks. lets investigate these two phases in the context of two routers, r1 and r2, in figure 8.28. the first phase consists of two exchanges of message pairs between r1 and r2 during the first exchange of messages, the two sides use diffiehellman see homework problems to create a bidirectional ike sa between the routers. to keep us all confused, this bidirectional ike sa is entirely different from the ipsec sas discussed in sections 8.6.3 and 8.6.4. the ike sa provides an authenticated and encrypted channel between the two routers. during this first messagepair exchange, keys are established for encryption and authentication for the ike sa. also established is a master secret that will be used to compute ipsec sa keys later in phase 2. observe that during this first step, rsa public and private keys are not used. in particular, neither r1 nor r2 reveals its identity by signing a message with its private key. during the second exchange of messages, both sides reveal their identity to each other by signing their messages. however, the identities are not revealed to a passive sniffer, since the messages are sent over the secured ike sa channel. also during this phase, the two sides negotiate the ipsec encryption and authentication algorithms to be employed by the ipsec sas. in phase 2 of ike, the two sides create an sa in each direction. at the end of phase 2, the encryption and authentication session keys are established on both sides for the two sas. the two sides
can then use the sas to send secured datagrams, as described in sections 8.7.3 and 8.7.4. the primary motivation for having two phases in ike is computational costsince the second phase doesnt involve any publickey cryptography, ike can generate a large number of sas between the two ipsec entities with relatively little computational cost. m08_kuro5469_08_ge_c08.indd 688 29042021 1520 8.8 securing wireless lans and 4g5g cell ular networks 689 8.8 securing wireless lans and 4g5g cellular networks security is a particularly important concern in wireless networks, where the attacker can sniff frames by simply positioning a receiving device anywhere within the transmission range of the sender. this is true in both 802.11 wireless lans, as well as in 4g5g cellular networks. in both settings, well see extensive use of the fundamental security techniques that we studied earlier in this chapter, including the use of nonces for authentication, cryptographic hashing for message integrity, derivation of shared symmetric keys for encrypting usersession data, and the extensive use of the aes encryption standard. we will also see, as is also the case in wired internet settings, that wireless security protocols have undergone constant evolution, as researchers and hackers discover weaknesses and flaws in existing security protocols. in this section, we present a brief introduction to wireless security in both 802.11wifi and 4g5g settings. for a more indepth treatment, see the highly readable 802.11 security books edney 2003; wright 2015, the excellent coverage of 3g4g5g security in sauter 2014, and recent surveys zou 2016; kohlios 2018. 8.8.1 authentication and key agreement in 802.11 wireless lans lets start our discussion of 802.11 security by identifying two of many zou 2016 critical security concerns that well want an 802.11 network to handle mutual authentication. before a mobile device is allowed to fully attach to an access point and send datagrams to remote hosts, the network will typically want to first authenticate the deviceto verify the identity of the mobile device attaching to the network, and to check that devices access privileges. similarly, the mobile device will want to authenticate the network to which it is attachingto make sure that the network it is joining is truly the network to which it wants to attach. this twoway authentication is known as mutual authentication. encryption. since 802.11 frames will be exchanged over a wireless channel that can be sniffed and manipulated by potential neer dowells, it will be important to encrypt linklevel frames carrying userlevel data exchanged between the mobile device and the access point ap. symmetric key encryption is used in practice, since encryption and decryption must be performed at high speeds. the mobile device and ap will need to derive the symmetric encryption and decryption keys to be used. figure 8.30 illustrates the scenario of a mobile device wishing to attach to an 802.11 network. we see the two usual network components that we encountered m08_kuro5469_08_ge_c08.indd 689 29042021 1520 690 chapter 8 security in computer networks in our earlier study of 802.11 networks in section 7.3the mobile
device and the ap. we also see a new architectural component, the authentication server as that will be responsible for authenticating the mobile device. the authentication server might be colocated in the ap, but more typically and as shown in figure 8.30, it is implemented as a separate server that provides authentication services. for authentication, the ap serves as a passthrough device, relaying authentication and key derivation messages between the mobile device and the authentication server. such an authentication server would typically provide authentication services for all aps within its network. we can identify four distinct phases to the process of mutual authentication and encryptionkey derivation and use in figure 8.30 1. discovery. in the discovery phase, the ap advertises its presence and the forms of authentication and encryption that can be provided to the mobile device. the mobile device then requests the specific forms of authentication and encryption that it desires. although the device and ap are already exchanging messages, the device has not yet been authenticated nor does it have an encryption key for frame transmission over the wireless link, and so several more steps will be required before the device can communicate securely through the ap. 2. mutual authentication and shared symmetric key derivation. this is the most critical step in securing the 802.11 channel. as we will see, this step is mobile deviceap access point wired networkas authentication server 1 discovery of security capabilities 4 encrypted communication between mobile device and a remote host via ap shared symmetric session keydistribution2 3mutual authentication and shared symmetric key derivation figure 8.30 mutual authentication and encryptionkey derivation in wpa m08_kuro5469_08_ge_c08.indd 690 29042021 1520 8.8 securing wireless lans and 4g5g cell ular networks 691 greatly facilitated by assuming which is true in practice in both 802.11 and 4g5g networks that the authentication server and the mobile device already have a shared common secret before starting mutual authentication. in this step, the device and the authentication server will use this shared secret along with nonces to prevent relay attacks and cryptographic hashing to ensure message integrity in authenticating each other. they will also derive the shared session key to be used by the mobile device and the ap to encrypt frames transmitted over the 802.11 wireless link. 3. shared symmetric session key distribution. since the symmetric encryption key is derived at the mobile device and the authentication server, a protocol will be needed for the authentication server to inform the ap of the shared symmetric session key. while this is rather straightforward, it still is a necessary step. 4. encrypted communication between mobile device and a remote host via the ap. this communication happens as we saw earlier in section 7.3.2, with the linklayer frames sent between the mobile device and the ap being encrypted using the shared session key created and distributed by steps 2 and 3. aes symmetric key cryptography, which we covered earlier in section 8.2.1, is typically used in practice for encryptingdecrypting 802.11 frame data. mutual authentication
and shared symmetric session key derivation the topics of mutual authentication and shared symmetric session key derivation are the central components of 802.11 security. since it is here that security flaws in various earlier versions of 802.11 security have been discovered, lets tackle these challenges first. the issue of 802.11security has attracted considerable attention in both technical circles and in the media. while there has been considerable discussion, there has been little debatethere is universal agreement that the original 802.11security specification known collectively as wired equivalent privacy wep contained a number of serious security flaws fluhrer 2001; stubblefield 2002. once these flaws were discovered, public domain software was soon available exploiting these holes, making users of wepsecured 802.11 wlans as open to security attacks as users who used no security features at all. readers interested in learning about wep can consult the references, as well as earlier editions of this textbook, which covered wep. as always, retired material from this book is available on the companion website. wifi protected access wpa1 was developed in 2003 by the wifi alli ance wifi 2020 to overcome weps security flaws. the initial version of wpa1 improved on wep by introducing message integrity checks, and avoiding attacks that allowed a user to infer encryption keys after observing the stream of encrypted messages for a period of time. wpa1 soon gave way to wpa2, which mandated the use of aes symmetric key encryption. at the heart of wpa is a fourway handshake protocol that performs both mutual authentication and shared symmetric sessionkey derivation. the handshake protocol is shown in figure 8.31 in simplified form. note that both the mobile device m and the authentication server as begin knowing a shared secret key k asm m08_kuro5469_08_ge_c08.indd 691 29042021 1520 692 chapter 8 security in computer networks e.g., a password. one of their tasks will be to derive a shared symmetric session key, kmap, which will be used to encryptdecrypt frames that are later transmitted between the mobile device m and the ap. mutual authentication and shared symmetric sessionkey derivation are accomplished in the first two steps, a and b, of the fourway handshake shown in figure 8.31. steps c and d are used to derive a second key used for group communication; see kohlios 2018; zou 2016 for details. a. in this first step, the authentication server as generates a nonce, nonce as, and sends it to the mobile device. recall from section 8.4 that nonces are used to avoid playback attacks and prove the liveness of the other side being authenticated. b. the mobile device, m, receives the nonce, nonce as, from the as and gener ates its own nonce, noncem. the mobile device then generates the symmetric shared session key, kmap, using nonceas, noncem, the initial shared secret key kasm, its mac address, and the mac address of the as. it then sends its nonce, noncem, and an hmacsigned see figure 8.9 value that encodes nonceas and the original shared secret. the as receives
this message from m. by looking at the hmacsigned version of the nonce it had just recently sent, nonce as, the authentication server knows the mobile device is live; because the mobile device was able to encrypt using the shared secret key, k asm, the as also knows that the mobile device m mobile deviceas authentication server a bnonceas derive session key kmap using kasm, nonceas, noncem derive session key kmap using kasm, nonceas, noncemkasm kasm noncem, hmacfkasm,nonceas c dc, d used for group key derivation figure 8.31 the wpa2 fourway handshake m08_kuro5469_08_ge_c08.indd 692 29042021 1520 8.8 securing wireless lans and 4g5g cell ular networks 693 is indeed who it claims to be i.e., a device that knows the shared initial secret. the as has thus authenticated the mobile device! the as can also now perform the exact same computation as the mobile device to derive the shared symmetric sessionkey, k map, using the noncem it received, nonceas, the initial shared secret key kasm, its mac address and the mac address of the mobile device. at this point both the mobile device and the authentication server have computed the same shared symmetric key, k map, which will be used to encryptdecrypt frames transmitted between the mobile device and the ap. the as informs the ap of this key value in step 3 in figure 8.30. wpa3 was released in june 2018 as an update to wpa2. the update addresses an attack on the fourway handshake protocol that could induce the reuse of previously used nonces vanhoef 2017 but still permits the use of the fourway handshake as a legacy protocol and includes longer key lengths, among other changes wifi 2019. 802.11 security messaging protocols figure 8.32 shows the protocols used to implement the 802.11 security framework discussed above. the extensible authentication protocol eap rfc 3748 defines the endtoend message formats used in a simple requestresponse mode of interaction between the mobile device and authentication server, and are certified under wpa2. as shown in figure 8.32, eap messages are encapsulated using eapol eap over lan and sent over the 802.11 wireless link. these eap messages are then decapsulated at the access point, and then reencapsulated using the radius protocol for m mobile deviceap access point wired networkas authentication server eap tls eap eap over lan eapol radius ieee 802.11 udpip figure 8.32 eap is an endtoend protocol. eap messages are encapsulated using eapol over the wireless link between the mobile device and the access point, and using radius over udpip between the access point and the authentication server m08_kuro5469_08_ge_c08.indd 693 29042021 1520 694 chapter 8 security in computer networks transmission over udpip to the authentication server. while the radius server and protocol rfc 2865 are not required, they are de facto standard components. the recently standardized diameter protocol rfc 3588 is projected to eventually replace radius in the future. 8.8.2 authentication and key agreement in 4g5g cellular networks in this section, we describe mutual authentication and keygeneration mechanisms in 4g5g networks.
many of the approaches well encounter here parallel those that we just studied in 802.11 networks, with the notable exception that in 4g5g networks, mobile devices may be attached to their home network i.e., the cellular carrier network to which they are subscribed, or may be roaming on a visited net work. in this latter case, the visited and home networks will need to interact when authenticating a mobile device and generating encryption keys. before continuing, you may want to refamiliarize yourself with 4g5g network architecture by rereading sections 7.4 and 7.7.1. the goals of mutual authentication and key generation are the same in the 4g5g setting as in the 802.11 setting. in order to encrypt the contents of frames being transmitted over the wireless channel, the mobile device and base station will need to derive a shared symmetric encryption key. in addition, the network to which the mobile device is attaching will need to authenticate the devices identity and check its access privileges. similarly, the mobile device will also want to authenticate the network to which it is attaching. while the networks need to authenticate a mobile device may be obvious, the need for authentication in the reverse direction may not be so clear. however, there are documented cases of neerdowells operating rogue cellular base stations that entice unsuspecting mobile devices to attach to the rogue network, exposing a device to a number of attacks li 2017. so, as in the case of 802.11 wlans, a mobile device should exercise abundant caution when attaching to a cellular network! figure 8.33 illustrates the scenario of mobile device attaching to a 4g cellu lar network. at the top of figure 8.33, we see many of the 4g components that we encountered earlier in section 7.4the mobile device m, the base station bs, the mobility management entity mme in the network to which the mobile device wants to attach, and the home subscriber service hss in the mobile devices home network. a comparison of figures 8.30 and 8.33 shows the similarities and differences between the 802.11 and 4g security settings. we again see a mobile device and a base station; the user sessionkey derived during network attachment, k bsm, will be used to encryptdecrypt frames transmitted over their wireless link. the 4g mme and hss together will play a role similar to that of the authentication server in the 802.11 setting. note that the hss and the mobile device also share a common secret, k hssm, known to both entities before authentication begins. this key is stored in the mobile devices sim card, and in the hss database in the mobile devices home network. m08_kuro5469_08_ge_c08.indd 694 29042021 1520 8.8 securing wireless lans and 4g5g cell ular networks 695 the 4g authentication and key agreement aka protocol consists of the fol lowing steps a. authentication request to hss. when the mobile device first requests, via a base station, to attach to the network, it sends an attach message containing its international mobile subscriber
identity imsi that is relayed to the mobility management entity mme. the mme will then send the imsi and information about the visited network shown as vn info in figure 8.33 to the home subscriber service hss in the devices home network. in section 7.4, we described how the mme is able to communicate with the hss through the allip global network of interconnected cellular networks. b. authentication response from hss. the hss performs cryptographic operations using the sharedinadvance secret key, k hssm, to derive an authentication token, auth_token, and an expected authentication response token, xreshss. auth_token contains information encrypted by the hss using khssm that will allow the mobile device to know that whoever computed auth_token knows the secret key. for example, suppose the hss computes khssmimsi, that is, encrypts the devices imsi using khssm and sends that value as auth_token. when the mobile device receives that encrypted value and uses its secret key to decrypt this value, that is, to compute mobility management entity mme base station bs hss home subscriber service hssmobile device m visited network home network khssm attachattachauth_req imsi, vn info auth token auth token resm resm dok, keys ok key derivationkhssm kbsm c eddba auth_resp auth token,xreshss,keys figure 8.33 mutual authentication and key agreement in a 4g lte cellular network m08_kuro5469_08_ge_c08.indd 695 29042021 1520 696 chapter 8 security in computer networks khssmkhssmimsi 5 imsi, it knows that the hss that generated auth_ token knows its secret key. the mobile device can thus authenticate the hss. the expected authentication response token, xreshss, contains a value that the mobile device will need to be able to compute using khssm and return to the mme to prove that it the mobile device knows the secret key, thus authenti cating the mobile device to the mme. note that the mme only plays a middleman role here, receiving the authentication response message, keeping xres hss for later use, extracting the authen tication token and forwarding it to the mobile device. in particular it need not know, and will not learn, the secret key, k hssm. c. authentication response from mobile device. the mobile device receives auth_token and computes k hssmkhssmimsi 5 imsi, thus authenticating the hss. the mobile device then computes a value resmusing its secret key to make the exact same cryptographic calculation that the hss had made to compute xres hssand sends this value to the mme. d. mobile device authentication. the mms compares the mobilecomputed value of res m with the hsscomputed value of xreshss. if they match, the mobile device is authenticated, since the mobile has proven to the mme that it and the hss both know the common secret key. the mms informs the base station and mobile device that mutual authentication is complete, and sends the base station keys that will be used in step e. e. data plane and control plane key derivation. the mobile device and the base station will each determine the keys used for encryptingdecrypting their frame transmissions over
the wireless channel. separate keys will be derived for data plane and control plane frame transmissions. the aes encryption algorithm that we saw in use in 802.11 networks is also used in 4g5g networks. our discussion above has focused on authentication and key agreement in 4g networks. although much of the 4g security is being carried forward into 5g, there are some important changes first, note that in our discussion above that it is the mme in the visited network that makes the authentication decision. a significant change underway in 5g network security is to allow authentication services to be provided by the home network, with the visited network playing an even smaller middleman role. while the visited network may still reject an authentication from a mobile device, it is up to the home network to accept the authentication request in this new 5g scenario. 5g networks will support the authentication and key agreement aka protocol described above, as well as two new additional protocols for authentication and key agreement. one of these, known as aka, is closely related to the 4g aka protocol. it also uses the sharedinadvance secret key, k hssm. however, since it uses the eap protocol that we encountered earlier in figure 8.33 in the context of 802.11 authentication, 5g aka has different message flows than that m08_kuro5469_08_ge_c08.indd 696 29042021 1520 8.9 operational security firewalls and intrusion detection s ystems 697 of 4g aka. the second new 5g protocol is meant for an iot environment, and does not require a sharedinadvance secret key. an additional change in 5g is to use public key cryptography techniques to encrypt a devices permanent identity i.e., its imsi so that it is never transmitted in cleartext. in this section, we have only briefly overviewed mutual authentication and key agreement in 4g 5g networks. as we have seen, they make extensive use of the security techniques that we studied earlier in this chapter. more details on 4g5g security can be found in 3gpp sae 2019; cable labs 2019; cichonski 2017. 8.9 operational security firewalls and intrusion detection systems weve seen throughout this chapter that the internet is not a very safe placebad guys are out there, wreaking all sorts of havoc. given the hostile nature of the internet, lets now consider an organizations network and the network administrator who administers it. from a network administrators point of view, the world divides quite neatly into two campsthe good guys who belong to the organizations network, and who should be able to access resources inside the organizations network in a relatively unconstrained manner and the bad guys everyone else, whose access to network resources must be carefully scrutinized. in many organizations, ranging from medieval castles to modern corporate office buildings, there is a single point of entryexit where both good guys and bad guys entering and leaving the organization are securitychecked. in a castle, this was done at a gate at one end of the drawbridge; in a corporate building, this is done
at the security desk. in a computer network, when traffic enteringleaving a network is securitychecked, logged, dropped, or forwarded, it is done by operational devices known as firewalls, intrusion detection systems idss, and intrusion prevention systems ipss. 8.9.1 firewalls a firewall is a combination of hardware and software that isolates an organizations internal network from the internet at large, allowing some packets to pass and blocking others. a firewall allows a network administrator to control access between the outside world and resources within the administered network by managing the traffic flow to and from these resources. a firewall has three goals all traffic from outside to inside, and vice versa, passes through the firewall. figure 8.34 shows a firewall, sitting squarely at the boundary between the admin istered network and the rest of the internet. while large organizations may use m08_kuro5469_08_ge_c08.indd 697 29042021 1520 698 chapter 8 security in computer networks multiple levels of firewalls or distributed firewalls skoudis 2006, locating a firewall at a single access point to the network, as shown in figure 8.34, makes it easier to manage and enforce a securityaccess policy. only authorized traffic, as defined by the local security policy, will be allowed to pass. with all traffic entering and leaving the institutional network passing through the firewall, the firewall can restrict access to authorized traffic. the firewall itself is immune to penetration. the firewall itself is a device connected to the network. if not designed or installed properly, it can be compromised, in which case it provides only a false sense of security which is worse than no firewall at all!. cisco and check point are two of the leading firewall vendors today. you can also easily create a firewall packet filter from a linux box using iptables publicdomain software that is normally shipped with linux. furthermore, as discussed in chapters 4 and 5, firewalls are now frequently implemented in routers and controlled remotely using sdns. firewalls can be classified in three categories traditional packet filters, state ful filters, and application gateways. well cover each of these in turn in the following subsections.figure 8.34 firewall placement between the administered network and the outside worldadministered networkfirewallpublic internet m08_kuro5469_08_ge_c08.indd 698 29042021 1520 8.9 operational security firewalls and intrusion detection s ystems 699 traditional packet filters as shown in figure 8.34, an organization typically has a gateway router connecting its internal network to its isp and hence to the larger public internet. all traffic leaving and entering the internal network passes through this router, and it is at this router where packet filtering occurs. a packet filter examines each datagram in isolation, determining whether the datagram should be allowed to pass or should be dropped based on administratorspecific rules. filtering decisions are typically based on ip source or destination address protocol type in ip datagram field tcp, udp, icmp, ospf, and so on tcp or udp source and destination port tcp flag bits syn, ack, and so on icmp message type different rules for datagrams leaving
and entering the network different rules for the different router interfaces a network administrator configures the firewall based on the policy of the organ ization. the policy may take user productivity and bandwidth usage into account as well as the security concerns of an organization. table 8.5 lists a number of possible polices an organization may have, and how they would be addressed with a packet filter. for example, if the organization doesnt want any incoming tcp connections except those for its public web server, it can block all incoming tcp syn segments except tcp syn segments with destination port 80 and the destination ip address corresponding to the web server. if the organization doesnt want its users to monopolize access bandwidth with internet radio applications, it can block all notcritical table 8.5 policies and corresponding filtering rules for an organizations network 130.20716 with web server at 130.207.244.203policy firewall setting no outside web access. drop all outgoing packets to any ip address, port 80. no incoming tcp connections, except those for organizations public web server only.drop all incoming tcp syn packets to any ip except 130.207.244.203, port 80. prevent webradios from eating up the available bandwidth.drop all incoming udp packetsexcept dns packets. prevent your network from being used for a smurf dos attack.drop all icmp ping packets going to a broadcast address eg 130.207.255.255. prevent your network from being tracerouted. drop all outgoing icmp ttl expired traffic. m08_kuro5469_08_ge_c08.indd 699 29042021 1520 700 chapter 8 security in computer networks udp traffic since internet radio is often sent over udp. if the organization doesnt want its internal network to be mapped tracerouted by an outsider, it can block all icmp ttl expired messages leaving the organizations network. a filtering policy can be based on a combination of addresses and port numbers. for example, a filtering router could forward all telnet datagrams those with a port number of 23 except those going to and coming from a list of specific ip addresses. this policy permits telnet connections to and from hosts on the allowed list. unfortunately, basing the policy on external addresses provides no protection against datagrams that have had their source addresses spoofed. filtering can also be based on whether or not the tcp ack bit is set. this trick is quite useful if an organization wants to let its internal clients connect to external servers but wants to prevent external clients from connecting to internal servers. recall from section 3.5 that the first segment in every tcp connection has the ack bit set to 0, whereas all the other segments in the connection have the ack bit set to 1. thus, if an organization wants to prevent external clients from initiating connections to internal servers, it simply filters all incoming segments with the ack bit set to 0. this policy kills all tcp connections originating from the outside, but permits connections originating internally. firewall rules are implemented in routers with access control lists, with each router interface having its own list.
an example of an access control list for an organization 222.2216 is shown in table 8.6. this access control list is for an interface that connects the router to the organizations external isps. rules are applied to each datagram that passes through the interface from top to bottom. the first two rules together allow internal users to surf the web the first rule allows any tcp packet with destination port 80 to leave the organizations network; the second rule allows any tcp packet with source port 80 and the ack bit set to enter the organizations network. note that if an external source attempts to establish a tcp connection with table 8.6 an access control list for a router interfaceaction source address dest address protocol source port dest port flag bit allow 222.2216 outside of 222.2216tcp 1023 80 any allow outside of 222.2216222.2216 tcp 80 1023 ack allow 222.2216 outside of 222.2216udp 1023 53 allow outside of 222.2216222.2216 udp 53 1023 deny all all all all all all m08_kuro5469_08_ge_c08.indd 700 29042021 1520 8.9 operational security firewalls and intrusion detection s ystems 701 an internal host, the connection will be blocked, even if the source or destination port is 80. the second two rules together allow dns packets to enter and leave the organizations network. in summary, this rather restrictive access control list blocks all traffic except web traffic initiated from within the organization and dns traffic. cert filtering 2012 provides a list of recommended portprotocol packet filterings to avoid a number of wellknown security holes in existing network applications. readers with sharp memories may recall we encountered access control lists similar to table 8.6 when we studied generalized forwarding in section 4.4.3 of chapter 4. indeed, we provided an example there of how generalized forwarding rules can be used to build a packetfiltering firewall. stateful packet filters in a traditional packet filter, filtering decisions are made on each packet in isolation. stateful filters actually track tcp connections, and use this knowledge to make filtering decisions. to understand stateful filters, lets reexamine the access control list in table 8.6. although rather restrictive, the access control list in table 8.6 neverthe less allows any packet arriving from the outside with ack 1 and source port 80 to get through the filter. such packets could be used by attackers in attempts to crash internal systems with malformed packets, carry out denialofservice attacks, or map the internal network. the naive solution is to block tcp ack packets as well, but such an approach would prevent the organizations internal users from surfing the web. stateful filters solve this problem by tracking all ongoing tcp connections in a connection table. this is possible because the firewall can observe the beginning of a new connection by observing a threeway handshake syn, synack, and ack; and it can observe the end of a connection when it sees a fin packet for the connection. the firewall can also conservatively assume that the connection is over when it hasnt seen
any activity over the connection for, say, 60 seconds. an example connection table for a firewall is shown in table 8.7. this connection table indicates that there are currently three ongoing tcp connections, all of which have been initiated from within the organization. additionally, the stateful filter includes a new column, check connection, in its access control list, as table 8.7 connection table for stateful filtersource address dest address source port dest port 222.22.1.7 37.96.87.123 12699 80 222.22.93.2 199.1.205.23 37654 80 222.22.65.143 203.77.240.43 48712 80 m08_kuro5469_08_ge_c08.indd 701 29042021 1520 702 chapter 8 security in computer networks shown in table 8.8. note that table 8.8 is identical to the access control list in table 8.6, except now it indicates that the connection should be checked for two of the rules. lets walk through some examples to see how the connection table and the extended access control list work handinhand. suppose an attacker attempts to send a malformed packet into the organizations network by sending a datagram with tcp source port 80 and with the ack flag set. further suppose that this packet has source port number 12543 and source ip address 150.23.23.155. when this packet reaches the firewall, the firewall checks the access control list in table 8.7, which indicates that the connection table must also be checked before permitting this packet to enter the organizations network. the firewall duly checks the connection table, sees that this packet is not part of an ongoing tcp connection, and rejects the packet. as a second example, suppose that an internal user wants to surf an external web site. because this user first sends a tcp syn segment, the users tcp connection gets recorded in the connection table. when the web server sends back packets with the ack bit necessarily set, the firewall checks the table and sees that a corresponding connection is in progress. the firewall will thus let these packets pass, thereby not interfering with the internal users web surfing activity. application gateway in the examples above, we have seen that packetlevel filtering allows an organization to perform coarsegrain filtering on the basis of the contents of ip and tcpudp headers, including ip addresses, port numbers, and acknowledgment bits. but what if an organization wants to provide a telnet service to a restricted set of internal users table 8.8 access control list for stateful filteraction source addressdest addressprotocol source port dest port flag bit check conxion allow 222.2216 outside of 222.2216tcp 1023 80 any allow outside of 222.2216222.2216 tcp 80 1023 ack x allow 222.2216 outside of 222.2216udp 1023 53 allow outside of 222.2216222.2216 udp 53 1023 x deny all all all all all all m08_kuro5469_08_ge_c08.indd 702 29042021 1520 8.9 operational security firewalls and intrusion detection s ystems 703 as opposed to ip addresses? and what if the organization wants such privileged users to authenticate themselves first before being allowed to create telnet sessions to the outside world? such tasks are beyond the capabilities of traditional and stateful filters. indeed, information about
the identity of the internal users is applicationlayer data and is not included in the iptcpudp headers. to have finerlevel security, firewalls must combine packet filters with appli cation gateways. application gateways look beyond the iptcpudp headers and make policy decisions based on application data. an application gateway is an applicationspecific server through which all application data inbound and outbound must pass. multiple application gateways can run on the same host, but each gateway is a separate server with its own processes. to get some insight into application gateways, lets design a firewall that allows only a restricted set of internal users to telnet outside and prevents all external clients from telneting inside. such a policy can be accomplished by implementing a combination of a packet filter in a router and a telnet application gateway, as shown in figure 8.35. the routers filter is configured to block all telnet connections except those that originate from the ip address of the application gateway. such a filter configuration forces all outbound telnet connections to pass through the application gateway. consider now an internal user who wants to telnet to the outside world. the user must first set up a telnet session with the application gateway. an application running in the gateway, which listens for incoming telnet sessions, prompts the figure 8.35 firewall consisting of an application gateway and a filterapplication gatewayhosttogateway telnet sessiongatewaytoremote host t elnet session router and Ô¨Ålter m08_kuro5469_08_ge_c08.indd 703 29042021 1520 704 chapter 8 security in computer networks user for a user id and password. when the user supplies this information, the appli cation gateway checks to see if the user has permission to telnet to the outside world. if not, the telnet connection from the internal user to the gateway is terminated by the gateway. if the user has permission, then the gateway 1 prompts the user for the host name of the external host to which the user wants to connect, 2 sets up a telnet session between the gateway and the external host, and 3 relays to the external host all data arriving from the user, and relays to the user all data arriving from the external host. thus, the telnet application gateway not only performs user authorization but also acts as a telnet server and a telnet client, relaying information between the user and the remote telnet server. note that the filter will permit step 2 because the gateway initiates the telnet connection to the outside world. anonymity and privacy suppose you want to visit a controversial web site for example, a political activist site and you 1 dont want to reveal your ip address to the web site, 2 dont want your local isp which may be your home or office isp to know that you are visiting the site, and 3 dont want your local isp to see the data you are exchanging with the site. if you use the traditional approach of connecting directly to the web site without any encryption, you
fail on all three counts. even if you use ssl, you fail on the first two counts your source ip address is presented to the web site in every datagram you send; and the destination address of every packet you send can easily be sniffed by your local isp. to obtain privacy and anonymity, you can instead use a combination of a trusted proxy server and ssl, as shown in figure 8.36. with this approach, you first make an ssl connection to the trusted proxy. you then send, into this ssl connection, case history figure 8.36 providing anonymity and privacy with a proxyaliceanonymizing proxy sslcleartext m08_kuro5469_08_ge_c08.indd 704 29042021 1520 8.9 operational security firewalls and intrusion detection s ystems 705 an http request for a page at the desired site. when the proxy receives the ssl encrypted http request, it decrypts the request and forwards the cleartext http request to the web site. the web site then responds to the proxy, which in turn for wards the response to you over ssl. because the web site only sees the ip address of the proxy, and not of your clients address, you are indeed obtaining anony mous access to the web site. and because all traffic between you and the proxy is encrypted, your local isp cannot invade your privacy by logging the site you visited or recording the data you are exchanging. many companies today such as proxify .com make available such proxy services. of course, in this solution, your proxy knows everything it knows your ip address and the ip address of the site youre surfing; and it can see all the traffic in cleartext exchanged between you and the web site. such a solution, therefore, is only as good as the trustworthiness of the proxy. a more robust approach, taken by the tor anonymizing and privacy service, is to route your traffic through a series of non colluding proxy servers tor 2020. in particular, tor allows independent individuals to contribute proxies to its proxy pool. when a user connects to a server using tor, tor randomly chooses from its proxy pool a chain of three proxies and routes all traffic between client and server over the chain. in this manner, assuming the proxies do not collude, no one knows that communication took place between your ip address and the target web site. furthermore, although cleartext is sent between the last proxy and the server, the last proxy doesnt know what ip address is sending and receiving the cleartext. internal networks often have multiple application gateways, for example, gate ways for telnet, http, ftp, and email. in fact, an organizations mail server see section 2.3 and web cache are application gateways. application gateways do not come without their disadvantages. first, a different application gateway is needed for each application. second, there is a performance penalty to be paid, since all data will be relayed via the gateway. this becomes a concern particularly when multiple users or applications are using the
same gateway machine. finally, the client software must know how to contact the gateway when the user makes a request, and must know how to tell the application gateway what external server to connect to. 8.9.2 intrusion detection systems weve just seen that a packet filter traditional and stateful inspects ip, tcp, udp, and icmp header fields when deciding which packets to let pass through the firewall. however, to detect many attack types, we need to perform deep packet inspection, that is, look beyond the header fields and into the actual application data that the packets carry. as we saw in section 8.9.1, application gateways often do deep packet inspection. but an application gateway only does this for a specific application. m08_kuro5469_08_ge_c08.indd 705 29042021 1520 706 chapter 8 security in computer networks clearly, there is a niche for yet another devicea device that not only examines the headers of all packets passing through it like a packet filter, but also performs deep packet inspection unlike a packet filter. when such a device observes a suspicious packet, or a suspicious series of packets, it could prevent those packets from entering the organizational network. or, because the activity is only deemed as suspicious, the device could let the packets pass, but send alerts to a network administrator, who can then take a closer look at the traffic and take appropriate actions. a device that generates alerts when it observes potentially malicious traffic is called an intrusion detection system ids. a device that filters out suspicious traffic is called an intrusion prevention system ips. in this section we study both systemsids and ipstogether, since the most interesting technical aspect of these systems is how they detect suspicious traffic and not whether they send alerts or drop packets. we will henceforth collectively refer to ids systems and ips systems as ids systems. an ids can be used to detect a wide range of attacks, including network map ping emanating, for example, from nmap, port scans, tcp stack scans, dos bandwidthflooding attacks, worms and viruses, os vulnerability attacks, and application vulnerability attacks. see section 1.6 for a survey of network attacks. today, thousands of organizations employ ids systems. many of these deployed systems are proprietary, marketed by cisco, check point, and other security equipment vendors. but many of the deployed ids systems are publicdomain systems, such as the immensely popular snort ids system which well discuss shortly. an organization may deploy one or more ids sensors in its organizational net work. figure 8.37 shows an organization that has three ids sensors. when multiple sensors are deployed, they typically work in concert, sending information about suspicious traffic activity to a central ids processor, which collects and integrates the information and sends alarms to network administrators when deemed appropriate. in figure 8.37, the organization has partitioned its network into two regions a highsecurity region, protected by a packet filter and an application gateway and monitored by ids sensors; and a lowersecurity regionreferred to as the demilitarized zone
dmzwhich is protected only by the packet filter, but also monitored by ids sensors. note that the dmz includes the organizations servers that need to communicate with the outside world, such as its public web server and its authoritative dns server. you may be wondering at this stage, why multiple ids sensors? why not just place one ids sensor just behind the packet filter or even integrated with the packet filter in figure 8.37? we will soon see that an ids not only needs to do deep packet inspection, but must also compare each passing packet with tens of thousands of signatures; this can be a significant amount of processing, particularly if the organization receives gigabitssec of traffic from the internet. by placing the ids sensors further downstream, each sensor sees only a fraction of the organizations traffic, and can more easily keep up. nevertheless, highperformance ids and ips systems are available today, and many organizations can actually get by with just one sensor located near its access router. m08_kuro5469_08_ge_c08.indd 706 29042021 1520 8.9 operational security firewalls and intrusion detection s ystems 707 ids systems are broadly classified as either signaturebased systems or anomaly based systems. a signaturebased ids maintains an extensive database of attack signatures. each signature is a set of rules pertaining to an intrusion activity. a signature may simply be a list of characteristics about a single packet e.g., source and destination port numbers, protocol type, and a specific string of bits in the packet payload, or may relate to a series of packets. the signatures are normally created by skilled network security engineers who research known attacks. an organizations network administrator can customize the signatures or add its own to the database. operationally, a signaturebased ids sniffs every packet passing by it, com paring each sniffed packet with the signatures in its database. if a packet or series of packets matches a signature in the database, the ids generates an alert. the alert could be sent to the network administrator in an email message, could be sent to the network management system, or could simply be logged for future inspection.figure 8.37 an organization deploying a filter, an application gateway, and ids sensorsinternet web serverftp serverdns serverinternal network application gateway demilitarized zonefilter key ids sensors m08_kuro5469_08_ge_c08.indd 707 29042021 1520 708 chapter 8 security in computer networks signaturebased ids systems, although widely deployed, have a number of limi tations. most importantly, they require previous knowledge of the attack to generate an accurate signature. in other words, a signaturebased ids is completely blind to new attacks that have yet to be recorded. another disadvantage is that even if a signature is matched, it may not be the result of an attack, so that a false alarm is generated. finally, because every packet must be compared with an extensive collection of signatures, the ids can become overwhelmed with processing and actually fail to detect many malicious packets. an anomalybased ids creates a traffic profile as it observes traffic in normal
operation. it then looks for packet streams that are statistically unusual, for example, an inordinate percentage of icmp packets or a sudden exponential growth in port scans and ping sweeps. the great thing about anomalybased ids systems is that they dont rely on previous knowledge about existing attacksthat is, they can potentially detect new, undocumented attacks. on the other hand, it is an extremely challenging problem to distinguish between normal traffic and statistically unusual traffic. to date, most ids deployments are primarily signaturebased, although some include some anomalybased features. snort snort is a publicdomain, open source ids with hundreds of thousands of existing deployments snort 2012; koziol 2003. it can run on linux, unix, and windows platforms. it uses the generic sniffing interface libpcap, which is also used by wireshark and many other packet sniffers. it can easily handle 100 mbps of traffic; for installations with gibabitsec traffic rates, multiple snort sensors may be needed. to gain some insight into snort, lets take a look at an example of a snort signature alert icmp external_net any home_net any msgicmp ping nmap; dsize 0; itype 8; this signature is matched by any icmp packet that enters the organizations network home_net from the outside external_net, is of type 8 icmp ping, and has an empty payload dsize 0. since nmap see section 1.6 generates ping pack ets with these specific characteristics, this signature is designed to detect nmap ping sweeps. when a packet matches this signature, snort generates an alert that includes the message icmp ping nmap. perhaps what is most impressive about snort is the vast community of users and security experts that maintain its signature database. typically within a few hours of a new attack, the snort community writes and releases an attack signature, which is then downloaded by the hundreds of thousands of snort deployments distributed around the world. moreover, using the snort signature syntax, network administrators can tailor the signatures to their own organizations needs by either modifying existing signatures or creating entirely new ones. m08_kuro5469_08_ge_c08.indd 708 29042021 1520 8.10 summary 709 8.10 summary in this chapter, weve examined the various mechanisms that our secret lovers, bob and alice, can use to communicate securely. weve seen that bob and alice are interested in confidentiality so they alone are able to understand the contents of a transmitted message, endpoint authentication so they are sure that they are talking with each other, and message integrity so they are sure that their messages are not altered in transit. of course, the need for secure communication is not confined to secret lovers. indeed, we saw in sections 8.5 through 8.8 that security can be used in various layers in a network architecture to protect against bad guys who have a large arsenal of possible attacks at hand. the first part of this chapter presented various principles underlying secure communication. in section 8.2, we covered cryptographic techniques for encrypting and decrypting data, including symmetric key cryptography and public key cryptography. des and rsa
were examined as specific case studies of these two major classes of cryptographic techniques in use in todays networks. in section 8.3, we examined two approaches for providing message integ rity message authentication codes macs and digital signatures. the two approaches have a number of parallels. both use cryptographic hash functions and both techniques enable us to verify the source of the message as well as the integrity of the message itself. one important difference is that macs do not rely on encryption whereas digital signatures require a public key infrastructure. both techniques are extensively used in practice, as we saw in sections 8.5 through 8.8. furthermore, digital signatures are used to create digital certificates, which are important for verifying the validity of public keys. in section 8.4, we examined endpoint authentication and introduced nonces to defend against the replay attack. in sections 8.5 through 8.8 we examined several security networking protocols that enjoy extensive use in practice. we saw that symmetric key cryptography is at the core of pgp, ssl, ipsec, and wireless security. we saw that public key cryptography is crucial for both pgp and tls. we saw that pgp uses digital signatures for message integrity, whereas tls and ipsec use macs. we also explored security in wireless networks, including wifi networks and 4g5g cellular networks. having now an understanding of the basic principles of cryptography, and having studied how these principles are actually used, you are now in position to design your own secure network protocols! armed with the techniques covered in sections 8.2 through 8.8, bob and alice can communicate securely. but confidentiality is only a small part of the network security picture. as we learned in section 8.9, increasingly, the focus in network security has been on securing the network infrastructure against a potential onslaught by the bad guys. in the latter part of this chapter, we thus covered firewalls and ids systems which inspect packets entering and leaving an organizations network. m08_kuro5469_08_ge_c08.indd 709 29042021 1520 710 chapter 8 security in computer networks homework problems and questions chapter 8 review problems section 8.1 r1. operational devices such as firewalls and intrusion detection systems are used to counter attacks against an organizations network. what is the basic difference between a firewall and an intrusion detection system? r2. internet entities routers, switches, dns servers, web servers, user end systems, and so on often need to communicate securely. give three specific example pairs of internet entities that may want secure communication. section 8.2 r3. the encryption technique itself is knownpublished, standardized, and available to everyone, even a potential intruder. then where does the security of an encryption technique come from? r4. what is the difference between known plaintext attack and chosen plaintext attack? r5. consider a 16block cipher. how many possible input blocks does this cipher have? how many possible mappings are there? if we view each mapping as a key, then how many possible keys does this cipher have? r6. suppose n people want to communicate with
each of n1 other peo ple using symmetric key encryption. all communication between any two people, i and j, is visible to all other people in this group of n, and no other person in this group should be able to decode their communication. how many keys are required in the system as a whole? now suppose that public key encryption is used. how many keys are required in this case? r7. suppose n 1,000, a 1,017, and b 1,006. use an identity of modular arithmetic to calculate in your head a b mod n. r8. suppose you want to encrypt the message 10010111 by encrypting the decimal number that corresponds to the message. what is the decimal number? sections 8.38.4 r9. in what way does a hash provide a better message integrity check than a checksum such as the internet checksum? r10. can you decrypt a hash of a message to get the original message? explain your answer. m08_kuro5469_08_ge_c08.indd 710 29042021 1520 r11. consider a variation of the mac algorithm figure 8.9 where the sender sends m, hm s, where hm s is the concatenation of hm and s. is this variation flawed? why or why not? r12. what does it mean for a signed document to be verifiable and nonforgeable? r13. in the linkstate routing algorithm, we would somehow need to distribute the secret authentication key to each of the routers in the autonomous system. how do we distribute the shared authentication key to the communicating entities? r14. name two popular secure networking protocols in which public key certi fication is used. r15. suppose alice has a message that she is ready to send to anyone who asks. thousands of people want to obtain alices message, but each wants to be sure of the integrity of the message. in this context, do you think a macbased or a digitalsignaturebased integrity scheme is more suitable? why? r16. what is the purpose of a nonce in an endpoint authentication protocol? r17. what does it mean to say that a nonce is a onceinalifetime value? in whose lifetime? r18. is the message integrity scheme based on hmac susceptible to playback attacks? if so, how can a nonce be incorporated into the scheme to remove this susceptibility? sections 8.58.8 r19. what is the de facto email encryption scheme? what does it use for authenti cation and message integrity? r20. in the tls record, there is a field for tls sequence numbers. true or false? r21. what is the purpose of the random nonces in the tls handshake? r22. suppose an tls session employs a block cipher with cbc. true or false the server sends to the client the iv in the clear. r23. suppose bob initiates a tcp connection to trudy who is pretending to be alice. during the handshake, trudy sends bob alices certificate. in what step of the tls handshake algorithm will bob discover that he is not communicating with alice? r24. consider sending a stream of packets from host
a to host b using ipsec. typically, a new sa will be established for each packet sent in the stream. true or false? r25. suppose that tcp is being run over ipsec between headquarters and the branch office in figure 8.28. if tcp retransmits the same packet, then the two corresponding packets sent by r1 packets will have the same sequence number in the esp header. true or false?homework problems and questions 711 m08_kuro5469_08_ge_c08.indd 711 29042021 1520 712 chapter 8 security in computer networks r26. is there a fixed encryption algorithm in ssl? r27. consider wep for 802.11. suppose that the data is 10001101 and the key stream is 01101010. what is the resulting ciphertext? section 8.9 r28. stateful packet filters maintain two data structures. name them and briefly describe what they do. r29. consider a traditional stateless packet filter. this packet filter may filter packets based on tcp flag bits as well as other header fields. true or false? r30. in a traditional packet filter, each interface can have its own access control list. true or false? r31. why must an application gateway work in conjunction with a router filter to be effective? r32. signaturebased idss and ipss inspect into the payloads of tcp and udp segments. true or false? problems p1. using the monoalphabetic cipher in figure 8.3, encode the message this is a secret message. p2. show that trudys knownplaintext attack, in which she knows the ciphertext, plaintext translation pairs for seven letters, reduces the number of possible substitutions to be checked in the example in section 8.2.1 by approximately 10 9. p3. consider the polyalphabetic system shown in figure 8.4. will a chosenplaintext attack that is able to get the plaintext encoding of the message the quick brown fox jumps over the lazy dog. be sufficient to decode all messages? why or why not? p4. consider the block cipher in figure 8.5. suppose that each block cipher ti simply reverses the order of the eight input bits so that, for example, 11110000 becomes 00001111. further suppose that the 64bit scrambler does not modify any bits so that the output value of the mth bit is equal to the input value of the mth bit. a with n3 and the original 64bit input equal to 10100000 repeated eight times, what is the value of the output? b repeat part a but now change the last bit of the original 64bit input from a 0 to a 1. c repeat parts a and b but now suppose that the 64bit scrambler inverses the order of the 64 bits. p5. encode the plaintext 000001011111 with the 3bit block cipher in table 8.1 and iv c0001. then show that the receiver can decode the ciphertext, knowing iv and ks. m08_kuro5469_08_ge_c08.indd 712 29042021 1520 p6. the ciphertext for the 3bit block cipher in table 8.1 with plaintext 010010010 and iv c102001 becomes c1ksm1circleplus.altc0ks010circleplus.alt001ks011100, c2ksm2circleplus.altc1ks010circleplus.alt100ks110000, and c3ksm3circleplus.altc2ks010circleplus.alt000ks010101. verify that the receiver, knowing iv and ks, can recover the original plain text from
the ciphertext 100000101. p7. a. using rsa, choose p5 and q7, and encode the numbers 12, 19, and 27 separately. apply the decryption algorithm to the encrypted version to recover the original plaintext message. b. choose p and q of your own and encrypt 1834 as one message m. p8. consider rsa with p7 and q13. a. what are n and z? b. let e be 17. why is this an acceptable choice for e? c. find d such that de 1 mod z. d. encrypt the message m 9 using the key n , e. let c denote the correspond ing ciphertext. show all work. p9. in this problem, we explore the diffiehellman dh publickey encryption algorithm, which allows two entities to agree on a shared key. the dh algorithm makes use of a large prime number p and another large number g less than p. both p and g are made public so that an attacker would know them. in dh, alice and bob each independently choose secret keys, sa and sb, respectively. alice then computes her public key, ta, by raising g to sa and then taking mod p. bob similarly computes his own public key tb by raising g to sb and then taking mod p. alice and bob then exchange their public keys over the internet. alice then calculates the shared secret key s by raising tb to sa and then taking mod p. similarly, bob calculates the shared key suni2032 by raising ta to sb and then taking mod p. a. prove that, in general, alice and bob obtain the same symmetric key, that is, prove ssuni2032. b. with p 11 and g 2, suppose alice and bob choose private keys sa5 and sb12, respectively. calculate alices and bobs public keys, ta and tb. show all work. c. following up on part b, now calculate s as the shared symmetric key. show all work. d. provide a timing diagram that shows how diffiehellman can be attacked by a maninthemiddle. the timing diagram should have three vertical lines, one for alice, one for bob, and one for the attacker trudy.problems 713 m08_kuro5469_08_ge_c08.indd 713 29042021 1520 714 chapter 8 security in computer networks p10. suppose alice wants to communicate with bob using symmetric key cryp tography using a session key ks. in section 8.2, we learned how publickey cryptography can be used to distribute the session key from alice to bob. in this problem, we explore how the session key can be distributedwithout public key cryptographyusing a key distribution center kdc. the kdc is a server that shares a unique secret symmetric key with each registered user. for alice and bob, denote these keys by kakdc and kbkdc. design a scheme that uses the kdc to distribute ks to alice and bob. your scheme should use three messages to distribute the session key a message from alice to the kdc; a message from the kdc to alice; and finally a message from alice to bob. the
first message is kakdc a, b. using the notation, kakdc, kbkdc, s, a, and b answer the following questions. a. what is the second message? b. what is the third message? p11. compute a third message, different from the two messages in figure 8.8, that has the same checksum as the messages in figure 8.8. p12. the sender can mix some randomness into the ciphertext so that identical plaintext blocks produce different ciphertext blocks. but for each cipher bit, the sender must now also send a random bit, doubling the required bandwidth. is there any way around this? p13. in the bittorrent p2p file distribution protocol see chapter 2, the seed breaks the file into blocks, and the peers redistribute the blocks to each other. without any protection, an attacker can easily wreak havoc in a torrent by masquerading as a benevolent peer and sending bogus blocks to a small subset of peers in the torrent. these unsuspecting peers then redistribute the bogus blocks to other peers, which in turn redistribute the bogus blocks to even more peers. thus, it is critical for bittorrent to have a mechanism that allows a peer to verify the integrity of a block, so that it doesnt redistribute bogus blocks. assume that when a peer joins a torrent, it initially gets a .torrent file from a fully trusted source. describe a simple scheme that allows peers to verify the integrity of blocks. p14. solving factorization in polynomial time implies breaking the rsa cryptosystem. is the converse true? p15. consider our authentication protocol in figure 8.18 in which alice authen ticates herself to bob, which we saw works well i.e., we found no flaws in it. now suppose that while alice is authenticating herself to bob, bob must authenticate himself to alice. give a scenario by which trudy, pretending to be alice, can now authenticate herself to bob as alice. hint consider that the sequence of operations of the protocol, one with trudy initiating and one with bob initiating, can be arbitrarily interleaved. pay particular attention to the fact that both bob and alice will use a nonce, and that if care is not taken, the same nonce can be used maliciously. m08_kuro5469_08_ge_c08.indd 714 29042021 1520 problems 715 p16. a natural question is whether we can use a nonce and public key cryptography to solve the endpoint authentication problem in section 8.4. consider the following natural protocol 1 alice sends the message i am alice to bob. 2 bob chooses a nonce, r , and sends it to alice. 3 alice uses her private key to encrypt the nonce and sends the resulting value to bob. 4 bob applies alices public key to the received message. thus, bob computes r and authenticates alice. a. diagram this protocol, using the notation for public and private keys employed in the textbook. b. suppose that certificates are not used. describe how trudy can become a womaninthemiddle by intercepting alices messages and then pretending to be alice to bob.
p17. figure 8.21 shows the operations that alice must perform with pgp to pro vide confidentiality, authentication, and integrity. diagram the corresponding operations that bob must perform on the package received from alice. p18. suppose alice wants to send an email to bob. bob has a publicprivate key pair k b, k b, and alice has bobs certificate. but alice does not have a public, private key pair. alice and bob and the entire world share the same hash function h. a. in this situation, is it possible to design a scheme so that bob can verify that alice created the message? if so, show how with a block diagram for alice and bob. b. is it possible to design a scheme that provides confidentiality for sending the message from alice to bob? if so, show how with a block diagram for alice and bob. p19. consider the wireshark output below for a portion of an ssl session. a. is wireshark packet 112 sent by the client or server? b. what is the servers ip address and port number? c. assuming no loss and no retransmissions, what will be the sequence num ber of the next tcp segment sent by the client? d. how many ssl records does wireshark packet 112 contain? e. does packet 112 contain a master secret or an encrypted master secret or neither? f. assuming that the handshake type field is 1 byte and each length field is 3 bytes, what are the values of the first and last bytes of the master secret or encrypted master secret? g. the client encrypted handshake message takes into account how many ssl records? h. the server encrypted handshake message takes into account how many ssl records? m08_kuro5469_08_ge_c08.indd 715 29042021 1520 716 chapter 8 security in computer networks p20. in section 8.6.1, it is shown that without sequence numbers, trudy a woman inthe middle can wreak havoc in a tls session by interchanging tcp segments. can trudy do something similar by deleting a tcp segment? what does she need to do to succeed at the deletion attack? what effect will it have? wireshark screenshot reprinted by permission of the wireshark foundation. p21. a routers linkstate message includes a list of its directly connected neighbors and the direct costs to these neighbors. once a router receives linkstate messages from all of the other routers, it can create a complete map of the network, run its leastcost routing algorithm, and configure its forwarding table. one relatively easy attack on the routing algorithm is for the attacker to distribute bogus linkstate messages with incorrect linkstate information. how can this be prevented? p22. the following truefalse questions pertain to figure 8.28. a. when a host in 172.16.124 sends a datagram to an amazon.com server, the router r1 will encrypt the datagram using ipsec. m08_kuro5469_08_ge_c08.indd 716 29042021 1520 problems 717 b. when a host in 172.16.124 sends a datagram to a host in 172.16.224, the router r1 will change the source and destination address
of the ip datagram. c. suppose a host in 172.16.124 initiates a tcp connection to a web server in 172.16.224. as part of this connection, all datagrams sent by r1 will have protocol number 50 in the leftmost ipv4 header field. d. consider sending a tcp segment from a host in 172.16.124 to a host in 172.16.224. suppose the acknowledgment for this segment gets lost, so that tcp resends the segment. because ipsec uses sequence numbers, r1 will not resend the tcp segment. p23. when bob signs a message, bob must put something on the message that is unique to him. bob could consider attaching a mac for the signature, where the mac is created by appending his key unique to him to the message, and then taking the hash. will it cause any problem when alice would try verification? p24. provide a filter table and a connection table for a stateful firewall that is as restrictive as possible but accomplishes the following a. allows all internal users to establish telnet sessions with external hosts. b. allows external users to surf the company web site at 222.22.0.12. c. but otherwise blocks all inbound and outbound traffic. the internal network is 222.2216. in your solution, suppose that the connec tion table is currently caching three connections, all from inside to outside. youll need to invent appropriate ip addresses and port numbers. p25. suppose alice wants to visit the web site activist.com using a torlike service. this service uses two noncolluding proxy servers, proxy1 and proxy2. alice first obtains the certificates each containing a public key for proxy1 and proxy2 from some central server. denote k1 , k2 , k1 , and k2 for the encryptiondecryption with public and private rsa keys. a. using a timing diagram, provide a protocol as simple as possible that enables alice to establish a shared session key s1 with proxy1. denote s1m for encryptiondecryption of data m with the shared key s1. b. using a timing diagram, provide a protocol as simple as possible that allows alice to establish a shared session key s2 with proxy2 without revealing her ip address to proxy2. c. assume now that shared keys s1 and s2 are now established. using a timing diagram, provide a protocol as simple as possible and not using publickey cryptography that allows alice to request an html page from activist.com without revealing her ip address to proxy2 and without revealing to proxy1 which site she is visiting. your diagram should end with an http request arriving at activist.com. m08_kuro5469_08_ge_c08.indd 717 29042021 1520 718 chapter 8 security in computer networks wireshark lab ssl in this lab available from the book web site, we investigate the secure sockets layer ssl protocol. recall from section 8.6 that ssl is used for securing a tcp connection, and that it is extensively used in practice for secure internet transactions. in this lab, we will focus on the ssl records sent over the tcp connection. we will attempt to delineate and
classify each of the records, with a goal of understanding the why and how for each record. we investigate the various ssl record types as well as the fields in the ssl messages. we do so by analyzing a trace of the ssl records sent between your host and an ecommerce server. ipsec lab in this lab available from the book web site, we will explore how to create ipsec sas between linux boxes. you can do the first part of the lab with two ordinary linux boxes, each with one ethernet adapter. but for the second part of the lab, you will need four linux boxes, two of which having two ethernet adapters. in the second half of the lab, you will create ipsec sas using the esp protocol in the tunnel mode. you will do this by first manually creating the sas, and then by having ike create the sas. m08_kuro5469_08_ge_c08.indd 718 29042021 1520 719what led you to specialize in the networking security area? this is going to sound odd, but the answer is simple it was fun. my background was in systems programming and systems administration, which leads fairly naturally to security. and ive always been interested in communications, ranging back to parttime systems programming jobs when i was in college. my work on security continues to be motivated by two thingsa desire to keep com puters useful, which means that their function cant be corrupted by attackers, and a desire to protect privacy. what was your vision for usenet at the time that you were developing it? and now? we originally viewed it as a way to talk about computer science and computer programming around the country, with a lot of local use for administrative matters, forsale ads, and so on. in fact, my original prediction was one to two messages per day, from 50 to 100 sites at the mostever. however, the real growth was in peoplerelated topics, includingbut not limited tohuman interactions with computers. my favorite newsgroups, over the years, have been things like rec.woodworking, as well as sci.crypt. to some extent, netnews has been displaced by the web. were i to start designing it today, it would look very different. but it still excels as a way to reach a very broad audience that is interested in the topic, without having to rely on particular web sites. has anyone inspired you professionally? in what ways? professor fred brooksthe founder and original chair of the computer science department at the university of north carolina at chapel hill, the manager of the team that developed the ibm s360 and os360, and the author of the mythical manmonthwas a tremendous an interview with steven m. bellovin courtesy of steven bellovinsteven m. bellovin joined the faculty at columbia university after many years at the network services research lab at att labs research in florham park, new jersey. his focus is on networks, security, and why the two are incompatible. in 1995, he was awarded the usenix lifetime
achievement award for his work in the creation of usenet, the first newsgroup exchange network that linked two or more computers and allowed users to share information and join in discussions. steve is also an elected member of the national academy of engineering. he received his ba from columbia university and his phd from the university of north carolina at chapel hill. m08_kuro5469_08_ge_c08.indd 719 29042021 1520 720 influence on my career. more than anything else, he taught outlook and tradeoffshow to look at problems in the context of the real world and how much messier the real world is than a theorist would like, and how to balance competing interests in designing a solution. most computer work is engineeringthe art of making the right tradeoffs to satisfy many contradictory objectives. what is your vision for the future of networking and security? thus far, much of the security we have has come from isolation. a firewall, for example, works by cutting off access to certain machines and services. but were in an era of increasing connectivityits gotten harder to isolate things. worse yet, our production systems require far more separate pieces, interconnected by networks. securing all that is one of our biggest challenges. what would you say have been the greatest advances in security? how much further do we have to go? at least scientifically, we know how to do cryptography. thats been a big help. but most security problems are due to buggy code, and thats a much harder problem. in fact, its the oldest unsolved problem in computer science, and i think it will remain that way. the challenge is figuring out how to secure systems when we have to build them out of insecure components. we can already do that for reliability in the face of hardware failures; can we do the same for security? do you have any advice for students about the internet and networking security? learning the mechanisms is the easy part. learning how to think paranoid is harder. you have to remember that probability distributions dont applythe attackers can and will find improbable conditions. and the details mattera lot. m08_kuro5469_08_ge_c08.indd 720 29042021 1520 721references a note on urls. in the references below, we have provided urls for web pages, webonly documents, and other material that has not been published in a conference or journal when we have been able to locate a url for such material. we have not provided urls for conference and journal publications, as these documents can usually be located via a search engine, from the conference web site e.g., papers in all acm sigcomm conferences and workshops can be located via httpwww.acm.orgsigcomm, or via a digital library subscription. while all urls provided below were valid and tested in jan. 2020, urls can become out of date. a note on internet request for comments rfcs copies of internet rfcs are available at many sites. the rfc editor of the internet society the body that oversees the rfcs maintains the site, httpwww.rfceditor.org.
this site allows you to search for a specific rfc by title, number, or authors, and will show updates to any rfcs listed. internet rfcs can be updated or obsoleted by later rfcs. our favorite site for getting rfcs is the original sourcehttpwww.rfceditor.org. 3gpp 2020 3gpp, 3gpp specification set, httpswww.3gpp.orgdynareport speclist.htm 3gpp gtpv1u 2019 3gpp, tunnelling protocol user plane gtpv1u, 3gpp technical specification 29.281version 15.3.0, 2018. 3gpp pdcp 2019 3gpp, packet data convergence protocol pdcp specifica tion, 3gpp technical specification 36.323 version 15.4.0, 2019. 3gpp rlcp 2018 3gpp, radio link control rlc protocol specification, 3gpp technical specification 25.322 version 15.0.0, 2018. 3gpp sae 2019 3gpp, system architecture evolution sae; security archi tecture, technical specification 33.401, version 15.9.0, october 2019. abramson 1970 n. abramson, the aloha systemanother alternative for computer communications, proc. 1970 fall joint computer conference, afips conference, p. 37, 1970. abramson 1985 n. abramson, development of the alohanet, ieee transac tions on information theory, vol. it31, no. 3 mar. 1985, pp. 119123. abramson 2009 n. abramson, the alohanetsurfing for wireless data, ieee communications magazine, vol. 47, no. 12, pp. 2125. z01_kuro5469_08_ge_ref.indd 721 08052021 1417 722 references adhikari 2011a v. k. adhikari, s. jain, y. chen, z. l. zhang, vivisecting youtube an active measurement study, technical report, university of minnesota, 2011. adhikari 2012 v. k. adhikari, y. gao, f. hao, m. varvello, v. hilt, m. steiner, z. l. zhang, unreeling netflix understanding and improving multicdn movie delivery, technical report, university of minnesota, 2012. afanasyev 2010 a. afanasyev, n. tilley, p. reiher, l. kleinrock, hosttohost congestion control for tcp, ieee communications surveys tutorials, vol. 12, no. 3, pp. 304342. agarwal 2009 s. agarwal, j. lorch, matchmaking for online games and other latencysensitive p2p systems, proc. 2009 acm sigcomm. ager 2012 b. ager, n. chatzis, a. feldmann, n. sarrar, s. uhlig, w. willinger, anatomy of a large european isp, proc. 2012 acm sigcomm. akamai 2020 akamai homepage, httpwww.akamai.comakella 2003 a. akella, s. seshan, a. shaikh, an empirical evaluation of wide area internet bottlenecks, proc. 2003 acm internet measurement conference miami, fl, nov. 2003. akhshabi 2011 s. akhshabi, a. c. begen, c. dovrolis, an experimental evalu ation of rateadaptation algorithms in adaptive streaming over http, proc. 2011 acm multimedia systems conf. akhshabi 2011 s. akhshabi, c. dovrolis, the evolution of layered protocol stacks leads to an hourglassshaped architecture, proceedings 2011 acm sigcomm, pp. 206217. akyildiz 2010 i. akyildiz, d. gutierrexestevez, e. reyes, the evolution to 4g cellular systems, lte advanced, physical communication, elsevier, 3 2010, pp. 217244. albitz 1993 p. albitz and c. liu, dns and bind, oreilly associates, petaluma, ca, 1993. alexandris 2016 k. alexandris, n. nikaein, r. knopp and c. bonnet, analyzing x2 handover in lteltea, 2016 14th international symposium on modeling and optimization in mobile, ad hoc, and wireless networks wiopt, tempe, az, pp. 17. alizadeh 2010 m. alizadeh, a. greenberg, d. maltz, j. padhye, p. patel, b. prabhakar, s. sengupta, m. sridharan. data center tcp dctcp, proc. 2010 acm sigcomm conference, acm, new york, ny, usa, pp. 6374. alizadeh
2013 m. alizadeh, s. yang, m. sharif, s. katti, n. mckeown, b. prabhakar, s. shenker, pfabric minimal nearoptimal datacenter transport, proc. 2013 acm sigcomm conference. z01_kuro5469_08_ge_ref.indd 722 08052021 1417 references 723 alizadeh 2014 m. alizadeh, t. edsall, s. dharmapurikar, k. chu, a. fingerhut, v. t. lam, f. matus, r. pan, n. yadav, g. varghese , conga distributed congestionaware load balancing for datacenters, proc. 2014 acm sigcomm conference. allman 2011 e. allman, the robustness principle reconsidered seeking a middle ground, communications of the acm, vol. 54, no. 8 aug. 2011, pp. 4045. almers 2007 p. almers, et al., survey of channel and radio propagation models for wireless mimo systems, journal on wireless communications and networking, 2007. amazon 2014 j. hamilton, aws innovation at scale, youtube video, https www.youtube.comwatch?vjiqetrfc_sq anderson 1995 j. b. andersen, t. s. rappaport, s. yoshida, propagation mea surements and models for wireless communications channels, ieee communications magazine, jan. 1995, pp. 4249. appenzeller 2004 g. appenzeller, i. keslassy, n. mckeown, sizing router buffers, proc. 2004 acm sigcomm conference portland, or, aug. 2004. arkko 2012 j. arkko, analysing ip mobility protocol deployment difficulties, 83rd ietf meeting, march, 2012.asoicann 2020 the address supporting organization homepage, httpwww.aso.icann.org att 2019 a, fuetsch, from nextgen to now sdn, white box and open source go mainstream, httpsabout.att.cominnovationblog201909sdn_white_box_and_open_source_go_mainstream.html atheros 2020 atheros communications inc., atheros ar5006 wlan chipset product bulletins, httpwww.atheros.comptar5006bulletins.htm ayanoglu 1995 e. ayanoglu, s. paul, t. f. la porta, k. k. sabnani, r. d. gitlin, airmail a linklayer protocol for wireless networks, acm acmbaltzer wireless networks journal, 1 4760, feb. 1995. bakre 1995 a. bakre, b. r. badrinath, itcp indirect tcp for mobile hosts, proc. 1995 int. conf. on distributed computing systems icdcs may 1995, pp. 136143. baldauf 2007 m. baldauf, s. dustdar, f. rosenberg, a survey on context aware systems, int. j. ad hoc and ubiquitous computing, vol. 2, no. 4 2007, pp. 263277. baran 1964 p. baran, on distributed communication networks, ieee trans actions on communication systems, mar. 1964. rand corporation technical report z01_kuro5469_08_ge_ref.indd 723 08052021 1417 724 references with the same title memorandum rm3420pr, 1964. httpwww.rand.orgpubli cationsrmrm3420 bardwell 2004 j. bardwell, you believe you understand what you think i said . . . the truth about 802.11 signal and noise metrics a discussion clarifying oftenmisused 802.11 wlan terminologies, httpwww.connect802.comdownloadtechpubs2004you_believe_d100201.pdf barford 2009 p. barford, n. duffield, a. ron, j. sommers, network perfor mance anomaly detection and localization, proc. 2009 ieee infocom apr. 2009. beck 2019 m. beck, on the hourglass model, commun. acm, vol. 62, no. 7 june 2019, pp. 4857. beheshti 2008 n. beheshti, y. ganjali, m. ghobadi, n. mckeown, g. salmon, experimental study of router buffer sizing, proc. acm internet measurement conference oct. 2008, vouliagmeni, greece. bender 2000 p. bender, p. black, m. grob, r. padovani, n. sindhushayana, a. viterbi, cdmahdr a bandwidthefficient highspeed wireless data service for nomadic users, ieee commun. mag., vol. 38, no. 7 july 2000, pp. 7077. bernerslee 1989 t. bernerslee, cern, information management a proposal, mar. 1989, may 1990. httpwww.w3.orghistory1989proposal.htmlbernerslee 1994 t. bernerslee, r. cailliau, a.
luotonen, h. frystyk nielsen, a. secret, the worldwide web, communications of the acm, vol. 37, no. 8 aug. 1994, pp. 7682. bertsekas 1991 d. bertsekas, r. gallagher, data networks, 2nd ed., prentice hall, englewood cliffs, nj, 1991. biersack 1992 e. w. biersack, performance evaluation of forward error cor rection in atm networks, proc. 1999 acm sigcomm conference baltimore, md, aug. 1992, pp. 248257. bind 2020 internet software consortium page on bind, httpwww.isc.org bind.html bisdikian 2001 c. bisdikian, an overview of the bluetooth wireless technol ogy, ieee communications magazine, no. 12 dec. 2001, pp. 8694. bishop 2003 m. bishop, computer security art and science, boston addison wesley, boston ma, 2003. bishop 2004 m. bishop, introduction to computer security, addisonwesley, 2004.bj√∂rnson 2017 e. bj√∂rnson, j. hoydis, l. sanguinetti, massive mimo networks spectral, energy, and hardware efficiency, now publishers, 2017. z01_kuro5469_08_ge_ref.indd 724 08052021 1417 references 725 black 1995 u. black, atm volume i foundation for broadband networks, prentice hall, 1995. bluetooth 2020 the bluetooth special interest group, httpwww.bluetooth.comblumenthal 2001 m. blumenthal, d. clark, rethinking the design of the internet the endtoend arguments vs. the brave new world, acm transactions on internet technology, vol. 1, no. 1 aug. 2001, pp. 70109. bochman 1984 g. v. bochmann, c. a. sunshine, formal methods in commu nication protocol design, ieee transactions on communications, vol. 28, no. 4 apr. 1980 pp. 624631. bosshart 2013 p. bosshart, g. gibb, h. kim, g. varghese, n. mckeown, m. izzard, f. mujica, m. horowitz, forwarding metamorphosis fast programmable matchaction processing in hardware for sdn, proc. 2013 sigcomm conference, pp. 99110. bosshart 2014 p. bosshart, d. daly, g. gibb, m. izzard, n. mckeown, j. rexford, c. schlesinger, d. talayco, a. vahdat, g. varghese, d. walker, p4 programming protocolindependent packet processors, proc. 2014 acm sigcomm conference, pp. 8795. bottger 2018 t. b√∂ttger, f. cuadrado, g. tyson, i. castro, s. uhlig, open connect everywhere a glimpse at the internet ecosystem through the lens of the netflix cdn, proc. 2018 acm sigcomm conference. brakmo 1995 l. brakmo, l. peterson, tcp vegas end to end congestion avoidance on a global internet, ieee journal of selected areas in communications, vol. 13, no. 8 oct. 1995, pp. 14651480. bryant 1988 b. bryant, designing an authentication system a dialogue in four scenes, httpweb.mit.edukerberoswwwdialogue.html bush 1945 v. bush, as we may think, the atlantic monthly, july 1945. httpwww.theatlantic.comunboundflashbkscomputerbushf.htm byers 1998 j. byers, m. luby, m. mitzenmacher, a. rege, a digital fountain approach to reliable distribution of bulk data, proc. 1998 acm sigcomm conference vancouver, canada, aug. 1998, pp. 5667. cable labs 2019 cable labs, a comparative introduction to 4g and 5g authentication, httpswww.cablelabs.cominsightsacomparativeintroductionto4gand5gauthentication caesar 2005b m. caesar, d. caldwell, n. feamster, j. rexford, a. shaikh, j. van der merwe, design and implementation of a routing control platform, proc. networked systems design and implementation may 2005. z01_kuro5469_08_ge_ref.indd 725 08052021 1417 726 references caesar 2005b m. caesar, j. rexford, bgp routing policies in isp networks, ieee network magazine, vol. 19, no. 6 nov. 2005. caida 2020 center for applied internet data analysis, www.caida.orgcaldwell
2020 c. caldwell, the prime pages, httpwww.utm.eduresearch primesprove cardwell 2017 n. cardwell, y. cheng, c. s. gunn, s. h. yeganeh, v. jacobson. bbr congestionbased congestion control, commun. acm, vol. 60, no. 2 jan. 2017, pp. 5866. casado 2007 m. casado, m. freedman, j. pettit, j. luo, n. mckeown, s. shenker, ethane taking control of the enterprise, proc. 2007 acm sigcomm conference, new york, pp. 112. see also ieeeacm trans. networking, vol. 17, no. 4 aug. 2007, pp. 2701283. casado 2009 m. casado, m. freedman, j. pettit, j. luo, n. gude, n. mckeown, s. shenker, rethinking enterprise network control, ieeeacm transactions on networking ton, vol. 17, no. 4 aug. 2009, pp. 12701283. casado 2014 m. casado, n. foster, a. guha, abstractions for software defined networks, communications of the acm, vol. 57, no. 10, oct. 2014, pp. 8695. cerf 1974 v. cerf, r. kahn, a protocol for packet network interconnection, ieee transactions on communications technology, vol. com22, no. 5, pp. 627641. cert 200109 cert, advisory 200109 statistical weaknesses in tcpip initial sequence numbers, httpwww.cert.orgadvisoriesca200109.html cert 200304 cert, cert advisory ca200304 mssql server worm, httpwww.cert.orgadvisoriesca200304.html cert 2020 the cert division of the software engineering institute, https www.sei.cmu.eduaboutdivisionscert, 2020 cert filtering 2012 cert, packet filtering for firewall systems, http www.cert.orgtech_tipspacket_filtering.html cert syn 1996 cert, advisory ca96.21 tcp syn flooding and ip spoof ing attacks, httpwww.cert.orgadvisoriesca199801.html chandra 2007 t. chandra, r. greisemer, j. redstone, paxos made live an engineering perspective, proc. of 2007 acm symposium on principles of distributed computing podc, pp. 398407. z01_kuro5469_08_ge_ref.indd 726 08052021 1417 references 727 chao 2011 c. zhang, p. dunghel, d. wu, k. w. ross, unraveling the bittorrent ecosystem, ieee transactions on parallel and distributed systems, vol. 22, no. 7 july 2011. chen 2011 y. chen, s. jain, v. k. adhikari, z. zhang, characterizing roles of frontend servers in endtoend performance of dynamic content distribution, proc. 2011 acm internet measurement conference berlin, germany, nov. 2011. chiu 1989 d. chiu, r. jain, analysis of the increase and decrease algorithms for congestion avoidance in computer networks, computer networks and isdn systems, vol. 17, no. 1, pp. 114. httpwww.cs.wustl.edujainpaperscong_av.htm christiansen 2001 m. christiansen, k. jeffay, d. ott, f. d. smith, tuning red for web traffic, ieeeacm transactions on networking, vol. 9, no. 3 june 2001, pp. 249264. cichonski 2017 j. cichonski, j. franklin, m. bartock, guide to lte security, nist special publication 800187, dec. 2017. cisco 2012 cisco 2012, data centers, httpwww.cisco.comgodcecisco 2020 cisco visual networking index forecast and trends, 20172022 white paper. cisco 6500 2020 cisco systems, cisco catalyst 6500 architecture white paper, httpwww.cisco.comcenusproductscollateralswitches catalyst6500seriesswitchesprod_white_paper0900aecd80673385.html cisco 7600 2020 cisco systems, cisco 7600 series solution and design guide, httpwww.cisco.comenusproductshwroutersps368prod_technical_ reference09186a0080092246.html cisco 8500 2020 cisco systems inc., catalyst 8500 campus switch router architecture, httpwww.cisco.comunivercdcctddocproductl3sw8540rel_12_0w5_6fsoftcnfg1cfg8500.pdf cisco 12000 2020 cisco systems inc., cisco xr 12000 series and cisco 12000 series routers, httpwww.cisco.comenusproductsps6342index.html cisco queue 2016 cisco systems inc., congestion management overview, httpwww.cisco.comenusdocsios12_2qosconfigurationguideqcfconmg.html cisco syn 2016 cisco systems inc., defining strategies to protect against tcp syn denial of service attacks, httpwww.cisco.comenustechtk828technologies_tech_note09186a00800f67d5.shtml z01_kuro5469_08_ge_ref.indd 727 08052021 1417 728 references
cisco tcam 2014 cisco systems inc., cat 6500 and 7600 series routers and switches tcam allocation adjustment procedures, httpwww.cisco.comcenussupportdocsswitchescatalyst6500seriesswitches117712problemsolutioncat650000.html cisco vni 2020 cisco systems inc., visual networking index, httpswww. cisco.comcenussolutionscollateralserviceprovidervisualnetworkingindexvniwhitepaperc11741490.html claise 2019 b. calise, j. clarke, j. lindblad, network programmability with yang, pearson, 2019. clark 1988 d. clark, the design philosophy of the darpa internet proto cols, proc. 1988 acm sigcomm conference stanford, ca, aug. 1988. clark 1997 d. clark, interoperation, open interfaces and protocol architecture, in the unpredictable certainty, the national academies press, 1997, pp. 133144. clark 2005 d. clark, j. wroclawski, k. r. sollins, r. braden, tussle in cyberspace defining tomorrows internet, ieeeacm trans. networking, vol. 13, no. 3 june 2005, pp. 462475. clos 1953 c. clos, a study of nonblocking switching networks, bell system technical journal, v ol. 32, no. 2 mar. 1953, pp. 406424. cohen 2003 b. cohen, incentives to build robustness in bittorrent, first workshop on the economics of peertopeer systems, berkeley, ca, june 2003. colbach 2017 g. colbach, wireless technologies an introduction to bluetooth and wifi, 2017. condoluci 2018 m. condoluci, t. mahmoodi,, softwarization and virtualization in 5g mobile networks benefits, trends and challenges, computer networks, vol. 146 2018, pp. 6584. cormen 2001 t. h. cormen, introduction to algorithms, 2nd ed., mit press, cambridge, ma, 2001. crow 1997 b. crow, i. widjaja, j. kim, p. sakai, ieee 802.11 wireless local area networks, ieee communications magazine sept. 1997, pp. 116126. cusumano 1998 m. a. cusumano, d. b. yoffie, competing on internet time lessons from netscape and its battle with microsoft, free press, new york, ny, 1998. czyz 2014 j. czyz, m. allman, j. zhang, s. iekeljohnson, e. osterweil, m. bai ley, measuring ipv6 adoption, proc. acm sigcomm 2014 conference, acm, new york, ny, usa, pp. 8798. z01_kuro5469_08_ge_ref.indd 728 08052021 1417 references 729 dahlman 2018 e. dahlman, s. parkvall, j. skold, 5g nr the next generation wireless access technology, academic press, 2018. dam 2020 digital attack map, httpwww.digitalattackmap.comdavie 2000 b. davie and y. rekhter, mpls technology and applications, morgan kaufmann series in networking, 2000. dec 1990 digital equipment corporation, in memoriam j. c. r. licklider 19151990, src research report 61, aug. 1990. httpwww.memex.org licklider.pdf declercq 2002 j. declercq, o. paridaens, scalability implications of virtual private networks, ieee communications magazine, vol. 40, no. 5 may 2002, pp. 151157. demers 1990 a. demers, s. keshav, s. shenker, analysis and simulation of a fair queuing algorithm, internetworking research and experience, v ol. 1, no. 1 1990, pp. 326. dhc 2020 ietf dynamic host configuration working group homepage, httpsdatatracker.ietf.orgwgdhcabout diffie 1976 w. diffie, m. e. hellman, new directions in cryptography, ieee transactions on information theory, vol it22 1976, pp. 644654. diggavi 2004 s. n. diggavi, n. aldhahir, a. stamoulis, r. calderbank, great expectations the value of spatial diversity in wireless networks, proceedings of the ieee, vol. 92, no. 2 feb. 2004. dilley 2002 j. dilley, b. maggs, j. parikh, h. prokop, r. sitaraman, b. weihl, globally distributed content delivery, ieee internet computing sept.oct. 2002. dmitiropoulos 2007 x. dmitiropoulos, d. krioukov,
m. fomenkov, b. huffaker, y. hyun, k. c. claffy, g. riley, as relationships inference and validation, acm computer communication review, vol. 37, no. 1 jan. 2007. docsis3.1 2014 dataovercable service interface specification, mac and upper layer protocols interface specification docsis 3.1 cmspmulpiv3.1104141218, and dataovercable service interface specification, physical layer specification docsis 3.1 cmspphyv3.1104141218, dec. 2014. donahoo 2001 m. donahoo, k. calvert, tcpip sockets in c practical guide for programmers, morgan kaufman, 2001. droms 2002 r. droms, t. lemon, the dhcp handbook, 2nd edition, sams publishing, 2002. z01_kuro5469_08_ge_ref.indd 729 08052021 1417 730 references eckel 2017 c. eckel, using opendaylight, httpswww.youtube.com watch?vram48gvv8_a economides 2017 n. economides, a case for net neutrality, ieee spectrum, dec. 2017, httpsspectrum.ieee.orgtechtalktelecominternetacasefornetneutralityedney 2003 j. edney and w. a. arbaugh, real 802.11 security wifi protected access and 802.11i, addisonwesley professional, 2003. eduroam 2020 eduroam, httpswww.eduroam.orgeisenbud 2016 d. eisenbud, c. yi, c. contavalli, c. smith, r. kononov, e. mannhielscher, cilingiroglu, and b. cheyney, w. shang, j.d. hosein, maglev a fast and reliable software network load balancer, nsdi 2016. ellis 1987 h. ellis, the story of nonsecret encryption, httpjya.comellis doc.htm erickson 2013 d. erickson, the beacon openflow controller, 2nd acm sig comm workshop on hot topics in software defined networking hotsdn 13. acm, new york, ny, usa, pp. 1318. facebook 2014 a. andreyev, introducing data center fabric, the next generation facebook data center network, httpscode.facebook.composts360346274145943introducingdatacenterfabricthenextgenerationfacebookdatacenternetwork faloutsos 1999 c. faloutsos, m. faloutsos, p. faloutsos, what does the internet look like? empirical laws of the internet topology, proc. 1999 acm sigcomm conference boston, ma, aug. 1999. farrington 2010 n. farrington, g. porter, s. radhakrishnan, h. bazzaz, v. subramanya, y. fainman, g. papen, a. vahdat, helios a hybrid electricaloptical switch architecture for modular data centers, proc. 2010 acm sigcomm conference. faulhaber 2012 g. faulhaber, the economics of network neutrality are prophylactic remedies to nonproblems needed?, regulation, vol. 34, no. 4, p. 18, winter 20112012. fb 2014 facebook, introducing data center fabric, the nextgeneration facebook data center network. httpsengineering.fb.comproductionengineeringintroducingdatacenterfabricthenextgenerationfacebookdatacenternetwork fb 2019 facebook, reinventing facebooks data center network, httpsengineering.fb.comdatacenterengineeringf16minipack fcc 2008 us federal communications commission, memorandum opinion and order formal complaint of free press and public knowledge against z01_kuro5469_08_ge_ref.indd 730 08052021 1417 references 731 comcast corporation for secretly degrading peertopeer applications, fcc 08083. fcc 2015 us federal communications commission, protecting and promoting the open internet, report and order on remand, declaratory ruling, and order, gn docket no. 1428. march 12, 2015, httpsapps.fcc.govedocs_publicattachmatchfcc1524a1.pdf fcc 2017 restoring internet freedom, declaratory ruling, report and order and order, wc docket no. 17108, december 14, 2017. httpstransition.fcc.govdaily_releasesdaily_business2018db0105fcc17166a1.pdf feamster 2004 n. feamster, h. balakrishnan, j. rexford, a. shaikh, k. van der merwe, the case for separating routing from routers, acm sigcomm workshop on future directions in network architecture, sept. 2004. feamster 2004 n. feamster, j. winick, j. rexford, a model for bgp routing for network engineering, proc. 2004 acm sigmetrics conference new york, ny, june 2004. feamster 2005 n. feamster, h. balakrishnan, detecting bgp configuration faults with static analysis, nsdi may 2005. feamster 2013 n. feamster, j. rexford, e. zegura, the road
to sdn, acm queue, volume 11, issue 12, dec. 2013. feamster 2018 n. feamster, j. rexford, why and how networks should run themselves, proc. 2018 acm applied networking research workshop anrw 18. feldmeier 1995 d. feldmeier, fast software implementation of error detection codes, ieeeacm transactions on networking, vol. 3, no. 6 dec. 1995, pp. 640652. fiber broadband 2020 fiber broadband association httpswww .fiberbroadband.org fielding 2000 r. fielding, architectural styles and the design of network based software architectures, 2000. phd thesis, uc irvine, 2000. fips 1995 federal information processing standard, secure hash standard, fips publication 1801. httpwww.itl.nist.govfipspubsfip1801.htm floyd 1999 s. floyd, k. fall, promoting the use of endtoend congestion control in the internet, ieeeacm transactions on networking, vol. 6, no. 5 oct. 1998, pp. 458472. floyd 2000 s. floyd, m. handley, j. padhye, j. widmer, equationbased congestion control for unicast applications, proc. 2000 acm sigcomm conference stockholm, sweden, aug. 2000. z01_kuro5469_08_ge_ref.indd 731 08052021 1417 732 references floyd 2016 s. floyd, references on red random early detection queue management, httpwww.icir.orgfloydred.html floyd synchronization 1994 s. floyd, v. jacobson, synchronization of peri odic routing messages, ieeeacm transactions on networking, vol. 2, no. 2 apr. 1997 pp. 122136. floyd tcp 1994 s. floyd, tcp and explicit congestion notification, acm sigcomm computer communications review, vol. 24, no. 5 oct. 1994, pp. 1023. fluhrer 2001 s. fluhrer, i. mantin, a. shamir, weaknesses in the key schedul ing algorithm of rc4, eighth annual workshop on selected areas in cryptography toronto, canada, aug. 2002. ford 2005 bryan ford, pyda srisuresh, and dan kegel. 2005. peertopeer communication across network address translators. in proceedings of the annual conference on usenix annual technical conference atec 05. fortz 2000 b. fortz, m. thorup, internet traffic engineering by optimizing ospf weights, proc. 2000 ieee infocom tel aviv, israel, apr. 2000. fortz 2002 b. fortz, j. rexford, m. thorup, traffic engineering with traditional ip routing protocols, ieee communication magazine, vol. 40, no. 10 oct. 2002. frost 1994 j. frost, bsd sockets a quick and dirty primer, httpworld.std .comjimfpaperssocketssockets.html gao 2001 l. gao, j. rexford, stable internet routing without global coordination, ieeeacm transactions on networking, vol. 9, no. 6 dec. 2001, pp. 681692. garfinkel 2003 s. garfinkel, the end of endtoend?, mit technology review, july 2003. gauthier 1999 l. gauthier, c. diot, and j. kurose, endtoend transmission control mechanisms for multiparty interactive applications on the internet, proc. 1999 ieee infocom new york, ny, apr. 1999. gieben 2004 m. gieben, dnssec, the internet protocol journal, 7 2 june 2004, httpipj.dreamhosters.cominternetprotocoljournalissuesbackissues giust 2015 f. giust, l. cominardi and c. j. bernardos, distributed mobility management for future 5g networks overview and analysis of existing approaches, in ieee communications magazine, vol. 53, no. 1, pp. 142149, january 2015. goldsmith 2005 a. goldsmith, wireless communications, cambridge university press, 2005. z01_kuro5469_08_ge_ref.indd 732 08052021 1417 references 733 goodman 1997 david j. goodman, wireless personal communications systems, prenticehall, 1997. google cdn 2020 google data center locations httpscloud.google.comcdn docslocations google ipv6 2020 google inc. ipv6 statistics, httpswww.google.comintlen ipv6statistics.html google locations 2020 google data centers. httpwww.google.comcorporate
datacenterlocations.html goralski 1999 w. goralski, frame relay for highspeed networks, john wiley, new york, 1999. greenberg 2009a a. greenberg, j. hamilton, d. maltz, p. patel, the cost of a cloud research problems in data center networks, acm computer communications review jan. 2009. greenberg 2009b a. greenberg, n. jain, s. kandula, c. kim, p. lahiri, d. maltz, p. patel, s. sengupta, vl2 a scalable and flexible data center network, proc. 2009 acm sigcomm conference. greenberg 2015 a. greenberg, sdn for the cloud, 2015 acm sigcomm conference 2015 keynote address, httpconferences.sigcomm.orgsigcomm2015pdfpaperskeynote.pdf gsma 2018a gsm association, guidelines for ipx provider networks, docu ment ir.34, version 14.0, august 2018. gsma 2018b gsm association, migration from physical to virtual network functions best practices and lessons learned, july 2019. gsma 2019a gsm association, lte and epc roaming guidelines, docu ment ir.88, june 2019. gsma 2019b gsm association, ims roaming, interconnection and interwork ing guidelines, document ir.65, april 2019. gsma 2019c gsm association, 5g implementation guidelines, july 2019.gude 2008 n. gude, t. koponen, j. pettit, b. pfaff, m. casado, n. mckeown, and s. shenker, nox towards an operating system for networks, acm sigcomm computer communication review, july 2008. guo 2009 c. guo, g. lu, d. li, h. wu, x. zhang, y. shi, c. tian, y. zhang, s. lu, bcube a high performance, servercentric network architecture for modular data centers, proc. 2009 acm sigcomm conference. z01_kuro5469_08_ge_ref.indd 733 08052021 1417 734 references guo 2016 c. guo, h. wu, z. deng, g. soni, j. ye, j. padhye, m. lipshteyn, rdma over commodity ethernet at scale, proc. 2016 acm sigcomm conference. gupta 2001 p. gupta, n. mckeown, algorithms for packet classification, ieee network magazine, vol. 15, no. 2 mar.apr. 2001, pp. 2432. gupta 2014 a. gupta, l. vanbever, m. shahbaz, s. donovan, b. schlinker, n. feamster, j. rexford, s. shenker, r. clark, e. katzbassett, sdx a software defined internet exchange, proc. 2014 acm sigcomm conference aug. 2014, pp. 551562. ha 2008 s. ha, i. rhee, l. xu, cubic a new tcpfriendly highspeed tcp variant, acm sigops operating system review, 2008. halabi 2000 s. halabi, internet routing architectures, 2nd ed., cisco press, 2000.hamzeh 2015 b. hamzeh, m. toy, y. fu and j. martin, docsis 3.1 scaling broadband cable to gigabit speeds, ieee communications magazine, vol. 53, no. 3, pp. 108113, march 2015. hanabali 2005 a. a. hanbali, e. altman, p. nain, a survey of tcp over ad hoc networks, ieee commun. surveys and tutorials, vol. 7, no. 3 2005, pp. 2236. he 2015 k. he , e. rozner , k. agarwal , w. felter , j. carter , a. akella, presto edgebased load balancing for fast datacenter networks, proc. 2015 acm sigcomm conference. heidemann 1997 j. heidemann, k. obraczka, j. touch, modeling the perfor mance of http over several transport protocols, ieeeacm transactions on networking, vol. 5, no. 5 oct. 1997, pp. 616630. held 2001 g. held, data over wireless networks bluetooth, wap , and wireless lans, mcgrawhill, 2001. holland 2001 g. holland, n. vaidya, v. bahl, a rateadaptive mac protocol for
multihop wireless networks, proc. 2001 acm int. conference of mobile computing and networking rome, italy, july 2001. hollot 2002 c.v. hollot, v. misra, d. towsley, w. gong, analysis and design of controllers for aqm routers supporting tcp flows, ieee transactions on automatic control, vol. 47, no. 6 june 2002, pp. 945959. hong 2012 c.y. hong, m. caesar, p. b. godfrey, finishing flows quickly with preemptive scheduling, proc. 2012 acm sigcomm conference. hong 2013 c. hong, s, kandula, r. mahajan, m.zhang, v. gill, m. nanduri, r. wattenhofer, achieving high utilization with softwaredriven wan, proc. acm sigcomm conference aug. 2013, pp.1526. z01_kuro5469_08_ge_ref.indd 734 08052021 1417 references 735 hong 2018 c. hong et al., b4 and after managing hierarchy, partitioning, and asymmetry for availability and scale in googles softwaredefined wan, proc. 2018 acm sigcomm conference, pp. 7487. http3 2020 m. bishop. ed, hypertext transfer protocol version 3 http3, internet draft draftietfquichttp23, expires march 15, 2020. huang 2002 c. haung, v. sharma, k. owens, v. makam, building reliable mpls networks using a path protection mechanism, ieee communications magazine, vol. 40, no. 3 mar. 2002, pp. 156162. huang 2008 c. huang, j. li, a. wang, k. w. ross, understanding hybrid cdnp2p why limelight needs its own red swoosh, proc. 2008 nossdav, braunschweig, germany. huang 2013 j. huang, f. qian, y. guo, yu. zhou, q. xu, z. mao, s. sen, o. spatscheck, an indepth study of lte effect of network protocol and application behavior on performance, proc. 2013 acm sigcomm conference. huitema 1998 c. huitema, ipv6 the new internet protocol, 2nd ed., prentice hall, englewood cliffs, nj, 1998. huston 1999a g. huston, interconnection, peering, and settlementspart i, the internet protocol journal, vol. 2, no. 1 mar. 1999. huston 2004 g. huston, nat anatomy a look inside network address translators, the internet protocol journal, vol. 7, no. 3 sept. 2004. huston 2008b g. huston, g. michaelson, ipv6 deployment just where are we? httpwww.potaroo.netispcol200804ipv6.html huston 2011a g. huston, a rough guide to address exhaustion, the internet protocol journal, vol. 14, no. 1 mar. 2011. huston 2011b g. huston, transitioning protocols, the internet protocol jour nal, vol. 14, no. 1 mar. 2011. huston 2012 g. huston, a quick primer on internet peering and settlements, april 2012, httpwww.potaroo.netispcol201204interconnectionprimer.html huston 2017 g. huston, bbr, the new kid on the tcp block, httpsblog. apnic.net20170509bbrnewkidtcpblock huston 2017 g. huston, an opinion in defence of nat, httpswww.potaroo. netispcol201709natdefence.html huston 2019 g. huston, addressing 2018, httpswww.potaroo.netispcol201901 addr2018.html huston 2019a g. huston, happy birthday bgp, june 2019, httpwww.potaroo.netispcol201906bgp30.html z01_kuro5469_08_ge_ref.indd 735 08052021 1417 736 references huston 2019b g. huston, bgp in 2018, part 1 the bgp table, httpswww.potaroo.netispcol201901bgp2018part1.html hwang 2009 t. hwang, c. yang, g. wu, s. li and g. ye li, ofdm and its wireless applications a survey, ieee transactions on vehicular technology, v ol. 58, no. 4, pp. 16731694, may 2009. iab 2020 internet architecture board homepage, httpwww.iab.orgiana 2020 internet assigned names authority, httpswww.iana.orgiana protocol numbers 2016 internet assigned numbers authority, protocol numbers, httpwww.iana.orgassignmentsprotocolnumbersprotocol numbers.xhtml icann 2020 the internet corporation for assigned names and numbers
homepage, httpwww.icann.org ieee 802 2020 ieee 802 lanman standards committee homepage, http www.ieee802.org ieee 802.11 1999 ieee 802.11, 1999 edition isoiec 880211 1999 ieee standards for information technologytelecommunications and information exchange between systemslocal and metropolitan area network specific requirementspart 11 wireless lan medium access control mac and physical layer phy specification, httpstandards.ieee.orggetieee802download802.111999.pdf ieee 802.1q 2005 ieee, ieee standard for local and metropolitan area networks virtual bridged local area networks, httpstandards.ieee.org getieee802download802.1q2005.pdf ieee 802.3 2020 ieee, ieee 802.3 csmacd ethernet, httpgrouper.ieee. orggroups8023 ieee 802.5 2012 ieee, ieee 802.5 homepage, httpwww.ieee802.org5 www8025org ieee 802.11 2020 ieee 802.11 wireless local area networks, the working group for wlan standards, httpwww.ieee802.org11 ietf 2020 internet engineering task force homepage, httpwww.ietf.orgietf quic2020 internet engineering task force, quic working group, httpsdatatracker.ietf.orgwgquicabout intel 2020 intel corp., intel 710 ethernet adapter, httpwww.intel.com contentwwwusenethernetproductsconvergednetworkadaptersethernetxl710 .html z01_kuro5469_08_ge_ref.indd 736 08052021 1417 references 737 isc 2020 internet systems consortium homepage, httpwww.isc.org itu 2005a international telecommunication union, itut x.509, the direc tory publickey and attribute certificate frameworks aug. 2005. itu 2014 itu, g.fast broadband standard approved and on the market, httpwww.itu.intnetpressofficepress_releases201470.aspx itu 2020 the itu homepage, httpwww.itu.intiyer 2008 s. iyer, r. r. kompella, n. mckeown, designing packet buffers for router line cards, ieeeacm transactions on networking, vol. 16, no. 3 june 2008, pp. 705717. jacobson 1988 v. jacobson, congestion avoidance and control, proc. 1988 acm sigcomm conference stanford, ca, aug. 1988, pp. 314329. jain 1986 r. jain, a timeoutbased congestion control scheme for window flowcontrolled networks, ieee journal on selected areas in communications sac4, 7 oct. 1986. jain 1989 r. jain, a delaybased approach for congestion avoidance in interconnected heterogeneous computer networks, acm sigcomm computer communications review, vol. 19, no. 5 1989, pp. 5671. jain 1994 r. jain, fddi handbook highspeed networking using fiber and other media, addisonwesley, reading, ma, 1994. jain 1996 r. jain. s. kalyanaraman, s. fahmy, r. goyal, s. kim, tutorial paper on abr source behavior, atm forum961270, oct. 1996. httpwww.cse.wustl.edujainatmfftpatm961270.pdf jain 2013 s. jain, a. kumar, s. mandal, j. ong, l. poutievski, a. singh, s.venkata, j. wanderer, j. zhou, m. zhu, j. zolla, u. h√∂lzle, s. stuart, a, vahdat, b4 experience with a globally deployed software defined wan, proc. 2013 acm sigcomm conference, pp. 314. jimenez 1997 d. jimenez, outside hackers infiltrate mit network, compro mise security, the tech, vol. 117, no. 49 oct. 1997, p. 1, httpwwwtech.mit.eduv117n49hackers.49n.html juniper mx2020 2020 juniper networks, mx2020 and mx2010 3d universal edge routers, httpswww.juniper.netusenproductsservicesroutingmxseriesmx2020 kaaranen 2001 h. kaaranen, s. naghian, l. laitinen, a. ahtiainen, v. niemi, networks architecture, mobility and services, new york john wiley sons, 2001. kahn 1967 d. kahn, the codebreakers the story of secret writing, the macmillan company, 1967. z01_kuro5469_08_ge_ref.indd 737 08052021 1417 738 references kahn 1978 r. e. kahn, s. gronemeyer, j. burchfiel, r. kunzelman, advances in packet radio technology, proc. ieee, vol. 66, no. 11 nov. 1978, pp. 14681496. kamerman 1997 a. kamerman, l. monteban, wavelanii a high performance wireless lan for the unlicensed band, bell labs technical journal summer 1997, pp. 118133. kar 2000 k. kar, m. kodialam,
t. v. lakshman, minimum interference rout ing of bandwidth guaranteed tunnels with mpls traffic engineering applications, ieee j. selected areas in communications dec. 2000. karn 1987 p. karn, c. partridge, improving roundtrip time estimates in reliable transport protocols, proc. 1987 acm sigcomm conference. karol 1987 m. karol, m. hluchyj, a. morgan, input versus output queuing on a spacedivision packet switch, ieee transactions on communications, vol. 35, no. 12 dec. 1987, pp. 13471356. kaufman 2002 c. kaufman, r. perlman, m. speciner, network security private communication in a public world, 2nd edition, prentice hall, 2002. kelly 1998 f. p. kelly, a. maulloo, d. tan, rate control for communication networks shadow prices, proportional fairness and stability, j. operations res. soc., vol. 49, no. 3 mar. 1998, pp. 237252. kim 2008 c. kim, m. caesar, j. rexford, floodless in seattle a scalable ethernet architecture for large enterprises, proc. 2008 acm sigcomm conference seattle, wa, aug. 2008. kleinrock 1961 l. kleinrock, information flow in large communication networks, rle quarterly progress report, july 1961. kleinrock 1964 l. kleinrock, 1964 communication nets stochastic message flow and delay, mcgrawhill, new york, ny, 1964. kleinrock 1975 l. kleinrock, queuing systems, vol. 1, john wiley, new york, 1975. kleinrock 1975b l. kleinrock, f. a. tobagi, packet switching in radio channels part icarrier sense multipleaccess modes and their throughputdelay characteristics, ieee transactions on communications, vol. 23, no. 12 dec. 1975, pp. 14001416. kleinrock 1976 l. kleinrock, queuing systems, vol. 2, john wiley, new york, 1976. kleinrock 2004 l. kleinrock, the birth of the internet, httpwww.lk.cs.ucla. edulkinetbirth.html z01_kuro5469_08_ge_ref.indd 738 08052021 1417 references 739 kleinrock 2018 l. kleinrock, internet congestion control using the power metric keep the pipe just full, but no fuller, ad hoc networks, vol. 80, 2018, pp. 142157. kohler 2006 e. kohler, m. handley, s. floyd, ddcp designing dccp congestion control without reliability, proc. 2006 acm sigcomm conference pisa, italy, sept. 2006. kohlios 2018 c. kohlios, t. hayajneh, a comprehensive attack flow model and security analysis for wifi and wpa3, electronics, v ol. 7, no. 11, 2018. kolding 2003 t. kolding, k. pedersen, j. wigard, f. frederiksen, p. mogensen, high speed downlink packet access wcdma evolution, ieee vehicular technology society news feb. 2003, pp. 410. koponen 2010 t. koponen, m. casado, n. gude, j. stribling, l. poutievski, m. zhu, r. ramanathan, y. iwata, h. inoue, t. hama, s. shenker, onix a distributed control platform for largescale production networks, 9th usenix conference on operating systems design and implementation osdi10, pp. 16. koponen 2011 t. koponen, s. shenker, h. balakrishnan, n. feamster, i. ganichev, a. ghodsi, p. b. godfrey, n. mckeown, g. parulkar, b. raghavan, j. rexford, s. arianfar, d. kuptsov, architecting for innovation, acm computer communications review, 2011. korhonen 2003 j. korhonen, introduction to 3g mobile communications, 2nd edition, artech house, 2003.koziol 2003 j. koziol, intrusion detection with snort, sams publishing, 2003.kreutz 2015 d. kreutz, f.m.v. ramos, p. esteves verissimo, c. rothenberg, s. azodolmolky, s. uhlig, softwaredefined networking a comprehensive survey, proceedings of the ieee, vol. 103, no. 1 jan. 2015,
pp. 1476. this paper is also being updated at httpsgithub.comsdnsurveylatexwiki krishnamurthy 2001 b. krishnamurthy, j. rexford, web protocols and practice http1.1, networking protocols, and traffic measurement, addisonwesley, boston, ma, 2001. k√ºhlewind 2013 m. k√ºhlewind, s. neuner, b, trammell, on the state of ecn and tcp options on the internet, proc. 14th international conference on passive and active measurement pam13, pp. 135144. kulkarni 2005 s. kulkarni, c. rosenberg, opportunistic scheduling general izations to include multiple constraints, multiple interfaces, and short term fairness, wireless networks, 11 2005, pp. 557569. z01_kuro5469_08_ge_ref.indd 739 08052021 1417 740 references kumar 2006 r. kumar, k.w. ross, optimal peerassisted file distribution single and multiclass problems, ieee workshop on hot topics in web systems and technologies boston, ma, 2006. labovitz 1997 c. labovitz, g. r. malan, f. jahanian, internet routing instability, proc. 1997 acm sigcomm conference cannes, france, sept. 1997, pp. 115126. labovitz 2010 c. labovitz, s. iekeljohnson, d. mcpherson, j. oberheide, f. jahanian, internet interdomain traffic, proc. 2010 acm sigcomm conference. labrador 1999 m. labrador, s. banerjee, packet dropping policies for atm and ip networks, ieee communications surveys, vol. 2, no. 3 third quarter 1999, pp. 214. lacage 2004 m. lacage, m.h. manshaei, t. turletti, ieee 802.11 rate adapta tion a practical approach, acm int. symposium on modeling, analysis, and simulation of wireless and mobile systems mswim venice, italy, oct. 2004. lakhina 2005 a. lakhina, m. crovella, c. diot, mining anomalies using traf fic feature distributions, proc. 2005 acm sigcomm conference. lakshman 1997 t. v. lakshman, u. madhow, the performance of tcpip for networks with high bandwidthdelay products and random loss, ieeeacm transactions on networking, vol. 5, no. 3 1997, pp. 336350. lakshman 2004 t. v. lakshman, t. nandagopal, r. ramjee, k. sabnani, t. woo, the softrouter architecture, proc. 3nd acm workshop on hot topics in networks hotnetsiii, nov. 2004. lam 1980 s. lam, a carrier sense multiple access protocol for local networks, computer networks, vol. 4 1980, pp. 2132. lamport 1989 l. lamport, the parttime parliament, technical report 49, systems research center, digital equipment corp., palo alto, sept. 1989. lampson 1983 lampson, butler w. hints for computer system design, acm sigops operating systems review, vol. 17, no. 5, 1983. lampson 1996 b. lampson, how to build a highly available system using consensus, proc. 10th international workshop on distributed algorithms wdag 96, √∂zalp babaoglu and keith marzullo eds., springerverlag, pp. 117. langley 2017 a. langley, a. riddoch, a. wilk, a. vicente, c. krasic, d. zhang, f. yang, f. kouranov, i. swett, j. iyengar, j. bailey, j. dorfman, j. roskind, j. kulik, p. westin, r. tenneti, r. shade, r. hamilton, v. vasiliev, w. chang, z. shi, the quic transport protocol design and internetscale deployment, proc. 2017 acm sigcomm conference. z01_kuro5469_08_ge_ref.indd 740 08052021 1417 references 741 lawton 2001 g. lawton, is ipv6 finally gaining ground? ieee computer magazine aug. 2001, pp. 1115. leighton 2009 t. leighton, improving performance on the internet, communi cations of the acm, vol. 52, no. 2 feb. 2009, pp. 4451. leiner 1998 b. leiner, v. cerf,
d. clark, r. kahn, l. kleinrock, d. lynch, j. postel, l. roberts, s. woolf, a brief history of the internet, httpwww.isoc.orginternethistorybrief.html leung 2006 k. leung, v. o. k. li, tcp in wireless networks issues, approaches, and challenges, ieee commun. surveys and tutorials, vol. 8, no. 4 2006, pp. 6479. levin 2012 d. levin, a. wundsam, b. heller, n. handigol, a. feldmann, logi cally centralized? state distribution tradeoffs in software defined networks, proc. first workshop on hot topics in software defined networks aug. 2012, pp. 16. li 2004 l. li, d. alderson, w. willinger, j. doyle, a firstprinciples approach to understanding the internets routerlevel topology, proc. 2004 acm sigcomm conference portland, or, aug. 2004. li 2007 j. li, m. guidero, z. wu, e. purpus, t. ehrenkranz, bgp routing dynamics revisited. acm computer communication review apr. 2007. li 2015 s. q. li, building softcom ecosystem foundation, open networking summit, 2015. li 2017 z. li, w. wang, c. wilson, j. chen, c. qian, t. jung, l. zhang, k. liu, x.li, y. liu, fbsradar uncovering fake base stations at scale in the wild, isoc symposium on network and distributed system security ndss, february 2017. li 2018 z. li, d. levin, n. spring, b. bhattacharjee, internet anycast perfor mance, problems, potential, proc. 2018 acm sigcomm conference, pp. 5973. lin 2001 y. lin, i. chlamtac, wireless and mobile network architectures, john wiley and sons, new york, ny, 2001. liogkas 2006 n. liogkas, r. nelson, e. kohler, l. zhang, exploiting bittor rent for fun but not profit, 6th international workshop on peertopeer systems iptps 2006. liu 2003 j. liu, i. matta, m. crovella, endtoend inference of loss nature in a hybrid wiredwireless environment, proc. wiopt03 modeling and optimization in mobile, ad hoc and wireless networks. z01_kuro5469_08_ge_ref.indd 741 08052021 1417 742 references locher 2006 t. locher, p. moor, s. schmid, r. wattenhofer, free riding in bittorrent is cheap, proc. acm hotnets 2006 irvine ca, nov. 2006. madhyastha 2017 h. madhyastha, a case against net neutrality, ieee spectrum, dec. 2017, httpsspectrum.ieee.orgtechtalktelecominternetacaseagainstnetneutrality mahdavi 1997 j. mahdavi, s. floyd, tcpfriendly unicast ratebased flow control, unpublished note jan. 1997. mao 2002 z. mao, c. cranor, f. douglis, m. rabinovich, o. spatscheck, j. wang, a precise and efficient evaluation of the proximity between web clients and their local dns servers, 2002 usenix annual technical conference, pp. 229242. mathis 1997 m. mathis, j. semke, j. mahdavi, t. ott, t. 1997, the macro scopic behavior of the tcp congestion avoidance algorithm, acm sigcomm computer communication review, 273 pp. 6782. maxmind 2020 httpwww.maxmind.comappiplocationmckeown 1997a n. mckeown, m. izzard, a. mekkittikul, w. ellersick, m. horowitz, the tiny tera a packet switch core, ieee micro magazine jan.feb. 1997. mckeown 1997b n. mckeown, a fast switched backplane for a gigabit switched router, business communications review, vol. 27, no. 12. httptinytera.stanford.edunickmpaperscisco_fasts_wp.pdf mckeown 2008 n. mckeown, t. anderson, h. balakrishnan, g. parulkar, l. peterson, j. rexford, s. shenker, j. turner. 2008. openflow enabling innovation in campus networks. sigcomm comput. commun. rev. 38, 2 mar. 2008, pp. 6974. mcquillan 1980 j. mcquillan,
i. richer, e. rosen, the new routing algo rithm for the arpanet, ieee transactions on communications, vol. 28, no. 5 may 1980, pp. 711719. metcalfe 1976 r. m. metcalfe, d. r. boggs. ethernet distributed packet switching for local computer networks, communications of the association for computing machinery, vol. 19, no. 7 july 1976, pp. 395404. meyers 2004 a. myers, t. ng, h. zhang, rethinking the service model scal ing ethernet to a million nodes, acm hotnets conference, 2004. mijumbi 2016 r. mijumbi, j. serrat, j. gorricho, n. bouten, f. de turck and r. boutaba, network function virtualization stateoftheart and research challenges, ieee communications surveys tutorials, vol. 18, no. 1, pp. 236262, 2016. z01_kuro5469_08_ge_ref.indd 742 08052021 1418 references 743 mit tr 2019 mit technology review, how a quantum computer could break 2048bit rsa encryption in 8 hours, may 2019, httpswww.technologyreview .coms613596howaquantumcomputercouldbreak2048bitrsaencryptionin8hours mittal 2015 r. mittal, v. lam, n. dukkipati, e. blem, h. wassel, m. ghobadi, a. vahdat, y. wang, d. wetherall, d. zats, timely rttbased congestion control for the datacenter, proc. 2015 acm sigcomm conference, pp. 537550. mockapetris 1988 p. v. mockapetris, k. j. dunlap, development of the domain name system, proc. 1988 acm sigcomm conference stanford, ca, aug. 1988. mockapetris 2005 p. mockapetris, sigcomm award lecture, video available at httpwww.postel.orgsigcomm molinerofernandez 2002 p. molinarofernandez, n. mckeown, h. zhang, is ip going to take over the world of communications? proc. 2002 acm hotnets.molle 1987 m. l. molle, k. sohraby, a. n. venetsanopoulos, spacetime models of asynchronous csma protocols for local area networks, ieee journal on selected areas in communications, vol. 5, no. 6 1987, pp. 956968. moshref 2016 m. moshref, m. yu, r, govindan, a. vahdat, trumpet timely and precise triggers in data centers, proc. 2016 acm sigcomm conference. motorola 2007 motorola, long term evolution lte a technical overview, httpwww.motorola.comstaticfilesbusinesssolutionsindustry20solutions service20providerswireless20operatorslte_documentstatic20files6834_motdoc_new.pdf mouly 1992 m. mouly, m. pautet, the gsm system for mobile communications, cell and sys, palaiseau, france, 1992. moy 1998 j. moy, ospf anatomy of an internet routing protocol, addison wesley, reading, ma, 1998. mysore 2009 r. n. mysore, a. pamboris, n. farrington, n. huang, p. miri, s. radhakrishnan, v. subramanya, a. vahdat, portland a scalable faulttolerant layer 2 data center network fabric, proc. 2009 acm sigcomm conference. nahum 2002 e. nahum, t. barzilai, d. kandlur, performance issues in www servers, ieeeacm transactions on networking, vol 10, no. 1 feb. 2002. narayan 2018 a. narayan, f. cangialosi, d. raghavan, p. goyal, s. narayana, r. mittal, m. alizadeh, h. balakrishnan, restructuring endpoint congestion control, proc. acm sigcomm 2018 conference, pp. 3043. netflix open connect 2020 netflix open connect cdn, 2016, https openconnect.netflix.com z01_kuro5469_08_ge_ref.indd 743 08052021 1418 744 references netflix video 1 designing netflixs content delivery system, d. fulllager, 2014, httpswww.youtube.comwatch?vlkllpyddina netflix video 2 scaling the netflix global cdn, d. temkin, 2015, httpswww .youtube.comwatch?vtbqcshgq_o neumann 1997 r. neumann, internet routing black hole, the risks digest forum on risks to the public in computers and related systems, vol. 19, no. 12 may 1997. httpcatless.ncl.ac.ukrisks19.12.htmlsubj1.1 nevilleneil 2009 g. nevilleneil, whither sockets? communications of the
acm, vol. 52, no. 6 june 2009, pp. 5155. nguyen 2016 t. nguyen, c. bonnet and j. harri, sdnbased distributed mobil ity management for 5g networks, 2016 ieee wireless communications and networking conference, doha, 2016, pp. 17. nichols 2012 k. nichols, v. jacobson. controlling queue delay. acm queue, vol. 10, no. 5, may 2012. nicholson 2006 a nicholson, y. chawathe, m. chen, b. noble, d. wetherall, improved access point selection, proc. 2006 acm mobisys conference uppsala sweden, 2006. nielsen 1997 h. f. nielsen, j. gettys, a. bairdsmith, e. prudhommeaux, h. w. lie, c. lilley, network performance effects of http1.1, css1, and png, w3c document, 1997 also appears in proc. 1997 acm sigcom conference cannes, france, sept 1997, pp. 155166. nist 2001 national institute of standards and technology, advanced encryp tion standard aes, federal information processing standards 197, nov. 2001, httpcsrc.nist.govpublicationsfipsfips197fips197.pdf nist ipv6 2020 us national institute of standards and technology, estimating ipv6 dnssec deployment snapshots, httpfedv6deployment.antd.nist.govsnapall.html nmap 2020 nmap homepage, httpsnmap.orgnonnenmacher 1998 j. nonnenmacher, e. biersak, d. towsley, paritybased loss recovery for reliable multicast transmission, ieeeacm transactions on networking, vol. 6, no. 4 aug. 1998, pp. 349361. noormohammadpour 2018 m. noormohammadpour, c. raghavendra, cauligi, datacenter traffic control understanding techniques and tradeoffs, ieee communications surveys tutorials, vol. 20 2018, pp. 14921525. nygren 2010 erik nygren, ramesh k. sitaraman, and jennifer sun, the aka mai network a platform for highperformance internet applications, sigops oper. syst. rev. 44, 3 aug. 2010, pp. 219. z01_kuro5469_08_ge_ref.indd 744 08052021 1418 references 745 onf 2020 open networking foundation, specification, httpswww.opennet working.orgsoftwaredefinedstandardsspecifications onos 2020 onos, httpsonosproject.orgcollateral opendaylight 2020 opendaylight, httpswww.opendaylight.org opendaylight 2020 opendaylight, httpswww.opendaylight.orgwhatwedo currentreleasesodium opensignal 2019 opensignal, httpswww.opensignal.comordonezlucena 2017 j. ordonezlucena, p. ameigeiras, d. lopez, j. j. ramosmunoz, j. lorca and j. folgueira, network slicing for 5g with sdnnfv concepts, architectures, and challenges, ieee communications magazine, vol. 55, no. 5, pp. 8087, may 2017. osterweil 2012 e. osterweil, d. mcpherson, s. dibenedetto, c. papadopoulos, d. massey, behavior of dns top talkers, passive and active measurement confer ence, 2012. p4 2020 p4 language consortium, httpsp4.orgpadhye 2000 j. padhye, v. firoiu, d. towsley, j. kurose, modeling tcp reno performance a simple model and its empirical validation, ieeeacm transactions on networking, vol. 8, no. 2 apr. 2000, pp. 133145. padhye 2001 j. padhye, s. floyd, on inferring tcp behavior, proc. 2001 acm sigcomm conference san diego, ca, aug. 2001. palat 2009 s. palat, p. godin, the lte network architecture a comprehensive tutorial, in ltethe umts long term evolution from theory to practice. also available as a standalone alcatel white paper. panda 2013 a. panda, c. scott, a. ghodsi, t. koponen, s. shenker, cap for networks, proc. 2013 acm hotsdn conference, pp. 9196. parekh 1993 a. parekh, r. gallagher, a generalized processor sharing ap proach to flow control in integrated services networks the singlenode case, ieeeacm transactions on networking, vol. 1, no. 3 june 1993, pp. 344357. partridge 1998 c. partridge, et al. a fifty gigabit per second ip router, ieee acm transactions on networking, vol. 6, no. 3 jun. 1998,
pp. 237248. patel 2013 p. patel, d. bansal, l. yuan, a. murthy, a. greenberg, d. maltz, r. kern, h. kumar, m. zikos, h. wu, c. kim, n. karri, ananta cloud scale load balancing, proc. 2013 acm sigcomm conference. pathak 2010 a. pathak, y. a. wang, c. huang, a. greenberg, y. c. hu, j. li, k. w. ross, measuring and evaluating tcp splitting for cloud services, passive and active measurement pam conference zurich, 2010. z01_kuro5469_08_ge_ref.indd 745 08052021 1418 746 references peering db 2020 the interconnection database, httpswww.peeringdb.com peha 2006 j. peha, the benefits and risks of mandating network neutral ity, and the quest for a balanced policy, proc. 2006 telecommunication policy research conference tprc, httpsssrn.comabstract2103831 perkins 1994 a. perkins, networking with bob metcalfe, the red herring magazine nov. 1994. perkins 1998b c. perkins, mobile ip design principles and practice, addison wesley, reading, ma, 1998. perkins 2000 c. perkins, ad hoc networking, addisonwesley, reading, ma, 2000. perlman 1999 r. perlman, interconnections bridges, routers, switches, and internetworking protocols, 2nd edition, addisonwesley professional computing series, reading, ma, 1999. pgp 2020 symantec pgp, httpswww.symantec.comproductsencryption, 2020 phifer 2000 l. phifer, the trouble with nat, the internet protocol journal, vol. 3, no. 4 dec. 2000, httpwww.cisco.comwarppublic759ipj_34ipj_ 34_nat.html piatek 2008 m. piatek, t. isdal, a. krishnamurthy, t. anderson, one hop reputations for peertopeer file sharing workloads, proc. nsdi 2008. pickholtz 1982 r. pickholtz, d. schilling, l. milstein, theory of spread spec trum communicationa tutorial, ieee transactions on communications, vol. 30, no. 5 may 1982, pp. 855884. pingplotter 2020 pingplotter homepage, httpwww.pingplotter.compomeranz 2010 h. pomeranz, practical, visual, threedimensional pedagogy for internet protocol packet header control fields, httpsrighteousit.wordpress.com20100627practicalvisualthreedimensionalpedagogyforinternetprotocolpacketheadercontrolfields, june 2010. quagga 2012 quagga, quagga routing suite, httpwww.quagga.netqualcomm 2019 qualcomm, everything you want to know about 5g, httpswww.qualcomm.cominvention5gwhatis5g qazi 2013 z. qazi, c. tu, l. chiang, r. miao, v. sekar, m. yu, simplefying middlebox policy enforcement using sdn, proc. acm sigcomm conference aug. 2013, pp. 2738. quic 2020 httpsquicwg.org z01_kuro5469_08_ge_ref.indd 746 08052021 1418 references 747 quicrecovery 2020 j. iyengar, ed.,i. swett, ed., quic loss detection and congestion control, internet draft draftietfquicrecoverylatest, april 20, 2020. quittner 1998 j. quittner, m. slatalla, speeding the net the inside story of netscape and how it challenged microsoft, atlantic monthly press, 1998. quova 2020 www.quova.comraiciu 2010 c. raiciu, c. pluntke, s. barre, a. greenhalgh, d. wischik, m. handley, data center networking with multipath tcp, proc. 2010 acm sigcomm conference. ramakrishnan 1990 k. k. ramakrishnan, r. jain, a binary feedback scheme for congestion avoidance in computer networks, acm transactions on computer systems, vol. 8, no. 2 may 1990, pp. 158181. raman 2007 b. raman, k. chebrolu, experiences in using wifi for rural in ternet in india, ieee communications magazine, special issue on new directions in networking technologies in emerging economies jan. 2007. ramjee 1994 r. ramjee, j. kurose, d. towsley, h. schulzrinne, adaptive playout mechanisms for packetized audio applications in widearea networks, proc. 1994 ieee infocom. rescorla 2001 e. rescorla, ssl and tls designing and building secure systems, addisonwesley, boston, 2001. rfc 001 s. crocker, host software,
rfc 001 the very first rfc!.rfc 768 j. postel, user datagram protocol, rfc 768, aug. 1980.rfc 791 j. postel, internet protocol darpa internet program protocol speci fication, rfc 791, sept. 1981. rfc 792 j. postel, internet control message protocol, rfc 792, sept. 1981.rfc 793 j. postel, transmission control protocol, rfc 793, sept. 1981.rfc 801 j. postel, ncptcp transition plan, rfc 801, nov. 1981.rfc 826 d. c. plummer, an ethernet address resolution protocolor converting network protocol addresses to 48bit ethernet address for transmission on ethernet hardware, rfc 826, nov. 1982. rfc 829 v. cerf, packet satellite technology reference sources, rfc 829, nov. 1982. rfc 854 j. postel, j. reynolds, telnet protocol specification, rfc 854, may 1993. rfc 950 j. mogul, j. postel, internet standard subnetting procedure, rfc 950, aug. 1985. rfc 959 j. postel and j. reynolds, file transfer protocol ftp, rfc 959, oct. 1985. z01_kuro5469_08_ge_ref.indd 747 08052021 1418 748 references rfc 1034 p. v. mockapetris, domain namesconcepts and facilities, rfc 1034, nov. 1987. rfc 1035 p. mockapetris, domain namesimplementation and specifica tion, rfc 1035, nov. 1987. rfc 1071 r. braden, d. borman, and c. partridge, computing the internet checksum, rfc 1071, sept. 1988. rfc 1122 r. braden, requirements for internet hostscommunication layers, rfc 1122, oct. 1989. rfc 1191 j. mogul, s. deering, path mtu discovery, rfc 1191, nov. 1990.rfc 1320 r. rivest, the md4 messagedigest algorithm, rfc 1320, apr. 1992. rfc 1321 r. rivest, the md5 messagedigest algorithm, rfc 1321, apr. 1992. rfc 1422 s. kent, privacy enhancement for internet electronic mail part ii certificatebased key management, rfc 1422. rfc 1546 c. partridge, t. mendez, w. milliken, host anycasting service, rfc 1546, 1993. rfc 1584 j. moy, multicast extensions to ospf, rfc 1584, mar. 1994.rfc 1633 r. braden, d. clark, s. shenker, integrated services in the internet architecture an overview, rfc 1633, june 1994. rfc 1752 s. bradner, a. mankin, the recommendations for the ip next gen eration protocol, rfc 1752, jan. 1995. rfc 1918 y. rekhter, b. moskowitz, d. karrenberg, g. j. de groot, e. lear, address allocation for private internets, rfc 1918, feb. 1996. rfc 1930 j. hawkinson, t. bates, guidelines for creation, selection, and registration of an autonomous system as, rfc 1930, mar. 1996. rfc 1945 t. bernerslee, r. fielding, h. frystyk, hypertext transfer protocolhttp1.0, rfc 1945, may 1996. rfc 1958 b. carpenter, architectural principles of the internet, rfc 1958, june 1996. rfc 2003 c. perkins, ip encapsulation within ip, rfc 2003, oct. 1996.rfc 2004 c. perkins, minimal encapsulation within ip, rfc 2004, oct. 1996. z01_kuro5469_08_ge_ref.indd 748 08052021 1418 references 749 rfc 2018 m. mathis, j. mahdavi, s. floyd, a. romanow, tcp selective acknowledgment options, rfc 2018, oct. 1996. rfc 2104 h. krawczyk, m. bellare, r. canetti, hmac keyedhashing for message authentication, rfc 2104, feb. 1997. rfc 2131 r. droms, dynamic host configuration protocol, rfc 2131, mar. 1997. rfc 2136 p. vixie, s. thomson, y. rekhter, j. bound, dynamic updates in the domain name system, rfc 2136, apr. 1997. rfc 2328 j. moy, ospf version 2, rfc
2328, apr. 1998.rfc 2420 h. kummert, the ppp tripledes encryption protocol 3dese, rfc 2420, sept. 1998. rfc 2460 s. deering, r. hinden, internet protocol, version 6 ipv6 specifica tion, rfc 2460, dec. 1998. rfc 2578 k. mccloghrie, d. perkins, j. schoenwaelder, structure of manage ment information version 2 smiv2, rfc 2578, apr. 1999. rfc 2579 k. mccloghrie, d. perkins, j. schoenwaelder, textual conventions for smiv2, rfc 2579, apr. 1999. rfc 2580 k. mccloghrie, d. perkins, j. schoenwaelder, conformance state ments for smiv2, rfc 2580, apr. 1999. rfc 2581 m. allman, v . paxson, w. stevens, tcp congestion control, rfc 2581, apr. 1999. rfc 2663 p. srisuresh, m. holdrege, ip network address translator nat terminology and considerations, rfc 2663. rfc 2702 d. awduche, j. malcolm, j. agogbua, m. odell, j. mcmanus, re quirements for traffic engineering over mpls, rfc 2702, sept. 1999. rfc 2827 p. ferguson, d. senie, network ingress filtering defeating denial of service attacks which employ ip source address spoofing, rfc 2827, may 2000. rfc 2865 c. rigney, s. willens, a. rubens, w. simpson, remote authentica tion dial in user service radius, rfc 2865, june 2000. rfc 2992 c. hopps, analysis of an equalcost multipath algorithm, rfc 2992, nov 2000. rfc 3007 b. wellington, secure domain name system dns dynamic update, rfc 3007, nov. 2000. z01_kuro5469_08_ge_ref.indd 749 08052021 1418 750 references rfc 3022 p. srisuresh, k. egevang, traditional ip network address translator traditional nat, rfc 3022, jan. 2001. rfc 3031 e. rosen, a. viswanathan, r. callon, multiprotocol label switching architecture, rfc 3031, jan. 2001. rfc 3032 e. rosen, d. tappan, g. fedorkow, y. rekhter, d. farinacci, t. li, a. conta, mpls label stack encoding, rfc 3032, jan. 2001. rfc 3168 k. ramakrishnan, s. floyd, d. black, the addition of explicit con gestion notification ecn to ip, rfc 3168, sept. 2001. rfc 3209 d. awduche, l. berger, d. gan, t. li, v. srinivasan, g. swallow, rsvpte extensions to rsvp for lsp tunnels, rfc 3209, dec. 2001. rfc 3232 j. reynolds, assigned numbers rfc 1700 is replaced by an on line database, rfc 3232, jan. 2002. rfc 3234 b. carpenter, s. brim, middleboxes taxonomy and issues, rfc 3234, feb. 2002. rfc 3261 j. rosenberg, h. schulzrinne, g. carmarillo, a. johnston, j. peterson, r. sparks, m. handley, e. schooler, sip session initiation protocol, rfc 3261, july 2002. rfc 3272 j. boyle, v. gill, a. hannan, d. cooper, d. awduche, b. christian, w. s. lai, overview and principles of internet traffic engineering, rfc 3272, may 2002. rfc 3286 l. ong, j. yoakum, an introduction to the stream control transmis sion protocol sctp, rfc 3286, may 2002. rfc 3346 j. boyle, v. gill, a. hannan, d. cooper, d. awduche, b. christian, w. s. lai, applicability statement for traffic engineering with mpls, rfc 3346, aug. 2002. rfc 3390 m. allman, s. floyd, c. partridge, increasing tcps initial window, rfc 3390, oct. 2002. rfc 3410 j. case, r. mundy, d. partain, introduction and applicability statements for internet standard management framework, rfc 3410, dec. 2002.rfc 3439 r.
bush, d. meyer, some internet architectural guidelines and philosophy, rfc 3439, dec. 2003. rfc 3447 j. jonsson, b. kaliski, publickey cryptography standards pkcs 1 rsa cryptography specifications version 2.1, rfc 3447, feb. 2003. z01_kuro5469_08_ge_ref.indd 750 08052021 1418 references 751 rfc 3468 l. andersson, g. swallow, the multiprotocol label switching mpls working group decision on mpls signaling protocols, rfc 3468, feb. 2003. rfc 3469 v. sharma, ed., f. hellstrand, ed, framework for multiprotocol label switching mplsbased recovery, rfc 3469, feb. 2003. ftpftp.rfceditor.orginnotesrfc3469.txt rfc 3535 j. sch√∂nw√§lder, overview of the 2002 iab network management workshop, rfc 3535, may 2003. rfc 3550 h. schulzrinne, s. casner, r. frederick, v . jacobson, rtp a transport protocol for realtime applications, rfc 3550, july 2003. rfc 3588 p. calhoun, j. loughney, e. guttman, g. zorn, j. arkko, diameter base protocol, rfc 3588, sept. 2003. rfc 3746 l. yang, r. dantu, t. anderson, r. gopal, forwarding and control element separation forces framework, internet, rfc 3746, apr. 2004. rfc 3748 b. aboba, l. blunk, j. vollbrecht, j. carlson, h. levkowetz, ed., extensible authentication protocol eap, rfc 3748, june 2004. rfc 4022 r. raghunarayan, ed., management information base for the transmission control protocol tcp, rfc 4022, march 2005. rfc 4033 r. arends, r. austein, m. larson, d. massey, s. rose, dns security introduction and requirements, rfc 4033, march 2005. rfc 4113 b. fenner, j. flick, management information base for the user datagram protocol udp, rfc 4113, june 2005. rfc 4213 e. nordmark, r. gilligan, basic transition mechanisms for ipv6 hosts and routers, rfc 4213, oct. 2005. rfc 4271 y. rekhter, t. li, s. hares, ed., a border gateway protocol 4 bgp4, rfc 4271, jan. 2006. rfc 4291 r. hinden, s. deering, ip version 6 addressing architecture, rfc 4291, feb. 2006. rfc 4293 s. routhier, ed., management information base for the internet protocol ip, rfc 4293, april 2006. rfc 4340 e. kohler, m. handley, s. floyd, datagram congestion control protocol dccp, rfc 4340, mar. 2006. rfc 4346 t. dierks, e. rescorla, the transport layer security tls protocol version 1.1, rfc 4346, apr. 2006. z01_kuro5469_08_ge_ref.indd 751 08052021 1418 752 references rfc 4514 k. zeilenga, ed., lightweight directory access protocol ldap string representation of distinguished names, rfc 4514, june 2006. rfc 4632 v. fuller, t. li, classless interdomain routing cidr the inter net address assignment and aggregation plan, rfc 4632, aug. 2006. rfc 4960 r. stewart, ed., stream control transmission protocol, rfc 4960, sept. 2007. rfc 4987 w. eddy, tcp syn flooding attacks and common mitigations, rfc 4987, aug. 2007. rfc 5128 p. srisuresh, b. ford, d. kegel, state of peertopeer p2p commu nication across network address translators nats, march 2008, rfc 5128. rfc 5246 t. dierks, e. rescorla, the transport layer security tls protocol, version 1.2, rfc 5246, aug. 2008. rfc 5277 s. chisholm h. trevino, netconf event notifications, rfc 5277, july 2008. rfc 5321 j. klensin, simple mail transfer protocol, rfc 5321, oct. 2008.rfc 5389 j. rosenberg, r. mahy, p. matthews, d. wing, session traversal utilities for nat stun, rfc
5389, oct. 2008. rfc 5681 m. allman, v. paxson, e. blanton, tcp congestion control, rfc 5681, sept. 2009. rfc 5944 c. perkins, ed., ip mobility support for ipv4, revised, rfc 5944, nov. 2010. rfc 6020 m. bjorklund, yanga data modeling language for the network configuration protocol netconf, rfc 6020, oct. 2010. rfc 6241 r. enns, m. bjorklund, j. sch√∂nw√§lder, a. bierman, network con figuration protocol netconf, rfc 6241, june 2011. rfc 6265 a barth, http state management mechanism, rfc 6265, apr. 2011. rfc 6298 v. paxson, m. allman, j. chu, m. sargent, computing tcps re transmission timer, rfc 6298, june 2011. rfc 6582 t. henderson, s. floyd, a. gurtov, y. nishida, the newreno modification to tcps fast recovery algorithm, rfc 6582, april 2012. rfc 6733 v. fajardo, j. arkko, j. loughney, g. zorn, diameter base proto col, rfc 6733, oct. 2012. z01_kuro5469_08_ge_ref.indd 752 08052021 1418 references 753 rfc 7020 r. housley, j. curran, g. huston, d. conrad, the internet numbers registry system, rfc 7020, aug. 2013. rfc 7094 d. mcpherson, d. oran, d. thaler, e. osterweil, architectural con siderations of ip anycast, rfc 7094, jan. 2014. rfc 7230 r. fielding, ed., j. reschke, hypertext transfer protocol http1.1 message syntax and routing, rfc 7230, june 2014. rfc 7232 r. fielding, ed., j. reschke, ed., hypertext transfer protocol http1.1 conditional requests, rfc 7232, june 2014. rfc 7234 r. fielding, ed., m. nottingham, ed., j. reschke, ed., hypertext transfer protocol http1.1 caching, rfc 7234, june 2014. rfc 7323 d. borman, s. braden, v. jacobson, r. scheffenegger, tcp exten sions for high performance, rfc 7323, sept. 2014. rfc 7540 m. belshe, r. peon, m. thomson eds, hypertext transfer protocol version 2 http2, rfc 7540, may 2015. rfc 8033 r. pan, p. natarajan, f. baker, g. white, proportional integral con troller enhanced pie a lightweight control scheme to address the bufferbloat problem, rfc 8033, feb. 2017. rfc 8034 g. white, r. pan, active queue management aqm based on pro portional integral controller enhanced pie for dataovercable service interface specifications docsis cable modems, rfc 8034, feb. 2017. rfc 8257 s. bensley, d. thaler, p. balasubramanian, l. eggert, g. judd, data center tcp dctcp tcp congestion control for data centers, rfc 8257, october 2017. rfc 8312 l. xu, s. ha, a. zimmermann,l. eggert, r. scheffenegger, cubic for fast longdistance networks, rfc 8312, feb. 2018. richter 2015 p. richter, m. allman, r. bush, v. paxson, a primer on ipv4 scarcity, acm sigcomm computer communication review, vol. 45, no. 2 apr. 2015, pp. 2132. roberts 1967 l. roberts, t. merril, toward a cooperative network of time shared computers, afips fall conference oct. 1966. rom 1990 r. rom, m. sidi, multiple access protocols performance and analy sis, springerverlag, new york, 1990. rommer 2019 s. rommer, p. hedman, m. olsson, l. frid, s. sultana, c. mulligan, 5g core networks powering digitalization, academic press, 2019. root servers 2020 root servers home page, httpwww.rootservers.org z01_kuro5469_08_ge_ref.indd 753 08052021 1418 754 references roy 2015 a. roy, h.i zeng, j. bagga, g. porter, a. snoeren, inside
the social net works datacenter network, proc. 2015 acm sigcomm conference, pp. 123137. rsa 1978 r. rivest, a. shamir, l. adelman, a method for obtaining digital signatures and publickey cryptosystems, communications of the acm, vol. 21, no. 2 feb. 1978, pp. 120126. rubenstein 1998 d. rubenstein, j. kurose, d. towsley, realtime reliable multicast using proactive forward error correction, proceedings of nossdav 98 cambridge, uk, july 1998. ruizsanchez 2001 m. ruizs√°nchez, e. biersack, w. dabbous, survey and taxonomy of ip address lookup algorithms, ieee network magazine, vol. 15, no. 2 mar.apr. 2001, pp. 823. saltzer 1984 j. saltzer, d. reed, d. clark, endtoend arguments in system design, acm transactions on computer systems tocs, vol. 2, no. 4 nov. 1984. saroiu 2002 s. saroiu, p. k. gummadi, s. d. gribble, a measurement study of peertopeer file sharing systems, proc. of multimedia computing and networking mmcn 2002. sauter 2014 m. sauter, from gsm to lteadvanced, john wiley and sons, 2014. savage 2015 d. savage, j. ng, s. moore, d. slice, p. paluch, r. white, enhanced interior gateway routing protocol, internet draft, draft savageeigrp04.txt, aug. 2015. saydam 1996 t. saydam, t. magedanz, from networks and network man agement into service and service management, journal of networks and system management, vol. 4, no. 4 dec. 1996, pp. 345348. schiller 2003 j. schiller, mobile communications, 2nd edition, addison wesley, 2003. schneier 2015 b. schneier, applied cryptography protocols, algorithms, and source code in c, wiley, 2015. sch√∂nw√§lder 2010 j. sch√∂nw√§lder, m. bj√∂rklund, p. shafer, network configu ration management using netconf and yang, ieee communications magazine, 2010, vol. 48, no. 9, pp. 166173. schwartz 1977 m. schwartz, computercommunication network design and analysis, prenticehall, englewood cliffs, nj, 1997. schwartz 1980 m. schwartz, information, transmission, modulation, and noise, mcgraw hill, new york, ny 1980. z01_kuro5469_08_ge_ref.indd 754 08052021 1418 references 755 schwartz 1982 m. schwartz, performance analysis of the sna virtual route pacing control, ieee transactions on communications, vol. 30, no. 1 jan. 1982, pp. 172184. scourias 2012 j. scourias, overview of the global system for mobile commu nications gsm. httpwww.privateline.compcsgsm0.html segaller 1998 s. segaller, nerds 2.0.1, a brief history of the internet, tv books, new york, 1998. serpanos 2011 d. serpanos, t. wolf, architecture of network systems, morgan kaufmann publishers, 2011. shacham 1990 n. shacham, p. mckenney, packet recovery in highspeed networks using coding and buffer management, proc. 1990 ieee infocom san francisco, ca, apr. 1990, pp. 124131. shaikh 2001 a. shaikh, r. tewari, m. agrawal, on the effectiveness of dns based server selection, proc. 2001 ieee infocom. sherry 2012 j. sherry, s. hasan, c. scott, a. krishnamurthy, s. ratnasamy, v. sekar, making middleboxes someone elses problem network processing as a cloud service, proc. 2012 acm sigcomm conference. singh 1999 s. singh, the code book the evolution of secrecy from mary, queen of scotsto quantum cryptography, doubleday press, 1999. singh 2015 a. singh et al., jupiter rising a decade of clos topologies and centralized control in googles datacenter network, proc. 2015 acm sigcomm conference, pp. 183197. smith 2009 j. smith,
fighting physics a tough battle, communications of the acm, vol. 52, no. 7 july 2009, pp. 6065. smithsonian 2017 smithsonian magazine, how other countries deal with net neutrality, httpswww.smithsonianmag.cominnovationhowothercountriesdealnetneutrality180967558 snort 2012 sourcefire inc., snort homepage, httpwww.snort.orgsolensky 1996 f. solensky, ipv4 address lifetime expectations, in ipng internet protocol next generation s. bradner, a. mankin, ed., addisonwesley, reading, ma, 1996. speedtest 2020 httpswww.speedtest.netspragins 1991 j. d. spragins, telecommunications protocols and design, addisonwesley, reading, ma, 1991. z01_kuro5469_08_ge_ref.indd 755 08052021 1418 756 references srikant 2012 r. srikant, the mathematics of internet congestion control, springer science business media, 2012. statista 2019 mobile internet usage worldwide statistics facts, https www.statista.comtopics779mobileinternet steinder 2002 m. steinder, a. sethi, increasing robustness of fault localiza tion through analysis of lost, spurious, and positive symptoms, proc. 2002 ieee infocom. stevens 1990 w. r. stevens, unix network programming, prenticehall, engle wood cliffs, nj. stevens 1994 w. r. stevens, tcpip illustrated, vol. 1 the protocols, addison wesley, reading, ma, 1994. stevens 1997 w. r. stevens, unix network programming, volume 1 networking apissockets and xti, 2nd edition, prenticehall, englewood cliffs, nj, 1997.stewart 1999 j. stewart, bgp4 interdomain routing in the internet, addison wesley, 1999. stone 1998 j. stone, m. greenwald, c. partridge, j. hughes, performance of checksums and crcs over real data, ieeeacm transactions on networking, vol. 6, no. 5 oct. 1998, pp. 529543. stone 2000 j. stone, c. partridge, when reality and the checksum disagree, proc. 2000 acm sigcomm conference stockholm, sweden, aug. 2000. strayer 1992 w. t. strayer, b. dempsey, a. weaver, xtp the xpress transfer protocol, addisonwesley, reading, ma, 1992. stubblefield 2002 a. stubblefield, j. ioannidis, a. rubin, using the fluhrer, mantin, and shamir attack to break wep, proceedings of 2002 network and distributed systems security symposium 2002, pp. 1722. subramanian 2000 m. subramanian, network management principles and practice, addisonwesley, reading, ma, 2000. subramanian 2002 l. subramanian, s. agarwal, j. rexford, r. katz, charac terizing the internet hierarchy from multiple vantage points, proc. 2002 ieee infocom. sundaresan 2006 k. sundaresan, k. papagiannaki, the need for crosslayer information in access point selection, proc. 2006 acm internet measurement conference rio de janeiro, oct. 2006. sunshine 1978 c. sunshine, y. dalal, connection management in transport protocols, computer networks, northholland, amsterdam, 1978. z01_kuro5469_08_ge_ref.indd 756 08052021 1418 references 757 tan 2006 k. tan, j. song, q. zhang and m. sridharan, a compound tcp approach for highspeed and long distance networks, proc. 2006 ieee infocom. tariq 2008 m. tariq, a. zeitoun, v. valancius, n. feamster, m. ammar, an swering whatif deployment and configuration questions with wise, proc. 2008 acm sigcomm conference aug. 2008. teixeira 2006 r. teixeira, j. rexford, managing routing disruptions in internet service provider networks, ieee communications magazine vol. 44, no. 3 mar. 2006 pp. 160165. think 2012 technical history of network protocols, cyclades, httpwww.cs.utexas.eduuserschristhinkcycladesindex.shtml tian 2012 y. tian, r. dey, y. liu, k. w. ross, chinas internet topology mapping and geolocating, ieee infocom miniconference 2012 orlando, fl, 2012. tld list 2020 tld list maintained by wikipedia, httpsen.wikipedia.orgwiki list_of_internet_toplevel_domains tobagi 1990 f. tobagi, fast packet
switch architectures for broadband integrated networks, proc. ieee, vol. 78, no. 1 jan. 1990, pp. 133167. tor 2020 tor anonymity online, httpwww.torproject.orgtorres 2011 r. torres, a. finamore, j. r. kim, m. m. munafo, s. rao, dissect ing video server selection strategies in the youtube cdn, proc. 2011 int. conf. on distributed computing systems. tourrilhes 2014 j. tourrilhes, p. sharma, s. banerjee, j. petit, sdn and open flow evolution a standards perspective, ieee computer magazine, nov. 2014, vol. 47, no. 11, pp. 2229. turner 1988 j. s. turner, design of a broadcast packet switching network, ieee transactions on communications, vol. 36, no. 6 june 1988, pp. 734743. turner 2012 b. turner, 2g, 3g, 4g wireless tutorial, httpblogs.nmscom munications.comcommunications2008102g3g4gwirelesstutorial.html van der berg 2008 r. van der berg, how the net works an introduction to peering and transit, httparstechnica.comguidesotherpeeringandtransit.ars van der merwe 1998 j. van der merwe, s. rooney, i. leslie, s. crosby, the tempest a practical framework for network programmability, ieee network, vol. 12, no. 3 may 1998, pp. 2028. vanhoef 2017 m. vanhoef, f. piessens, key reinstallation attacks forcing nonce reuse in wpa2, 2017 acm sigsac conference on computer and communications security ccs 17, pp. 13131328. z01_kuro5469_08_ge_ref.indd 757 08052021 1418 758 references varghese 1997 g. varghese, a. lauck, hashed and hierarchical timing wheels efficient data structures for implementing a timer facility, ieeeacm transactions on networking, vol. 5, no. 6 dec. 1997, pp. 824834. vasudevan 2005 s. vasudevan, c. diot, j. kurose, d. towsley, facilitating ac cess point selection in ieee 802.11 wireless networks, proc. 2005 acm internet measurement conference, san francisco ca, oct. 2005. venkataramani 2014 a. venkataramani, j. kurose, d. raychaudhuri, k. naga raja, m. mao, s. banerjee, mobilityfirst a mobilitycentric and trustworthy internet architecture, acm computer communication review, july 2014. villamizar 1994 c. villamizar, c. song. high performance tcp in ansnet, acm sigcomm computer communications review, vol. 24, no. 5 1994, pp. 4560. viterbi 1995 a. viterbi, cdma principles of spread spectrum communication, addisonwesley, reading, ma, 1995. vixie 2009 p. vixie, what dns is not, communications of the acm, vol. 52, no. 12 dec. 2009, pp. 4347. wakeman 1992 i. wakeman, j. crowcroft, z. wang, d. sirovica, is layering harmful remote procedure call, ieee network, vol. 6, no. 1 jan. 1992, pp. 2024. waldrop 2007 m. waldrop, data center in a box, scientific american july 2007. walfish 2004 m. walfish, j. stribling, m. krohn, h. balakrishnan, r. morris, s. shenker, middleboxes no longer considered harmful, usenix osdi 2004 san francisco, ca, december 2004. wang 2011 z. wang, z. qian, q. xu, z. mao, m. zhang, an untold story of middleboxes in cellular networks, proc. 2011 acm sigcomm conference. wei 2006 d. x. wei, c. jin, s. h. low and s. hegde, fast tcp motivation, architecture, algorithms, performance, ieeeacm transactions on networking, vol. 14, no. 6, pp. 12461259, dec. 2006. wei 2006 w. wei, c. zhang, h. zang, j. kurose, d. towsley, inference and evaluation of splitconnection approaches in cellular data networks, proc. active and passive measurement workshop adelaide, australia,
mar. 2006.weiser 1991 m. weiser, the computer for the twentyfirst century, scientific american sept. 1991 9410. httpwww.ubiq.comhypertextweiser sciamdraft3.html wifi 2019 the wifi alliance, wpa3 security considerations overview, april 2019. z01_kuro5469_08_ge_ref.indd 758 08052021 1418 references 759 wifi 2020 the wifi alliance, httpswww.wifi.org williams 1993 r. williams, a painless guide to crc error detection algorithms, httpwww.ross.netcrccrcpaper.html wireshark 2020 wireshark homepage, httpwww.wireshark.orgwischik 2005 d. wischik, n. mckeown, part i buffer sizes for core routers, acm sigcomm computer communications review, vol. 35, no. 3 july 2005. woo 1994 t. woo, r. bindignavle, s. su, s. lam, snp an interface for secure network programming, proc. 1994 summer usenix boston, ma, june 1994, pp. 4558. wright 2015 j. wright, j., hacking exposed wireless, mcgrawhill education, 2015. wu 2005 j. wu, z. m. mao, j. rexford, j. wang, finding a needle in a haystack pinpointing significant bgp routing changes in an ip network, proc. usenix nsdi 2005. w3techs world wide web technology surveys, 2020. httpsw3techs.com technologiesdetailscehttp2allall. xanadu 2012 xanadu project homepage, httpwww.xanadu.comxiao 2000 x. xiao, a. hannan, b. bailey, l. ni, traffic engineering with mpls in the internet, ieee network mar.apr. 2000. xu 2004 l. xu, k harfoush, i. rhee, binary increase congestion control bic for fast longdistance networks, ieee infocom 2004, pp. 25142524. yang 2014 p. yang, j. shao, w. luo, l. xu, j. deogun, y. lu, tcp congestion avoidance algorithm identification, ieeeacm trans. netw. vol. 22, no. 4 aug. 2014, pp. 13111324. yavatkar 1994 r. yavatkar, n. bhagwat, improving endtoend performance of tcp over mobile internetworks, proc. mobile 94 workshop on mobile computing systems and applications dec. 1994. youtube 2009 youtube 2009, google container data center tour, 2009.yu 2004 yu, fang, h. katz, tirunellai v. lakshman. gigabit rate packet patternmatching using tcam, proc. 2004 int. conf. network protocols, pp. 174183. yu 2011 m. yu, j. rexford, x. sun, s. rao, n. feamster, a survey of vlan usage in campus networks, ieee communications magazine, july 2011. zegura 1997 e. zegura, k. calvert, m. donahoo, a quantitative comparison of graphbased models for internet topology, ieeeacm transactions on networking, z01_kuro5469_08_ge_ref.indd 759 08052021 1418 760 references vol. 5, no. 6, dec. 1997. see also httpwww.cc.gatech.eduprojectsgtitm for a software package that generates networks with a transitstub structure. zhang 2007 l. zhang, a retrospective view of nat, the ietf journal, vol. 3, no. 2 oct. 2007. zheng 2008 n. zheng and j. wigard, on the performance of integrator handover algorithm in lte networks, 2008 ieee 68th vehicular technology conference, calgary, bc, 2008, pp. 15. zhu 2015 y. zhu, h. eran, d. firestone, d. firestone, c. guo, m. lipshteyn, y. liron, j. padhye, s. raindel mohamad, h. yahia, m. zhang, j. padhye, congestion control for largescale rdma deployments, proc. 2015 acm sigcomm conference. zilberman 2019 n. zilberman, g. bracha, g. schzukin. stardust divide and conquer in the data center network, 2019 usenix symposium on networked systems design and implementation. zink 2009 m. zink, k. suh, y. gu, j. kurose, characteristics of youtube network traffic at a campus networkmeasurements, models, and implications, computer
networks, vol. 53, no. 4, pp. 501514, 2009. zou 2016 y. zou, j. zhu, x. wang, l. hanzo, a survey on wireless security technical challenges, recent advances, and future trends, proceedings of the ieee, vol. 104, no. 9, 2016. z01_kuro5469_08_ge_ref.indd 760 08052021 1418 761index a abramson, norman, 91, 500 access and mobility management function amf, 608 access control lists, 700access networks, 4248, 438 cable, 4445, 93dsl, 4344, 93enterprise, 4647ethernet, 4647ftth, 4546, 933g, 484g, 485g, 485g cellular networks, 465g fixed wireless, 46hfc, 45lte, 48wifi, 4647 access points ap, 574 in infrastructure lans, 574mac addresses, 574mobility between, 587power management and, 590scanning for, 577ssid, 575wifi, 480wireless lans, 563 ack positive acknowledgments, 234238 corrupted, 236dhcp, 374duplicate, 238, 273in 802.11 rtccts system, 590tcp generation recommendation, 274 ack bit, 260 tcp, 700 ack clocking, 331ack frames, 582acknowledged segments, 295acknowledgments cumulative, 248, 262negative, 234238, 265piggybacked, 265positive, 234238, 273, 374tcp, 261263, 276 acknowledgment number, 261263 piggybacked, 265telnet and, 263265 acknowledgment number field, 260ack received events, 269, 270active optical networks aons, 46active queue management aqm, 352 active scanning, 576adapters 802.11, 563arp query and, 512csmacd operation and, 515datagram transmission and, 516error detection in, 482ethernet frames and, 524frames, 494jabbering, 524mac addresses, 508monitors, 502motherboard chipset, 483network, 483 z02_kuro5469_08_ge_idx.indd 761 08052021 1421 762 index adaptive congestion control, 227 additiveincrease, multiplicative decrease aimd, 301 fairness of, 306309 address aggregation, 368 addresses. see also ip addresses; mac addresses anycast, 378broadcast, 510careof, 623, 624foreign, 623ieee 802.11 wireless lan, 584586 ip broadcast, 370, 372373lan, 508mac, 574mobile node, 623obtaining with dhcp, 371374permanent, 160physical, 508realm with private, 374sip, 123temporary ip, 371 addressing, 363374 classful, 367368ip, 216ipv4, 363374linklayer, 483, 508514mobility management and, 596subnet, 366 address lease time, 373address resolution protocol arp, 510 mac address, 508513packet, 512table, 512 address supporting organization of icann, 370371 ad hoc networks, 564mobile, 565vehicular, 565 adleman, leonard, 650administrative autonomy, 426advanced research projects agency arpa, 89, 405 aes advanced encryption standard, 645 agent discovery, 624aging time, 523ah protocol. see authentication header protocol aimd. see additiveincrease, multiplicativedecrease akamai, 142, 155aliasing host, 154mail server, 154 alibaba cloud, 94alohanet, 89, 91, 500aloha protocol, 498 carrier sense multiple access csma, 499501 carrier sense multiple access with collision detection csmacd, 501504 efficiency, 497pure, 551slotted, 496498successful slot, 497 alternatingbit protocol, 241, 242alto computers, 518amazon, 93 cloud services, 535, 536dns vulnerabilities, 165video streaming, 173 andreessen, marc, 92android devices, 48anomalybased systems, 707anonymity, 704705 z02_kuro5469_08_ge_idx.indd 762 08052021 1421 index 763 anycast address, 378 aons. see active optical networks apache web server, 223api. see application programming interface application architecture, 114application delay, 73application gateways, 698application layer, 80, 111applicationlayer message, 83applicationlayer protocols, 124 dns, 80ftp, 80http, 80skype, 124smtp, 80 applicationlevel transport reliability, 227228 application programming interface api, 117 application protocols, wellknown, 218219 applications. see also multimedia applications; network applications bandwidthsensitive, 119control, 444446delays, 73distributed, 35elastic, 120losstolerant, 119multimedia, 226network, 112125networkservice, 450sdn control, 444446 aps. see access points aqm. see active queue managementarchitectural evolution from 2g to 3g to 4g, 598599 arp. see address resolution protocol arpa. see advanced research projects agency arpanet, 258 alohanet connection to, 89cerf on, 405development of, 8992routing algorithms, 413, 420 arp packet, 583arp protocol, 545arp query, 545arp
reply, 545arp table, 512arq automatic repeat request protocols, 234 asn. see autonomous system number as numbers. see autonomous system number aspath, 433, 435ass. see autonomous systems associate, 533associations ieee 802.11 wireless lan, 575578 security, 683685 atheros ar5006, 483atm congestion control, 292delay and bandwidth guarantees, 340 framerelay and, 532sdn and, 449 atm available bite rate abr, 292 congestion control, 292 z02_kuro5469_08_ge_idx.indd 763 08052021 1421 764 index att, 62, 410, 476 authentication, 428 endpoint, 8788, 6394g5g cellular networks, 694697 4g lte cellular networks, 596, 694697 md5, 428mutual, 690in ospf, 428sender, 639shared common secret, 691simple, 428wireless lans, 690 authentication and key agreement aka protocol 4g, 695 authentication header ah protocol, 683 authentication key, 657authentication protocol, 666669 authentication server as, 690authoritative dns servers, 157, 546 autonomous system number asn, 426 autonomous systems ass, 426 in bgp route advertisement, 430432 hierarchy within, 428429ibgp connections within, 431routing between, 425429, 439, 450 availability zones, 542average throughput, 74azure, 94 b b4, 410, 447backbone providers, 438backoff binary exponential, 503random, 580 bandwidth, 5859 atm guarantees, 340besteffort service and, 340channel, 603congestion control and, 295dos, 706downstream, 602fairness and, 306309flooding, 85fm radio, 58guaranteed minimal, 339340memory, 347probing, 295, 301wireless, 576 baran, paul, 89base html file, 126base station, 563, 593, 594basic service set bss, 574bbn, 89bbr. see tcp bbr beacon frames, 546beam forming, 607bellmanford equation, 418419 bellovin, steven m., 719ber. see bit error rate bernerslee, tim, 92besteffort delivery services, 216 besteffort services, 340bgp, 546. see also border gateway protocol bidirectional data transfer, 232 binary exponential backoff algorithm, 503 bind, 219bit error rate ber, 567 z02_kuro5469_08_ge_idx.indd 764 08052021 1421 index 765 bit errors data transfer over channel with, 233238 data transfer over lossy channel with, 238241 bitlevel error detection and correction, 484 bitnet, 91 bittorrent chunks, 170dht, 173file distribution with, 171optimistically unchoked, 172rarest first, 172torrent, defined, 170tracker, 171unchoked, 172 blades, 535block ciphers 3bit, 645fulltable, 645kbit block, 644 bluetooth as cable replacement technology, 590neighbor discovery problem, 592paging, 592piconet, 591selforganizing, 592standards, transmission rates, and range, 564 boggs, david, 515border gateway protocol bgp, 407, 413, 420, 429441, 546 attributes, 432433connection, 431determining best routes, 432436in google sdn, 447hot potato routing, 434435internal bgp, 431432ipanycast implementation with, 436437outsideas destinations, 434role of, 429430route attributes, 433route information advertisement, 430432 routeselection algorithm, 435436 routing policy, 437440routing tables, 435436 border routers, 428429, 536botnets, 85bottleneck link, 75 tcp fairness and, 306308 bounded delay, 339bright line rules, 358broadband internet, 93broadcast in aloha, 91ethernet as, 519forwarding to, 387link, 491linkstate, 413, 425mac address, 510multiple access protocols, 492in ospf, 427428packet sniffing and, 87 broadcast address, 510 ip, 370, 372373mac, 510 broadcast link, 491broadcast media, 331broadcast storms, 526brooks, fred, 719browsers, 92, 126bs. see base station bufferbloat, 354buffered distributors, 520buffering, 353354buffer overflows, congestion causing, 290291 z02_kuro5469_08_ge_idx.indd 765 08052021 1421 766 index buffers finite, 288 infinite, 286output, 54receive, 259, 277, 278send, 259sizing for routers, 353tcp, 130 bush, vannevar, 92bus, switching via, 348 c ca. see certification authority cable internet access, 4445, 93cable modem termination system cmts, 45 caching, 331 dns, 160pull, 181push, 182web, 135, 138 caesar cipher, 642, 644canonical hostname, 154careof address coa, 623, 624carrier sense multiple access csma, 499501 carrier sense multiple access
with collision detection csmacd, 501504 efficiency, 504 carrier sensing, 499cbc. see cipher block chaining cdma. see code division multiple access cdns. see content distribution networks cell location tracking, 597cells, 593cellular networks 3g, 484g, 485g, 484g5g, transmission rates and range, 564 lte, 48 cellular telephony, 48centralized routing algorithm, 412 in ls algorithm, 414 central office co, 4344cerf, vinton, 91, 258, 405406certificate, 662certification authority ca, 662channel partitioning protocols, 493 cdma, 495fdm, 493494tdm, 493494 channel propagation delay, 501channels with bit errors, 233240ieee 802.11 wireless lan, 575578 lossy, 238241perfectly reliable, 232233satellite radio, 51terrestrial radio, 51 channel utilization, 243checksum field, 260checksumming methods, 488checksums corrupted ack and nak packet detection, 236 ipv4 headers, 362363udp, 228230 china telecom, 410china unicom, 410chipping rate, 569choke packets, 292chosenplaintext attack, 643chunks, 170cidr. see classless interdomain routing cipher block chaining cbc, 646 z02_kuro5469_08_ge_idx.indd 766 08052021 1421 index 767 ciphertext, 641 ciphertextonly attack, 643circuit, 57circuit switching, 5761 packet switching versus, 6061 cisco, 34, 93cisco catalyst 6500 series, 346 switching bus, 348 cisco catalyst 7600 series, 346 switching fabric, 349 cisco catalyst 8500 series, switching fabric, 348 cisco crs, switching strategy, 349cisco 12000 series, switching fabric, 348349 clark, jim, 92classful addressing, 367368classless interdomain routing cidr, 366367, 544 class of traffic, 358cleartext, 641clear to send cts control frame, 581 client process, 257clients, 41, 116clientserver architecture, 114cloud computing, 41, 94, 535cloud services, response time of, 299cluster selection strategy, 179cmts. see cable modem termination system co. see central office coa. see careof address coaxial cable, 50code division multiple access cdma, 495, 562, 569572 collide, 492collisions detection, 499elimination of, 524 3com, 518comcast, 410command line interface cli, 457458 communication secure, 638 communication layer, sdn, 444communication links, 34compound tcp ctpc, 306computational complexity, of ls algorithm, 416 computer networks, 32 graph model of, 410411history of, 8894throughput in, 7376 conditional get, 142confidentiality, 638, 670configuration data, 456congestion buffer overflows from, 290291causes and costs of, 285291delays from, 287lost segments and, 295multihop paths and, 289291retransmission and, 288289routers and, 286291throughput and, 286291 congestion avoidance, 297298congestion control, 216, 277 abr, 227adaptive, 227aimd, 301approaches to, 292293bandwidth and, 295endtoend, 292networkassisted, 292, 293principles of, 285293tcp, 293309 congestion window, 294, 300congestion window reduced cwr bit, 304 connection flooding, 85 z02_kuro5469_08_ge_idx.indd 767 08052021 1421 768 index connectionless demultiplexing, 219220 connectionless multiplexing, 219220 connectionless transport, 224230connection management, tcp, 279283, 285 connectionoriented and secure, 310311 connectionoriented demultiplexing, 220223 connectionoriented multiplexing, 220223 connectionoriented transport, 257285 connection requests, 221connection state, 226content distribution networks cdns, 142, 175 bring home, 176cluster selection strategies, 179dns redirects users request to, 178 enter deep, 176geographically closest, 179google, 177ipanycast and, 436437netflix, 180182operation, 176private, 176realtime measurements, 179thirdparty, 176uploading versions to, 180youtube, 182 content ingestion, 180content processing, 180content provider networks, 64control packets, 342control plane, 333, 343, 407 sdn, 441450 convergence, routing algorithm speed of, 425cookies, 135138 syn, 284 cost reduction, 539540countdown timer, 240crc. see cyclic redundancy check crossbar switches, 348349cryptographic hash function, 655656cryptography components, 641principles of, 640654publickey, 649 csma. see carrier sense multiple access csma with collision avoidance, 578 csnet, 91cts. see clear to send cubic. see tcp cubic cumulative acknowledgment, 248, 262customer, 62cwnd, 294, 296301cyclades, 90cyclic redundancy check crc, 489491 codes, 489, 517errordetection
techniques, 489491 ieee 802.11 wireless lan, 583584 d darpa. see defense advanced research projects agency dash. see dynamic adaptive streaming over http data, 456data center, 114 cost reduction, 539540hardware modularity and customization, 541542 physical constraints, 541 z02_kuro5469_08_ge_idx.indd 768 08052021 1421 index 769 sdn control and management, 540 virtualization, 540541 data center network design, 536data center networking data center architectures, 535539trends in, 539542 data center networks, 535data center quantized congestion notification dcqcn, 305 data centers, 41data center tcp dctcp, 304, 309data encryption standard des, 645datagram congestion control protocol dccp, 304 datagrams, 81, 215 indirect routing of, 624inspecting, 376ipv4 format, 361363ipv6 format, 378380nat and, 376networklayer, 83reassembly of, 380transmission, 516 dataovercable service interface specifications docsis, 505507 data plane, 333, 394 4g, 614generalized forwarding and sdn, 383390 ip, 360383routers, 341360sdn and, 442, 448449 data received events, 269, 270davies, donald, 89dccp. see datagram congestion control protocol dctcp. see data center tcp ddos. see distributed dos decentralized routing algorithm, 412413 decryption, 653decryption algorithm, 641deep packet inspection dpi, 390, 639, 705 defense advanced research projects agency darpa, 90, 91, 405 delayedbased congestion control, 305306 delays application, 73bounded, 339in end systems, 73endtoend, 7173network congestion and, 287nodal, 66nodal processing, 65in packetswitched networks, 6576 processing, 66propagation, 65, 6769queuing, 5455, 65, 66, 6971, 287 in shared medium, 73total nodal, 65transmission, 6569types of, 6569 deletion, message content, 640demilitarized zone dmz, 706demultiplexing, 217224, 544 connectionless, 219220connectionoriented, 220223transportlayer, 216 denialofservice dos attacks, 8586distributed, 86, 87syn floods for, 284 destinationbased forwarding, 343346 destination port number, 260destination port number field, 218deutsche telecom, 410device statistics, 456 z02_kuro5469_08_ge_idx.indd 769 08052021 1421 770 index dhcp. see dynamic host configuration protocol dhcp ack message, 374, 544 dhcp discover message, 372dhcp offer message, 372373dhcp request message, 374, 543dht. see distributed hast table diffiehellman algorithm, 654difs. see distributed interframe space digital attack map, 85digital ethernet, 518digital signatures, 658661digital subscriber line dsl, 4344, 93 digital subscriber line access multiplexer dslam, 4344 dijkstras algorithm, 413, 420 in ospf, 426 direct routing, 615distancevector algorithm dv algorithm, 418425 decentralization, 420linkcost changes and link failure, 422424 ls compared with, 424425message complexity, 424425poisoned reverse, 424robustness, 425speed of convergence, 425 distant centralized database, 156distributed applications, 35distributed dos ddos, 86distributed hast table dht, 173distributed interframe space difs, 580 distribution time, 168dmz. see demilitarized zone dns. see domain name system dns protocol, 545dns query message, 545dns reply message, 546dns resource record, 546docsis. see dataovercable service interface specifications docsis 2.0, 45domain names, 440domain name system dns, 80, 153 additional section, 164answer section, 164and arp, 544545authoritative servers, 157authority section, 164caching, 160distant centralized database, 156distributed, hierarchical database, 156160 header section, 163hierarchy, 157interaction, 159internet presence and, 440441intradomain routing, 545546ipanycast in, 436437iterative queries, 160local server, 158maintenance, 156messages, 163operation of, 155161peertopeer file distribution, 166173 question section, 163records insertion, 164recursive queries, 160resource records rrs, 161root servers, 157servers, 153servers in 2020, 158services provided by, 153155single point of failure, 156toplevel domain tld, 156, 157 z02_kuro5469_08_ge_idx.indd 770 08052021 1421 index 771 traffic volume, 156 udp usage by, 225vulnerabilities, 165 dotteddecimal notation, 364dpi. see deep packet inspection drop, packet, 71dropping openflow, 387packets, strategies for, 352 droptail, 352dsl. see digital subscriber line dslam.
see digital subscriber line access multiplexer duplicate acks, 238, 273duplicate data packets, 240duplicate packets, 236dv algorithm. see distancevector algorithm dynamic adaptive streaming over http dash, 174 dynamic host configuration protocol dhcp, 371374 address obtainment with, 371374 messages, 372373mobile nodes and, 374nat and, 374 dynamic routing algorithms, 413 e eap. see extensible authentication protocol eavesdropping, 640ebay, 93ebgp. see external bgp ec2, 94ece. see explicit congestion notification echo echo request, 453ecn. see explicit congestion notificationedge routers, 342efficiency aloha protocol, 497csmacd, 504 802.11. see ieee 802.11 eigrp protocol, 426elastic applications, 120email components, 146highlevel view of, 147in internet, 146mail access protocols, 151152 mail message formats, 151pgp, 673674protocols, 152secure, 670673smtp, 80, 147150 encapsulation, 8284encapsulation security payload esp protocol, 683 encrypted, 638encryption public key, 642, 648654symmetric key, 642648 encryption algorithm, 641endend principle, 229endpoint authentication, 8788, 639, 664666 end systems, 32, 34, 3941 delay in, 73 endtoend argument, 393endtoend congestion control, 292endtoend connection, 57endtoend delay, 7173enhanced mobile broadband embb, 606 enodeb, 595entity body, 133equal cost multi path ecmp, 539 z02_kuro5469_08_ge_idx.indd 771 08052021 1421 772 index error checking, udp checksums and, 228230 errorcorrection techniques, 482, 484, 485 error detection, 234 errordetection techniques, 482, 484, 485 checksumming methods, 488cyclic redundancy check crc, 489491 parity checks, 486488 esp. see encapsulation security payload estimatedrtt, 266estrin, deborah, 633ethane project, 449450ethernet, 35, 4647, 392 buffered distributors, 520challenges, 514development of, 91frame, 543frame structure, 516518gigabit, 520installations, 515mtu, 259packet sniffing, 87standards, 519technologies, 518521 eventbased programming, 249ewma. see exponential weighted moving average explicit congestion notification ecn, 304305 explicit congestion notification echo ece, 305 exponential weighted moving average ewma, 266 extended fsm, 248extensible authentication protocol eap, 693694 external bgp ebgp, 431f facebook, 666facetime, video conferencing, 111fading, 569fairness of aimd, 306309parallel tcp connections and, 309tcp and, 306309udp and, 308309 fast recovery, 298300fast retransmit, 273275fcfs. see firstcomefirstserved fdm. see frequencydivision multiplexing fec. see forward error correction feynman, richard, 332fhss. see frequencyhopping spread spectrum fiber optics, 93 in cable systems, 4445physical media, 50 fiber to the home ftth, 4546, 93 fifo. see firstinfirstout 5g, 485g cellular networks, 465g fixed wireless, 46filtering, 521 linklayer switches, 521522 filters stateful, 698traditional packet, 698 fin bit, 261finitestate machine fsm, 232 for data transfer over channel with bit errors, 234240 for data transfer over lossy channel with bit errors, 240241 for data transfer over perfectly reliable channel, 232233 z02_kuro5469_08_ge_idx.indd 772 08052021 1421 index 773 extended, 248 for gbn protocol, 246248tcp congestion control, 297, 298 firewalls, 377, 383 application gateways, 698stateful filters, 698traditional packet filters, 698 firstcomefirstserved fcfs, 355firstinfirstout fifo, 3553565g cellular networks, 605 core network, 607608embb, 606fr2 frequencies, 606millimeter wave frequencies, 606and millimeter wave frequencies, 606607 mmtc, 606standards, 606urllc, 606 5g core network, 607flag days, 381flag field, 260flow, 378flowbased forwarding, 441442flowcontrol service, 276flow control, tcp, 276278flow table, 384 matchplusaction, 449sdn, 444wildcards in, 386 forward error correction fec, 488 forwarding, 60, 334, 341, 521 to broadcast, 387destinationbased, 343346flowbased, 441442generalized, 343, 383390linklayer switches, 521522longest prefix matching rule, 345, 368 openflow, 387packets, 336sdn, 441442 forwarding plane, 342343forwarding tables, 5556, 336, 337 in input processing, 345346line cards, 345in ls algorithm, 415416matchplusaction, 384prefixes, 345routers, 336, 337in sdn, 342, 344 4g lte
cellular networks authentication, 596base station, 594595cell location tracking, 597elements of, 595functions, 597home subscriber server hss, 595mobile device, 594mobility management entity mme, 596 network attachment, 602603network of networks, 604605packet data network gateway, 595path setup, 596power management, 603604protocols stacks, 600601radio access network, 601602serving gateway, 595 4g, 48fragmentation, 380frames, 82 ack, 582beacon, 576cts, 581ethernet, 543ieee 802.11 wireless lan, 583586 linklayer, 83time, 494vlans, 530 z02_kuro5469_08_ge_idx.indd 773 08052021 1421 774 index framing, 482 frequencydivision multiplexing fdm, 5859, 493494 frequencyhopping spread spectrum fhss, 591 fsm. see finitestate machine ftp protocol, 80ftth. see fiber to the home fullduplex service, 257fully connected topology, 541 g gateway router, 430gateways, 343gbn protocol. see gobackn gbn protocol ge information services, 90generalized forwarding, 343, 383390 action, 386387match, 385386matchplusaction, 387390 generator, 489geostationary satellites, 514g5g cellular networks authentication and key agreement, 694697 security, 689 gigabit ethernet, 520github, 165global positioning system gps, 588 gobackn gbn protocol, 245250 events, 248tcp as, 276 google, 41, 93, 306, 310 cdn infrastructure, 177private network, 64, 94, 410sdn use by, 410, 447video streaming, 173 google chrome browser quic protocol, 226 graph, 410graph algorithms, 413greenberg, albert, 558guaranteed delivery, 339guaranteed delivery with bounded delay, 339 guaranteed minimal bandwidth, 339340 guided media, 49 h handley, mark, 633handoff, 564handover, 564, 609handover management, 620handshaking tcp threeway, 258, 280281tls, 676 hash functions checksum, 655656cryptographic, 655656digital signatures using, 660md5, 656sha1, 656 header length field, 260header lines, 131, 133headers, 362363 ah protocol, 683dns, 163ipv4, 361362 headoftheline blocking hol blocking, 144, 350 hello message, 428heterogeneous links, 524hfc. see hybrid fiber coax z02_kuro5469_08_ge_idx.indd 774 08052021 1421 index 775 hidden terminal problem, 569 hierarchical architectures, 537539 within ass, 428429 highspeed wireless internet access, 93 hmac, 658hol blocking. see headoftheline blocking home agent in mobile ip, 623registration with, 624 home network, 604, 610home subscriber server hss, 595, 609 hop limit, 380host aliasing, 154 host addresses, obtaining with dhcp, 371374 host aliasing, 154hostname, 153hosts, 32, 40, 41hot potato routing, 434435hourglass, internet protocol, 392393html, development of, 92http manifest file, 175tcp and, 546547 http get message, 546http request, 544http response, 547hub, 515hybrid fiber coax hfc, 4445 hypertext transfer protocol http, 80, 92, 126 conditional get, 142143http2, 143144http3, 146http2 framing, 144145icmp and, 453message format, 131135with nonpersistent connections, 128130 overview of, 126128with persistent connections, 130131 ports, 223224quick udp internet connections, 311312 request message, 131133requestresponse behavior, 127response message, 133135response message prioritization, 145 server, manifest file, 175server pushing, 145stateless protocol, 128userserver interaction, 135138web and, 125126web caching, 138142 i iana, 378ibgp. see internal bgp ibm, 90icann. see internet corporation for assigned names and numbers icmp. see internet control message protocol ieee 802.11ac, 573ieee 802.11ax, 573ieee 802.11b, 573ieee 802.11g, 573ieee 802 lanman standards committee, 35 ieee 802.11n, 573 z02_kuro5469_08_ge_idx.indd 775 08052021 1421 776 index ieee 802.11 wireless lan, 47, 573 address fields, 584586 advanced features in, 589590architecture, 574578channels and association, 575578clear to send cts control frame, 581 collision avoidance, 582duration, 586frame control fields, 586frames, 583586hidden terminals, dealing with, 581583 linklayer acknowledgments, 579mac protocol, 578583mobility in same ip subnet, 586588 payload and crc fields, 583584personal area networks, 590592as pointtopoint link, 583power management, 590public access, 93rate adaptation, 589590request to send rts control, 581sequence
number, 586standards, 573 ietf. see internet engineering task force ike. see internet key exchange ike sa, 688imap. see internet mail access protocol indirect routing approach, 613information propagation, 331infrastructure mode, 564infrastructure wireless lans, 574initialization vector iv, 647inorder packet delivery, 339input port, 342input port processing, 344346 forwarding tables in, 345346input queuing, 350insertion, message content, 640instantaneous throughput, 73intel ethernet, 518intelligent software agents, 109interarea routing, 428429interautonomous system routing protocol, 429, 439 interconnection networks switching via, 348349 interdomain protocol, 546interface, 364 sdn controller, 444445socket, 36 internal bgp ibgp, 431432internal router, 430international mobile subscriber identity imsi, 594 international telecommunication union itu, 663 internet. see also access networks architectural principles of, 391besteffort service in, 340broadband, 93cerf on, 405406commercialization of, 92components of, 3235dns and presence on, 440441enterprise access, 4647history of, 8894home access, 4346network core, 52network edges, 3941network layer, 340obtaining presence on, 440441registries, 370router selfsynchronization, 417routing algorithms used in, 413as service infrastructure, 3537transport layer, 215217 z02_kuro5469_08_ge_idx.indd 776 08052021 1421 index 777 internet applications, transport protocols used by, 227 internet checksum, 488 internetconnected smartphones, 93internet control message protocol icmp, 453455, 461 ipv6 and, 455message types, 454 internet corporation for assigned names and numbers icann, 164, 370, 426 internet engineering task force ietf, 35, 377 internet exchange points ixps, 6364 internet key exchange ike protocol, 688 internet mail access protocol imap, 152 internet protocol ip, 35, 81, 405 icmp and, 453mobile, 622624service model, 216stack for, 80total annual traffic using, 34transition to, 91 internet protocol packet exchange ipx network, 605 internet registrars, 440internet service providers isps, 3435 access, 62backbone, 438as configurations, 426global transit, 62multihome, 63multihomed access, 438peering agreements among, 438439 pop, 63routing among, 429441internet standards, 35internet systems consortium, 374internet telephony, 123internetworking, 8991intraautonomous system routing, 425429, 439 sdn in, 450 intruder, security attacks, 640intrusion detection system ids, 377, 639, 705708 intrusion prevention systems ipss, 377, 706 intserv, 340ip. see internet protocol ip addresses, 92, 118, 153, 363374, 378 broadcast, 370, 372373classes of, 367368dhcp, 371374internet presence and, 440ipv4, 363374ipv6, 378nat and, 374376obtaining blocks of, 370371temporary, 371 ipanycast, 436437ip datagram, 543ip forwarding table, 544ip fragmentation, 380 ipv6, 380 iphones, 48ip hourglass, 392393ipsec, 681683ipsec datagram, 685687ip spoofing, 8788ipss. see intrusion prevention systems ip traffic, volume of, 34ipv4 addressing, 363374datagram format, 361363transitioning to ipv6 from, 381383 z02_kuro5469_08_ge_idx.indd 777 08052021 1421 778 index ipv6, 377 adoption of, 381382 datagram format, 378380icmp, 455transitioning to, 381383tunneling, 381382 ipx, 420isis, 426, 447, 546iso idrp, 420isps. see internet service providers iterative queries, 160itu. see international telecommunication union iv. see initialization vector ixps. see internet exchange points j jabbering adapters, 524jacobson, van, 331332juniper mx2020, 342 k kahn, bob, 405, 406kahn, robert arpanet development and, 8991tcpip creation and, 258 karels, mike, 331key, 641key agreement 4g5g cellular networks, 694697 kleinrock, leonard, 89, 108110, 405knownplaintext attack, 643 l labelswitched router, 533lampson, butler, 386lan. see local area network lan address, 508layered architectures, 7782 encapsulation, 8284layers, 79layer 4 switching, 343layer 5 switching, 343leastcost path, 412 bellmanford equation for, 418419 in ls algorithm, 414416 leo satellites. see lowearth orbiting satellites level 3 communications, 62licklider, j. c. r., 89line cards forwarding tables in, 345input and output ports, 342processing on, 348
line speeds, queuing and, 349350 link access, 482link capacity buffer sizing and, 353network congestion and, 287 link failure, 422424link layer, 8182 broadcast, 482cable internet access, 505507implementation locations, 483484 network as, 531534network types, 491493services provided by, 482483wireless host vs. server, 481 linklayer acknowledgment scheme, 579 linklayer frame, 83, 480linklayer switches, 34, 53, 341 destination address lookup in, 346 filtering, 521522forwarding, 521522properties of, 524525 z02_kuro5469_08_ge_idx.indd 778 08052021 1421 index 779 vs. routers, 525527 selflearning, 523524 links, 480linkstate algorithms ls algorithms, 412417, 420 centralized routing algorithm, 414computational complexity of, 416 dv compared with, 424425forwarding tables, 415416message complexity, 424425oscillations in, 416417ospf, 426robustness, 425speed of convergence, 425steps of, 414415 linkstate broadcast, 413 erroneous, 425 link virtualization, 531 dialup modem connection, 531multiprotocol label switching mpls, 532534 link weights, in ospf, 427linux, snort, 708load balancing, 536537load balancing packets, 383load distribution, 154loadinsensitive algorithms, 413loadsensitive algorithm, 413local area network lan, 4647. see also virtual local area networks; wireless lans local area networks switched, 507531 local breakout, 614, 620local dns server ldns, 158, 178local preference, 435logical communication, 212logically centralized control, 409410logically centralized routing controllers, 338 longest prefix matching rule, 345, 368longterm evolution lte, 48lookup algorithms, 346losstolerant applications, 119lossy channels, 238241lost, packet, 71lost segments, 295lowearth orbiting leo satellites, 51ls algorithms. see linkstate algorithms lte. see longterm evolution m mac. see message authentication code mac addresses, 508 and arp, 508513subnets, 513514 mail servers, 146 aliasing, 154 malware, 8485 selfreplicating, 85 managed device, 456managed objects, 461management information base mib, 458462 managing server, 456manets. see mobile ad hoc networks manifest file, http, 175massive machine type communica tions mmtc, 606 matchplusaction, 346 forwarding table, 384in generalized forwarding, 383384 openflow, 387390 matchplusaction flow tables, 449 z02_kuro5469_08_ge_idx.indd 779 08052021 1421 780 index maximum segment size mss, 259 negotiating, 260 maximum transmission unit mtu, 259, 465466 md5 authentication, 428 md5 hash algorithm, 656medium access control mac, 601memory access times, 346bandwidth of, 347switching via, 347348 message authentication code mac, 656658 broadcast address, 510digital signatures, 658661 message integrity, 638639, 654664, 670 message queue, 147messages, 53, 80 applicationlayer, 83complexity in ls algorithms, 424425 dhcp, 372373hello, 428openflow, 449portstatus, 449source quench, 453454 metcalfe,bob, 515, 518mib. see management information base microsoft, 93 private network, 94 microsoft research, 410microsofts azure, 94middleboxes, 340, 376, 390391millimeter wave frequencies, 606minitel, 92mme. see mobility management entity mobile ad hoc networks manets, 565mobile devices, 593, 594mobiledevicetopdngateway data path configuration, 603 mobile nodes, dhcp and, 374mobility management device mobility, 608609direct and indirect routing tofrom a mobile device, 610611 direct routing to mobile device, 615616 in 4g5g networks, 617622home networks and roaming on visited networks, 609610 indirect routing to mobile device, 613615 ip address infrastructure, 611613 mobile ip, 622624in practice, 617624wireless and, 624626 mobility management entity mme, 596, 603 modification, message content, 640modifyfield action, 387monoalphabetic cipher, 642mosaic communications, 92mospf. see multicast ospf mp3, 75multicast ospf mospf, 428multicast routing in ospf, 428multihome, 63multihomed access isp, 438multihop, infrastructurebased networks, 565 multihop, infrastructureless networks, 565 multihop path, 289291multimedia applications tcp use by, 226udp use by, 226227 z02_kuro5469_08_ge_idx.indd 780 08052021 1421 index 781 multipath propagation, 566 multiple access problem, 491multiple access protocols, 492multiple samecost paths, in
ospf, 428 multiplexing, 217224 connectionless, 219220connectionoriented, 220223transportlayer, 216 multiprotocol label switching mpls networks, 531534 mutual authentication, 603, 689 n nak negative acknowledgments, 234238 corrupted, 236 narrow waist, 392, 393nasa, 406nat. see network address translation; network address translator national physical laboratory, 89nat translation table, 376nat traversal, 376ncp. see networkcontrol protocol ncs. see network control server negative acknowledgments, 234neighbor, 411neighboring peers, 171nelson, ted, 92netflix cdn and, 180182components, 181dns vulnerabilities, 165video streaming, 173, 180 net neutrality, 357358netscape communications, 9293network adapter, 483, 484network address translation nat, 374376, 383, 390network address translator nat, 346 network applications principles, 112125 networkassisted congestion control, 292, 293 network attachment, 602network configuration protocol netconf, 458, 462466 managed network devices, 462mtu, 465466operations, 464session, 463xml format, 464465 network control functions, in sdn, 442 networkcontrol protocol ncp, 89, 91 network control server ncs, 447network core, 52 circuit switching, 5761network of networks, 6164packet switching, 5356, 6061 network functions virtualization nfv, 391, 450 network information base nib, 447 network infrastructure, 565network interface controller nic, 483 network layer, 81. see also control plane; data plane besteffort service, 340forwarding and routing, 334339 security, 340services, 339340transport layer relationship to, 212215 networklayer datagram, 83 z02_kuro5469_08_ge_idx.indd 781 08052021 1421 782 index networklayer security ah protocols, 683 esp protocols, 683internet key exchange ike protocol, 688 ipsec, 681683ipsec datagram, 685687security associations, 683685virtual private networks vpns, 681683 network management, 455466 defining, 455framework for, 456458 network management agent, 456network management protocol, 457network managers, 456network of networks, 6164, 91network operations center noc, 456network prefix, 366network protocols, 3839networks. see also access networks; cellular networks; internet; local area network; wireless networks attacks against, 8488cellular, 48content provider, 64edges, 3941packetradio, 89packetsatellite, 89private, 64, 94, 374, 410programmable, 442proliferation of, 9192proprietary, 8991provider, 438throughput in, 7376 network security, 638640network service model, 339340nexthop, 433435nfv. see network functions virtualization nib. see network information basenist, 381nmap, 222, 285noc. see network operations center nodal delay, 66nodal processing delay, 65node, 480nonblocking switches, 348nonce, 668nonpersistent connections, 128nonpreemptive priority queuing, 357novell ipx, 420nox controller, 446, 450nsfnet, 91, 92nslookup program, 164ntt, 62 o oc. see optical carrier standard odls basic network functions, 450ofa. see open flow agent ofc. see open flow controller ofdm. see orthogonal frequency division multiplexing offered load, 288olt. see optical line terminator onebit even parity, 486onix sdn controller, 447onos, 446, 450, 452453ont. see optical network terminator opendaylight, 446, 450451opendaylight controller, 451opendaylight lithium, 450openflow, 444, 446449 action, 387flow table, 384match, 385386matchplusaction, 387390 open flow agent ofa, 447open flow controller ofc, 447 z02_kuro5469_08_ge_idx.indd 782 08052021 1421 index 783 open shortest path first ospf, 407, 413, 426429, 546 authentication in, 428 broadcast in, 427428dijkstras algorithm, 426link weights, 427multicast, 428security and, 428subnets, 426 operational data, 456operational security, 639 idss, 377 optical carrier standard oc, 50optical line terminator olt, 46optical network terminator ont, 46options field, 260orthogonal frequency division multi plexing ofdm, 601 ospf. see open shortest path first outoforder packets, 249output buffer, 54output port, 342 forwarding to, 346 output port processing, 349output queue, 54output queuing, 351353outsideas destinations, 434ovsdb, 451 p packet data convergence, 600packet data network gateway pgw, 595 packetdropping strategies, 352packet filtering, 699packet header overhead, 226packet headers routing and, 336, 337
packet loss, 55, 71, 349packetmarking strategies, 352packetradio networks, 89packets, 34, 53 choke, 292control, 342deep inspection of, 377, 390duplicate, 236duplicate data, 240forwarding, 336inorder delivery of, 339outoforder, 249 packetsatellite networks, 89packet scheduler, 353packet scheduling fifo, 355356priority queuing, 356357, 359round robin, 359360wfq, 359360 packet sniffer, 87, 106packetswitched networks, delays in, 6576 packet switches, 34, 53, 341packet switching, 5357, 108 circuit switching versus, 6061development of, 8889storeandforward, 5354 paging, 597pairwise communication, 331parallel tcp connections, fairness and, 309 parity bit, 486parity checks, 486488passive optical networks pons, 46passive scanning, 576path loss, 566paths, 34, 411 leastcost, 412, 414416, 418419multihop, 289291multiple samecost, 428shortest, 412 paxos, 447payload field, 83pdus. see protocol data units z02_kuro5469_08_ge_idx.indd 783 08052021 1421 784 index peering agreements, 438439 peers, 63peertopeer p2p architecture, 114, 167170 bittorrent, 170173chunks, 170dht, 173file distribution with, 171optimistically unchoked, 172rarest first, 172torrent, defined, 170tracker, 171unchoked, 172 perconnection throughput, 286287performance enhancement, 390perrouter control, 408410, 466persistent connections, 128pgp. see pretty good privacy pgw. see packet data network gateway photobell, 108physical address, 508physical layer, 82physical media, 4851 coaxial cable, 50fiber optics, 50satellite radio, 51terrestrial radio, 51twistedpair copper wire, 4950 physical medium, 49piconets, 591piggybacked acknowledgments, 265ping, 453pipelined reliable data transfer proto cols, 241, 243245 pipelining, 245 tcp, 267 plaintext, 641, 642playback attack, 668plugandplay, 371plugandplay devices, 524points of presence pops, 63pointtopoint connections, 257pointtopoint link, 491pointtopoint protocol ppp mtu, 259 poisoned reverse, 424polling protocol, 504polls, 504polyalphabetic encryption, 643, 644polynomial codes, 489pons. see passive optical networks pops. see points of presence port numbers, 118, 184, 219220 nat and, 374376socket, 219220wellknown, 218 port scanning, 222portstatus message, 449positive acknowledgments, 234pouzin, louis, 90ppp. see pointtopoint protocol preamble, 517prefix, 345, 346, 366368pretty good privacy pgp, 673674 prims algorithm, 413priority queuing, 355357, 359 nonpreemptive, 357 privacy, 704705private key, 649private networks, 64, 94, 374, 410processes, 115 server, 257transport layer protocols connecting, 212 processing delay, 66programmable network, 442propagation delay, 65, 6769proprietary networks, 8991protocol data units pdus, 459, 460protocol layering, 7980 z02_kuro5469_08_ge_idx.indd 784 08052021 1421 index 785 protocols, 35, 39. see also specific protocols defining, 3739 network, 3839routing, 5556 protocol stack, 80provider, 62provider networks, 438proxy server, 138psh bit, 261publickey, 649public key certification, 662664public key encryption, 642, 648654public key infrastructure pki, 661pull protocol, 181pure aloha protocol, 551push protocol, 182python port numbers, 219udp connections, 219 q qos. see quality of service quality of service, 597 nondefault, 379 queuing delays, 5455, 66, 6971 network congestion and, 287 queuing delays, 65fifo, 355356input, 350line speed and, 349350nonpreemptive priority, 357output, 351353priority, 355357, 359roundrobin, 355, 359360in routers, 349354traffic load and, 349transmission rate and, 349350wfq, 359360workconserving, 359quick udp internet connections quic, 310312 connectionoriented and secure, 310311 http, 311312streams, 311tcpfriendly congestioncontrolled data transfer, 311 quic protocol, 226, 227 r radio link control, 600rand institute, 89random access protocols, 493, 495random early detection red, 352rcp. see routing control platform realm with private addresses, 374realtime conversational applications. see voiceoverip reassembly, ipv6 datagram, 380receive buffer, 277, 278receiver authentication, 639, 670receiver feedback, 234receive window, 260, 277, 278recursive queries, 160, 161red. see random early detection regional isp, 6263registrar, 440registries, 370reliable data transfer, 119, 216, 255256 implementing, 330over channel with bit errors, 233238 over lossy channel with bit errors, 238241 over perfectly reliable channel,
232233 principles of, 230256service implementation for, 231, 232service model for, 230, 231tcp, 268376 z02_kuro5469_08_ge_idx.indd 785 08052021 1421 786 index reliable data transfer protocol, 230 building, 232241 pipelined, 241, 243245 reliable data transfer service, 268reliable delivery, 482reliable, tcpfriendly congestion controlled data transfer, 311 reliable transport protocol, 330remote procedure call rpc, 462repeater, 519request line, 131requests for comments rfcs, 35request to send rts control frame, 581 response time, cloud service perfor mance, 299 retransmission, 234 congestion and, 288289duplicate packets from, 236fast, 273275random access protocols, 495sequence numbers for handling, 236237 slotted aloha protocol, 496498tcp timeout interval for, 266267tcp timer management for, 268269 timebased, 240241 rexford, jennifer, 476rfc 1422 public key, 664rfcs. see requests for comments rip, 413, 420, 546rivest, ron, 650roaming, 610roberts, lawrence, 89robustness, ls and dv algorithms, 425 root dns servers, 157roundrobin queuing, 355, 359360roundtrip time rtt, 129 buffer sizing and, 353tcp estimation for, 265268tcp reno throughput, 303tcp variable tracking, 294 route, 34, 432 bgp, 433bgp selection algorithm for, 435436 route aggregation, 368route information, advertising in bgp, 430432 routers, 34, 53, 341, 383 architecture of, 341border, 428429, 536buffer sizing, 353components of, 341344congestion and, 286291data plane, 341360destinationbased forwarding, 343346 edge, 342forwarding plane, 342343forwarding tables, 336, 337gateway, 430input port processing, 344346internal, 430natenabled, 374376output port processing, 349perrouter control, 408410queuing in, 349354selfsynchronization, 417switching fabric, 347349 route summarization, 368routine, node, 474475routing, 336, 337 among isps, 429441hot potato, 434435interarea, 428429intraass, 425429, 439, 450 link weights in, 427logically centralized, 338 z02_kuro5469_08_ge_idx.indd 786 08052021 1421 index 787 multicast, 428 programming assignment, 474475 routing algorithms, 336, 337, 410425 arpanet, 413, 420centralized, 412, 414convergence speed, 425decentralized, 412413distancevector, 418425dynamic, 413linkstate, 413417load sensitivity, 413static, 413 routing controllers logically centralized, 338sdn and, 339 routing control platform rcp, 476routing loop, 423routing policy, bgp, 437440routing processor, 342routing protocols, 5556routing tables, 420 bgp, 435436 rsa algorithm, 650652 components of, 650encryptiondecryption, 653 rst bit, 260rtt. see roundtrip time rwnd, 294 s sa. see security association sad. see security association database sal. see service abstraction layer samplertt, 266satellite radio channels, 51scantlebury, roger, 89sctp. see stream control transmission protocolsdn. see softwaredefined networking sdn control and management, 540sdn controller, 444446secure communication, 638secure hash algorithm sha1, 656secure shell ssh connection, 457security datagram inspection, 377firewalls, 377, 383idss, 377network, 638640network layer, 340operational, 418, 639ospf and, 428syn flood attacks, 284 security association sa, 683security association database sad, 684 security associations, 683685security parameter index spi, 684security policy database spd, 687security services, 390segments, 81, 212, 215 acknowledged, 295lost, 295maximum size, 259, 260tcp, 259tcp structure, 260265transportlayer, 83udp structure, 228 selective acknowledgment, 276selective repeat sr, 245, 250256 events and actions, 252operation of, 253tcp as, 276window size, 254, 255 selfclocking, 295selflearning, 523, 544 linklayer switches, 523524 selfreplicating malware, 85 z02_kuro5469_08_ge_idx.indd 787 08052021 1421 788 index selfsynchronization, 417 send buffer, 259sender authentication, 639, 670sending rate, 288sequence number, 236 in gbn protocol, 245246in pipelined protocols, 245retransmission handling with, 236237 in sr protocol, 251, 254tcp, 261263for tcp segment, 262telnet and, 263265 sequence number field, 260sequence number for segment, 262server, 116servers, 41 managing, 456network control, 447processes, 257web, 92, 223224 service abstraction layer sal, 450451 service level agreements slas, 456 service model, 79 ip, 216network, 339340reliable data
transfer, 230, 231 services, 79 flowcontrol, 276fullduplex, 257layering, 79network layer, 339340tcp, 216unreliable, 216 service set identifier ssid, 575serving gateway sgw, 595session key, 652session management function smf, 608sgw. see serving gateway sha1. see secure hash algorithm shamir, adi, 650shared medium, 50 delays in, 73 shortest path, 412short interframe spacing sifs, 579 sifs. see short interframe spacing signaltonoise ratio snr, 566signaturebased systems, 707silent periods, 59simple authentication, 428simple mail transfer protocol smtp, 80, 146150 simple network management protocol snmp, 451, 458462 simple network management protocol version 3 snmpv3, 458461 singlehop, infrastructurebased net works, 565 singlehop, infrastructureless net works, 565 skype applicationlayer protocols, 124internet telephony, 123 slammer worm, 222slas. see service level agreements sleep modes, 603604slidingwindow protocol, 246slow start, 296297small cell stations, 607small office, home office soho, subnets, 374 smart spaces, 109smi. see structure of management information smtp. see simple mail transfer protocol z02_kuro5469_08_ge_idx.indd 788 08052021 1421 index 789 sna, 90 sniffing, 87, 106snmp. see simple network management protocol snort, 708snr. see signaltonoise ratio social networks, 94socket interface, 36socket programming port numbers, 219220with tcp, 189195types of, 182, 183with udp, 184189 sockets, 117, 217 port numbers, 219220simultaneous, 222welcoming, 221 software agents, 109softwaredefined networking sdn, 334, 339, 477 architecture of, 443control applications, 444446control plane, 343, 441450data plane, 442, 448449forwarding tables in, 342, 344generalized forwarding and, 383390 key characteristics of, 441442link state change in, 448449logically centralized control in, 409410 packet forwarding and, 340routing component, 466routing processor responsibilities in, 342 source port number, 260source port number field, 218source quench message, 453454spanning layer, 392spd. see security policy database spi. see security parameter indexspotify dns vulnerabilities, 165 sprint, 62sr. see selective repeat sri. see stanford research institute ssid. see service set identifier ssthresh, 297300stanford research institute sri, 89, 108 stateless protocol, 128statemanagement layer, sdn, 444static routing algorithms, 413status line, 133stopandwait protocols, 235, 243, 244 storeandforward transmission, 5354stream control transmission protocol sctp, 311 streaming content distribution networks, 175179 dash, 174175http streaming, 174175internet video, 173174 streams, 311structure of management information smi, 459 subnet mask, 365subnets, 364368, 513514 obtaining blocks of ip addresses, 370371 in ospf, 426soho, 374 swan, 410switch top of rack, 535 switches, 343 crossbar, 348349linklayer, 34, 53, 341, 346nonblocking, 348 switches vs. routers, 525527 z02_kuro5469_08_ge_idx.indd 789 08052021 1421 790 index switching, 341 in destinationbased forwarding, 346 techniques for, 347349 switching fabric, 342 bus, 348crossbar, 347349interconnection network, 348349memory, 347348queuing and speed of, 349350 switch poisoning, 525switch table, 521symmetric key encryption, 642648 block ciphers, 644646caesar cipher, 642chosenplaintext attack, 643cipher block chaining cbc, 647ciphertextonly attack, 643in ipsec, 644knownplaintext attack, 643monoalphabetic cipher, 642in pgp, 644polyalphabetic encryption, 643, 644in tls, 644 synack segment, 279, 283syn bit, 261syn cookies, 284syn flood attack, 284 t tag protocol identifier tpid, 529takingturns protocols, 493, 504505 tcams. see ternary content addressable memories tcp. see transmission control protocol tcp bbr, 306tcp congestioncontrol algorithm, 295300 tcp connection, 121tcp cubic, 301303, 309tcpfriendly congestioncontrolled data transfer, 311 tcpip, 35, 258tcp reno, 300303tcp segments, 259tcp socket, 544, 546tcp splitting, 299tcp states, 281283tcp syn, 546tcp tahoe, 300, 301tcp vegas, 305306tdm. see timedivision multiplexing telco. see telephone company telenet, 89telephone company telco, 43telnet, 263265, 457temporary ip addresses,
371ternary content addressable memories tcams, 346 terrestrial radio channels, 513g, 48third generation partnership program, 382 threeway handshake, 258, 280281, 546throughput, 7376 average, 74congestion and, 286291instantaneous, 73perconnection, 286287tcp reno, 303 tier1 isps, 6263tiktok video streaming, 173 timebased retransmission, 240241timedivision multiplexing tdm, 5860, 493494 time frames, 494timeout events in gbn protocol, 248in sr protocol, 252tcp, 266267, 269, 270 z02_kuro5469_08_ge_idx.indd 790 08052021 1421 index 791 timeout intervals doubling, 271273 tcp, 266267, 271273 time slots, 494timetolive ttl, 362token, 505tokenpassing protocol, 505tomlinson, ray, 89topdown approach, 80toplevel domain tld, 156, 157top of rack tor switch, 535torrent, 170tor switch. see top of rack switchtos. see type of service total nodal delay, 65tpid. see tag protocol identifier traceroute, 7173, 454455traffic engineering, 427, 534traffic intensity, 69traffic load, queuing and, 349traffic volume, dns, 156transmission control protocol tcp ack generation recommendation, 274 acknowledgment number, 261263classic congestion control, 293303clientserver application using, 192closing connection, 280281congestion avoidance, 297298congestioncontrol algorithm, 295300congestion control in, 293309congestion window, 294, 300connection, 257260connection management, 279283, 285 connection requests, 221cubic, 301303cumulative acknowledgment, 262demultiplexing, 220223development of, 91establishing connection, 279280exploring, 330fairness and, 306309fast recovery, 298300fast retransmit, 273275flow control, 276278fullduplex service, 257handshake protocol, 668multimedia applications using, 226parallel connection fairness, 309pipelining, 267pointtopoint connections, 257receive window, 277, 278reliable data transfer, 268376retransmission timeout interval, 266267 rtt estimation, 265268securing connections, 674676segment structure, 260265selective acknowledgment, 276selfclocking, 295sequence number, 261263services provided by, 216simultaneous connection sockets, 222 slow start, 296297socket programming with, 189195 see also socket programming steadystate behavior of, 303tcpclient.py, 191193tcpserver.py, 193195threeway handshake, 258, 280281 throughput, 303timeout events, 266267, 269, 270timeout intervals, 266267, 271273 timer management, 268269transition to, 9192transportlayer functionality, 309312variables, 294, 297, 300web servers and, 223224 z02_kuro5469_08_ge_idx.indd 791 08052021 1421 792 index transmission delay, 6569 transmission rate, 34 queuing and, 349350 transparent, 521transport layer, 8081 in internet, 215217network layer relationship to, 212215 transportlayer functionality, 309312transportlayer multiplexing and demultiplexing, 216 transportlayer protocols tcp, 212, 482 and http, 546547 transport layer security tls, 122, 462, 674675 connection closure, 680data transfer, 677handshake phase, 676, 679680key derivation, 677record, 678 transportlayer segment, 83transport mode, 685triangle routing problem, 615trunking, vlan, 529ttl. see timetolive tunnel, 381tunnel endpoint identifier teid, 601tunneling, 381tunnel mode, 685twistedpair copper wire, 4950twitter dns vulnerabilities, 165 twodimensional even parity, 487twodimensional parity scheme, 487tymnet, 90type of service tos, 362 u ubiquitous wifi, 593ucla, 108, 405udp. see user datagram protocol udp segment, 543ultra reliable lowlatency communications urllc, 606 undetected bit errors, 485unguided media, 49unidirectional data transfer, 232unix, snort, 708unreliable services, 216unshielded twisted pair utp, 49urg bit, 261urgent data pointer field, 261user agents, 146user datagram protocol udp, 215, 216, 224230 advantages of, 225226checksum, 228230clientserver application using, 185connectionless nature of, 225dns using, 225exploring, 330fairness and, 308309multimedia applications using, 226227 multiplexing and demultiplexing, 219220 reliability with, 227228segment structure, 228socket programming with, 184189udpclient.py, 186188udpserver.py, 188189 user equipment ue, 594userplane function upf, 608utilization, 243utp. see unshielded twisted pair v vanet. see vehicular ad hoc network vehicular ad hoc network vanet, 565 z02_kuro5469_08_ge_idx.indd 792 08052021 1421 index 793 video from remote server, 617 streaming, 606 video streaming content distribution networks, 175179 dash, 174175http streaming, 174175internet video, 173174 virtualization, 540541virtual local area networks vlans, 528 inefficient use of switches, 528lack of traffic
isolation, 527528original ethernet frame, 530single switch with two, 528tag, 529trunking, 529two switches with two, 530users management, 528 virtual private networks vpns, 534, 681683 visited network, 610vlans. see virtual local area networks voiceoverip voip, 65, 73, 356, 358 voip. see voiceoverip vpns. see virtual private networks vulnerability attacks, 85 w web browsers, 9293, 126 conditional get, 142parallel connections, 309 web cache, 138web clientserver interaction, 546547 web page, 126web servers, 92, 126, 306 tcp and, 223224weighted fair queuing wfq, 359360 welcoming socket, 221wellknown application protocols, 218219 wellknown port numbers, 218wellknow service, 358wfq. see weighted fair queuing widearea wireless internet access, 48 wifi, 34, 35, 47, 392, 573. see also ieee 802.11 wireless lan address fields, 584586advanced features in, 589590architecture, 574578channels and association, 575578clear to send cts control frame, 581 collision avoidance, 582duration, 586enterprise usage of, 4647frame control fields, 586frames, 583586hidden terminals, dealing with, 581583 linklayer acknowledgments, 579mac protocol, 578583mobility in same ip subnet, 586588 packet sniffing, 87payload and crc fields, 583584personal area networks, 590592as pointtopoint link, 583power management, 590public access, 93rate adaptation, 589590request to send rts control, 581sequence number, 586standards, 573transmission rates and range, 564widearea wireless versus, 48 z02_kuro5469_08_ge_idx.indd 793 08052021 1421 794 index wifi jungle, 576 wifi positioning system wps, 588wifi wireless router, 46wildcards, in flow table entries, 386window scaling factor, 260window size, 246 in sr, 254, 255 windows platforms snort, 708 wireless and mobile devices, 109wireless communication link, 562wireless host, 562wireless lans, 47 encryption, 689encryptionkey derivation, 690fourway handshake, 692mutual authentication, 690security, 689694security messaging protocols, 693694 shared symmetric session key derivation, 691 802.11 wireless lans. see ieee 802.11 wireless lan wireless mesh networks, 565wireless networks cdma, 569572elements, 562, 563links and network characteristics, 566569mesh, 565packet sniffing, 87transmission rates and range, 564wifi, 572593 wireless personal area networks wpans, 591 wireshark, 87, 106107 tcp, 330 workconserving queuing, 359worms, 222wpans. see wireless personal area networks x x.509, 664xerox ethernet, 518 x.25 protocol suite, 92xtp, 488 y yahoo, 93yang, 458, 466youtube, 306 cdn and, 182video streaming, 173 z zeroconf, 371zimmerman, phil, 673 z02_kuro5469_08_ge_idx.indd 794 08052021 1421 z02_kuro5469_08_ge_idx.indd 795 08052021 1421 this page is intentionally left blank
